/*=========================================================================
 *
 *  Copyright RTK Consortium
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *         http://www.apache.org/licenses/LICENSE-2.0.txt
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 *
 *=========================================================================*/
$(include DoNotEditWarning.cxx.in)

$(include StandardIncludes.cxx.in)
$(include AddExtraIncludes.cxx.in)

namespace rtk {
namespace simple {

//-----------------------------------------------------------------------------

//
// Default constructor that initializes parameters
//
$(include ConstructorSignature.cxx.in)
{
$(include ConstructorInitializeMembers.cxx.in)
$(include ConstructorMemberFunctionSetup.cxx.in)

$(include ConstructorVectorPixels.cxx.in)
}
$(include DesctuctorDefinition.cxx.in)
//
// ToString
//
$(include ToStringSignature.cxx.in)
{
$(include ToStringBody.cxx.in)
$(include ToStringReturn.cxx.in)
}

$(include CustomMethods.cxx.in)

//
// Execute
//$(include ExecuteWithParameters.cxx.in)


Image ${name}::Execute ( $(include ImageParameters.in) )
{

  PixelIDValueEnum type = m_OutputPixelType;
  unsigned int dimension = m_Size.size();

  $(for inum=2,number_of_inputs do
           OUT= OUT .. '\n    if ( type != image' .. inum .. '.GetPixelIDValue() || dimension != image' .. inum .. '.GetDimension() ) { srtkExceptionMacro ( "Image' .. inum .. ' for ${name} doesnt match type or dimension!" ); }'
             end)

    return this->m_MemberFactory->GetMemberFunction( type, dimension )( $(for inum=1,number_of_inputs do
  if inum>1 then
    OUT=OUT .. ', '
  end
  OUT= OUT .. 'image' .. inum
                                                                          end) );
}
//-----------------------------------------------------------------------------

//
// ExecuteInternal
//
$(include ExecuteInternalSignature.cxx.in)
{
$(include ExecuteInternalTypedefs.cxx.in)

$(include ExecuteInternalGetImagePointers.cxx.in)

$(include ExecuteInternalITKFilter.cxx.in)

$(include ExecuteInternalSetITKFilterInputs.cxx.in)
$(include ExecuteInternalUpdateAndReturn.cxx.in)
}

//-----------------------------------------------------------------------------

$(include ExecuteInternalVectorImages.cxx.in)
//
// Function to run the Execute method of this filter
//
Image ${name:gsub("ImageSource$", "Source")} ( $(include ImageParameters.in)$(include MemberParameters.in) )
{
  ${name} filter;
  return filter.Execute ( $(for inum=1,number_of_inputs do
                              if inum>1 then
                                OUT=OUT..', '
                              end
                              OUT=OUT .. 'image' .. inum
                            end)$(for i = 1,#members do
                            if (number_of_inputs > 0 or i > 1) then
                              OUT = OUT .. ", "
                            end
                            OUT= OUT .. members[i].name:sub(1,1):lower() .. members[i].name:sub(2,-1)
                            end) );
}

} // end namespace simple
} // end namespace rtk
