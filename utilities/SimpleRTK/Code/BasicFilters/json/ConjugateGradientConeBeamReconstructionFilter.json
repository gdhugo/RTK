{
  "name" : "ConjugateGradientConeBeamReconstructionFilter",
  "template_code_filename" : "RTKImageFilter",
  "template_test_filename" : "ImageFilter",
  "number_of_inputs" : 3,
  "doc" : "",
  "output_image_type" : "TImageType",
  "pixel_types" : "typelist::MakeTypeList< BasicPixelID<float> >::Type",
  "filter_type" : "rtk::ConjugateGradientConeBeamReconstructionFilter<InputImageType>",
  "include_files" : [
    "srtkThreeDCircularProjectionGeometry.h"
  ],
  "members" : [
	{
      "name" : "Geometry",
      "type" : "ThreeDCircularProjectionGeometry*",
      "default" : "0",
	  "itk_type" : "ThreeDCircularProjectionGeometry",
      "custom_itk_cast" : "filter->SetGeometry( const_cast<rtk::ThreeDCircularProjectionGeometry*>(dynamic_cast<const rtk::ThreeDCircularProjectionGeometry*>(this->m_Geometry->GetRTKBase())) );\n"
    },
    {
      "name" : "NumberOfIterations",
      "type" : "int",
      "default" : "5"
    },
    {
      "name" : "ForwardProjectionFilter",
      "type" : "int",
      "default" : "0"
    },
    {
      "name" : "BackProjectionFilter",
      "type" : "int",
      "default" : "0"
    },
    {
      "name" : "Regularized",
      "type" : "bool",
      "default" : "0"
    },
    {
      "name" : "Gamma",
      "type" : "float",
      "default" : "0"
    },
    {
      "name" : "CudaConjugateGradient",
      "type" : "bool",
      "default" : "0"
    },
    {
      "name" : "IterationCosts",
      "type" : "bool",
      "default" : "0"
    },
    {
      "name" : "SupportMask",
      "type" : "Image",
      "default" : "Image()",
      "custom_itk_cast" : "if(dynamic_cast < const TImageType* > ( this->m_SupportMask.GetITKBase() )) filter->SetSupportMask(const_cast<InputImageType*>( this->CastImageToITK<InputImageType>(this->m_SupportMask).GetPointer() ));",
      "no_print" : true
    }
  ],
  "measurements" : [
    {
      "name" : "ResidualCosts",
      "type" : "std::vector<double>",
      "default" : "std::vector<double>()",
      "custom_itk_cast" : "this->m_ResidualCosts = std::vector<double>( filter->GetResidualCosts().begin(), filter->GetResidualCosts().end() );"
    }
  ]
}
