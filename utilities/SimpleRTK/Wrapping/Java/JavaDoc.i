

%typemap(javaimports) itk::ComponentByComponentImageFilter "/**

Apply a filter or a pipeline slice by slice on an image.

C++ includes: itkComponentByComponentImageFilter.h
*/"

%javamethodmodifiers  itk::ComponentByComponentImageFilter::GetFilter "/**
InputFilterType* itk::ComponentByComponentImageFilter< TInputImage, TOutputImage, TInputFilter, TOutputFilter, TInternalInputImage, TInternalOutputImage >::GetFilter()
*/
public ";

%javamethodmodifiers  itk::ComponentByComponentImageFilter::GetFilter "/**
const InputFilterType* itk::ComponentByComponentImageFilter< TInputImage, TOutputImage, TInputFilter, TOutputFilter, TInternalInputImage, TInternalOutputImage >::GetFilter() const
*/
public ";

%javamethodmodifiers  itk::ComponentByComponentImageFilter::itkGetConstMacro "/**
itk::ComponentByComponentImageFilter< TInputImage, TOutputImage, TInputFilter, TOutputFilter, TInternalInputImage, TInternalOutputImage >::itkGetConstMacro(ComponentIndex, unsigned int)

The index of the slice currently processed by the filter. This is
intended to be used with the IterationEvent sent before the processing
of each object. It contains a relevant value only during the filter
update.

*/
public ";

%javamethodmodifiers  itk::ComponentByComponentImageFilter::itkGetModifiableObjectMacro "/**
itk::ComponentByComponentImageFilter< TInputImage, TOutputImage, TInputFilter, TOutputFilter, TInternalInputImage, TInternalOutputImage >::itkGetModifiableObjectMacro(InputFilter, InputFilterType)
*/
public ";

%javamethodmodifiers  itk::ComponentByComponentImageFilter::itkGetModifiableObjectMacro "/**
itk::ComponentByComponentImageFilter< TInputImage, TOutputImage, TInputFilter, TOutputFilter, TInternalInputImage, TInternalOutputImage >::itkGetModifiableObjectMacro(OutputFilter, OutputFilterType)
*/
public ";

%javamethodmodifiers  itk::ComponentByComponentImageFilter::itkNewMacro "/**
itk::ComponentByComponentImageFilter< TInputImage, TOutputImage, TInputFilter, TOutputFilter, TInternalInputImage, TInternalOutputImage >::itkNewMacro(Self)

Standard New method.

*/
public ";

%javamethodmodifiers  itk::ComponentByComponentImageFilter::itkTypeMacro "/**
itk::ComponentByComponentImageFilter< TInputImage, TOutputImage, TInputFilter, TOutputFilter, TInternalInputImage, TInternalOutputImage >::itkTypeMacro(ComponentByComponentImageFilter, ImageToImageFilter)

Runtime information support.

*/
public ";

%javamethodmodifiers  itk::ComponentByComponentImageFilter::SetFilter "/**
void itk::ComponentByComponentImageFilter< TInputImage, TOutputImage, TInputFilter, TOutputFilter, TInternalInputImage, TInternalOutputImage >::SetFilter(InputFilterType *filter)
*/
public ";

%javamethodmodifiers  itk::ComponentByComponentImageFilter::SetInputFilter "/**
void itk::ComponentByComponentImageFilter< TInputImage, TOutputImage, TInputFilter, TOutputFilter, TInternalInputImage, TInternalOutputImage >::SetInputFilter(InputFilterType *filter)
*/
public ";

%javamethodmodifiers  itk::ComponentByComponentImageFilter::SetOutputFilter "/**
void itk::ComponentByComponentImageFilter< TInputImage, TOutputImage, TInputFilter, TOutputFilter, TInternalInputImage, TInternalOutputImage >::SetOutputFilter(OutputFilterType *filter)
*/
public ";


%typemap(javaimports) itk::Functor::BitwiseNot "/**

Performs the C++ unary bitwise NOT operator.

C++ includes: itkBitwiseNotFunctor.h
*/"


%typemap(javaimports) itk::Functor::DivFloor "/**

Cast arguments to double, performs division then takes the floor.

C++ includes: itkDivideFloorFunctor.h
*/"


%typemap(javaimports) itk::Functor::DivReal "/**

Promotes arguments to real type and performs division.

C++ includes: itkDivideRealFunctor.h
*/"


%typemap(javaimports) itk::Functor::UnaryMinus "/**
C++ includes: itkUnaryMinusImageFilter.h
*/"

%javamethodmodifiers  itk::Functor::UnaryMinus::UnaryMinus "/**
itk::Functor::UnaryMinus< TInput1, TOutput >::UnaryMinus()
*/
public ";

%javamethodmodifiers  itk::Functor::UnaryMinus::~UnaryMinus "/**
itk::Functor::UnaryMinus< TInput1, TOutput >::~UnaryMinus()
*/
public ";


%typemap(javaimports) itk::HashImageFilter "/**
C++ includes: itkHashImageFilter.h
*/"

%javamethodmodifiers  itk::HashImageFilter::GetHash "/**
std::string itk::HashImageFilter< TImageType >::GetHash() const

Get the computed Hash values

*/
public ";

%javamethodmodifiers  itk::HashImageFilter::GetHashOutput "/**
HashObjectType* itk::HashImageFilter< TImageType >::GetHashOutput()
*/
public ";

%javamethodmodifiers  itk::HashImageFilter::GetHashOutput "/**
const HashObjectType* itk::HashImageFilter< TImageType >::GetHashOutput() const
*/
public ";

%javamethodmodifiers  itk::HashImageFilter::itkGetMacro "/**
itk::HashImageFilter< TImageType >::itkGetMacro(HashFunction, HashFunction)
*/
public ";

%javamethodmodifiers  itk::HashImageFilter::itkNewMacro "/**
itk::HashImageFilter< TImageType >::itkNewMacro(Self)

Method for creation through the object factory.

*/
public ";

%javamethodmodifiers  itk::HashImageFilter::itkSetMacro "/**
itk::HashImageFilter< TImageType >::itkSetMacro(HashFunction, HashFunction)

Set/Get hashing function as enumerated type

*/
public ";

%javamethodmodifiers  itk::HashImageFilter::itkTypeMacro "/**
itk::HashImageFilter< TImageType >::itkTypeMacro(HashImageFilter, CastImageFilter)

Runtime information support.

*/
public ";

%javamethodmodifiers  itk::HashImageFilter::MakeOutput "/**
virtual DataObjectPointer itk::HashImageFilter< TImageType >::MakeOutput(DataObjectPointerArraySizeType idx) RTK_OVERRIDE
*/
public ";


%typemap(javaimports) itk::ImageIOFactoryRegisterManager "/**
C++ includes: itkImageIOFactoryRegisterManager.h
*/"

%javamethodmodifiers  itk::ImageIOFactoryRegisterManager::ImageIOFactoryRegisterManager "/**
itk::ImageIOFactoryRegisterManager::ImageIOFactoryRegisterManager(void(*list[])(void))
*/
public ";


%typemap(javaimports) itk::SliceImageFilter "/**

Slices an image based on a starting index and a stopping index, and a
step size.


This class is designed to facilitate the implementation of extended
sliced based indexing into images.

The input and output image must be of the same dimension.

The input parameters are a starting and stopping index as well as a
stepping size. The staring index indicates the first pixels to used
and for each dimension the index is incremented by the step until the
index is equal to or \"beyond\" the stopping index. If the step is
negative then the image will be revered in the dimension, and the
stopping index is expected to be less then the starting index. If the
stopping index is already beyond the starting then a image of zero
size will be returned.

The output image's starting index is always zero. The origin is the
physical location of the starting index. The output directions cosine
matrix is that of the input but with sign changes matching that of the
step's sign.


In certain combination such as with start=1, and step>1 while the
physical location of the center of the pixel remains the same, the
extent (edge to edge space) of the pixel will beyond the extent of the
original image.


C++ includes: itkSliceImageFilter.h
*/"

%javamethodmodifiers  itk::SliceImageFilter::GenerateInputRequestedRegion "/**
virtual void itk::SliceImageFilter< TInputImage, TOutputImage >::GenerateInputRequestedRegion() RTK_OVERRIDE
*/
public ";

%javamethodmodifiers  itk::SliceImageFilter::GenerateOutputInformation "/**
virtual void itk::SliceImageFilter< TInputImage, TOutputImage >::GenerateOutputInformation() RTK_OVERRIDE

SliceImageFilter produces an image which is a different resolution and with a
different pixel spacing than its input image.
See:
ProcessObject::GenerateOutputInformaton()


*/
public ";

%javamethodmodifiers  itk::SliceImageFilter::itkGetConstReferenceMacro "/**
itk::SliceImageFilter< TInputImage, TOutputImage >::itkGetConstReferenceMacro(Start, IndexType)
*/
public ";

%javamethodmodifiers  itk::SliceImageFilter::itkGetConstReferenceMacro "/**
itk::SliceImageFilter< TInputImage, TOutputImage >::itkGetConstReferenceMacro(Stop, IndexType)
*/
public ";

%javamethodmodifiers  itk::SliceImageFilter::itkGetConstReferenceMacro "/**
itk::SliceImageFilter< TInputImage, TOutputImage >::itkGetConstReferenceMacro(Step, ArrayType)
*/
public ";

%javamethodmodifiers  itk::SliceImageFilter::itkNewMacro "/**
itk::SliceImageFilter< TInputImage, TOutputImage >::itkNewMacro(Self)

Method for creation through the object factory.

*/
public ";

%javamethodmodifiers  itk::SliceImageFilter::itkSetMacro "/**
itk::SliceImageFilter< TInputImage, TOutputImage >::itkSetMacro(Start, IndexType)

Set/Get the first index extracted from the input image

*/
public ";

%javamethodmodifiers  itk::SliceImageFilter::itkSetMacro "/**
itk::SliceImageFilter< TInputImage, TOutputImage >::itkSetMacro(Stop, IndexType)

Set/Get the excluded end of the range

*/
public ";

%javamethodmodifiers  itk::SliceImageFilter::itkSetMacro "/**
itk::SliceImageFilter< TInputImage, TOutputImage >::itkSetMacro(Step, ArrayType)

Set/Get the stride of indexes extracted

An exception will be generated if 0.

*/
public ";

%javamethodmodifiers  itk::SliceImageFilter::itkStaticConstMacro "/**
itk::SliceImageFilter< TInputImage, TOutputImage >::itkStaticConstMacro(ImageDimension, unsigned int, TInputImage::ImageDimension)

ImageDimension enumeration.

*/
public ";

%javamethodmodifiers  itk::SliceImageFilter::itkStaticConstMacro "/**
itk::SliceImageFilter< TInputImage, TOutputImage >::itkStaticConstMacro(OutputImageDimension, unsigned int, TOutputImage::ImageDimension)
*/
public ";

%javamethodmodifiers  itk::SliceImageFilter::itkTypeMacro "/**
itk::SliceImageFilter< TInputImage, TOutputImage >::itkTypeMacro(SliceImageFilter, ImageToImageFilter)

Run-time type information (and related methods).

*/
public ";

%javamethodmodifiers  itk::SliceImageFilter::SetStart "/**
void itk::SliceImageFilter< TInputImage, TOutputImage >::SetStart(IndexValueType start)
*/
public ";

%javamethodmodifiers  itk::SliceImageFilter::SetStep "/**
void itk::SliceImageFilter< TInputImage, TOutputImage >::SetStep(int step)
*/
public ";

%javamethodmodifiers  itk::SliceImageFilter::SetStop "/**
void itk::SliceImageFilter< TInputImage, TOutputImage >::SetStop(IndexValueType stop)
*/
public ";


%typemap(javaimports) itk::TransformIOFactoryRegisterManager "/**
C++ includes: itkTransformIOFactoryRegisterManager.h
*/"

%javamethodmodifiers  itk::TransformIOFactoryRegisterManager::TransformIOFactoryRegisterManager "/**
itk::TransformIOFactoryRegisterManager::TransformIOFactoryRegisterManager(void(*list[])(void))
*/
public ";


%typemap(javaimports) rtk::simple::AbsImageFilter "/**

Computes the absolute value of each pixel.


itk::Math::abs() is used to perform the computation.

Wiki Examples:

All Examples

Compute the absolute value of an image
See:
 rtk::simple::Abs for the procedural interface

 itk::AbsImageFilter for the Doxygen on the original ITK class.



C++ includes: srtkAbsImageFilter.h
*/"

%javamethodmodifiers  rtk::simple::AbsImageFilter::AbsImageFilter "/**
rtk::simple::AbsImageFilter::AbsImageFilter()

Default Constructor that takes no arguments and initializes default
parameters

*/
public ";

%javamethodmodifiers  rtk::simple::AbsImageFilter::Execute "/**
Image rtk::simple::AbsImageFilter::Execute(const Image &image1)

Execute the filter on the input image

*/
public ";

%javamethodmodifiers  rtk::simple::AbsImageFilter::GetName "/**
std::string rtk::simple::AbsImageFilter::GetName() const

Name of this class

*/
public ";

%javamethodmodifiers  rtk::simple::AbsImageFilter::ToString "/**
std::string rtk::simple::AbsImageFilter::ToString() const

Print ourselves out

*/
public ";

%javamethodmodifiers  rtk::simple::AbsImageFilter::~AbsImageFilter "/**
rtk::simple::AbsImageFilter::~AbsImageFilter()

Destructor

*/
public ";


%typemap(javaimports) rtk::simple::AbsoluteValueDifferenceImageFilter "/**

Implements pixel-wise the computation of absolute value difference.


This filter is parametrized over the types of the two input images and
the type of the output image.

Numeric conversions (castings) are done by the C++ defaults.

The filter will walk over all the pixels in the two input images, and
for each one of them it will do the following:


Cast the input 1 pixel value to double .

Cast the input 2 pixel value to double .

Compute the difference of the two pixel values.

Compute the absolute value of the difference.

Cast the double value resulting from the absolute value to the pixel
type of the output image.

Store the casted value into the output image.
 The filter expects all images to have the same dimension (e.g. all
2D, or all 3D, or all ND).

Wiki Examples:

All Examples

Compute the absolute value of the difference of corresponding pixels
in two images
See:
 rtk::simple::AbsoluteValueDifference for the procedural interface

 itk::AbsoluteValueDifferenceImageFilter for the Doxygen on the original ITK class.



C++ includes: srtkAbsoluteValueDifferenceImageFilter.h
*/"

%javamethodmodifiers  rtk::simple::AbsoluteValueDifferenceImageFilter::AbsoluteValueDifferenceImageFilter "/**
rtk::simple::AbsoluteValueDifferenceImageFilter::AbsoluteValueDifferenceImageFilter()

Default Constructor that takes no arguments and initializes default
parameters

*/
public ";

%javamethodmodifiers  rtk::simple::AbsoluteValueDifferenceImageFilter::Execute "/**
Image rtk::simple::AbsoluteValueDifferenceImageFilter::Execute(const Image &image1, const Image &image2)

Execute the filter on the input images

*/
public ";

%javamethodmodifiers  rtk::simple::AbsoluteValueDifferenceImageFilter::Execute "/**
Image rtk::simple::AbsoluteValueDifferenceImageFilter::Execute(const Image &image1, double constant)

Execute the filter with an image and a constant

*/
public ";

%javamethodmodifiers  rtk::simple::AbsoluteValueDifferenceImageFilter::Execute "/**
Image rtk::simple::AbsoluteValueDifferenceImageFilter::Execute(double constant, const Image &image2)
*/
public ";

%javamethodmodifiers  rtk::simple::AbsoluteValueDifferenceImageFilter::GetName "/**
std::string rtk::simple::AbsoluteValueDifferenceImageFilter::GetName() const

Name of this class

*/
public ";

%javamethodmodifiers  rtk::simple::AbsoluteValueDifferenceImageFilter::ToString "/**
std::string rtk::simple::AbsoluteValueDifferenceImageFilter::ToString() const

Print ourselves out

*/
public ";

%javamethodmodifiers  rtk::simple::AbsoluteValueDifferenceImageFilter::~AbsoluteValueDifferenceImageFilter "/**
rtk::simple::AbsoluteValueDifferenceImageFilter::~AbsoluteValueDifferenceImageFilter()

Destructor

*/
public ";


%typemap(javaimports) rtk::simple::AcosImageFilter "/**

Computes the inverse cosine of each pixel.


This filter is templated over the pixel type of the input image and
the pixel type of the output image.

The filter walks over all the pixels in the input image, and for each
pixel does do the following:


cast the pixel value to double ,

apply the std::acos() function to the double value

cast the double value resulting from std::acos() to the pixel type of
the output image

store the casted value into the output image.
 The filter expects both images to have the same dimension (e.g. both
2D, or both 3D, or both ND).
See:
 rtk::simple::Acos for the procedural interface

 itk::AcosImageFilter for the Doxygen on the original ITK class.


C++ includes: srtkAcosImageFilter.h
*/"

%javamethodmodifiers  rtk::simple::AcosImageFilter::AcosImageFilter "/**
rtk::simple::AcosImageFilter::AcosImageFilter()

Default Constructor that takes no arguments and initializes default
parameters

*/
public ";

%javamethodmodifiers  rtk::simple::AcosImageFilter::Execute "/**
Image rtk::simple::AcosImageFilter::Execute(const Image &image1)

Execute the filter on the input image

*/
public ";

%javamethodmodifiers  rtk::simple::AcosImageFilter::GetName "/**
std::string rtk::simple::AcosImageFilter::GetName() const

Name of this class

*/
public ";

%javamethodmodifiers  rtk::simple::AcosImageFilter::ToString "/**
std::string rtk::simple::AcosImageFilter::ToString() const

Print ourselves out

*/
public ";

%javamethodmodifiers  rtk::simple::AcosImageFilter::~AcosImageFilter "/**
rtk::simple::AcosImageFilter::~AcosImageFilter()

Destructor

*/
public ";


%typemap(javaimports) rtk::simple::AdaptiveHistogramEqualizationImageFilter "/**

Power Law Adaptive Histogram Equalization.


Histogram equalization modifies the contrast in an image. The AdaptiveHistogramEqualizationImageFilter is a superset of many contrast enhancing filters. By modifying its
parameters (alpha, beta, and window), the AdaptiveHistogramEqualizationImageFilter can produce an adaptively equalized histogram or a version of unsharp
mask (local mean subtraction). Instead of applying a strict histogram
equalization in a window about a pixel, this filter prescribes a
mapping function (power law) controlled by the parameters alpha and
beta.

The parameter alpha controls how much the filter acts like the
classical histogram equalization method (alpha=0) to how much the
filter acts like an unsharp mask (alpha=1).

The parameter beta controls how much the filter acts like an unsharp
mask (beta=0) to much the filter acts like pass through (beta=1, with
alpha=1).

The parameter window controls the size of the region over which local
statistics are calculated.

By altering alpha, beta and window, a host of equalization and unsharp
masking filters is available.

The boundary condition ignores the part of the neighborhood outside
the image, and over-weights the valid part of the neighborhood.

For detail description, reference \"Adaptive Image Contrast
Enhancement using Generalizations of Histogram Equalization.\" J.Alex
Stark. IEEE Transactions on Image Processing, May 2000.

Wiki Examples:

All Examples

Adaptive histogram equalization
See:
 rtk::simple::AdaptiveHistogramEqualization for the procedural interface

 itk::AdaptiveHistogramEqualizationImageFilter for the Doxygen on the original ITK class.



C++ includes: srtkAdaptiveHistogramEqualizationImageFilter.h
*/"

%javamethodmodifiers  rtk::simple::AdaptiveHistogramEqualizationImageFilter::AdaptiveHistogramEqualizationImageFilter "/**
rtk::simple::AdaptiveHistogramEqualizationImageFilter::AdaptiveHistogramEqualizationImageFilter()

Default Constructor that takes no arguments and initializes default
parameters

*/
public ";

%javamethodmodifiers  rtk::simple::AdaptiveHistogramEqualizationImageFilter::Execute "/**
Image rtk::simple::AdaptiveHistogramEqualizationImageFilter::Execute(const Image &image1)

Execute the filter on the input image

*/
public ";

%javamethodmodifiers  rtk::simple::AdaptiveHistogramEqualizationImageFilter::Execute "/**
Image rtk::simple::AdaptiveHistogramEqualizationImageFilter::Execute(const Image &image1, const std::vector< unsigned int > &radius, float
alpha, float beta, bool useLookupTable)

Execute the filter on the input image with the given parameters

*/
public ";

%javamethodmodifiers  rtk::simple::AdaptiveHistogramEqualizationImageFilter::GetAlpha "/**
float rtk::simple::AdaptiveHistogramEqualizationImageFilter::GetAlpha() const

Set/Get the value of alpha. Alpha=0 produces the adaptive histogram
equalization (provided beta=0). Alpha=1 produces an unsharp mask.
Default is 0.3.

*/
public ";

%javamethodmodifiers  rtk::simple::AdaptiveHistogramEqualizationImageFilter::GetBeta "/**
float rtk::simple::AdaptiveHistogramEqualizationImageFilter::GetBeta() const

Set/Get the value of beta. If beta=1 (and alpha=1), then the output
image matches the input image. As beta approaches 0, the filter
behaves as an unsharp mask. Default is 0.3.

*/
public ";

%javamethodmodifiers  rtk::simple::AdaptiveHistogramEqualizationImageFilter::GetName "/**
std::string rtk::simple::AdaptiveHistogramEqualizationImageFilter::GetName() const

Name of this class

*/
public ";

%javamethodmodifiers  rtk::simple::AdaptiveHistogramEqualizationImageFilter::GetRadius "/**
std::vector<unsigned int> rtk::simple::AdaptiveHistogramEqualizationImageFilter::GetRadius() const
*/
public ";

%javamethodmodifiers  rtk::simple::AdaptiveHistogramEqualizationImageFilter::GetUseLookupTable "/**
bool rtk::simple::AdaptiveHistogramEqualizationImageFilter::GetUseLookupTable() const

Set/Get whether an optimized lookup table for the intensity mapping
function is used. Default is off.Deprecated

*/
public ";

%javamethodmodifiers  rtk::simple::AdaptiveHistogramEqualizationImageFilter::SetAlpha "/**
Self& rtk::simple::AdaptiveHistogramEqualizationImageFilter::SetAlpha(float Alpha)

Set/Get the value of alpha. Alpha=0 produces the adaptive histogram
equalization (provided beta=0). Alpha=1 produces an unsharp mask.
Default is 0.3.

*/
public ";

%javamethodmodifiers  rtk::simple::AdaptiveHistogramEqualizationImageFilter::SetBeta "/**
Self& rtk::simple::AdaptiveHistogramEqualizationImageFilter::SetBeta(float Beta)

Set/Get the value of beta. If beta=1 (and alpha=1), then the output
image matches the input image. As beta approaches 0, the filter
behaves as an unsharp mask. Default is 0.3.

*/
public ";

%javamethodmodifiers  rtk::simple::AdaptiveHistogramEqualizationImageFilter::SetRadius "/**
Self& rtk::simple::AdaptiveHistogramEqualizationImageFilter::SetRadius(const std::vector< unsigned int > &Radius)
*/
public ";

%javamethodmodifiers  rtk::simple::AdaptiveHistogramEqualizationImageFilter::SetRadius "/**
Self& rtk::simple::AdaptiveHistogramEqualizationImageFilter::SetRadius(unsigned int value)

Set the values of the Radius vector all to value

*/
public ";

%javamethodmodifiers  rtk::simple::AdaptiveHistogramEqualizationImageFilter::SetUseLookupTable "/**
Self& rtk::simple::AdaptiveHistogramEqualizationImageFilter::SetUseLookupTable(bool UseLookupTable)

Set/Get whether an optimized lookup table for the intensity mapping
function is used. Default is off.Deprecated

*/
public ";

%javamethodmodifiers  rtk::simple::AdaptiveHistogramEqualizationImageFilter::ToString "/**
std::string rtk::simple::AdaptiveHistogramEqualizationImageFilter::ToString() const

Print ourselves out

*/
public ";

%javamethodmodifiers  rtk::simple::AdaptiveHistogramEqualizationImageFilter::UseLookupTableOff "/**
Self& rtk::simple::AdaptiveHistogramEqualizationImageFilter::UseLookupTableOff()
*/
public ";

%javamethodmodifiers  rtk::simple::AdaptiveHistogramEqualizationImageFilter::UseLookupTableOn "/**
Self& rtk::simple::AdaptiveHistogramEqualizationImageFilter::UseLookupTableOn()

Set the value of UseLookupTable to true or false respectfully.

*/
public ";

%javamethodmodifiers  rtk::simple::AdaptiveHistogramEqualizationImageFilter::~AdaptiveHistogramEqualizationImageFilter "/**
rtk::simple::AdaptiveHistogramEqualizationImageFilter::~AdaptiveHistogramEqualizationImageFilter()

Destructor

*/
public ";


%typemap(javaimports) rtk::simple::AddImageFilter "/**

Pixel-wise addition of two images.


This class is templated over the types of the two input images and the
type of the output image. Numeric conversions (castings) are done by
the C++ defaults.

The pixel type of the input 1 image must have a valid definition of
the operator+ with a pixel type of the image 2. This condition is
required because internally this filter will perform the operation


Additionally the type resulting from the sum, will be cast to the
pixel type of the output image.

The total operation over one pixel will be

For example, this filter could be used directly for adding images
whose pixels are vectors of the same dimension, and to store the
resulting vector in an output image of vector pixels.

The images to be added are set using the methods:

Additionally, this filter can be used to add a constant to every pixel
of an image by using


WARNING:
No numeric overflow checking is performed in this filter.
Wiki Examples:

All Examples

Add two images together

Add a constant to every pixel in an image
See:
 rtk::simple::Add for the procedural interface

 itk::AddImageFilter for the Doxygen on the original ITK class.



C++ includes: srtkAddImageFilter.h
*/"

%javamethodmodifiers  rtk::simple::AddImageFilter::AddImageFilter "/**
rtk::simple::AddImageFilter::AddImageFilter()

Default Constructor that takes no arguments and initializes default
parameters

*/
public ";

%javamethodmodifiers  rtk::simple::AddImageFilter::Execute "/**
Image rtk::simple::AddImageFilter::Execute(const Image &image1, const Image &image2)

Execute the filter on the input images

*/
public ";

%javamethodmodifiers  rtk::simple::AddImageFilter::Execute "/**
Image rtk::simple::AddImageFilter::Execute(const Image &image1, double constant)

Execute the filter with an image and a constant

*/
public ";

%javamethodmodifiers  rtk::simple::AddImageFilter::Execute "/**
Image rtk::simple::AddImageFilter::Execute(double constant, const Image &image2)
*/
public ";

%javamethodmodifiers  rtk::simple::AddImageFilter::GetName "/**
std::string rtk::simple::AddImageFilter::GetName() const

Name of this class

*/
public ";

%javamethodmodifiers  rtk::simple::AddImageFilter::ToString "/**
std::string rtk::simple::AddImageFilter::ToString() const

Print ourselves out

*/
public ";

%javamethodmodifiers  rtk::simple::AddImageFilter::~AddImageFilter "/**
rtk::simple::AddImageFilter::~AddImageFilter()

Destructor

*/
public ";


%typemap(javaimports) rtk::simple::AdditiveGaussianNoiseImageFilter "/**

Alter an image with additive gaussian white noise.



Gaetan Lehmann
 This code was contributed in the Insight Journal paper \"Noise
Simulation\". https://hdl.handle.net/10380/3158
See:
 rtk::simple::AdditiveGaussianNoise for the procedural interface

 itk::AdditiveGaussianNoiseImageFilter for the Doxygen on the original ITK class.


C++ includes: srtkAdditiveGaussianNoiseImageFilter.h
*/"

%javamethodmodifiers  rtk::simple::AdditiveGaussianNoiseImageFilter::AdditiveGaussianNoiseImageFilter "/**
rtk::simple::AdditiveGaussianNoiseImageFilter::AdditiveGaussianNoiseImageFilter()

Default Constructor that takes no arguments and initializes default
parameters

*/
public ";

%javamethodmodifiers  rtk::simple::AdditiveGaussianNoiseImageFilter::Execute "/**
Image rtk::simple::AdditiveGaussianNoiseImageFilter::Execute(const Image &image1)

Execute the filter on the input image

*/
public ";

%javamethodmodifiers  rtk::simple::AdditiveGaussianNoiseImageFilter::Execute "/**
Image rtk::simple::AdditiveGaussianNoiseImageFilter::Execute(const Image &image1, double standardDeviation, double mean, uint32_t
seed)

Execute the filter on the input image with the given parameters

*/
public ";

%javamethodmodifiers  rtk::simple::AdditiveGaussianNoiseImageFilter::GetMean "/**
double rtk::simple::AdditiveGaussianNoiseImageFilter::GetMean() const
*/
public ";

%javamethodmodifiers  rtk::simple::AdditiveGaussianNoiseImageFilter::GetName "/**
std::string rtk::simple::AdditiveGaussianNoiseImageFilter::GetName() const

Name of this class

*/
public ";

%javamethodmodifiers  rtk::simple::AdditiveGaussianNoiseImageFilter::GetSeed "/**
uint32_t rtk::simple::AdditiveGaussianNoiseImageFilter::GetSeed() const
*/
public ";

%javamethodmodifiers  rtk::simple::AdditiveGaussianNoiseImageFilter::GetStandardDeviation "/**
double rtk::simple::AdditiveGaussianNoiseImageFilter::GetStandardDeviation() const
*/
public ";

%javamethodmodifiers  rtk::simple::AdditiveGaussianNoiseImageFilter::SetMean "/**
Self& rtk::simple::AdditiveGaussianNoiseImageFilter::SetMean(double Mean)
*/
public ";

%javamethodmodifiers  rtk::simple::AdditiveGaussianNoiseImageFilter::SetSeed "/**
Self& rtk::simple::AdditiveGaussianNoiseImageFilter::SetSeed(uint32_t Seed)
*/
public ";

%javamethodmodifiers  rtk::simple::AdditiveGaussianNoiseImageFilter::SetStandardDeviation "/**
Self& rtk::simple::AdditiveGaussianNoiseImageFilter::SetStandardDeviation(double StandardDeviation)
*/
public ";

%javamethodmodifiers  rtk::simple::AdditiveGaussianNoiseImageFilter::ToString "/**
std::string rtk::simple::AdditiveGaussianNoiseImageFilter::ToString() const

Print ourselves out

*/
public ";

%javamethodmodifiers  rtk::simple::AdditiveGaussianNoiseImageFilter::~AdditiveGaussianNoiseImageFilter "/**
rtk::simple::AdditiveGaussianNoiseImageFilter::~AdditiveGaussianNoiseImageFilter()

Destructor

*/
public ";


%typemap(javaimports) rtk::simple::AffineTransform "/**

An affine transformation about a fixed center with translation for a
2D or 3D coordinate.



See:
 itk::AffineTransform


C++ includes: srtkAffineTransform.h
*/"

%javamethodmodifiers  rtk::simple::AffineTransform::AffineTransform "/**
rtk::simple::AffineTransform::AffineTransform(unsigned int dimensions)
*/
public ";

%javamethodmodifiers  rtk::simple::AffineTransform::AffineTransform "/**
rtk::simple::AffineTransform::AffineTransform(const AffineTransform &)
*/
public ";

%javamethodmodifiers  rtk::simple::AffineTransform::AffineTransform "/**
rtk::simple::AffineTransform::AffineTransform(const Transform &)
*/
public ";

%javamethodmodifiers  rtk::simple::AffineTransform::AffineTransform "/**
rtk::simple::AffineTransform::AffineTransform(const std::vector< double > &matrix, const std::vector< double >
&translation, const std::vector< double > &fixedCenter=std::vector<
double >(3, 0.0))
*/
public ";

%javamethodmodifiers  rtk::simple::AffineTransform::GetCenter "/**
std::vector<double> rtk::simple::AffineTransform::GetCenter() const
*/
public ";

%javamethodmodifiers  rtk::simple::AffineTransform::GetMatrix "/**
std::vector<double> rtk::simple::AffineTransform::GetMatrix() const
*/
public ";

%javamethodmodifiers  rtk::simple::AffineTransform::GetName "/**
std::string rtk::simple::AffineTransform::GetName() const

Name of this class

*/
public ";

%javamethodmodifiers  rtk::simple::AffineTransform::GetTranslation "/**
std::vector<double> rtk::simple::AffineTransform::GetTranslation() const

parameters

*/
public ";

%javamethodmodifiers  rtk::simple::AffineTransform::Rotate "/**
Self& rtk::simple::AffineTransform::Rotate(int axis1, int axis2, double angle, bool pre=false)
*/
public ";

%javamethodmodifiers  rtk::simple::AffineTransform::Scale "/**
Self& rtk::simple::AffineTransform::Scale(const std::vector< double > &factor, bool pre=false)

additional methods

*/
public ";

%javamethodmodifiers  rtk::simple::AffineTransform::Scale "/**
Self& rtk::simple::AffineTransform::Scale(double factor, bool pre=false)
*/
public ";

%javamethodmodifiers  rtk::simple::AffineTransform::SetCenter "/**
Self& rtk::simple::AffineTransform::SetCenter(const std::vector< double > &params)

fixed parameter

*/
public ";

%javamethodmodifiers  rtk::simple::AffineTransform::SetMatrix "/**
Self& rtk::simple::AffineTransform::SetMatrix(const std::vector< double > &matrix)
*/
public ";

%javamethodmodifiers  rtk::simple::AffineTransform::SetTranslation "/**
Self& rtk::simple::AffineTransform::SetTranslation(const std::vector< double > &translation)
*/
public ";

%javamethodmodifiers  rtk::simple::AffineTransform::Shear "/**
Self& rtk::simple::AffineTransform::Shear(int axis1, int axis2, double coef, bool pre=false)
*/
public ";

%javamethodmodifiers  rtk::simple::AffineTransform::Translate "/**
Self& rtk::simple::AffineTransform::Translate(const std::vector< double > &offset, bool pre=false)
*/
public ";


%typemap(javaimports) rtk::simple::AggregateLabelMapFilter "/**

Collapses all labels into the first label.


This filter takes a label map as input and visits the pixels of all
labels and assigns them to the first label of the label map. At the
end of the execution of this filter, the map will contain a single
filter.

This implementation was taken from the Insight Journal paper: https://hdl.handle.net/1926/584 or http://www.insight-journal.org/browse/publication/176


Gaetan Lehmann. Biologie du Developpement et de la Reproduction, INRA
de Jouy-en-Josas, France.

See:
 ShapeLabelObject , RelabelComponentImageFilter

 rtk::simple::AggregateLabelMapFilter for the procedural interface

 itk::AggregateLabelMapFilter for the Doxygen on the original ITK class.


C++ includes: srtkAggregateLabelMapFilter.h
*/"

%javamethodmodifiers  rtk::simple::AggregateLabelMapFilter::AggregateLabelMapFilter "/**
rtk::simple::AggregateLabelMapFilter::AggregateLabelMapFilter()

Default Constructor that takes no arguments and initializes default
parameters

*/
public ";

%javamethodmodifiers  rtk::simple::AggregateLabelMapFilter::Execute "/**
Image rtk::simple::AggregateLabelMapFilter::Execute(const Image &image1)

Execute the filter on the input image

*/
public ";

%javamethodmodifiers  rtk::simple::AggregateLabelMapFilter::GetName "/**
std::string rtk::simple::AggregateLabelMapFilter::GetName() const

Name of this class

*/
public ";

%javamethodmodifiers  rtk::simple::AggregateLabelMapFilter::ToString "/**
std::string rtk::simple::AggregateLabelMapFilter::ToString() const

Print ourselves out

*/
public ";

%javamethodmodifiers  rtk::simple::AggregateLabelMapFilter::~AggregateLabelMapFilter "/**
rtk::simple::AggregateLabelMapFilter::~AggregateLabelMapFilter()

Destructor

*/
public ";


%typemap(javaimports) rtk::simple::AndImageFilter "/**

Implements the AND bitwise operator pixel-wise between two images.


This class is templated over the types of the two input images and the
type of the output image. Numeric conversions (castings) are done by
the C++ defaults.

Since the bitwise AND operation is only defined in C++ for integer
types, the images passed to this filter must comply with the
requirement of using integer pixel type.

The total operation over one pixel will be Where \"&\" is the bitwise AND operator in C++.

Wiki Examples:

All Examples

Binary AND two images
See:
 rtk::simple::And for the procedural interface

 itk::AndImageFilter for the Doxygen on the original ITK class.



C++ includes: srtkAndImageFilter.h
*/"

%javamethodmodifiers  rtk::simple::AndImageFilter::AndImageFilter "/**
rtk::simple::AndImageFilter::AndImageFilter()

Default Constructor that takes no arguments and initializes default
parameters

*/
public ";

%javamethodmodifiers  rtk::simple::AndImageFilter::Execute "/**
Image rtk::simple::AndImageFilter::Execute(const Image &image1, const Image &image2)

Execute the filter on the input images

*/
public ";

%javamethodmodifiers  rtk::simple::AndImageFilter::Execute "/**
Image rtk::simple::AndImageFilter::Execute(const Image &image1, int constant)

Execute the filter with an image and a constant

*/
public ";

%javamethodmodifiers  rtk::simple::AndImageFilter::Execute "/**
Image rtk::simple::AndImageFilter::Execute(int constant, const Image &image2)
*/
public ";

%javamethodmodifiers  rtk::simple::AndImageFilter::GetName "/**
std::string rtk::simple::AndImageFilter::GetName() const

Name of this class

*/
public ";

%javamethodmodifiers  rtk::simple::AndImageFilter::ToString "/**
std::string rtk::simple::AndImageFilter::ToString() const

Print ourselves out

*/
public ";

%javamethodmodifiers  rtk::simple::AndImageFilter::~AndImageFilter "/**
rtk::simple::AndImageFilter::~AndImageFilter()

Destructor

*/
public ";


%typemap(javaimports) rtk::simple::AntiAliasBinaryImageFilter "/**

A method for estimation of a surface from a binary volume.



This filter implements a surface-fitting method for estimation of a
surface from a binary volume. This process can be used to reduce
aliasing artifacts which result in visualization of binary partitioned
surfaces.

The binary volume (filter input) is used as a set of constraints in an
iterative relaxation process of an estimated ND surface. The surface
is described implicitly as the zero level set of a volume $ \\\\phi $ and allowed to deform under curvature flow. A set of contraints is
imposed on this movement as follows:

\\\\[ u_{i,j,k}^{n+1} = \\\\left\\\\{ \\\\begin{array}{ll}
\\\\mbox{max} (u_{i,j,k}^{n} + \\\\Delta t H_{i,j,k}^{n}, 0) &
\\\\mbox{\\\\f$B_{i,j,k} = 1\\\\f$} \\\\\\\\ \\\\mbox{min}
(u_{i,j,k}^{n} + \\\\Delta t H_{i,j,k}^{n}, 0) &
\\\\mbox{\\\\f$B_{i,j,k} = -1\\\\f$} \\\\end{array}\\\\right. \\\\]

where $ u_{i,j,k}^{n} $ is the value of $ \\\\phi $ at discrete index $ (i,j,k) $ and iteration $ n $ , $ H $ is the gradient magnitude times mean curvature of $ \\\\phi $ , and $ B $ is the binary input volume, with 1 denoting an inside pixel and -1
denoting an outside pixel.
NOTES
This implementation uses a sparse field level set solver instead of
the narrow band implementation described in the reference below, which
may introduce some differences in how fast and how accurately (in
terms of RMS error) the solution converges.
REFERENCES
Whitaker, Ross. \"Reducing Aliasing Artifacts In Iso-Surfaces of
Binary Volumes\" IEEE Volume Visualization and Graphics Symposium,
October 2000, pp.23-32.
PARAMETERS
The MaximumRMSChange parameter is used to determine when the solution
has converged. A lower value will result in a tighter-fitting
solution, but will require more computations. Too low a value could
put the solver into an infinite loop. Values should always be less
than 1.0. A value of 0.07 is a good starting estimate.

The MaximumIterations parameter can be used to halt the solution after
a specified number of iterations.
INPUT
The input is an N-dimensional image of any type. It is assumed to be a
binary image. The filter will use an isosurface value that is halfway
between the min and max values in the image. A signed data type
isnotnecessary for the input.
OUTPUT
The filter will output a level set image of real, signed values. The
zero crossings of this (N-dimensional) image represent the position of
the isosurface value of interest. Values outside the zero level set
are negative and values inside the zero level set are positive values.
IMPORTANT!
The output image type you use to instantiate this filter should be a
real valued scalar type. In other words: doubles or floats.
USING THIS FILTER
The filter is relatively straightforward to use. Tests and examples
exist to illustrate. The important thing is to understand the input
and output types so you can properly interperet your results.

In the common case, the only parameter that will need to be set is the
MaximumRMSChange parameter, which determines when the solver halts.
Wiki Examples:

All Examples

Anti alias a binary image
See:
 rtk::simple::AntiAliasBinary for the procedural interface

 itk::AntiAliasBinaryImageFilter for the Doxygen on the original ITK class.



C++ includes: srtkAntiAliasBinaryImageFilter.h
*/"

%javamethodmodifiers  rtk::simple::AntiAliasBinaryImageFilter::AntiAliasBinaryImageFilter "/**
rtk::simple::AntiAliasBinaryImageFilter::AntiAliasBinaryImageFilter()

Default Constructor that takes no arguments and initializes default
parameters

*/
public ";

%javamethodmodifiers  rtk::simple::AntiAliasBinaryImageFilter::Execute "/**
Image rtk::simple::AntiAliasBinaryImageFilter::Execute(const Image &image1)

Execute the filter on the input image

*/
public ";

%javamethodmodifiers  rtk::simple::AntiAliasBinaryImageFilter::Execute "/**
Image rtk::simple::AntiAliasBinaryImageFilter::Execute(const Image &image1, double maximumRMSError, uint32_t
numberOfIterations)

Execute the filter on the input image with the given parameters

*/
public ";

%javamethodmodifiers  rtk::simple::AntiAliasBinaryImageFilter::GetElapsedIterations "/**
uint32_t rtk::simple::AntiAliasBinaryImageFilter::GetElapsedIterations() const

Number of iterations run.


This is a measurement. Its value is updated in the Execute methods, so
the value will only be valid after an execution.

*/
public ";

%javamethodmodifiers  rtk::simple::AntiAliasBinaryImageFilter::GetMaximumRMSError "/**
double rtk::simple::AntiAliasBinaryImageFilter::GetMaximumRMSError() const
*/
public ";

%javamethodmodifiers  rtk::simple::AntiAliasBinaryImageFilter::GetName "/**
std::string rtk::simple::AntiAliasBinaryImageFilter::GetName() const

Name of this class

*/
public ";

%javamethodmodifiers  rtk::simple::AntiAliasBinaryImageFilter::GetNumberOfIterations "/**
uint32_t rtk::simple::AntiAliasBinaryImageFilter::GetNumberOfIterations() const
*/
public ";

%javamethodmodifiers  rtk::simple::AntiAliasBinaryImageFilter::GetRMSChange "/**
double rtk::simple::AntiAliasBinaryImageFilter::GetRMSChange() const

The Root Mean Square of the levelset upon termination.


This is a measurement. Its value is updated in the Execute methods, so
the value will only be valid after an execution.

*/
public ";

%javamethodmodifiers  rtk::simple::AntiAliasBinaryImageFilter::SetMaximumRMSError "/**
Self& rtk::simple::AntiAliasBinaryImageFilter::SetMaximumRMSError(double MaximumRMSError)
*/
public ";

%javamethodmodifiers  rtk::simple::AntiAliasBinaryImageFilter::SetNumberOfIterations "/**
Self& rtk::simple::AntiAliasBinaryImageFilter::SetNumberOfIterations(uint32_t NumberOfIterations)
*/
public ";

%javamethodmodifiers  rtk::simple::AntiAliasBinaryImageFilter::ToString "/**
std::string rtk::simple::AntiAliasBinaryImageFilter::ToString() const

Print ourselves out

*/
public ";

%javamethodmodifiers  rtk::simple::AntiAliasBinaryImageFilter::~AntiAliasBinaryImageFilter "/**
rtk::simple::AntiAliasBinaryImageFilter::~AntiAliasBinaryImageFilter()

Destructor

*/
public ";


%typemap(javaimports) rtk::simple::ApproximateSignedDistanceMapImageFilter "/**

Create a map of the approximate signed distance from the boundaries of
a binary image.


The ApproximateSignedDistanceMapImageFilter takes as input a binary image and produces a signed distance map.
Each pixel value in the output contains the approximate distance from
that pixel to the nearest \"object\" in the binary image. This filter
differs from the DanielssonDistanceMapImageFilter in that it calculates the distance to the \"object edge\" for pixels
within the object.

Negative values in the output indicate that the pixel at that position
is within an object in the input image. The absolute value of a
negative pixel represents the approximate distance to the nearest
object boundary pixel.

WARNING: This filter requires that the output type be floating-point.
Otherwise internal calculations will not be performed to the
appropriate precision, resulting in completely incorrect (read: zero-
valued) output.

The distances computed by this filter are Chamfer distances, which are
only an approximation to Euclidian distances, and are not as exact
approximations as those calculated by the DanielssonDistanceMapImageFilter . On the other hand, this filter is faster.

This filter requires that an \"inside value\" and \"outside value\" be
set as parameters. The \"inside value\" is the intensity value of the
binary image which corresponds to objects, and the \"outside value\"
is the intensity of the background. (A typical binary image often
repesents objects as black (0) and background as white (usually 255),
or vice-versa.) Note that this filter is slightly faster if the inside
value is less than the outside value. Otherwise an extra iteration
through the image is required.

This filter uses the FastChamferDistanceImageFilter and the IsoContourDistanceImageFilter inernally to perform the distance calculations.


See:
 DanielssonDistanceMapImageFilter


 SignedDanielssonDistanceMapImageFilter


 SignedMaurerDistanceMapImageFilter


 FastChamferDistanceImageFilter


 IsoContourDistanceImageFilter

Zach Pincus
Wiki Examples:

All Examples

Compute a distance map from objects in a binary image
See:
 rtk::simple::ApproximateSignedDistanceMap for the procedural interface

 itk::ApproximateSignedDistanceMapImageFilter for the Doxygen on the original ITK class.



C++ includes: srtkApproximateSignedDistanceMapImageFilter.h
*/"

%javamethodmodifiers  rtk::simple::ApproximateSignedDistanceMapImageFilter::ApproximateSignedDistanceMapImageFilter "/**
rtk::simple::ApproximateSignedDistanceMapImageFilter::ApproximateSignedDistanceMapImageFilter()

Default Constructor that takes no arguments and initializes default
parameters

*/
public ";

%javamethodmodifiers  rtk::simple::ApproximateSignedDistanceMapImageFilter::Execute "/**
Image rtk::simple::ApproximateSignedDistanceMapImageFilter::Execute(const Image &image1)

Execute the filter on the input image

*/
public ";

%javamethodmodifiers  rtk::simple::ApproximateSignedDistanceMapImageFilter::Execute "/**
Image rtk::simple::ApproximateSignedDistanceMapImageFilter::Execute(const Image &image1, double insideValue, double outsideValue)

Execute the filter on the input image with the given parameters

*/
public ";

%javamethodmodifiers  rtk::simple::ApproximateSignedDistanceMapImageFilter::GetInsideValue "/**
double rtk::simple::ApproximateSignedDistanceMapImageFilter::GetInsideValue() const

Set/Get intensity value representing the interior of objects in the
mask

*/
public ";

%javamethodmodifiers  rtk::simple::ApproximateSignedDistanceMapImageFilter::GetName "/**
std::string rtk::simple::ApproximateSignedDistanceMapImageFilter::GetName() const

Name of this class

*/
public ";

%javamethodmodifiers  rtk::simple::ApproximateSignedDistanceMapImageFilter::GetOutsideValue "/**
double rtk::simple::ApproximateSignedDistanceMapImageFilter::GetOutsideValue() const

Set/Get intensity value representing non-objects in the mask

*/
public ";

%javamethodmodifiers  rtk::simple::ApproximateSignedDistanceMapImageFilter::SetInsideValue "/**
Self& rtk::simple::ApproximateSignedDistanceMapImageFilter::SetInsideValue(double InsideValue)

Set/Get intensity value representing the interior of objects in the
mask

*/
public ";

%javamethodmodifiers  rtk::simple::ApproximateSignedDistanceMapImageFilter::SetOutsideValue "/**
Self& rtk::simple::ApproximateSignedDistanceMapImageFilter::SetOutsideValue(double OutsideValue)

Set/Get intensity value representing non-objects in the mask

*/
public ";

%javamethodmodifiers  rtk::simple::ApproximateSignedDistanceMapImageFilter::ToString "/**
std::string rtk::simple::ApproximateSignedDistanceMapImageFilter::ToString() const

Print ourselves out

*/
public ";

%javamethodmodifiers  rtk::simple::ApproximateSignedDistanceMapImageFilter::~ApproximateSignedDistanceMapImageFilter "/**
rtk::simple::ApproximateSignedDistanceMapImageFilter::~ApproximateSignedDistanceMapImageFilter()

Destructor

*/
public ";


%typemap(javaimports) rtk::simple::AsinImageFilter "/**

Computes the sine of each pixel.


This filter is templated over the pixel type of the input image and
the pixel type of the output image.

The filter walks over all the pixels in the input image, and for each
pixel does the following:


cast the pixel value to double ,

apply the std::asin() function to the double value,

cast the double value resulting from std::asin() to the pixel type of
the output image,

store the casted value into the output image.
 The filter expects both images to have the same dimension (e.g. both
2D, or both 3D, or both ND)
See:
 rtk::simple::Asin for the procedural interface

 itk::AsinImageFilter for the Doxygen on the original ITK class.


C++ includes: srtkAsinImageFilter.h
*/"

%javamethodmodifiers  rtk::simple::AsinImageFilter::AsinImageFilter "/**
rtk::simple::AsinImageFilter::AsinImageFilter()

Default Constructor that takes no arguments and initializes default
parameters

*/
public ";

%javamethodmodifiers  rtk::simple::AsinImageFilter::Execute "/**
Image rtk::simple::AsinImageFilter::Execute(const Image &image1)

Execute the filter on the input image

*/
public ";

%javamethodmodifiers  rtk::simple::AsinImageFilter::GetName "/**
std::string rtk::simple::AsinImageFilter::GetName() const

Name of this class

*/
public ";

%javamethodmodifiers  rtk::simple::AsinImageFilter::ToString "/**
std::string rtk::simple::AsinImageFilter::ToString() const

Print ourselves out

*/
public ";

%javamethodmodifiers  rtk::simple::AsinImageFilter::~AsinImageFilter "/**
rtk::simple::AsinImageFilter::~AsinImageFilter()

Destructor

*/
public ";


%typemap(javaimports) rtk::simple::Atan2ImageFilter "/**

Computes two argument inverse tangent.


The first argument to the atan function is provided by a pixel in the
first input image ( SetInput1() ) and the corresponding pixel in the
second input image ( SetInput2() ) is used as the second argument.

This class is templated over the types of the two input images and the
type of the output image. Numeric conversions (castings) are done by
the C++ defaults.

Both pixel input types are cast to double in order to be used as
parameters of std::atan2() . The resulting double value is cast to the
output pixel type.

Wiki Examples:

All Examples

Compute the arctangent of each pixel.
See:
 rtk::simple::Atan2 for the procedural interface

 itk::Atan2ImageFilter for the Doxygen on the original ITK class.



C++ includes: srtkAtan2ImageFilter.h
*/"

%javamethodmodifiers  rtk::simple::Atan2ImageFilter::Atan2ImageFilter "/**
rtk::simple::Atan2ImageFilter::Atan2ImageFilter()

Default Constructor that takes no arguments and initializes default
parameters

*/
public ";

%javamethodmodifiers  rtk::simple::Atan2ImageFilter::Execute "/**
Image rtk::simple::Atan2ImageFilter::Execute(const Image &image1, const Image &image2)

Execute the filter on the input images

*/
public ";

%javamethodmodifiers  rtk::simple::Atan2ImageFilter::Execute "/**
Image rtk::simple::Atan2ImageFilter::Execute(const Image &image1, double constant)

Execute the filter with an image and a constant

*/
public ";

%javamethodmodifiers  rtk::simple::Atan2ImageFilter::Execute "/**
Image rtk::simple::Atan2ImageFilter::Execute(double constant, const Image &image2)
*/
public ";

%javamethodmodifiers  rtk::simple::Atan2ImageFilter::GetName "/**
std::string rtk::simple::Atan2ImageFilter::GetName() const

Name of this class

*/
public ";

%javamethodmodifiers  rtk::simple::Atan2ImageFilter::ToString "/**
std::string rtk::simple::Atan2ImageFilter::ToString() const

Print ourselves out

*/
public ";

%javamethodmodifiers  rtk::simple::Atan2ImageFilter::~Atan2ImageFilter "/**
rtk::simple::Atan2ImageFilter::~Atan2ImageFilter()

Destructor

*/
public ";


%typemap(javaimports) rtk::simple::AtanImageFilter "/**

Computes the one-argument inverse tangent of each pixel.


This filter is templated over the pixel type of the input image and
the pixel type of the output image.

The filter walks over all the pixels in the input image, and for each
pixel does the following:


cast the pixel value to double ,

apply the std::atan() function to the double value,

cast the double value resulting from std::atan() to the pixel type of
the output image,

store the cast value into the output image.
See:
 rtk::simple::Atan for the procedural interface

 itk::AtanImageFilter for the Doxygen on the original ITK class.



C++ includes: srtkAtanImageFilter.h
*/"

%javamethodmodifiers  rtk::simple::AtanImageFilter::AtanImageFilter "/**
rtk::simple::AtanImageFilter::AtanImageFilter()

Default Constructor that takes no arguments and initializes default
parameters

*/
public ";

%javamethodmodifiers  rtk::simple::AtanImageFilter::Execute "/**
Image rtk::simple::AtanImageFilter::Execute(const Image &image1)

Execute the filter on the input image

*/
public ";

%javamethodmodifiers  rtk::simple::AtanImageFilter::GetName "/**
std::string rtk::simple::AtanImageFilter::GetName() const

Name of this class

*/
public ";

%javamethodmodifiers  rtk::simple::AtanImageFilter::ToString "/**
std::string rtk::simple::AtanImageFilter::ToString() const

Print ourselves out

*/
public ";

%javamethodmodifiers  rtk::simple::AtanImageFilter::~AtanImageFilter "/**
rtk::simple::AtanImageFilter::~AtanImageFilter()

Destructor

*/
public ";


%typemap(javaimports) rtk::simple::BSplineTransform "/**

A deformable transform over a bounded spatial domain using a BSpline
representation for a 2D or 3D coordinate space.



See:
 itk::BSplineTransform


C++ includes: srtkBSplineTransform.h
*/"

%javamethodmodifiers  rtk::simple::BSplineTransform::BSplineTransform "/**
rtk::simple::BSplineTransform::BSplineTransform(unsigned int dimensions, unsigned int order=3)
*/
public ";

%javamethodmodifiers  rtk::simple::BSplineTransform::BSplineTransform "/**
rtk::simple::BSplineTransform::BSplineTransform(const BSplineTransform &)
*/
public ";

%javamethodmodifiers  rtk::simple::BSplineTransform::BSplineTransform "/**
rtk::simple::BSplineTransform::BSplineTransform(const Transform &)
*/
public ";

%javamethodmodifiers  rtk::simple::BSplineTransform::GetCoefficientImages "/**
std::vector<Image> rtk::simple::BSplineTransform::GetCoefficientImages() const

Get a vector of the coefficient images representing the BSpline.


A lazy shallow copy of the images from ITK are performed. If they are
modified in SimpleRTK a deep copy will occur. However, if the
coefficients are modified in ITK, then no copy will occur and the
images help by SimpleRTK may change.

*/
public ";

%javamethodmodifiers  rtk::simple::BSplineTransform::GetName "/**
std::string rtk::simple::BSplineTransform::GetName() const

Name of this class

*/
public ";

%javamethodmodifiers  rtk::simple::BSplineTransform::GetOrder "/**
unsigned int rtk::simple::BSplineTransform::GetOrder() const
*/
public ";

%javamethodmodifiers  rtk::simple::BSplineTransform::GetTransformDomainDirection "/**
std::vector<double> rtk::simple::BSplineTransform::GetTransformDomainDirection() const
*/
public ";

%javamethodmodifiers  rtk::simple::BSplineTransform::GetTransformDomainMeshSize "/**
std::vector<unsigned int> rtk::simple::BSplineTransform::GetTransformDomainMeshSize() const
*/
public ";

%javamethodmodifiers  rtk::simple::BSplineTransform::GetTransformDomainOrigin "/**
std::vector<double> rtk::simple::BSplineTransform::GetTransformDomainOrigin() const
*/
public ";

%javamethodmodifiers  rtk::simple::BSplineTransform::GetTransformDomainPhysicalDimensions "/**
std::vector<double> rtk::simple::BSplineTransform::GetTransformDomainPhysicalDimensions() const
*/
public ";

%javamethodmodifiers  rtk::simple::BSplineTransform::SetTransformDomainDirection "/**
Self& rtk::simple::BSplineTransform::SetTransformDomainDirection(const std::vector< double > &)

parameters fixed parameter

*/
public ";

%javamethodmodifiers  rtk::simple::BSplineTransform::SetTransformDomainMeshSize "/**
Self& rtk::simple::BSplineTransform::SetTransformDomainMeshSize(const std::vector< unsigned int > &)
*/
public ";

%javamethodmodifiers  rtk::simple::BSplineTransform::SetTransformDomainOrigin "/**
Self& rtk::simple::BSplineTransform::SetTransformDomainOrigin(const std::vector< double > &)
*/
public ";

%javamethodmodifiers  rtk::simple::BSplineTransform::SetTransformDomainPhysicalDimensions "/**
Self& rtk::simple::BSplineTransform::SetTransformDomainPhysicalDimensions(const std::vector< double > &)
*/
public ";


%typemap(javaimports) rtk::simple::BSplineTransformInitializerFilter "/**

BSplineTransformInitializerFilter is a helper class intended to initialize the control point grid such
that it has a physically consistent definition. It sets the transform
domain origin, physical dimensions and direction from information
obtained from the image. It also sets the mesh size if asked to do so
by calling SetTransformDomainMeshSize()before calling InitializeTransform().



Luis Ibanez
 Nick Tustison
See:
 rtk::simple::BSplineTransformInitializer for the procedural interface

 itk::BSplineTransformInitializer for the Doxygen on the original ITK class.


C++ includes: srtkBSplineTransformInitializerFilter.h
*/"

%javamethodmodifiers  rtk::simple::BSplineTransformInitializerFilter::BSplineTransformInitializerFilter "/**
rtk::simple::BSplineTransformInitializerFilter::BSplineTransformInitializerFilter()

Default Constructor that takes no arguments and initializes default
parameters

*/
public ";

%javamethodmodifiers  rtk::simple::BSplineTransformInitializerFilter::Execute "/**
BSplineTransform rtk::simple::BSplineTransformInitializerFilter::Execute(const Image &image1)

Execute the filter on the input image

*/
public ";

%javamethodmodifiers  rtk::simple::BSplineTransformInitializerFilter::Execute "/**
BSplineTransform rtk::simple::BSplineTransformInitializerFilter::Execute(const Image &image1, const std::vector< uint32_t >
&transformDomainMeshSize, unsigned int order)

Execute the filter on the input image with the given parameters

*/
public ";

%javamethodmodifiers  rtk::simple::BSplineTransformInitializerFilter::GetName "/**
std::string rtk::simple::BSplineTransformInitializerFilter::GetName() const

Name of this class

*/
public ";

%javamethodmodifiers  rtk::simple::BSplineTransformInitializerFilter::GetOrder "/**
unsigned int rtk::simple::BSplineTransformInitializerFilter::GetOrder() const
*/
public ";

%javamethodmodifiers  rtk::simple::BSplineTransformInitializerFilter::GetTransformDomainMeshSize "/**
std::vector<uint32_t> rtk::simple::BSplineTransformInitializerFilter::GetTransformDomainMeshSize() const
*/
public ";

%javamethodmodifiers  rtk::simple::BSplineTransformInitializerFilter::SetOrder "/**
Self& rtk::simple::BSplineTransformInitializerFilter::SetOrder(unsigned int order)

The order of the bspline in the output BSplineTransform. This value effects the number of control points.

*/
public ";

%javamethodmodifiers  rtk::simple::BSplineTransformInitializerFilter::SetTransformDomainMeshSize "/**
Self& rtk::simple::BSplineTransformInitializerFilter::SetTransformDomainMeshSize(const std::vector< uint32_t > &TransformDomainMeshSize)

Allow the user to set the mesh size of the transform via the
initializer even though the initializer does not do anything with that
information. Defeault = 1^ImageDimension.

*/
public ";

%javamethodmodifiers  rtk::simple::BSplineTransformInitializerFilter::ToString "/**
std::string rtk::simple::BSplineTransformInitializerFilter::ToString() const

Print ourselves out

*/
public ";

%javamethodmodifiers  rtk::simple::BSplineTransformInitializerFilter::~BSplineTransformInitializerFilter "/**
rtk::simple::BSplineTransformInitializerFilter::~BSplineTransformInitializerFilter()

Destructor

*/
public ";


%typemap(javaimports) rtk::simple::BilateralImageFilter "/**

Blurs an image while preserving edges.


This filter uses bilateral filtering to blur an image using both
domain and range \"neighborhoods\". Pixels that are close to a pixel
in the image domain and similar to a pixel in the image range are used
to calculate the filtered value. Two gaussian kernels (one in the
image domain and one in the image range) are used to smooth the image.
The result is an image that is smoothed in homogeneous regions yet has
edges preserved. The result is similar to anisotropic diffusion but
the implementation in non-iterative. Another benefit to bilateral
filtering is that any distance metric can be used for kernel smoothing
the image range. Hence, color images can be smoothed as vector images,
using the CIE distances between intensity values as the similarity
metric (the Gaussian kernel for the image domain is evaluated using
CIE distances). A separate version of this filter will be designed for
color and vector images.

Bilateral filtering is capable of reducing the noise in an image by an
order of magnitude while maintaining edges.

The bilateral operator used here was described by Tomasi and Manduchi
(Bilateral Filtering for Gray and ColorImages. IEEE ICCV. 1998.)


See:
 GaussianOperator


 RecursiveGaussianImageFilter


 DiscreteGaussianImageFilter


 AnisotropicDiffusionImageFilter


 Image


 Neighborhood


 NeighborhoodOperator TodoSupport color images
 Support vector images

Wiki Examples:

All Examples

Bilateral filter an image
See:
 rtk::simple::Bilateral for the procedural interface

 itk::BilateralImageFilter for the Doxygen on the original ITK class.



C++ includes: srtkBilateralImageFilter.h
*/"

%javamethodmodifiers  rtk::simple::BilateralImageFilter::BilateralImageFilter "/**
rtk::simple::BilateralImageFilter::BilateralImageFilter()

Default Constructor that takes no arguments and initializes default
parameters

*/
public ";

%javamethodmodifiers  rtk::simple::BilateralImageFilter::Execute "/**
Image rtk::simple::BilateralImageFilter::Execute(const Image &image1)

Execute the filter on the input image

*/
public ";

%javamethodmodifiers  rtk::simple::BilateralImageFilter::Execute "/**
Image rtk::simple::BilateralImageFilter::Execute(const Image &image1, double domainSigma, double rangeSigma, unsigned
int numberOfRangeGaussianSamples)

Execute the filter on the input image with the given parameters

*/
public ";

%javamethodmodifiers  rtk::simple::BilateralImageFilter::GetDomainSigma "/**
double rtk::simple::BilateralImageFilter::GetDomainSigma() const

Standard get/set macros for filter parameters. DomainSigma is
specified in the same units as the Image spacing. RangeSigma is specified in the units of intensity.

*/
public ";

%javamethodmodifiers  rtk::simple::BilateralImageFilter::GetName "/**
std::string rtk::simple::BilateralImageFilter::GetName() const

Name of this class

*/
public ";

%javamethodmodifiers  rtk::simple::BilateralImageFilter::GetNumberOfRangeGaussianSamples "/**
unsigned int rtk::simple::BilateralImageFilter::GetNumberOfRangeGaussianSamples() const

Set/Get the number of samples in the approximation to the Gaussian
used for the range smoothing. Samples are only generated in the range
of [0, 4*m_RangeSigma]. Default is 100.

*/
public ";

%javamethodmodifiers  rtk::simple::BilateralImageFilter::GetRangeSigma "/**
double rtk::simple::BilateralImageFilter::GetRangeSigma() const

Standard get/set macros for filter parameters. DomainSigma is
specified in the same units as the Image spacing. RangeSigma is specified in the units of intensity.

*/
public ";

%javamethodmodifiers  rtk::simple::BilateralImageFilter::SetDomainSigma "/**
Self& rtk::simple::BilateralImageFilter::SetDomainSigma(double DomainSigma)

Convenience get/set methods for setting all domain parameters to the
same values.

*/
public ";

%javamethodmodifiers  rtk::simple::BilateralImageFilter::SetNumberOfRangeGaussianSamples "/**
Self& rtk::simple::BilateralImageFilter::SetNumberOfRangeGaussianSamples(unsigned int NumberOfRangeGaussianSamples)

Set/Get the number of samples in the approximation to the Gaussian
used for the range smoothing. Samples are only generated in the range
of [0, 4*m_RangeSigma]. Default is 100.

*/
public ";

%javamethodmodifiers  rtk::simple::BilateralImageFilter::SetRangeSigma "/**
Self& rtk::simple::BilateralImageFilter::SetRangeSigma(double RangeSigma)

Standard get/set macros for filter parameters. DomainSigma is
specified in the same units as the Image spacing. RangeSigma is specified in the units of intensity.

*/
public ";

%javamethodmodifiers  rtk::simple::BilateralImageFilter::ToString "/**
std::string rtk::simple::BilateralImageFilter::ToString() const

Print ourselves out

*/
public ";

%javamethodmodifiers  rtk::simple::BilateralImageFilter::~BilateralImageFilter "/**
rtk::simple::BilateralImageFilter::~BilateralImageFilter()

Destructor

*/
public ";


%typemap(javaimports) rtk::simple::BinShrinkImageFilter "/**

Reduce the size of an image by an integer factor in each dimension
while performing averaging of an input neighborhood.


The output image size in each dimension is given by:

outputSize[j] = max( std::floor(inputSize[j]/shrinkFactor[j]), 1 );

The algorithm implemented can be describe with the following equation
for 2D: \\\\[ \\\\mathsf{I}_{out}(x_o,x_1) =
\\\\frac{\\\\sum_{i=0}^{f_0}\\\\sum_{j=0}^{f_1}\\\\mathsf{I}_{in}(f_0
x_o+i,f_1 x_1+j)}{f_0 f_1} \\\\]

This filter is implemented so that the starting extent of the first
pixel of the output matches that of the input.

The change in image geometry from a 5x5 image binned by a factor of
2x2.This code was contributed in the Insight Journal paper:
\"BinShrink: A multi-resolution filter with cache efficient
averaging\" by Lowekamp B., Chen D. https://hdl.handle.net/10380/3450
See:
 rtk::simple::BinShrink for the procedural interface

 itk::BinShrinkImageFilter for the Doxygen on the original ITK class.


C++ includes: srtkBinShrinkImageFilter.h
*/"

%javamethodmodifiers  rtk::simple::BinShrinkImageFilter::BinShrinkImageFilter "/**
rtk::simple::BinShrinkImageFilter::BinShrinkImageFilter()

Default Constructor that takes no arguments and initializes default
parameters

*/
public ";

%javamethodmodifiers  rtk::simple::BinShrinkImageFilter::Execute "/**
Image rtk::simple::BinShrinkImageFilter::Execute(const Image &image1)

Execute the filter on the input image

*/
public ";

%javamethodmodifiers  rtk::simple::BinShrinkImageFilter::Execute "/**
Image rtk::simple::BinShrinkImageFilter::Execute(const Image &image1, const std::vector< unsigned int >
&shrinkFactors)

Execute the filter on the input image with the given parameters

*/
public ";

%javamethodmodifiers  rtk::simple::BinShrinkImageFilter::GetName "/**
std::string rtk::simple::BinShrinkImageFilter::GetName() const

Name of this class

*/
public ";

%javamethodmodifiers  rtk::simple::BinShrinkImageFilter::GetShrinkFactors "/**
std::vector<unsigned int> rtk::simple::BinShrinkImageFilter::GetShrinkFactors() const

Get the shrink factors.

*/
public ";

%javamethodmodifiers  rtk::simple::BinShrinkImageFilter::SetShrinkFactor "/**
Self& rtk::simple::BinShrinkImageFilter::SetShrinkFactor(unsigned int s)

Custom public declarations

*/
public ";

%javamethodmodifiers  rtk::simple::BinShrinkImageFilter::SetShrinkFactors "/**
Self& rtk::simple::BinShrinkImageFilter::SetShrinkFactors(const std::vector< unsigned int > &ShrinkFactors)

Set the shrink factors. Values are clamped to a minimum value of 1.
Default is 1 for all dimensions.

*/
public ";

%javamethodmodifiers  rtk::simple::BinShrinkImageFilter::ToString "/**
std::string rtk::simple::BinShrinkImageFilter::ToString() const

Print ourselves out

*/
public ";

%javamethodmodifiers  rtk::simple::BinShrinkImageFilter::~BinShrinkImageFilter "/**
rtk::simple::BinShrinkImageFilter::~BinShrinkImageFilter()

Destructor

*/
public ";


%typemap(javaimports) rtk::simple::BinaryClosingByReconstructionImageFilter "/**

binary closing by reconstruction of an image.


This filter removes small (i.e., smaller than the structuring element)
holes in the image. It is defined as: Closing(f) =
ReconstructionByErosion(Dilation(f)).

The structuring element is assumed to be composed of binary values
(zero or one). Only elements of the structuring element having values
> 0 are candidates for affecting the center pixel.


Gaetan Lehmann. Biologie du Developpement et de la Reproduction, INRA
de Jouy-en-Josas, France.
 This implementation was taken from the Insight Journal paper: https://hdl.handle.net/1926/584 or http://www.insight-journal.org/browse/publication/176


See:
 MorphologyImageFilter , ClosingByReconstructionImageFilter , BinaryOpeningByReconstructionImageFilter

 rtk::simple::BinaryClosingByReconstruction for the procedural interface

 itk::BinaryClosingByReconstructionImageFilter for the Doxygen on the original ITK class.


C++ includes: srtkBinaryClosingByReconstructionImageFilter.h
*/"

%javamethodmodifiers  rtk::simple::BinaryClosingByReconstructionImageFilter::BinaryClosingByReconstructionImageFilter "/**
rtk::simple::BinaryClosingByReconstructionImageFilter::BinaryClosingByReconstructionImageFilter()

Default Constructor that takes no arguments and initializes default
parameters

*/
public ";

%javamethodmodifiers  rtk::simple::BinaryClosingByReconstructionImageFilter::Execute "/**
Image rtk::simple::BinaryClosingByReconstructionImageFilter::Execute(const Image &image1)

Execute the filter on the input image

*/
public ";

%javamethodmodifiers  rtk::simple::BinaryClosingByReconstructionImageFilter::Execute "/**
Image rtk::simple::BinaryClosingByReconstructionImageFilter::Execute(const Image &image1, double foregroundValue, bool fullyConnected)

Execute the filter on the input image with the given parameters

*/
public ";

%javamethodmodifiers  rtk::simple::BinaryClosingByReconstructionImageFilter::FullyConnectedOff "/**
Self& rtk::simple::BinaryClosingByReconstructionImageFilter::FullyConnectedOff()
*/
public ";

%javamethodmodifiers  rtk::simple::BinaryClosingByReconstructionImageFilter::FullyConnectedOn "/**
Self& rtk::simple::BinaryClosingByReconstructionImageFilter::FullyConnectedOn()

Set the value of FullyConnected to true or false respectfully.

*/
public ";

%javamethodmodifiers  rtk::simple::BinaryClosingByReconstructionImageFilter::GetForegroundValue "/**
double rtk::simple::BinaryClosingByReconstructionImageFilter::GetForegroundValue() const

Get the value in the image considered as \"foreground\". Defaults to
maximum value of InputPixelType.

*/
public ";

%javamethodmodifiers  rtk::simple::BinaryClosingByReconstructionImageFilter::GetFullyConnected "/**
bool rtk::simple::BinaryClosingByReconstructionImageFilter::GetFullyConnected() const

Set/Get whether the connected components are defined strictly by face
connectivity or by face+edge+vertex connectivity. Default is
FullyConnectedOff. For objects that are 1 pixel wide, use
FullyConnectedOn.

*/
public ";

%javamethodmodifiers  rtk::simple::BinaryClosingByReconstructionImageFilter::GetKernelRadius "/**
std::vector<uint32_t> rtk::simple::BinaryClosingByReconstructionImageFilter::GetKernelRadius() const
*/
public ";

%javamethodmodifiers  rtk::simple::BinaryClosingByReconstructionImageFilter::GetKernelType "/**
KernelEnum rtk::simple::BinaryClosingByReconstructionImageFilter::GetKernelType() const
*/
public ";

%javamethodmodifiers  rtk::simple::BinaryClosingByReconstructionImageFilter::GetName "/**
std::string rtk::simple::BinaryClosingByReconstructionImageFilter::GetName() const

Name of this class

*/
public ";

%javamethodmodifiers  rtk::simple::BinaryClosingByReconstructionImageFilter::SetForegroundValue "/**
Self& rtk::simple::BinaryClosingByReconstructionImageFilter::SetForegroundValue(double ForegroundValue)

Set the value in the image to consider as \"foreground\". Defaults to
maximum value of InputPixelType.

*/
public ";

%javamethodmodifiers  rtk::simple::BinaryClosingByReconstructionImageFilter::SetFullyConnected "/**
Self& rtk::simple::BinaryClosingByReconstructionImageFilter::SetFullyConnected(bool FullyConnected)

Set/Get whether the connected components are defined strictly by face
connectivity or by face+edge+vertex connectivity. Default is
FullyConnectedOff. For objects that are 1 pixel wide, use
FullyConnectedOn.

*/
public ";

%javamethodmodifiers  rtk::simple::BinaryClosingByReconstructionImageFilter::SetKernelRadius "/**
Self& rtk::simple::BinaryClosingByReconstructionImageFilter::SetKernelRadius(uint32_t r)

Kernel radius as a scale for isotropic structures

*/
public ";

%javamethodmodifiers  rtk::simple::BinaryClosingByReconstructionImageFilter::SetKernelRadius "/**
Self& rtk::simple::BinaryClosingByReconstructionImageFilter::SetKernelRadius(const std::vector< uint32_t > &r)

Set/Get the radius of the kernel structuring element as a vector.

If the dimension of the image is greater then the length of r, then
the radius will be padded. If it is less the r will be truncated.

*/
public ";

%javamethodmodifiers  rtk::simple::BinaryClosingByReconstructionImageFilter::SetKernelType "/**
Self& rtk::simple::BinaryClosingByReconstructionImageFilter::SetKernelType(KernelEnum t)

Set/Get the kernel or structuring elemenent used for the morphology

*/
public ";

%javamethodmodifiers  rtk::simple::BinaryClosingByReconstructionImageFilter::SetKernelType "/**
Self& rtk::simple::BinaryClosingByReconstructionImageFilter::SetKernelType(KernelType t)
*/
public ";

%javamethodmodifiers  rtk::simple::BinaryClosingByReconstructionImageFilter::ToString "/**
std::string rtk::simple::BinaryClosingByReconstructionImageFilter::ToString() const

Print ourselves out

*/
public ";

%javamethodmodifiers  rtk::simple::BinaryClosingByReconstructionImageFilter::~BinaryClosingByReconstructionImageFilter "/**
rtk::simple::BinaryClosingByReconstructionImageFilter::~BinaryClosingByReconstructionImageFilter()

Destructor

*/
public ";


%typemap(javaimports) rtk::simple::BinaryContourImageFilter "/**

Labels the pixels on the border of the objects in a binary image.


BinaryContourImageFilter takes a binary image as input, where the pixels in the objects are
the pixels with a value equal to ForegroundValue. Only the pixels on
the contours of the objects are kept. The pixels not on the border are
changed to BackgroundValue.

The connectivity can be changed to minimum or maximum connectivity
with SetFullyConnected() . Full connectivity produces thicker contours.

https://hdl.handle.net/1926/1352


Gaetan Lehmann. Biologie du Developpement et de la Reproduction, INRA
de Jouy-en-Josas, France.

See:
 LabelContourImageFilter BinaryErodeImageFilter SimpleContourExtractorImageFilter
Wiki Examples:

All Examples

Extract the boundaries of connected regions in a binary image

Extract the inner and outer boundaries of blobs in a binary image
See:
 rtk::simple::BinaryContour for the procedural interface

 itk::BinaryContourImageFilter for the Doxygen on the original ITK class.



C++ includes: srtkBinaryContourImageFilter.h
*/"

%javamethodmodifiers  rtk::simple::BinaryContourImageFilter::BinaryContourImageFilter "/**
rtk::simple::BinaryContourImageFilter::BinaryContourImageFilter()

Default Constructor that takes no arguments and initializes default
parameters

*/
public ";

%javamethodmodifiers  rtk::simple::BinaryContourImageFilter::Execute "/**
Image rtk::simple::BinaryContourImageFilter::Execute(const Image &image1)

Execute the filter on the input image

*/
public ";

%javamethodmodifiers  rtk::simple::BinaryContourImageFilter::Execute "/**
Image rtk::simple::BinaryContourImageFilter::Execute(const Image &image1, bool fullyConnected, double backgroundValue,
double foregroundValue)

Execute the filter on the input image with the given parameters

*/
public ";

%javamethodmodifiers  rtk::simple::BinaryContourImageFilter::FullyConnectedOff "/**
Self& rtk::simple::BinaryContourImageFilter::FullyConnectedOff()
*/
public ";

%javamethodmodifiers  rtk::simple::BinaryContourImageFilter::FullyConnectedOn "/**
Self& rtk::simple::BinaryContourImageFilter::FullyConnectedOn()

Set the value of FullyConnected to true or false respectfully.

*/
public ";

%javamethodmodifiers  rtk::simple::BinaryContourImageFilter::GetBackgroundValue "/**
double rtk::simple::BinaryContourImageFilter::GetBackgroundValue() const

Set/Get the background value used to mark the pixels not on the border
of the objects.

*/
public ";

%javamethodmodifiers  rtk::simple::BinaryContourImageFilter::GetForegroundValue "/**
double rtk::simple::BinaryContourImageFilter::GetForegroundValue() const

Set/Get the foreground value used to identify the objects in the input
and output images.

*/
public ";

%javamethodmodifiers  rtk::simple::BinaryContourImageFilter::GetFullyConnected "/**
bool rtk::simple::BinaryContourImageFilter::GetFullyConnected() const

Set/Get whether the connected components are defined strictly by face
connectivity or by face+edge+vertex connectivity. Default is
FullyConnectedOff. For objects that are 1 pixel wide, use
FullyConnectedOn.

*/
public ";

%javamethodmodifiers  rtk::simple::BinaryContourImageFilter::GetName "/**
std::string rtk::simple::BinaryContourImageFilter::GetName() const

Name of this class

*/
public ";

%javamethodmodifiers  rtk::simple::BinaryContourImageFilter::SetBackgroundValue "/**
Self& rtk::simple::BinaryContourImageFilter::SetBackgroundValue(double BackgroundValue)

Set/Get the background value used to mark the pixels not on the border
of the objects.

*/
public ";

%javamethodmodifiers  rtk::simple::BinaryContourImageFilter::SetForegroundValue "/**
Self& rtk::simple::BinaryContourImageFilter::SetForegroundValue(double ForegroundValue)

Set/Get the foreground value used to identify the objects in the input
and output images.

*/
public ";

%javamethodmodifiers  rtk::simple::BinaryContourImageFilter::SetFullyConnected "/**
Self& rtk::simple::BinaryContourImageFilter::SetFullyConnected(bool FullyConnected)

Set/Get whether the connected components are defined strictly by face
connectivity or by face+edge+vertex connectivity. Default is
FullyConnectedOff. For objects that are 1 pixel wide, use
FullyConnectedOn.

*/
public ";

%javamethodmodifiers  rtk::simple::BinaryContourImageFilter::ToString "/**
std::string rtk::simple::BinaryContourImageFilter::ToString() const

Print ourselves out

*/
public ";

%javamethodmodifiers  rtk::simple::BinaryContourImageFilter::~BinaryContourImageFilter "/**
rtk::simple::BinaryContourImageFilter::~BinaryContourImageFilter()

Destructor

*/
public ";


%typemap(javaimports) rtk::simple::BinaryDilateImageFilter "/**

Fast binary dilation.


BinaryDilateImageFilter is a binary dilation morphologic operation. This implementation is
based on the papers:

L.Vincent \"Morphological transformations of binary images with
arbitrary structuring elements\", and

N.Nikopoulos et al. \"An efficient algorithm for 3d binary
morphological transformations with 3d structuring elements for
arbitrary size and shape\". IEEE Transactions on Image Processing. Vol. 9. No. 3. 2000. pp. 283-286.

Gray scale images can be processed as binary images by selecting a
\"DilateValue\". Pixel values matching the dilate value are considered
the \"foreground\" and all other pixels are \"background\". This is
useful in processing segmented images where all pixels in segment #1
have value 1 and pixels in segment #2 have value 2, etc. A particular
\"segment number\" can be processed. DilateValue defaults to the
maximum possible value of the PixelType.

The structuring element is assumed to be composed of binary values
(zero or one). Only elements of the structuring element having values
> 0 are candidates for affecting the center pixel. A reasonable choice
of structuring element is itk::BinaryBallStructuringElement .


See:
 ImageToImageFilter BinaryErodeImageFilter BinaryMorphologyImageFilter
Wiki Examples:

All Examples

Dilate a binary image
See:
 rtk::simple::BinaryDilate for the procedural interface

 itk::BinaryDilateImageFilter for the Doxygen on the original ITK class.



C++ includes: srtkBinaryDilateImageFilter.h
*/"

%javamethodmodifiers  rtk::simple::BinaryDilateImageFilter::BinaryDilateImageFilter "/**
rtk::simple::BinaryDilateImageFilter::BinaryDilateImageFilter()

Default Constructor that takes no arguments and initializes default
parameters

*/
public ";

%javamethodmodifiers  rtk::simple::BinaryDilateImageFilter::BoundaryToForegroundOff "/**
Self& rtk::simple::BinaryDilateImageFilter::BoundaryToForegroundOff()
*/
public ";

%javamethodmodifiers  rtk::simple::BinaryDilateImageFilter::BoundaryToForegroundOn "/**
Self& rtk::simple::BinaryDilateImageFilter::BoundaryToForegroundOn()

Set the value of BoundaryToForeground to true or false respectfully.

*/
public ";

%javamethodmodifiers  rtk::simple::BinaryDilateImageFilter::Execute "/**
Image rtk::simple::BinaryDilateImageFilter::Execute(const Image &image1)

Execute the filter on the input image

*/
public ";

%javamethodmodifiers  rtk::simple::BinaryDilateImageFilter::Execute "/**
Image rtk::simple::BinaryDilateImageFilter::Execute(const Image &image1, double backgroundValue, double foregroundValue,
bool boundaryToForeground)

Execute the filter on the input image with the given parameters

*/
public ";

%javamethodmodifiers  rtk::simple::BinaryDilateImageFilter::GetBackgroundValue "/**
double rtk::simple::BinaryDilateImageFilter::GetBackgroundValue() const
*/
public ";

%javamethodmodifiers  rtk::simple::BinaryDilateImageFilter::GetBoundaryToForeground "/**
bool rtk::simple::BinaryDilateImageFilter::GetBoundaryToForeground() const
*/
public ";

%javamethodmodifiers  rtk::simple::BinaryDilateImageFilter::GetForegroundValue "/**
double rtk::simple::BinaryDilateImageFilter::GetForegroundValue() const
*/
public ";

%javamethodmodifiers  rtk::simple::BinaryDilateImageFilter::GetKernelRadius "/**
std::vector<uint32_t> rtk::simple::BinaryDilateImageFilter::GetKernelRadius() const
*/
public ";

%javamethodmodifiers  rtk::simple::BinaryDilateImageFilter::GetKernelType "/**
KernelEnum rtk::simple::BinaryDilateImageFilter::GetKernelType() const
*/
public ";

%javamethodmodifiers  rtk::simple::BinaryDilateImageFilter::GetName "/**
std::string rtk::simple::BinaryDilateImageFilter::GetName() const

Name of this class

*/
public ";

%javamethodmodifiers  rtk::simple::BinaryDilateImageFilter::SetBackgroundValue "/**
Self& rtk::simple::BinaryDilateImageFilter::SetBackgroundValue(double BackgroundValue)
*/
public ";

%javamethodmodifiers  rtk::simple::BinaryDilateImageFilter::SetBoundaryToForeground "/**
Self& rtk::simple::BinaryDilateImageFilter::SetBoundaryToForeground(bool BoundaryToForeground)
*/
public ";

%javamethodmodifiers  rtk::simple::BinaryDilateImageFilter::SetForegroundValue "/**
Self& rtk::simple::BinaryDilateImageFilter::SetForegroundValue(double ForegroundValue)
*/
public ";

%javamethodmodifiers  rtk::simple::BinaryDilateImageFilter::SetKernelRadius "/**
Self& rtk::simple::BinaryDilateImageFilter::SetKernelRadius(uint32_t r)

Kernel radius as a scale for isotropic structures

*/
public ";

%javamethodmodifiers  rtk::simple::BinaryDilateImageFilter::SetKernelRadius "/**
Self& rtk::simple::BinaryDilateImageFilter::SetKernelRadius(const std::vector< uint32_t > &r)

Set/Get the radius of the kernel structuring element as a vector.

If the dimension of the image is greater then the length of r, then
the radius will be padded. If it is less the r will be truncated.

*/
public ";

%javamethodmodifiers  rtk::simple::BinaryDilateImageFilter::SetKernelType "/**
Self& rtk::simple::BinaryDilateImageFilter::SetKernelType(KernelEnum t)

Set/Get the kernel or structuring elemenent used for the morphology

*/
public ";

%javamethodmodifiers  rtk::simple::BinaryDilateImageFilter::SetKernelType "/**
Self& rtk::simple::BinaryDilateImageFilter::SetKernelType(KernelType t)
*/
public ";

%javamethodmodifiers  rtk::simple::BinaryDilateImageFilter::ToString "/**
std::string rtk::simple::BinaryDilateImageFilter::ToString() const

Print ourselves out

*/
public ";

%javamethodmodifiers  rtk::simple::BinaryDilateImageFilter::~BinaryDilateImageFilter "/**
rtk::simple::BinaryDilateImageFilter::~BinaryDilateImageFilter()

Destructor

*/
public ";


%typemap(javaimports) rtk::simple::BinaryErodeImageFilter "/**

Fast binary erosion.


BinaryErodeImageFilter is a binary erosion morphologic operation. This implementation is
based on the papers:

L.Vincent \"Morphological transformations of binary images with
arbitrary structuring elements\", and

N.Nikopoulos et al. \"An efficient algorithm for 3d binary
morphological transformations with 3d structuring elements for
arbitrary size and shape\". IEEE Transactions on Image Processing. Vol. 9. No. 3. 2000. pp. 283-286.

Gray scale images can be processed as binary images by selecting a
\"ErodeValue\". Pixel values matching the erode value are considered
the \"foreground\" and all other pixels are \"background\". This is
useful in processing segmented images where all pixels in segment #1
have value 1 and pixels in segment #2 have value 2, etc. A particular
\"segment number\" can be processed. ErodeValue defaults to the
maximum possible value of the PixelType. The eroded pixels will
receive the BackgroundValue (defaults to 0).

The structuring element is assumed to be composed of binary values
(zero or one). Only elements of the structuring element having values
> 0 are candidates for affecting the center pixel. A reasonable choice
of structuring element is itk::BinaryBallStructuringElement .


See:
 ImageToImageFilter BinaryDilateImageFilter BinaryMorphologyImageFilter
Wiki Examples:

All Examples

Erode a binary image
See:
 rtk::simple::BinaryErode for the procedural interface

 itk::BinaryErodeImageFilter for the Doxygen on the original ITK class.



C++ includes: srtkBinaryErodeImageFilter.h
*/"

%javamethodmodifiers  rtk::simple::BinaryErodeImageFilter::BinaryErodeImageFilter "/**
rtk::simple::BinaryErodeImageFilter::BinaryErodeImageFilter()

Default Constructor that takes no arguments and initializes default
parameters

*/
public ";

%javamethodmodifiers  rtk::simple::BinaryErodeImageFilter::BoundaryToForegroundOff "/**
Self& rtk::simple::BinaryErodeImageFilter::BoundaryToForegroundOff()
*/
public ";

%javamethodmodifiers  rtk::simple::BinaryErodeImageFilter::BoundaryToForegroundOn "/**
Self& rtk::simple::BinaryErodeImageFilter::BoundaryToForegroundOn()

Set the value of BoundaryToForeground to true or false respectfully.

*/
public ";

%javamethodmodifiers  rtk::simple::BinaryErodeImageFilter::Execute "/**
Image rtk::simple::BinaryErodeImageFilter::Execute(const Image &image1)

Execute the filter on the input image

*/
public ";

%javamethodmodifiers  rtk::simple::BinaryErodeImageFilter::Execute "/**
Image rtk::simple::BinaryErodeImageFilter::Execute(const Image &image1, double backgroundValue, double foregroundValue,
bool boundaryToForeground)

Execute the filter on the input image with the given parameters

*/
public ";

%javamethodmodifiers  rtk::simple::BinaryErodeImageFilter::GetBackgroundValue "/**
double rtk::simple::BinaryErodeImageFilter::GetBackgroundValue() const
*/
public ";

%javamethodmodifiers  rtk::simple::BinaryErodeImageFilter::GetBoundaryToForeground "/**
bool rtk::simple::BinaryErodeImageFilter::GetBoundaryToForeground() const
*/
public ";

%javamethodmodifiers  rtk::simple::BinaryErodeImageFilter::GetForegroundValue "/**
double rtk::simple::BinaryErodeImageFilter::GetForegroundValue() const
*/
public ";

%javamethodmodifiers  rtk::simple::BinaryErodeImageFilter::GetKernelRadius "/**
std::vector<uint32_t> rtk::simple::BinaryErodeImageFilter::GetKernelRadius() const
*/
public ";

%javamethodmodifiers  rtk::simple::BinaryErodeImageFilter::GetKernelType "/**
KernelEnum rtk::simple::BinaryErodeImageFilter::GetKernelType() const
*/
public ";

%javamethodmodifiers  rtk::simple::BinaryErodeImageFilter::GetName "/**
std::string rtk::simple::BinaryErodeImageFilter::GetName() const

Name of this class

*/
public ";

%javamethodmodifiers  rtk::simple::BinaryErodeImageFilter::SetBackgroundValue "/**
Self& rtk::simple::BinaryErodeImageFilter::SetBackgroundValue(double BackgroundValue)
*/
public ";

%javamethodmodifiers  rtk::simple::BinaryErodeImageFilter::SetBoundaryToForeground "/**
Self& rtk::simple::BinaryErodeImageFilter::SetBoundaryToForeground(bool BoundaryToForeground)
*/
public ";

%javamethodmodifiers  rtk::simple::BinaryErodeImageFilter::SetForegroundValue "/**
Self& rtk::simple::BinaryErodeImageFilter::SetForegroundValue(double ForegroundValue)
*/
public ";

%javamethodmodifiers  rtk::simple::BinaryErodeImageFilter::SetKernelRadius "/**
Self& rtk::simple::BinaryErodeImageFilter::SetKernelRadius(uint32_t r)

Kernel radius as a scale for isotropic structures

*/
public ";

%javamethodmodifiers  rtk::simple::BinaryErodeImageFilter::SetKernelRadius "/**
Self& rtk::simple::BinaryErodeImageFilter::SetKernelRadius(const std::vector< uint32_t > &r)

Set/Get the radius of the kernel structuring element as a vector.

If the dimension of the image is greater then the length of r, then
the radius will be padded. If it is less the r will be truncated.

*/
public ";

%javamethodmodifiers  rtk::simple::BinaryErodeImageFilter::SetKernelType "/**
Self& rtk::simple::BinaryErodeImageFilter::SetKernelType(KernelEnum t)

Set/Get the kernel or structuring elemenent used for the morphology

*/
public ";

%javamethodmodifiers  rtk::simple::BinaryErodeImageFilter::SetKernelType "/**
Self& rtk::simple::BinaryErodeImageFilter::SetKernelType(KernelType t)
*/
public ";

%javamethodmodifiers  rtk::simple::BinaryErodeImageFilter::ToString "/**
std::string rtk::simple::BinaryErodeImageFilter::ToString() const

Print ourselves out

*/
public ";

%javamethodmodifiers  rtk::simple::BinaryErodeImageFilter::~BinaryErodeImageFilter "/**
rtk::simple::BinaryErodeImageFilter::~BinaryErodeImageFilter()

Destructor

*/
public ";


%typemap(javaimports) rtk::simple::BinaryFillholeImageFilter "/**

Remove holes not connected to the boundary of the image.


BinaryFillholeImageFilter fills holes in a binary image.

Geodesic morphology and the Fillhole algorithm is described in Chapter
6 of Pierre Soille's book \"Morphological Image Analysis: Principles
and Applications\", Second Edition, Springer, 2003.


Gaetan Lehmann. Biologie du Developpement et de la Reproduction, INRA
de Jouy-en-Josas, France.
 This implementation was taken from the Insight Journal paper: https://hdl.handle.net/1926/584 or http://www.insight-journal.org/browse/publication/176


See:
 GrayscaleFillholeImageFilter

 rtk::simple::BinaryFillhole for the procedural interface

 itk::BinaryFillholeImageFilter for the Doxygen on the original ITK class.


C++ includes: srtkBinaryFillholeImageFilter.h
*/"

%javamethodmodifiers  rtk::simple::BinaryFillholeImageFilter::BinaryFillholeImageFilter "/**
rtk::simple::BinaryFillholeImageFilter::BinaryFillholeImageFilter()

Default Constructor that takes no arguments and initializes default
parameters

*/
public ";

%javamethodmodifiers  rtk::simple::BinaryFillholeImageFilter::Execute "/**
Image rtk::simple::BinaryFillholeImageFilter::Execute(const Image &image1)

Execute the filter on the input image

*/
public ";

%javamethodmodifiers  rtk::simple::BinaryFillholeImageFilter::Execute "/**
Image rtk::simple::BinaryFillholeImageFilter::Execute(const Image &image1, bool fullyConnected, double foregroundValue)

Execute the filter on the input image with the given parameters

*/
public ";

%javamethodmodifiers  rtk::simple::BinaryFillholeImageFilter::FullyConnectedOff "/**
Self& rtk::simple::BinaryFillholeImageFilter::FullyConnectedOff()
*/
public ";

%javamethodmodifiers  rtk::simple::BinaryFillholeImageFilter::FullyConnectedOn "/**
Self& rtk::simple::BinaryFillholeImageFilter::FullyConnectedOn()

Set the value of FullyConnected to true or false respectfully.

*/
public ";

%javamethodmodifiers  rtk::simple::BinaryFillholeImageFilter::GetForegroundValue "/**
double rtk::simple::BinaryFillholeImageFilter::GetForegroundValue() const

Get the value in the image considered as \"foreground\". Defaults to
maximum value of InputPixelType.

*/
public ";

%javamethodmodifiers  rtk::simple::BinaryFillholeImageFilter::GetFullyConnected "/**
bool rtk::simple::BinaryFillholeImageFilter::GetFullyConnected() const

Set/Get whether the connected components are defined strictly by face
connectivity or by face+edge+vertex connectivity. Default is
FullyConnectedOff. For objects that are 1 pixel wide, use
FullyConnectedOn.

*/
public ";

%javamethodmodifiers  rtk::simple::BinaryFillholeImageFilter::GetName "/**
std::string rtk::simple::BinaryFillholeImageFilter::GetName() const

Name of this class

*/
public ";

%javamethodmodifiers  rtk::simple::BinaryFillholeImageFilter::SetForegroundValue "/**
Self& rtk::simple::BinaryFillholeImageFilter::SetForegroundValue(double ForegroundValue)

Set the value in the image to consider as \"foreground\". Defaults to
maximum value of InputPixelType.

*/
public ";

%javamethodmodifiers  rtk::simple::BinaryFillholeImageFilter::SetFullyConnected "/**
Self& rtk::simple::BinaryFillholeImageFilter::SetFullyConnected(bool FullyConnected)

Set/Get whether the connected components are defined strictly by face
connectivity or by face+edge+vertex connectivity. Default is
FullyConnectedOff. For objects that are 1 pixel wide, use
FullyConnectedOn.

*/
public ";

%javamethodmodifiers  rtk::simple::BinaryFillholeImageFilter::ToString "/**
std::string rtk::simple::BinaryFillholeImageFilter::ToString() const

Print ourselves out

*/
public ";

%javamethodmodifiers  rtk::simple::BinaryFillholeImageFilter::~BinaryFillholeImageFilter "/**
rtk::simple::BinaryFillholeImageFilter::~BinaryFillholeImageFilter()

Destructor

*/
public ";


%typemap(javaimports) rtk::simple::BinaryGrindPeakImageFilter "/**

Remove the objects not connected to the boundary of the image.


BinaryGrindPeakImageFilter ginds peaks in a grayscale image.

Geodesic morphology and the grind peak algorithm is described in
Chapter 6 of Pierre Soille's book \"Morphological Image Analysis:
Principles and Applications\", Second Edition, Springer, 2003.


Gaetan Lehmann. Biologie du Developpement et de la Reproduction, INRA
de Jouy-en-Josas, France.
 This implementation was taken from the Insight Journal paper: https://hdl.handle.net/1926/584 or http://www.insight-journal.org/browse/publication/176


See:
 GrayscaleGrindPeakImageFilter

 rtk::simple::BinaryGrindPeak for the procedural interface

 itk::BinaryGrindPeakImageFilter for the Doxygen on the original ITK class.


C++ includes: srtkBinaryGrindPeakImageFilter.h
*/"

%javamethodmodifiers  rtk::simple::BinaryGrindPeakImageFilter::BinaryGrindPeakImageFilter "/**
rtk::simple::BinaryGrindPeakImageFilter::BinaryGrindPeakImageFilter()

Default Constructor that takes no arguments and initializes default
parameters

*/
public ";

%javamethodmodifiers  rtk::simple::BinaryGrindPeakImageFilter::Execute "/**
Image rtk::simple::BinaryGrindPeakImageFilter::Execute(const Image &image1)

Execute the filter on the input image

*/
public ";

%javamethodmodifiers  rtk::simple::BinaryGrindPeakImageFilter::Execute "/**
Image rtk::simple::BinaryGrindPeakImageFilter::Execute(const Image &image1, bool fullyConnected, double foregroundValue,
double backgroundValue)

Execute the filter on the input image with the given parameters

*/
public ";

%javamethodmodifiers  rtk::simple::BinaryGrindPeakImageFilter::FullyConnectedOff "/**
Self& rtk::simple::BinaryGrindPeakImageFilter::FullyConnectedOff()
*/
public ";

%javamethodmodifiers  rtk::simple::BinaryGrindPeakImageFilter::FullyConnectedOn "/**
Self& rtk::simple::BinaryGrindPeakImageFilter::FullyConnectedOn()

Set the value of FullyConnected to true or false respectfully.

*/
public ";

%javamethodmodifiers  rtk::simple::BinaryGrindPeakImageFilter::GetBackgroundValue "/**
double rtk::simple::BinaryGrindPeakImageFilter::GetBackgroundValue() const

Set the value in eroded part of the image. Defaults to zero

*/
public ";

%javamethodmodifiers  rtk::simple::BinaryGrindPeakImageFilter::GetForegroundValue "/**
double rtk::simple::BinaryGrindPeakImageFilter::GetForegroundValue() const

Get the value in the image considered as \"foreground\". Defaults to
maximum value of InputPixelType.

*/
public ";

%javamethodmodifiers  rtk::simple::BinaryGrindPeakImageFilter::GetFullyConnected "/**
bool rtk::simple::BinaryGrindPeakImageFilter::GetFullyConnected() const

Set/Get whether the connected components are defined strictly by face
connectivity or by face+edge+vertex connectivity. Default is
FullyConnectedOff. For objects that are 1 pixel wide, use
FullyConnectedOn.

*/
public ";

%javamethodmodifiers  rtk::simple::BinaryGrindPeakImageFilter::GetName "/**
std::string rtk::simple::BinaryGrindPeakImageFilter::GetName() const

Name of this class

*/
public ";

%javamethodmodifiers  rtk::simple::BinaryGrindPeakImageFilter::SetBackgroundValue "/**
Self& rtk::simple::BinaryGrindPeakImageFilter::SetBackgroundValue(double BackgroundValue)

Set the value in eroded part of the image. Defaults to zero

*/
public ";

%javamethodmodifiers  rtk::simple::BinaryGrindPeakImageFilter::SetForegroundValue "/**
Self& rtk::simple::BinaryGrindPeakImageFilter::SetForegroundValue(double ForegroundValue)

Set the value in the image to consider as \"foreground\". Defaults to
maximum value of InputPixelType.

*/
public ";

%javamethodmodifiers  rtk::simple::BinaryGrindPeakImageFilter::SetFullyConnected "/**
Self& rtk::simple::BinaryGrindPeakImageFilter::SetFullyConnected(bool FullyConnected)

Set/Get whether the connected components are defined strictly by face
connectivity or by face+edge+vertex connectivity. Default is
FullyConnectedOff. For objects that are 1 pixel wide, use
FullyConnectedOn.

*/
public ";

%javamethodmodifiers  rtk::simple::BinaryGrindPeakImageFilter::ToString "/**
std::string rtk::simple::BinaryGrindPeakImageFilter::ToString() const

Print ourselves out

*/
public ";

%javamethodmodifiers  rtk::simple::BinaryGrindPeakImageFilter::~BinaryGrindPeakImageFilter "/**
rtk::simple::BinaryGrindPeakImageFilter::~BinaryGrindPeakImageFilter()

Destructor

*/
public ";


%typemap(javaimports) rtk::simple::BinaryImageToLabelMapFilter "/**

Label the connected components in a binary image and produce a
collection of label objects.


BinaryImageToLabelMapFilter labels the objects in a binary image. Each distinct object is
assigned a unique label. The final object labels start with 1 and are
consecutive. Objects that are reached earlier by a raster order scan
have a lower label.

The GetOutput() function of this class returns an itk::LabelMap .

This implementation was taken from the Insight Journal paper: https://hdl.handle.net/1926/584 or http://www.insight-journal.org/browse/publication/176


Gaetan Lehmann. Biologie du Developpement et de la Reproduction, INRA
de Jouy-en-Josas, France.

See:
 ConnectedComponentImageFilter , LabelImageToLabelMapFilter , LabelMap , LabelObject
Wiki Examples:

All Examples

Label binary regions in an image
See:
 rtk::simple::BinaryImageToLabelMapFilter for the procedural interface

 itk::BinaryImageToLabelMapFilter for the Doxygen on the original ITK class.



C++ includes: srtkBinaryImageToLabelMapFilter.h
*/"

%javamethodmodifiers  rtk::simple::BinaryImageToLabelMapFilter::BinaryImageToLabelMapFilter "/**
rtk::simple::BinaryImageToLabelMapFilter::BinaryImageToLabelMapFilter()

Default Constructor that takes no arguments and initializes default
parameters

*/
public ";

%javamethodmodifiers  rtk::simple::BinaryImageToLabelMapFilter::Execute "/**
Image rtk::simple::BinaryImageToLabelMapFilter::Execute(const Image &image1)

Execute the filter on the input image

*/
public ";

%javamethodmodifiers  rtk::simple::BinaryImageToLabelMapFilter::Execute "/**
Image rtk::simple::BinaryImageToLabelMapFilter::Execute(const Image &image1, bool fullyConnected, double
inputForegroundValue, double outputBackgroundValue)

Execute the filter on the input image with the given parameters

*/
public ";

%javamethodmodifiers  rtk::simple::BinaryImageToLabelMapFilter::FullyConnectedOff "/**
Self& rtk::simple::BinaryImageToLabelMapFilter::FullyConnectedOff()
*/
public ";

%javamethodmodifiers  rtk::simple::BinaryImageToLabelMapFilter::FullyConnectedOn "/**
Self& rtk::simple::BinaryImageToLabelMapFilter::FullyConnectedOn()

Set the value of FullyConnected to true or false respectfully.

*/
public ";

%javamethodmodifiers  rtk::simple::BinaryImageToLabelMapFilter::GetFullyConnected "/**
bool rtk::simple::BinaryImageToLabelMapFilter::GetFullyConnected() const

Set/Get whether the connected components are defined strictly by face
connectivity or by face+edge+vertex connectivity. Default is
FullyConnectedOff. For objects that are 1 pixel wide, use
FullyConnectedOn.

*/
public ";

%javamethodmodifiers  rtk::simple::BinaryImageToLabelMapFilter::GetInputForegroundValue "/**
double rtk::simple::BinaryImageToLabelMapFilter::GetInputForegroundValue() const

Set/Get the value to be consider \"foreground\" in the input image.
Defaults to NumericTraits<InputPixelType>::max() .

*/
public ";

%javamethodmodifiers  rtk::simple::BinaryImageToLabelMapFilter::GetName "/**
std::string rtk::simple::BinaryImageToLabelMapFilter::GetName() const

Name of this class

*/
public ";

%javamethodmodifiers  rtk::simple::BinaryImageToLabelMapFilter::GetOutputBackgroundValue "/**
double rtk::simple::BinaryImageToLabelMapFilter::GetOutputBackgroundValue() const

Set/Get the value used as \"background\" in the output image. Defaults
to NumericTraits<OutputPixelType>::NonpositiveMin() .

*/
public ";

%javamethodmodifiers  rtk::simple::BinaryImageToLabelMapFilter::SetFullyConnected "/**
Self& rtk::simple::BinaryImageToLabelMapFilter::SetFullyConnected(bool FullyConnected)

Set/Get whether the connected components are defined strictly by face
connectivity or by face+edge+vertex connectivity. Default is
FullyConnectedOff. For objects that are 1 pixel wide, use
FullyConnectedOn.

*/
public ";

%javamethodmodifiers  rtk::simple::BinaryImageToLabelMapFilter::SetInputForegroundValue "/**
Self& rtk::simple::BinaryImageToLabelMapFilter::SetInputForegroundValue(double InputForegroundValue)

Set/Get the value to be consider \"foreground\" in the input image.
Defaults to NumericTraits<InputPixelType>::max() .

*/
public ";

%javamethodmodifiers  rtk::simple::BinaryImageToLabelMapFilter::SetOutputBackgroundValue "/**
Self& rtk::simple::BinaryImageToLabelMapFilter::SetOutputBackgroundValue(double OutputBackgroundValue)

Set/Get the value used as \"background\" in the output image. Defaults
to NumericTraits<OutputPixelType>::NonpositiveMin() .

*/
public ";

%javamethodmodifiers  rtk::simple::BinaryImageToLabelMapFilter::ToString "/**
std::string rtk::simple::BinaryImageToLabelMapFilter::ToString() const

Print ourselves out

*/
public ";

%javamethodmodifiers  rtk::simple::BinaryImageToLabelMapFilter::~BinaryImageToLabelMapFilter "/**
rtk::simple::BinaryImageToLabelMapFilter::~BinaryImageToLabelMapFilter()

Destructor

*/
public ";


%typemap(javaimports) rtk::simple::BinaryMagnitudeImageFilter "/**

Computes the square root of the sum of squares of corresponding input
pixels.


This filter is templated over the types of the two input images and
the type of the output image.

Numeric conversions (castings) are done by the C++ defaults.

The filter walks over all of the pixels in the two input images, and
for each pixel does the following:


cast the input 1 pixel value to double

cast the input 2 pixel value to double

compute the sum of squares of the two pixel values

compute the square root of the sum

cast the double value resulting from std::sqrt() to the pixel type of
the output image

store the cast value into the output image.
 The filter expects all images to have the same dimension (e.g. all
2D, or all 3D, or all ND)
See:
 rtk::simple::BinaryMagnitude for the procedural interface

 itk::BinaryMagnitudeImageFilter for the Doxygen on the original ITK class.


C++ includes: srtkBinaryMagnitudeImageFilter.h
*/"

%javamethodmodifiers  rtk::simple::BinaryMagnitudeImageFilter::BinaryMagnitudeImageFilter "/**
rtk::simple::BinaryMagnitudeImageFilter::BinaryMagnitudeImageFilter()

Default Constructor that takes no arguments and initializes default
parameters

*/
public ";

%javamethodmodifiers  rtk::simple::BinaryMagnitudeImageFilter::Execute "/**
Image rtk::simple::BinaryMagnitudeImageFilter::Execute(const Image &image1, const Image &image2)

Execute the filter on the input images

*/
public ";

%javamethodmodifiers  rtk::simple::BinaryMagnitudeImageFilter::GetName "/**
std::string rtk::simple::BinaryMagnitudeImageFilter::GetName() const

Name of this class

*/
public ";

%javamethodmodifiers  rtk::simple::BinaryMagnitudeImageFilter::ToString "/**
std::string rtk::simple::BinaryMagnitudeImageFilter::ToString() const

Print ourselves out

*/
public ";

%javamethodmodifiers  rtk::simple::BinaryMagnitudeImageFilter::~BinaryMagnitudeImageFilter "/**
rtk::simple::BinaryMagnitudeImageFilter::~BinaryMagnitudeImageFilter()

Destructor

*/
public ";


%typemap(javaimports) rtk::simple::BinaryMedianImageFilter "/**

Applies a version of the median filter optimized for binary images.


This filter was contributed by Bjorn Hanch Sollie after identifying
that the generic Median filter performed unnecessary operations when
the input image is binary.

This filter computes an image where a given pixel is the median value
of the pixels in a neighborhood about the corresponding input pixel.
For the case of binary images the median can be obtained by simply
counting the neighbors that are foreground.

A median filter is one of the family of nonlinear filters. It is used
to smooth an image without being biased by outliers or shot noise.


See:
 Image


 Neighborhood


 NeighborhoodOperator


 NeighborhoodIterator

 rtk::simple::BinaryMedian for the procedural interface

 itk::BinaryMedianImageFilter for the Doxygen on the original ITK class.


C++ includes: srtkBinaryMedianImageFilter.h
*/"

%javamethodmodifiers  rtk::simple::BinaryMedianImageFilter::BinaryMedianImageFilter "/**
rtk::simple::BinaryMedianImageFilter::BinaryMedianImageFilter()

Default Constructor that takes no arguments and initializes default
parameters

*/
public ";

%javamethodmodifiers  rtk::simple::BinaryMedianImageFilter::Execute "/**
Image rtk::simple::BinaryMedianImageFilter::Execute(const Image &image1)

Execute the filter on the input image

*/
public ";

%javamethodmodifiers  rtk::simple::BinaryMedianImageFilter::Execute "/**
Image rtk::simple::BinaryMedianImageFilter::Execute(const Image &image1, const std::vector< unsigned int > &radius,
double foregroundValue, double backgroundValue)

Execute the filter on the input image with the given parameters

*/
public ";

%javamethodmodifiers  rtk::simple::BinaryMedianImageFilter::GetBackgroundValue "/**
double rtk::simple::BinaryMedianImageFilter::GetBackgroundValue() const

Get the value associated with the Foreground (or the object) on the
binary input image and the Background .

*/
public ";

%javamethodmodifiers  rtk::simple::BinaryMedianImageFilter::GetForegroundValue "/**
double rtk::simple::BinaryMedianImageFilter::GetForegroundValue() const

Get the value associated with the Foreground (or the object) on the
binary input image and the Background .

*/
public ";

%javamethodmodifiers  rtk::simple::BinaryMedianImageFilter::GetName "/**
std::string rtk::simple::BinaryMedianImageFilter::GetName() const

Name of this class

*/
public ";

%javamethodmodifiers  rtk::simple::BinaryMedianImageFilter::GetRadius "/**
std::vector<unsigned int> rtk::simple::BinaryMedianImageFilter::GetRadius() const

Get the radius of the neighborhood used to compute the median

*/
public ";

%javamethodmodifiers  rtk::simple::BinaryMedianImageFilter::SetBackgroundValue "/**
Self& rtk::simple::BinaryMedianImageFilter::SetBackgroundValue(double BackgroundValue)

Set the value associated with the Foreground (or the object) on the
binary input image and the Background .

*/
public ";

%javamethodmodifiers  rtk::simple::BinaryMedianImageFilter::SetForegroundValue "/**
Self& rtk::simple::BinaryMedianImageFilter::SetForegroundValue(double ForegroundValue)

Set the value associated with the Foreground (or the object) on the
binary input image and the Background .

*/
public ";

%javamethodmodifiers  rtk::simple::BinaryMedianImageFilter::SetRadius "/**
Self& rtk::simple::BinaryMedianImageFilter::SetRadius(const std::vector< unsigned int > &Radius)

Set the radius of the neighborhood used to compute the median.

*/
public ";

%javamethodmodifiers  rtk::simple::BinaryMedianImageFilter::SetRadius "/**
Self& rtk::simple::BinaryMedianImageFilter::SetRadius(unsigned int value)

Set the values of the Radius vector all to value

*/
public ";

%javamethodmodifiers  rtk::simple::BinaryMedianImageFilter::ToString "/**
std::string rtk::simple::BinaryMedianImageFilter::ToString() const

Print ourselves out

*/
public ";

%javamethodmodifiers  rtk::simple::BinaryMedianImageFilter::~BinaryMedianImageFilter "/**
rtk::simple::BinaryMedianImageFilter::~BinaryMedianImageFilter()

Destructor

*/
public ";


%typemap(javaimports) rtk::simple::BinaryMinMaxCurvatureFlowImageFilter "/**

Denoise a binary image using min/max curvature flow.


BinaryMinMaxCurvatureFlowImageFilter implements a curvature driven image denosing algorithm. This filter
assumes that the image is essentially binary: consisting of two
classes. Iso-brightness contours in the input image are viewed as a
level set. The level set is then evolved using a curvature-based speed
function:

\\\\[ I_t = F_{\\\\mbox{minmax}} |\\\\nabla I| \\\\]

where $ F_{\\\\mbox{minmax}} = \\\\min(\\\\kappa,0) $ if $ \\\\mbox{Avg}_{\\\\mbox{stencil}}(x) $ is less than or equal to $ T_{thresold} $ and $ \\\\max(\\\\kappa,0) $ , otherwise. $ \\\\kappa $ is the mean curvature of the iso-brightness contour at point $ x $ .

In min/max curvature flow, movement is turned on or off depending on
the scale of the noise one wants to remove. Switching depends on the
average image value of a region of radius $ R $ around each point. The choice of $ R $ , the stencil radius, governs the scale of the noise to be removed.

The threshold value $ T_{threshold} $ is a user specified value which discriminates between the two pixel
classes.

This filter make use of the multi-threaded finite difference solver
hierarchy. Updates are computed using a BinaryMinMaxCurvatureFlowFunction object. A zero flux Neumann boundary condition is used when computing
derivatives near the data boundary.


WARNING:
This filter assumes that the input and output types have the same
dimensions. This filter also requires that the output image pixels are
of a real type. This filter works for any dimensional images.
 Reference: \"Level Set Methods and Fast Marching Methods\", J.A.
Sethian, Cambridge Press, Chapter 16, Second edition, 1999.


See:
 BinaryMinMaxCurvatureFlowFunction


 CurvatureFlowImageFilter


 MinMaxCurvatureFlowImageFilter

 rtk::simple::BinaryMinMaxCurvatureFlow for the procedural interface

 itk::BinaryMinMaxCurvatureFlowImageFilter for the Doxygen on the original ITK class.


C++ includes: srtkBinaryMinMaxCurvatureFlowImageFilter.h
*/"

%javamethodmodifiers  rtk::simple::BinaryMinMaxCurvatureFlowImageFilter::BinaryMinMaxCurvatureFlowImageFilter "/**
rtk::simple::BinaryMinMaxCurvatureFlowImageFilter::BinaryMinMaxCurvatureFlowImageFilter()

Default Constructor that takes no arguments and initializes default
parameters

*/
public ";

%javamethodmodifiers  rtk::simple::BinaryMinMaxCurvatureFlowImageFilter::Execute "/**
Image rtk::simple::BinaryMinMaxCurvatureFlowImageFilter::Execute(const Image &image1)

Execute the filter on the input image

*/
public ";

%javamethodmodifiers  rtk::simple::BinaryMinMaxCurvatureFlowImageFilter::Execute "/**
Image rtk::simple::BinaryMinMaxCurvatureFlowImageFilter::Execute(const Image &image1, double timeStep, uint32_t numberOfIterations,
int stencilRadius, double threshold)

Execute the filter on the input image with the given parameters

*/
public ";

%javamethodmodifiers  rtk::simple::BinaryMinMaxCurvatureFlowImageFilter::GetName "/**
std::string rtk::simple::BinaryMinMaxCurvatureFlowImageFilter::GetName() const

Name of this class

*/
public ";

%javamethodmodifiers  rtk::simple::BinaryMinMaxCurvatureFlowImageFilter::GetNumberOfIterations "/**
uint32_t rtk::simple::BinaryMinMaxCurvatureFlowImageFilter::GetNumberOfIterations() const
*/
public ";

%javamethodmodifiers  rtk::simple::BinaryMinMaxCurvatureFlowImageFilter::GetStencilRadius "/**
int rtk::simple::BinaryMinMaxCurvatureFlowImageFilter::GetStencilRadius() const
*/
public ";

%javamethodmodifiers  rtk::simple::BinaryMinMaxCurvatureFlowImageFilter::GetThreshold "/**
double rtk::simple::BinaryMinMaxCurvatureFlowImageFilter::GetThreshold() const

Set/Get the threshold value.

*/
public ";

%javamethodmodifiers  rtk::simple::BinaryMinMaxCurvatureFlowImageFilter::GetTimeStep "/**
double rtk::simple::BinaryMinMaxCurvatureFlowImageFilter::GetTimeStep() const
*/
public ";

%javamethodmodifiers  rtk::simple::BinaryMinMaxCurvatureFlowImageFilter::SetNumberOfIterations "/**
Self& rtk::simple::BinaryMinMaxCurvatureFlowImageFilter::SetNumberOfIterations(uint32_t NumberOfIterations)
*/
public ";

%javamethodmodifiers  rtk::simple::BinaryMinMaxCurvatureFlowImageFilter::SetStencilRadius "/**
Self& rtk::simple::BinaryMinMaxCurvatureFlowImageFilter::SetStencilRadius(int StencilRadius)
*/
public ";

%javamethodmodifiers  rtk::simple::BinaryMinMaxCurvatureFlowImageFilter::SetThreshold "/**
Self& rtk::simple::BinaryMinMaxCurvatureFlowImageFilter::SetThreshold(double Threshold)

Set/Get the threshold value.

*/
public ";

%javamethodmodifiers  rtk::simple::BinaryMinMaxCurvatureFlowImageFilter::SetTimeStep "/**
Self& rtk::simple::BinaryMinMaxCurvatureFlowImageFilter::SetTimeStep(double TimeStep)
*/
public ";

%javamethodmodifiers  rtk::simple::BinaryMinMaxCurvatureFlowImageFilter::ToString "/**
std::string rtk::simple::BinaryMinMaxCurvatureFlowImageFilter::ToString() const

Print ourselves out

*/
public ";

%javamethodmodifiers  rtk::simple::BinaryMinMaxCurvatureFlowImageFilter::~BinaryMinMaxCurvatureFlowImageFilter "/**
rtk::simple::BinaryMinMaxCurvatureFlowImageFilter::~BinaryMinMaxCurvatureFlowImageFilter()

Destructor

*/
public ";


%typemap(javaimports) rtk::simple::BinaryMorphologicalClosingImageFilter "/**

binary morphological closing of an image.


This filter removes small (i.e., smaller than the structuring element)
holes and tube like structures in the interior or at the boundaries of
the image. The morphological closing of an image \"f\" is defined as:
Closing(f) = Erosion(Dilation(f)).

The structuring element is assumed to be composed of binary values
(zero or one). Only elements of the structuring element having values
> 0 are candidates for affecting the center pixel.

This code was contributed in the Insight Journal paper: \"Binary
morphological closing and opening image filters\" by Lehmann G. https://hdl.handle.net/1926/141 http://www.insight-journal.org/browse/publication/58


Gaetan Lehmann. Biologie du Developpement et de la Reproduction, INRA
de Jouy-en-Josas, France.

See:
 MorphologyImageFilter , GrayscaleDilateImageFilter , GrayscaleErodeImageFilter

 rtk::simple::BinaryMorphologicalClosing for the procedural interface

 itk::BinaryMorphologicalClosingImageFilter for the Doxygen on the original ITK class.


C++ includes: srtkBinaryMorphologicalClosingImageFilter.h
*/"

%javamethodmodifiers  rtk::simple::BinaryMorphologicalClosingImageFilter::BinaryMorphologicalClosingImageFilter "/**
rtk::simple::BinaryMorphologicalClosingImageFilter::BinaryMorphologicalClosingImageFilter()

Default Constructor that takes no arguments and initializes default
parameters

*/
public ";

%javamethodmodifiers  rtk::simple::BinaryMorphologicalClosingImageFilter::Execute "/**
Image rtk::simple::BinaryMorphologicalClosingImageFilter::Execute(const Image &image1)

Execute the filter on the input image

*/
public ";

%javamethodmodifiers  rtk::simple::BinaryMorphologicalClosingImageFilter::Execute "/**
Image rtk::simple::BinaryMorphologicalClosingImageFilter::Execute(const Image &image1, double foregroundValue, bool safeBorder)

Execute the filter on the input image with the given parameters

*/
public ";

%javamethodmodifiers  rtk::simple::BinaryMorphologicalClosingImageFilter::GetForegroundValue "/**
double rtk::simple::BinaryMorphologicalClosingImageFilter::GetForegroundValue() const

Get the value in the image considered as \"foreground\". Defaults to
maximum value of InputPixelType.

*/
public ";

%javamethodmodifiers  rtk::simple::BinaryMorphologicalClosingImageFilter::GetKernelRadius "/**
std::vector<uint32_t> rtk::simple::BinaryMorphologicalClosingImageFilter::GetKernelRadius() const
*/
public ";

%javamethodmodifiers  rtk::simple::BinaryMorphologicalClosingImageFilter::GetKernelType "/**
KernelEnum rtk::simple::BinaryMorphologicalClosingImageFilter::GetKernelType() const
*/
public ";

%javamethodmodifiers  rtk::simple::BinaryMorphologicalClosingImageFilter::GetName "/**
std::string rtk::simple::BinaryMorphologicalClosingImageFilter::GetName() const

Name of this class

*/
public ";

%javamethodmodifiers  rtk::simple::BinaryMorphologicalClosingImageFilter::GetSafeBorder "/**
bool rtk::simple::BinaryMorphologicalClosingImageFilter::GetSafeBorder() const

A safe border is added to input image to avoid borders effects and
remove it once the closing is done

*/
public ";

%javamethodmodifiers  rtk::simple::BinaryMorphologicalClosingImageFilter::SafeBorderOff "/**
Self& rtk::simple::BinaryMorphologicalClosingImageFilter::SafeBorderOff()
*/
public ";

%javamethodmodifiers  rtk::simple::BinaryMorphologicalClosingImageFilter::SafeBorderOn "/**
Self& rtk::simple::BinaryMorphologicalClosingImageFilter::SafeBorderOn()

Set the value of SafeBorder to true or false respectfully.

*/
public ";

%javamethodmodifiers  rtk::simple::BinaryMorphologicalClosingImageFilter::SetForegroundValue "/**
Self& rtk::simple::BinaryMorphologicalClosingImageFilter::SetForegroundValue(double ForegroundValue)

Set the value in the image to consider as \"foreground\". Defaults to
maximum value of InputPixelType.

*/
public ";

%javamethodmodifiers  rtk::simple::BinaryMorphologicalClosingImageFilter::SetKernelRadius "/**
Self& rtk::simple::BinaryMorphologicalClosingImageFilter::SetKernelRadius(uint32_t r)

Kernel radius as a scale for isotropic structures

*/
public ";

%javamethodmodifiers  rtk::simple::BinaryMorphologicalClosingImageFilter::SetKernelRadius "/**
Self& rtk::simple::BinaryMorphologicalClosingImageFilter::SetKernelRadius(const std::vector< uint32_t > &r)

Set/Get the radius of the kernel structuring element as a vector.

If the dimension of the image is greater then the length of r, then
the radius will be padded. If it is less the r will be truncated.

*/
public ";

%javamethodmodifiers  rtk::simple::BinaryMorphologicalClosingImageFilter::SetKernelType "/**
Self& rtk::simple::BinaryMorphologicalClosingImageFilter::SetKernelType(KernelEnum t)

Set/Get the kernel or structuring elemenent used for the morphology

*/
public ";

%javamethodmodifiers  rtk::simple::BinaryMorphologicalClosingImageFilter::SetKernelType "/**
Self& rtk::simple::BinaryMorphologicalClosingImageFilter::SetKernelType(KernelType t)
*/
public ";

%javamethodmodifiers  rtk::simple::BinaryMorphologicalClosingImageFilter::SetSafeBorder "/**
Self& rtk::simple::BinaryMorphologicalClosingImageFilter::SetSafeBorder(bool SafeBorder)

A safe border is added to input image to avoid borders effects and
remove it once the closing is done

*/
public ";

%javamethodmodifiers  rtk::simple::BinaryMorphologicalClosingImageFilter::ToString "/**
std::string rtk::simple::BinaryMorphologicalClosingImageFilter::ToString() const

Print ourselves out

*/
public ";

%javamethodmodifiers  rtk::simple::BinaryMorphologicalClosingImageFilter::~BinaryMorphologicalClosingImageFilter "/**
rtk::simple::BinaryMorphologicalClosingImageFilter::~BinaryMorphologicalClosingImageFilter()

Destructor

*/
public ";


%typemap(javaimports) rtk::simple::BinaryMorphologicalOpeningImageFilter "/**

binary morphological opening of an image.


This filter removes small (i.e., smaller than the structuring element)
structures in the interior or at the boundaries of the image. The
morphological opening of an image \"f\" is defined as: Opening(f) =
Dilatation(Erosion(f)).

The structuring element is assumed to be composed of binary values
(zero or one). Only elements of the structuring element having values
> 0 are candidates for affecting the center pixel.

This code was contributed in the Insight Journal paper: \"Binary
morphological closing and opening image filters\" by Lehmann G. https://hdl.handle.net/1926/141 http://www.insight-journal.org/browse/publication/58


Gaetan Lehmann. Biologie du Developpement et de la Reproduction, INRA
de Jouy-en-Josas, France.

See:
 MorphologyImageFilter , GrayscaleDilateImageFilter , GrayscaleErodeImageFilter

 rtk::simple::BinaryMorphologicalOpening for the procedural interface

 itk::BinaryMorphologicalOpeningImageFilter for the Doxygen on the original ITK class.


C++ includes: srtkBinaryMorphologicalOpeningImageFilter.h
*/"

%javamethodmodifiers  rtk::simple::BinaryMorphologicalOpeningImageFilter::BinaryMorphologicalOpeningImageFilter "/**
rtk::simple::BinaryMorphologicalOpeningImageFilter::BinaryMorphologicalOpeningImageFilter()

Default Constructor that takes no arguments and initializes default
parameters

*/
public ";

%javamethodmodifiers  rtk::simple::BinaryMorphologicalOpeningImageFilter::Execute "/**
Image rtk::simple::BinaryMorphologicalOpeningImageFilter::Execute(const Image &image1)

Execute the filter on the input image

*/
public ";

%javamethodmodifiers  rtk::simple::BinaryMorphologicalOpeningImageFilter::Execute "/**
Image rtk::simple::BinaryMorphologicalOpeningImageFilter::Execute(const Image &image1, double backgroundValue, double foregroundValue)

Execute the filter on the input image with the given parameters

*/
public ";

%javamethodmodifiers  rtk::simple::BinaryMorphologicalOpeningImageFilter::GetBackgroundValue "/**
double rtk::simple::BinaryMorphologicalOpeningImageFilter::GetBackgroundValue() const

Set the value in eroded part of the image. Defaults to zero

*/
public ";

%javamethodmodifiers  rtk::simple::BinaryMorphologicalOpeningImageFilter::GetForegroundValue "/**
double rtk::simple::BinaryMorphologicalOpeningImageFilter::GetForegroundValue() const

Get the value in the image considered as \"foreground\". Defaults to
maximum value of PixelType.

*/
public ";

%javamethodmodifiers  rtk::simple::BinaryMorphologicalOpeningImageFilter::GetKernelRadius "/**
std::vector<uint32_t> rtk::simple::BinaryMorphologicalOpeningImageFilter::GetKernelRadius() const
*/
public ";

%javamethodmodifiers  rtk::simple::BinaryMorphologicalOpeningImageFilter::GetKernelType "/**
KernelEnum rtk::simple::BinaryMorphologicalOpeningImageFilter::GetKernelType() const
*/
public ";

%javamethodmodifiers  rtk::simple::BinaryMorphologicalOpeningImageFilter::GetName "/**
std::string rtk::simple::BinaryMorphologicalOpeningImageFilter::GetName() const

Name of this class

*/
public ";

%javamethodmodifiers  rtk::simple::BinaryMorphologicalOpeningImageFilter::SetBackgroundValue "/**
Self& rtk::simple::BinaryMorphologicalOpeningImageFilter::SetBackgroundValue(double BackgroundValue)

Set the value in eroded part of the image. Defaults to zero

*/
public ";

%javamethodmodifiers  rtk::simple::BinaryMorphologicalOpeningImageFilter::SetForegroundValue "/**
Self& rtk::simple::BinaryMorphologicalOpeningImageFilter::SetForegroundValue(double ForegroundValue)

Set the value in the image to consider as \"foreground\". Defaults to
maximum value of PixelType.

*/
public ";

%javamethodmodifiers  rtk::simple::BinaryMorphologicalOpeningImageFilter::SetKernelRadius "/**
Self& rtk::simple::BinaryMorphologicalOpeningImageFilter::SetKernelRadius(uint32_t r)

Kernel radius as a scale for isotropic structures

*/
public ";

%javamethodmodifiers  rtk::simple::BinaryMorphologicalOpeningImageFilter::SetKernelRadius "/**
Self& rtk::simple::BinaryMorphologicalOpeningImageFilter::SetKernelRadius(const std::vector< uint32_t > &r)

Set/Get the radius of the kernel structuring element as a vector.

If the dimension of the image is greater then the length of r, then
the radius will be padded. If it is less the r will be truncated.

*/
public ";

%javamethodmodifiers  rtk::simple::BinaryMorphologicalOpeningImageFilter::SetKernelType "/**
Self& rtk::simple::BinaryMorphologicalOpeningImageFilter::SetKernelType(KernelEnum t)

Set/Get the kernel or structuring elemenent used for the morphology

*/
public ";

%javamethodmodifiers  rtk::simple::BinaryMorphologicalOpeningImageFilter::SetKernelType "/**
Self& rtk::simple::BinaryMorphologicalOpeningImageFilter::SetKernelType(KernelType t)
*/
public ";

%javamethodmodifiers  rtk::simple::BinaryMorphologicalOpeningImageFilter::ToString "/**
std::string rtk::simple::BinaryMorphologicalOpeningImageFilter::ToString() const

Print ourselves out

*/
public ";

%javamethodmodifiers  rtk::simple::BinaryMorphologicalOpeningImageFilter::~BinaryMorphologicalOpeningImageFilter "/**
rtk::simple::BinaryMorphologicalOpeningImageFilter::~BinaryMorphologicalOpeningImageFilter()

Destructor

*/
public ";


%typemap(javaimports) rtk::simple::BinaryNotImageFilter "/**

Implements the BinaryNot logical operator pixel-wise between two
images.


This class is parametrized over the types of the two input images and
the type of the output image. Numeric conversions (castings) are done
by the C++ defaults.

The total operation over one pixel will be

output_pixel = static_cast<PixelType>( input1_pixel != input2_pixel )

Where \"!=\" is the equality operator in C++.


Gaetan Lehmann. Biologie du Developpement et de la Reproduction, INRA
de Jouy-en-Josas, France.
 This implementation was taken from the Insight Journal paper: https://hdl.handle.net/1926/584 or http://www.insight-journal.org/browse/publication/176

Wiki Examples:

All Examples

Invert an image using the Binary Not operation
See:
 rtk::simple::BinaryNot for the procedural interface

 itk::BinaryNotImageFilter for the Doxygen on the original ITK class.



C++ includes: srtkBinaryNotImageFilter.h
*/"

%javamethodmodifiers  rtk::simple::BinaryNotImageFilter::BinaryNotImageFilter "/**
rtk::simple::BinaryNotImageFilter::BinaryNotImageFilter()

Default Constructor that takes no arguments and initializes default
parameters

*/
public ";

%javamethodmodifiers  rtk::simple::BinaryNotImageFilter::Execute "/**
Image rtk::simple::BinaryNotImageFilter::Execute(const Image &image1)

Execute the filter on the input image

*/
public ";

%javamethodmodifiers  rtk::simple::BinaryNotImageFilter::Execute "/**
Image rtk::simple::BinaryNotImageFilter::Execute(const Image &image1, double foregroundValue, double backgroundValue)

Execute the filter on the input image with the given parameters

*/
public ";

%javamethodmodifiers  rtk::simple::BinaryNotImageFilter::GetBackgroundValue "/**
double rtk::simple::BinaryNotImageFilter::GetBackgroundValue() const

Get the value used as \"background\". Defaults to NumericTraits<PixelType>::NonpositiveMin() .

*/
public ";

%javamethodmodifiers  rtk::simple::BinaryNotImageFilter::GetForegroundValue "/**
double rtk::simple::BinaryNotImageFilter::GetForegroundValue() const

Set/Get the value in the image considered as \"foreground\". Defaults
to maximum value of PixelType.

*/
public ";

%javamethodmodifiers  rtk::simple::BinaryNotImageFilter::GetName "/**
std::string rtk::simple::BinaryNotImageFilter::GetName() const

Name of this class

*/
public ";

%javamethodmodifiers  rtk::simple::BinaryNotImageFilter::SetBackgroundValue "/**
Self& rtk::simple::BinaryNotImageFilter::SetBackgroundValue(double BackgroundValue)

Set the value used as \"background\". Defaults to NumericTraits<PixelType>::NonpositiveMin() .

*/
public ";

%javamethodmodifiers  rtk::simple::BinaryNotImageFilter::SetForegroundValue "/**
Self& rtk::simple::BinaryNotImageFilter::SetForegroundValue(double ForegroundValue)

Set/Get the value in the image considered as \"foreground\". Defaults
to maximum value of PixelType.

*/
public ";

%javamethodmodifiers  rtk::simple::BinaryNotImageFilter::ToString "/**
std::string rtk::simple::BinaryNotImageFilter::ToString() const

Print ourselves out

*/
public ";

%javamethodmodifiers  rtk::simple::BinaryNotImageFilter::~BinaryNotImageFilter "/**
rtk::simple::BinaryNotImageFilter::~BinaryNotImageFilter()

Destructor

*/
public ";


%typemap(javaimports) rtk::simple::BinaryOpeningByReconstructionImageFilter "/**

binary morphological closing of an image.


This filter removes small (i.e., smaller than the structuring element)
objects in the image. It is defined as: Opening(f) =
ReconstructionByDilatation(Erosion(f)).

The structuring element is assumed to be composed of binary values
(zero or one). Only elements of the structuring element having values
> 0 are candidates for affecting the center pixel.


Gaetan Lehmann. Biologie du Developpement et de la Reproduction, INRA
de Jouy-en-Josas, France.
 This implementation was taken from the Insight Journal paper: https://hdl.handle.net/1926/584 or http://www.insight-journal.org/browse/publication/176


See:
 MorphologyImageFilter , OpeningByReconstructionImageFilter , BinaryClosingByReconstructionImageFilter

 rtk::simple::BinaryOpeningByReconstruction for the procedural interface

 itk::BinaryOpeningByReconstructionImageFilter for the Doxygen on the original ITK class.


C++ includes: srtkBinaryOpeningByReconstructionImageFilter.h
*/"

%javamethodmodifiers  rtk::simple::BinaryOpeningByReconstructionImageFilter::BinaryOpeningByReconstructionImageFilter "/**
rtk::simple::BinaryOpeningByReconstructionImageFilter::BinaryOpeningByReconstructionImageFilter()

Default Constructor that takes no arguments and initializes default
parameters

*/
public ";

%javamethodmodifiers  rtk::simple::BinaryOpeningByReconstructionImageFilter::Execute "/**
Image rtk::simple::BinaryOpeningByReconstructionImageFilter::Execute(const Image &image1)

Execute the filter on the input image

*/
public ";

%javamethodmodifiers  rtk::simple::BinaryOpeningByReconstructionImageFilter::Execute "/**
Image rtk::simple::BinaryOpeningByReconstructionImageFilter::Execute(const Image &image1, double foregroundValue, double backgroundValue,
bool fullyConnected)

Execute the filter on the input image with the given parameters

*/
public ";

%javamethodmodifiers  rtk::simple::BinaryOpeningByReconstructionImageFilter::FullyConnectedOff "/**
Self& rtk::simple::BinaryOpeningByReconstructionImageFilter::FullyConnectedOff()
*/
public ";

%javamethodmodifiers  rtk::simple::BinaryOpeningByReconstructionImageFilter::FullyConnectedOn "/**
Self& rtk::simple::BinaryOpeningByReconstructionImageFilter::FullyConnectedOn()

Set the value of FullyConnected to true or false respectfully.

*/
public ";

%javamethodmodifiers  rtk::simple::BinaryOpeningByReconstructionImageFilter::GetBackgroundValue "/**
double rtk::simple::BinaryOpeningByReconstructionImageFilter::GetBackgroundValue() const

Set the value in eroded part of the image. Defaults to zero

*/
public ";

%javamethodmodifiers  rtk::simple::BinaryOpeningByReconstructionImageFilter::GetForegroundValue "/**
double rtk::simple::BinaryOpeningByReconstructionImageFilter::GetForegroundValue() const

Get the value in the image considered as \"foreground\". Defaults to
maximum value of PixelType.

*/
public ";

%javamethodmodifiers  rtk::simple::BinaryOpeningByReconstructionImageFilter::GetFullyConnected "/**
bool rtk::simple::BinaryOpeningByReconstructionImageFilter::GetFullyConnected() const

Set/Get whether the connected components are defined strictly by face
connectivity or by face+edge+vertex connectivity. Default is
FullyConnectedOff. For objects that are 1 pixel wide, use
FullyConnectedOn.

*/
public ";

%javamethodmodifiers  rtk::simple::BinaryOpeningByReconstructionImageFilter::GetKernelRadius "/**
std::vector<uint32_t> rtk::simple::BinaryOpeningByReconstructionImageFilter::GetKernelRadius() const
*/
public ";

%javamethodmodifiers  rtk::simple::BinaryOpeningByReconstructionImageFilter::GetKernelType "/**
KernelEnum rtk::simple::BinaryOpeningByReconstructionImageFilter::GetKernelType() const
*/
public ";

%javamethodmodifiers  rtk::simple::BinaryOpeningByReconstructionImageFilter::GetName "/**
std::string rtk::simple::BinaryOpeningByReconstructionImageFilter::GetName() const

Name of this class

*/
public ";

%javamethodmodifiers  rtk::simple::BinaryOpeningByReconstructionImageFilter::SetBackgroundValue "/**
Self& rtk::simple::BinaryOpeningByReconstructionImageFilter::SetBackgroundValue(double BackgroundValue)

Set the value in eroded part of the image. Defaults to zero

*/
public ";

%javamethodmodifiers  rtk::simple::BinaryOpeningByReconstructionImageFilter::SetForegroundValue "/**
Self& rtk::simple::BinaryOpeningByReconstructionImageFilter::SetForegroundValue(double ForegroundValue)

Set the value in the image to consider as \"foreground\". Defaults to
maximum value of PixelType.

*/
public ";

%javamethodmodifiers  rtk::simple::BinaryOpeningByReconstructionImageFilter::SetFullyConnected "/**
Self& rtk::simple::BinaryOpeningByReconstructionImageFilter::SetFullyConnected(bool FullyConnected)

Set/Get whether the connected components are defined strictly by face
connectivity or by face+edge+vertex connectivity. Default is
FullyConnectedOff. For objects that are 1 pixel wide, use
FullyConnectedOn.

*/
public ";

%javamethodmodifiers  rtk::simple::BinaryOpeningByReconstructionImageFilter::SetKernelRadius "/**
Self& rtk::simple::BinaryOpeningByReconstructionImageFilter::SetKernelRadius(uint32_t r)

Kernel radius as a scale for isotropic structures

*/
public ";

%javamethodmodifiers  rtk::simple::BinaryOpeningByReconstructionImageFilter::SetKernelRadius "/**
Self& rtk::simple::BinaryOpeningByReconstructionImageFilter::SetKernelRadius(const std::vector< uint32_t > &r)

Set/Get the radius of the kernel structuring element as a vector.

If the dimension of the image is greater then the length of r, then
the radius will be padded. If it is less the r will be truncated.

*/
public ";

%javamethodmodifiers  rtk::simple::BinaryOpeningByReconstructionImageFilter::SetKernelType "/**
Self& rtk::simple::BinaryOpeningByReconstructionImageFilter::SetKernelType(KernelEnum t)

Set/Get the kernel or structuring elemenent used for the morphology

*/
public ";

%javamethodmodifiers  rtk::simple::BinaryOpeningByReconstructionImageFilter::SetKernelType "/**
Self& rtk::simple::BinaryOpeningByReconstructionImageFilter::SetKernelType(KernelType t)
*/
public ";

%javamethodmodifiers  rtk::simple::BinaryOpeningByReconstructionImageFilter::ToString "/**
std::string rtk::simple::BinaryOpeningByReconstructionImageFilter::ToString() const

Print ourselves out

*/
public ";

%javamethodmodifiers  rtk::simple::BinaryOpeningByReconstructionImageFilter::~BinaryOpeningByReconstructionImageFilter "/**
rtk::simple::BinaryOpeningByReconstructionImageFilter::~BinaryOpeningByReconstructionImageFilter()

Destructor

*/
public ";


%typemap(javaimports) rtk::simple::BinaryProjectionImageFilter "/**

Binary projection.


This class was contributed to the Insight Journal by Gaetan Lehmann.
The original paper can be found at https://hdl.handle.net/1926/164


Gaetan Lehmann. Biologie du Developpement et de la Reproduction, INRA
de Jouy-en-Josas, France.

See:
 ProjectionImageFilter


 MedianProjectionImageFilter


 MeanProjectionImageFilter


 MeanProjectionImageFilter


 MaximumProjectionImageFilter


 MinimumProjectionImageFilter


 StandardDeviationProjectionImageFilter


 SumProjectionImageFilter

 rtk::simple::BinaryProjection for the procedural interface

 itk::BinaryProjectionImageFilter for the Doxygen on the original ITK class.


C++ includes: srtkBinaryProjectionImageFilter.h
*/"

%javamethodmodifiers  rtk::simple::BinaryProjectionImageFilter::BinaryProjectionImageFilter "/**
rtk::simple::BinaryProjectionImageFilter::BinaryProjectionImageFilter()

Default Constructor that takes no arguments and initializes default
parameters

*/
public ";

%javamethodmodifiers  rtk::simple::BinaryProjectionImageFilter::Execute "/**
Image rtk::simple::BinaryProjectionImageFilter::Execute(const Image &image1)

Execute the filter on the input image

*/
public ";

%javamethodmodifiers  rtk::simple::BinaryProjectionImageFilter::Execute "/**
Image rtk::simple::BinaryProjectionImageFilter::Execute(const Image &image1, unsigned int projectionDimension, double
foregroundValue, double backgroundValue)

Execute the filter on the input image with the given parameters

*/
public ";

%javamethodmodifiers  rtk::simple::BinaryProjectionImageFilter::GetBackgroundValue "/**
double rtk::simple::BinaryProjectionImageFilter::GetBackgroundValue() const

Get the value used as \"background\". Any pixel value which is not
DilateValue is considered background. BackgroundValue is used for
defining boundary conditions. Defaults to NumericTraits<PixelType>::NonpositiveMin() .

*/
public ";

%javamethodmodifiers  rtk::simple::BinaryProjectionImageFilter::GetForegroundValue "/**
double rtk::simple::BinaryProjectionImageFilter::GetForegroundValue() const

Get the value in the image considered as \"foreground\". Defaults to
maximum value of PixelType.

*/
public ";

%javamethodmodifiers  rtk::simple::BinaryProjectionImageFilter::GetName "/**
std::string rtk::simple::BinaryProjectionImageFilter::GetName() const

Name of this class

*/
public ";

%javamethodmodifiers  rtk::simple::BinaryProjectionImageFilter::GetProjectionDimension "/**
unsigned int rtk::simple::BinaryProjectionImageFilter::GetProjectionDimension() const
*/
public ";

%javamethodmodifiers  rtk::simple::BinaryProjectionImageFilter::SetBackgroundValue "/**
Self& rtk::simple::BinaryProjectionImageFilter::SetBackgroundValue(double BackgroundValue)

Set the value used as \"background\". Any pixel value which is not
DilateValue is considered background. BackgroundValue is used for
defining boundary conditions. Defaults to NumericTraits<PixelType>::NonpositiveMin() .

*/
public ";

%javamethodmodifiers  rtk::simple::BinaryProjectionImageFilter::SetForegroundValue "/**
Self& rtk::simple::BinaryProjectionImageFilter::SetForegroundValue(double ForegroundValue)

Set the value in the image to consider as \"foreground\". Defaults to
maximum value of PixelType. Subclasses may alias this to DilateValue
or ErodeValue.

*/
public ";

%javamethodmodifiers  rtk::simple::BinaryProjectionImageFilter::SetProjectionDimension "/**
Self& rtk::simple::BinaryProjectionImageFilter::SetProjectionDimension(unsigned int ProjectionDimension)
*/
public ";

%javamethodmodifiers  rtk::simple::BinaryProjectionImageFilter::ToString "/**
std::string rtk::simple::BinaryProjectionImageFilter::ToString() const

Print ourselves out

*/
public ";

%javamethodmodifiers  rtk::simple::BinaryProjectionImageFilter::~BinaryProjectionImageFilter "/**
rtk::simple::BinaryProjectionImageFilter::~BinaryProjectionImageFilter()

Destructor

*/
public ";


%typemap(javaimports) rtk::simple::BinaryReconstructionByDilationImageFilter "/**

binary reconstruction by dilation of an image


Reconstruction by dilation operates on a \"marker\" image and a
\"mask\" image, and is defined as the dilation of the marker image
with respect to the mask image iterated until stability.

Geodesic morphology is described in Chapter 6.2 of Pierre Soille's
book \"Morphological Image Analysis: Principles and Applications\",
Second Edition, Springer, 2003.


Gaetan Lehmann. Biologie du Developpement et de la Reproduction, INRA
de Jouy-en-Josas, France.
 This implementation was taken from the Insight Journal paper: https://hdl.handle.net/1926/584 or http://www.insight-journal.org/browse/publication/176


See:
 MorphologyImageFilter , ReconstructionByDilationImageFilter , BinaryReconstructionByErosionImageFilter

 rtk::simple::BinaryReconstructionByDilation for the procedural interface

 itk::BinaryReconstructionByDilationImageFilter for the Doxygen on the original ITK class.


C++ includes: srtkBinaryReconstructionByDilationImageFilter.h
*/"

%javamethodmodifiers  rtk::simple::BinaryReconstructionByDilationImageFilter::BinaryReconstructionByDilationImageFilter "/**
rtk::simple::BinaryReconstructionByDilationImageFilter::BinaryReconstructionByDilationImageFilter()

Default Constructor that takes no arguments and initializes default
parameters

*/
public ";

%javamethodmodifiers  rtk::simple::BinaryReconstructionByDilationImageFilter::Execute "/**
Image rtk::simple::BinaryReconstructionByDilationImageFilter::Execute(const Image &image1, const Image &image2)

Execute the filter on the input images

*/
public ";

%javamethodmodifiers  rtk::simple::BinaryReconstructionByDilationImageFilter::Execute "/**
Image rtk::simple::BinaryReconstructionByDilationImageFilter::Execute(const Image &image1, const Image &image2, double backgroundValue,
double foregroundValue, bool fullyConnected)

Execute the filter on the input images with the given parameters

*/
public ";

%javamethodmodifiers  rtk::simple::BinaryReconstructionByDilationImageFilter::FullyConnectedOff "/**
Self& rtk::simple::BinaryReconstructionByDilationImageFilter::FullyConnectedOff()
*/
public ";

%javamethodmodifiers  rtk::simple::BinaryReconstructionByDilationImageFilter::FullyConnectedOn "/**
Self& rtk::simple::BinaryReconstructionByDilationImageFilter::FullyConnectedOn()

Set the value of FullyConnected to true or false respectfully.

*/
public ";

%javamethodmodifiers  rtk::simple::BinaryReconstructionByDilationImageFilter::GetBackgroundValue "/**
double rtk::simple::BinaryReconstructionByDilationImageFilter::GetBackgroundValue() const

Set/Get the value used as \"background\" in the output image. Defaults
to NumericTraits<PixelType>::NonpositiveMin() .

*/
public ";

%javamethodmodifiers  rtk::simple::BinaryReconstructionByDilationImageFilter::GetForegroundValue "/**
double rtk::simple::BinaryReconstructionByDilationImageFilter::GetForegroundValue() const

Set/Get the value used as \"foreground\" in the output image. Defaults
to NumericTraits<PixelType>::max() .

*/
public ";

%javamethodmodifiers  rtk::simple::BinaryReconstructionByDilationImageFilter::GetFullyConnected "/**
bool rtk::simple::BinaryReconstructionByDilationImageFilter::GetFullyConnected() const

Set/Get whether the connected components are defined strictly by face
connectivity or by face+edge+vertex connectivity. Default is
FullyConnectedOff. For objects that are 1 pixel wide, use
FullyConnectedOn.

*/
public ";

%javamethodmodifiers  rtk::simple::BinaryReconstructionByDilationImageFilter::GetName "/**
std::string rtk::simple::BinaryReconstructionByDilationImageFilter::GetName() const

Name of this class

*/
public ";

%javamethodmodifiers  rtk::simple::BinaryReconstructionByDilationImageFilter::SetBackgroundValue "/**
Self& rtk::simple::BinaryReconstructionByDilationImageFilter::SetBackgroundValue(double BackgroundValue)

Set/Get the value used as \"background\" in the output image. Defaults
to NumericTraits<PixelType>::NonpositiveMin() .

*/
public ";

%javamethodmodifiers  rtk::simple::BinaryReconstructionByDilationImageFilter::SetForegroundValue "/**
Self& rtk::simple::BinaryReconstructionByDilationImageFilter::SetForegroundValue(double ForegroundValue)

Set/Get the value used as \"foreground\" in the output image. Defaults
to NumericTraits<PixelType>::max() .

*/
public ";

%javamethodmodifiers  rtk::simple::BinaryReconstructionByDilationImageFilter::SetFullyConnected "/**
Self& rtk::simple::BinaryReconstructionByDilationImageFilter::SetFullyConnected(bool FullyConnected)

Set/Get whether the connected components are defined strictly by face
connectivity or by face+edge+vertex connectivity. Default is
FullyConnectedOff. For objects that are 1 pixel wide, use
FullyConnectedOn.

*/
public ";

%javamethodmodifiers  rtk::simple::BinaryReconstructionByDilationImageFilter::ToString "/**
std::string rtk::simple::BinaryReconstructionByDilationImageFilter::ToString() const

Print ourselves out

*/
public ";

%javamethodmodifiers  rtk::simple::BinaryReconstructionByDilationImageFilter::~BinaryReconstructionByDilationImageFilter "/**
rtk::simple::BinaryReconstructionByDilationImageFilter::~BinaryReconstructionByDilationImageFilter()

Destructor

*/
public ";


%typemap(javaimports) rtk::simple::BinaryReconstructionByErosionImageFilter "/**

binary reconstruction by erosion of an image


Reconstruction by erosion operates on a \"marker\" image and a
\"mask\" image, and is defined as the erosion of the marker image with
respect to the mask image iterated until stability.

Geodesic morphology is described in Chapter 6.2 of Pierre Soille's
book \"Morphological Image Analysis: Principles and Applications\",
Second Edition, Springer, 2003.


Gaetan Lehmann. Biologie du Developpement et de la Reproduction, INRA
de Jouy-en-Josas, France.
 This implementation was taken from the Insight Journal paper: https://hdl.handle.net/1926/584 or http://www.insight-journal.org/browse/publication/176


See:
 MorphologyImageFilter , ReconstructionByErosionImageFilter , BinaryReconstructionByDilationImageFilter

 rtk::simple::BinaryReconstructionByErosion for the procedural interface

 itk::BinaryReconstructionByErosionImageFilter for the Doxygen on the original ITK class.


C++ includes: srtkBinaryReconstructionByErosionImageFilter.h
*/"

%javamethodmodifiers  rtk::simple::BinaryReconstructionByErosionImageFilter::BinaryReconstructionByErosionImageFilter "/**
rtk::simple::BinaryReconstructionByErosionImageFilter::BinaryReconstructionByErosionImageFilter()

Default Constructor that takes no arguments and initializes default
parameters

*/
public ";

%javamethodmodifiers  rtk::simple::BinaryReconstructionByErosionImageFilter::Execute "/**
Image rtk::simple::BinaryReconstructionByErosionImageFilter::Execute(const Image &image1, const Image &image2)

Execute the filter on the input images

*/
public ";

%javamethodmodifiers  rtk::simple::BinaryReconstructionByErosionImageFilter::Execute "/**
Image rtk::simple::BinaryReconstructionByErosionImageFilter::Execute(const Image &image1, const Image &image2, double backgroundValue,
double foregroundValue, bool fullyConnected)

Execute the filter on the input images with the given parameters

*/
public ";

%javamethodmodifiers  rtk::simple::BinaryReconstructionByErosionImageFilter::FullyConnectedOff "/**
Self& rtk::simple::BinaryReconstructionByErosionImageFilter::FullyConnectedOff()
*/
public ";

%javamethodmodifiers  rtk::simple::BinaryReconstructionByErosionImageFilter::FullyConnectedOn "/**
Self& rtk::simple::BinaryReconstructionByErosionImageFilter::FullyConnectedOn()

Set the value of FullyConnected to true or false respectfully.

*/
public ";

%javamethodmodifiers  rtk::simple::BinaryReconstructionByErosionImageFilter::GetBackgroundValue "/**
double rtk::simple::BinaryReconstructionByErosionImageFilter::GetBackgroundValue() const

Set/Get the value used as \"background\" in the output image. Defaults
to NumericTraits<PixelType>::NonpositiveMin() .

*/
public ";

%javamethodmodifiers  rtk::simple::BinaryReconstructionByErosionImageFilter::GetForegroundValue "/**
double rtk::simple::BinaryReconstructionByErosionImageFilter::GetForegroundValue() const

Set/Get the value used as \"foreground\" in the output image. Defaults
to NumericTraits<PixelType>::max() .

*/
public ";

%javamethodmodifiers  rtk::simple::BinaryReconstructionByErosionImageFilter::GetFullyConnected "/**
bool rtk::simple::BinaryReconstructionByErosionImageFilter::GetFullyConnected() const

Set/Get whether the connected components are defined strictly by face
connectivity or by face+edge+vertex connectivity. Default is
FullyConnectedOff. For objects that are 1 pixel wide, use
FullyConnectedOn.

*/
public ";

%javamethodmodifiers  rtk::simple::BinaryReconstructionByErosionImageFilter::GetName "/**
std::string rtk::simple::BinaryReconstructionByErosionImageFilter::GetName() const

Name of this class

*/
public ";

%javamethodmodifiers  rtk::simple::BinaryReconstructionByErosionImageFilter::SetBackgroundValue "/**
Self& rtk::simple::BinaryReconstructionByErosionImageFilter::SetBackgroundValue(double BackgroundValue)

Set/Get the value used as \"background\" in the output image. Defaults
to NumericTraits<PixelType>::NonpositiveMin() .

*/
public ";

%javamethodmodifiers  rtk::simple::BinaryReconstructionByErosionImageFilter::SetForegroundValue "/**
Self& rtk::simple::BinaryReconstructionByErosionImageFilter::SetForegroundValue(double ForegroundValue)

Set/Get the value used as \"foreground\" in the output image. Defaults
to NumericTraits<PixelType>::max() .

*/
public ";

%javamethodmodifiers  rtk::simple::BinaryReconstructionByErosionImageFilter::SetFullyConnected "/**
Self& rtk::simple::BinaryReconstructionByErosionImageFilter::SetFullyConnected(bool FullyConnected)

Set/Get whether the connected components are defined strictly by face
connectivity or by face+edge+vertex connectivity. Default is
FullyConnectedOff. For objects that are 1 pixel wide, use
FullyConnectedOn.

*/
public ";

%javamethodmodifiers  rtk::simple::BinaryReconstructionByErosionImageFilter::ToString "/**
std::string rtk::simple::BinaryReconstructionByErosionImageFilter::ToString() const

Print ourselves out

*/
public ";

%javamethodmodifiers  rtk::simple::BinaryReconstructionByErosionImageFilter::~BinaryReconstructionByErosionImageFilter "/**
rtk::simple::BinaryReconstructionByErosionImageFilter::~BinaryReconstructionByErosionImageFilter()

Destructor

*/
public ";


%typemap(javaimports) rtk::simple::BinaryThinningImageFilter "/**

This filter computes one-pixel-wide edges of the input image.


This class is parametrized over the type of the input image and the
type of the output image.

The input is assumed to be a binary image. If the foreground pixels of
the input image do not have a value of 1, they are rescaled to 1
internally to simplify the computation.

The filter will produce a skeleton of the object. The output
background values are 0, and the foreground values are 1.

This filter is a sequential thinning algorithm and known to be
computational time dependable on the image size. The algorithm
corresponds with the 2D implementation described in:

Rafael C. Gonzales and Richard E. Woods. Digital Image Processing. Addison Wesley, 491-494, (1993).

To do: Make this filter ND.


See:
 MorphologyImageFilter
Wiki Examples:

All Examples

Skeletonize/thin an image
See:
 rtk::simple::BinaryThinning for the procedural interface

 itk::BinaryThinningImageFilter for the Doxygen on the original ITK class.



C++ includes: srtkBinaryThinningImageFilter.h
*/"

%javamethodmodifiers  rtk::simple::BinaryThinningImageFilter::BinaryThinningImageFilter "/**
rtk::simple::BinaryThinningImageFilter::BinaryThinningImageFilter()

Default Constructor that takes no arguments and initializes default
parameters

*/
public ";

%javamethodmodifiers  rtk::simple::BinaryThinningImageFilter::Execute "/**
Image rtk::simple::BinaryThinningImageFilter::Execute(const Image &image1)

Execute the filter on the input image

*/
public ";

%javamethodmodifiers  rtk::simple::BinaryThinningImageFilter::GetName "/**
std::string rtk::simple::BinaryThinningImageFilter::GetName() const

Name of this class

*/
public ";

%javamethodmodifiers  rtk::simple::BinaryThinningImageFilter::ToString "/**
std::string rtk::simple::BinaryThinningImageFilter::ToString() const

Print ourselves out

*/
public ";

%javamethodmodifiers  rtk::simple::BinaryThinningImageFilter::~BinaryThinningImageFilter "/**
rtk::simple::BinaryThinningImageFilter::~BinaryThinningImageFilter()

Destructor

*/
public ";


%typemap(javaimports) rtk::simple::BinaryThresholdImageFilter "/**

Binarize an input image by thresholding.


This filter produces an output image whose pixels are either one of
two values ( OutsideValue or InsideValue ), depending on whether the
corresponding input image pixels lie between the two thresholds (
LowerThreshold and UpperThreshold ). Values equal to either threshold
is considered to be between the thresholds.

More precisely \\\\[ Output(x_i) = \\\\begin{cases} InsideValue & \\\\text{if
\\\\f$LowerThreshold \\\\leq x_i \\\\leq UpperThreshold\\\\f$}
\\\\\\\\ OutsideValue & \\\\text{otherwise} \\\\end{cases} \\\\]

This filter is templated over the input image type and the output
image type.

The filter expect both images to have the same number of dimensions.

The default values for LowerThreshold and UpperThreshold are:
LowerThreshold = NumericTraits<TInput>::NonpositiveMin() ; UpperThreshold = NumericTraits<TInput>::max() ; Therefore, generally only one of these needs to be set, depending
on whether the user wants to threshold above or below the desired
threshold.

Wiki Examples:

All Examples

Threshold an image
See:
 rtk::simple::BinaryThreshold for the procedural interface

 itk::BinaryThresholdImageFilter for the Doxygen on the original ITK class.



C++ includes: srtkBinaryThresholdImageFilter.h
*/"

%javamethodmodifiers  rtk::simple::BinaryThresholdImageFilter::BinaryThresholdImageFilter "/**
rtk::simple::BinaryThresholdImageFilter::BinaryThresholdImageFilter()

Default Constructor that takes no arguments and initializes default
parameters

*/
public ";

%javamethodmodifiers  rtk::simple::BinaryThresholdImageFilter::Execute "/**
Image rtk::simple::BinaryThresholdImageFilter::Execute(const Image &image1)

Execute the filter on the input image

*/
public ";

%javamethodmodifiers  rtk::simple::BinaryThresholdImageFilter::Execute "/**
Image rtk::simple::BinaryThresholdImageFilter::Execute(const Image &image1, double lowerThreshold, double upperThreshold,
uint8_t insideValue, uint8_t outsideValue)

Execute the filter on the input image with the given parameters

*/
public ";

%javamethodmodifiers  rtk::simple::BinaryThresholdImageFilter::GetInsideValue "/**
uint8_t rtk::simple::BinaryThresholdImageFilter::GetInsideValue() const

Get the \"inside\" pixel value.

*/
public ";

%javamethodmodifiers  rtk::simple::BinaryThresholdImageFilter::GetLowerThreshold "/**
double rtk::simple::BinaryThresholdImageFilter::GetLowerThreshold() const
*/
public ";

%javamethodmodifiers  rtk::simple::BinaryThresholdImageFilter::GetName "/**
std::string rtk::simple::BinaryThresholdImageFilter::GetName() const

Name of this class

*/
public ";

%javamethodmodifiers  rtk::simple::BinaryThresholdImageFilter::GetOutsideValue "/**
uint8_t rtk::simple::BinaryThresholdImageFilter::GetOutsideValue() const

Get the \"outside\" pixel value.

*/
public ";

%javamethodmodifiers  rtk::simple::BinaryThresholdImageFilter::GetUpperThreshold "/**
double rtk::simple::BinaryThresholdImageFilter::GetUpperThreshold() const

Get the threshold values.

*/
public ";

%javamethodmodifiers  rtk::simple::BinaryThresholdImageFilter::SetInsideValue "/**
Self& rtk::simple::BinaryThresholdImageFilter::SetInsideValue(uint8_t InsideValue)

Set the \"inside\" pixel value. The default value NumericTraits<OutputPixelType>::max()

*/
public ";

%javamethodmodifiers  rtk::simple::BinaryThresholdImageFilter::SetLowerThreshold "/**
Self& rtk::simple::BinaryThresholdImageFilter::SetLowerThreshold(double LowerThreshold)
*/
public ";

%javamethodmodifiers  rtk::simple::BinaryThresholdImageFilter::SetOutsideValue "/**
Self& rtk::simple::BinaryThresholdImageFilter::SetOutsideValue(uint8_t OutsideValue)

Set the \"outside\" pixel value. The default value NumericTraits<OutputPixelType>::ZeroValue() .

*/
public ";

%javamethodmodifiers  rtk::simple::BinaryThresholdImageFilter::SetUpperThreshold "/**
Self& rtk::simple::BinaryThresholdImageFilter::SetUpperThreshold(double UpperThreshold)

Set the thresholds. The default lower threshold is NumericTraits<InputPixelType>::NonpositiveMin() . The default upper threshold is NumericTraits<InputPixelType>::max . An execption is thrown if the lower threshold is greater than the
upper threshold.

*/
public ";

%javamethodmodifiers  rtk::simple::BinaryThresholdImageFilter::ToString "/**
std::string rtk::simple::BinaryThresholdImageFilter::ToString() const

Print ourselves out

*/
public ";

%javamethodmodifiers  rtk::simple::BinaryThresholdImageFilter::~BinaryThresholdImageFilter "/**
rtk::simple::BinaryThresholdImageFilter::~BinaryThresholdImageFilter()

Destructor

*/
public ";


%typemap(javaimports) rtk::simple::BinaryThresholdProjectionImageFilter "/**

BinaryThreshold projection.


This class was contributed to the Insight Journal by Gaetan Lehmann.
the original paper can be found at https://hdl.handle.net/1926/164


Gaetan Lehmann. Biologie du Developpement et de la Reproduction, INRA
de Jouy-en-Josas, France.

See:
 ProjectionImageFilter


 MedianProjectionImageFilter


 MeanProjectionImageFilter


 MeanProjectionImageFilter


 MaximumProjectionImageFilter


 MinimumProjectionImageFilter


 StandardDeviationProjectionImageFilter


 SumProjectionImageFilter

 rtk::simple::BinaryThresholdProjection for the procedural interface

 itk::BinaryThresholdProjectionImageFilter for the Doxygen on the original ITK class.


C++ includes: srtkBinaryThresholdProjectionImageFilter.h
*/"

%javamethodmodifiers  rtk::simple::BinaryThresholdProjectionImageFilter::BinaryThresholdProjectionImageFilter "/**
rtk::simple::BinaryThresholdProjectionImageFilter::BinaryThresholdProjectionImageFilter()

Default Constructor that takes no arguments and initializes default
parameters

*/
public ";

%javamethodmodifiers  rtk::simple::BinaryThresholdProjectionImageFilter::Execute "/**
Image rtk::simple::BinaryThresholdProjectionImageFilter::Execute(const Image &image1)

Execute the filter on the input image

*/
public ";

%javamethodmodifiers  rtk::simple::BinaryThresholdProjectionImageFilter::Execute "/**
Image rtk::simple::BinaryThresholdProjectionImageFilter::Execute(const Image &image1, unsigned int projectionDimension, double
thresholdValue, uint8_t foregroundValue, uint8_t backgroundValue)

Execute the filter on the input image with the given parameters

*/
public ";

%javamethodmodifiers  rtk::simple::BinaryThresholdProjectionImageFilter::GetBackgroundValue "/**
uint8_t rtk::simple::BinaryThresholdProjectionImageFilter::GetBackgroundValue() const

Set/Get the output value used as \"background\". Defaults to NumericTraits<PixelType>::NonpositiveMin() .

*/
public ";

%javamethodmodifiers  rtk::simple::BinaryThresholdProjectionImageFilter::GetForegroundValue "/**
uint8_t rtk::simple::BinaryThresholdProjectionImageFilter::GetForegroundValue() const

Set/Get the output value used as \"foreground\". Defaults to maximum
value of PixelType.

*/
public ";

%javamethodmodifiers  rtk::simple::BinaryThresholdProjectionImageFilter::GetName "/**
std::string rtk::simple::BinaryThresholdProjectionImageFilter::GetName() const

Name of this class

*/
public ";

%javamethodmodifiers  rtk::simple::BinaryThresholdProjectionImageFilter::GetProjectionDimension "/**
unsigned int rtk::simple::BinaryThresholdProjectionImageFilter::GetProjectionDimension() const
*/
public ";

%javamethodmodifiers  rtk::simple::BinaryThresholdProjectionImageFilter::GetThresholdValue "/**
double rtk::simple::BinaryThresholdProjectionImageFilter::GetThresholdValue() const

Set/Get the input value consider as \"threshold\". Defaults to NumericTraits<InputPixelType>::max()

*/
public ";

%javamethodmodifiers  rtk::simple::BinaryThresholdProjectionImageFilter::SetBackgroundValue "/**
Self& rtk::simple::BinaryThresholdProjectionImageFilter::SetBackgroundValue(uint8_t BackgroundValue)

Set/Get the output value used as \"background\". Defaults to NumericTraits<PixelType>::NonpositiveMin() .

*/
public ";

%javamethodmodifiers  rtk::simple::BinaryThresholdProjectionImageFilter::SetForegroundValue "/**
Self& rtk::simple::BinaryThresholdProjectionImageFilter::SetForegroundValue(uint8_t ForegroundValue)

Set/Get the output value used as \"foreground\". Defaults to maximum
value of PixelType.

*/
public ";

%javamethodmodifiers  rtk::simple::BinaryThresholdProjectionImageFilter::SetProjectionDimension "/**
Self& rtk::simple::BinaryThresholdProjectionImageFilter::SetProjectionDimension(unsigned int ProjectionDimension)
*/
public ";

%javamethodmodifiers  rtk::simple::BinaryThresholdProjectionImageFilter::SetThresholdValue "/**
Self& rtk::simple::BinaryThresholdProjectionImageFilter::SetThresholdValue(double ThresholdValue)

Set/Get the input value consider as \"threshold\". Defaults to NumericTraits<InputPixelType>::max()

*/
public ";

%javamethodmodifiers  rtk::simple::BinaryThresholdProjectionImageFilter::ToString "/**
std::string rtk::simple::BinaryThresholdProjectionImageFilter::ToString() const

Print ourselves out

*/
public ";

%javamethodmodifiers  rtk::simple::BinaryThresholdProjectionImageFilter::~BinaryThresholdProjectionImageFilter "/**
rtk::simple::BinaryThresholdProjectionImageFilter::~BinaryThresholdProjectionImageFilter()

Destructor

*/
public ";


%typemap(javaimports) rtk::simple::BinomialBlurImageFilter "/**

Performs a separable blur on each dimension of an image.


The binomial blur consists of a nearest neighbor average along each
image dimension. The net result after n-iterations approaches
convultion with a gaussian.

Wiki Examples:

All Examples

Blur an image
See:
 rtk::simple::BinomialBlur for the procedural interface

 itk::BinomialBlurImageFilter for the Doxygen on the original ITK class.



C++ includes: srtkBinomialBlurImageFilter.h
*/"

%javamethodmodifiers  rtk::simple::BinomialBlurImageFilter::BinomialBlurImageFilter "/**
rtk::simple::BinomialBlurImageFilter::BinomialBlurImageFilter()

Default Constructor that takes no arguments and initializes default
parameters

*/
public ";

%javamethodmodifiers  rtk::simple::BinomialBlurImageFilter::Execute "/**
Image rtk::simple::BinomialBlurImageFilter::Execute(const Image &image1)

Execute the filter on the input image

*/
public ";

%javamethodmodifiers  rtk::simple::BinomialBlurImageFilter::Execute "/**
Image rtk::simple::BinomialBlurImageFilter::Execute(const Image &image1, unsigned int repetitions)

Execute the filter on the input image with the given parameters

*/
public ";

%javamethodmodifiers  rtk::simple::BinomialBlurImageFilter::GetName "/**
std::string rtk::simple::BinomialBlurImageFilter::GetName() const

Name of this class

*/
public ";

%javamethodmodifiers  rtk::simple::BinomialBlurImageFilter::GetRepetitions "/**
unsigned int rtk::simple::BinomialBlurImageFilter::GetRepetitions() const

Get and set the number of times to repeat the filter.

*/
public ";

%javamethodmodifiers  rtk::simple::BinomialBlurImageFilter::SetRepetitions "/**
Self& rtk::simple::BinomialBlurImageFilter::SetRepetitions(unsigned int Repetitions)

Get and set the number of times to repeat the filter.

*/
public ";

%javamethodmodifiers  rtk::simple::BinomialBlurImageFilter::ToString "/**
std::string rtk::simple::BinomialBlurImageFilter::ToString() const

Print ourselves out

*/
public ";

%javamethodmodifiers  rtk::simple::BinomialBlurImageFilter::~BinomialBlurImageFilter "/**
rtk::simple::BinomialBlurImageFilter::~BinomialBlurImageFilter()

Destructor

*/
public ";


%typemap(javaimports) rtk::simple::BitwiseNotImageFilter "/**

Implements pixel-wise generic operation on one image.


This class is parameterized over the type of the input image and the
type of the output image. It is also parameterized by the operation to
be applied, using a Functor style.

UnaryFunctorImageFilter allows the output dimension of the filter to be larger than the input
dimension. Thus subclasses of the UnaryFunctorImageFilter (like the CastImageFilter ) can be used to promote a 2D image to a 3D image, etc.


See:
 BinaryFunctorImageFilter TernaryFunctorImageFilter
Wiki Examples:

All Examples

Apply a custom operation to each pixel in an image
See:
 rtk::simple::BitwiseNot for the procedural interface

 itk::UnaryFunctorImageFilter for the Doxygen on the original ITK class.



C++ includes: srtkBitwiseNotImageFilter.h
*/"

%javamethodmodifiers  rtk::simple::BitwiseNotImageFilter::BitwiseNotImageFilter "/**
rtk::simple::BitwiseNotImageFilter::BitwiseNotImageFilter()

Default Constructor that takes no arguments and initializes default
parameters

*/
public ";

%javamethodmodifiers  rtk::simple::BitwiseNotImageFilter::Execute "/**
Image rtk::simple::BitwiseNotImageFilter::Execute(const Image &image1)

Execute the filter on the input image

*/
public ";

%javamethodmodifiers  rtk::simple::BitwiseNotImageFilter::GetName "/**
std::string rtk::simple::BitwiseNotImageFilter::GetName() const

Name of this class

*/
public ";

%javamethodmodifiers  rtk::simple::BitwiseNotImageFilter::ToString "/**
std::string rtk::simple::BitwiseNotImageFilter::ToString() const

Print ourselves out

*/
public ";

%javamethodmodifiers  rtk::simple::BitwiseNotImageFilter::~BitwiseNotImageFilter "/**
rtk::simple::BitwiseNotImageFilter::~BitwiseNotImageFilter()

Destructor

*/
public ";


%typemap(javaimports) rtk::simple::BlackTopHatImageFilter "/**

Black top hat extract local minima that are smaller than the
structuring element.


Black top hat extract local minima that are smaller than the
structuring element. It subtract the background in the input image.
The output of the filter transforms the black peaks in white peaks.

Top-hats are described in Chapter 4.5 of Pierre Soille's book
\"Morphological Image Analysis: Principles and Applications\", Second
Edition, Springer, 2003.


Gaetan Lehmann. Biologie du Developpement et de la Reproduction, INRA
de Jouy-en-Josas, France.

See:
 rtk::simple::BlackTopHat for the procedural interface

 itk::BlackTopHatImageFilter for the Doxygen on the original ITK class.


C++ includes: srtkBlackTopHatImageFilter.h
*/"

%javamethodmodifiers  rtk::simple::BlackTopHatImageFilter::BlackTopHatImageFilter "/**
rtk::simple::BlackTopHatImageFilter::BlackTopHatImageFilter()

Default Constructor that takes no arguments and initializes default
parameters

*/
public ";

%javamethodmodifiers  rtk::simple::BlackTopHatImageFilter::Execute "/**
Image rtk::simple::BlackTopHatImageFilter::Execute(const Image &image1)

Execute the filter on the input image

*/
public ";

%javamethodmodifiers  rtk::simple::BlackTopHatImageFilter::Execute "/**
Image rtk::simple::BlackTopHatImageFilter::Execute(const Image &image1, bool safeBorder)

Execute the filter on the input image with the given parameters

*/
public ";

%javamethodmodifiers  rtk::simple::BlackTopHatImageFilter::GetKernelRadius "/**
std::vector<uint32_t> rtk::simple::BlackTopHatImageFilter::GetKernelRadius() const
*/
public ";

%javamethodmodifiers  rtk::simple::BlackTopHatImageFilter::GetKernelType "/**
KernelEnum rtk::simple::BlackTopHatImageFilter::GetKernelType() const
*/
public ";

%javamethodmodifiers  rtk::simple::BlackTopHatImageFilter::GetName "/**
std::string rtk::simple::BlackTopHatImageFilter::GetName() const

Name of this class

*/
public ";

%javamethodmodifiers  rtk::simple::BlackTopHatImageFilter::GetSafeBorder "/**
bool rtk::simple::BlackTopHatImageFilter::GetSafeBorder() const

A safe border is added to input image to avoid borders effects and
remove it once the closing is done

*/
public ";

%javamethodmodifiers  rtk::simple::BlackTopHatImageFilter::SafeBorderOff "/**
Self& rtk::simple::BlackTopHatImageFilter::SafeBorderOff()
*/
public ";

%javamethodmodifiers  rtk::simple::BlackTopHatImageFilter::SafeBorderOn "/**
Self& rtk::simple::BlackTopHatImageFilter::SafeBorderOn()

Set the value of SafeBorder to true or false respectfully.

*/
public ";

%javamethodmodifiers  rtk::simple::BlackTopHatImageFilter::SetKernelRadius "/**
Self& rtk::simple::BlackTopHatImageFilter::SetKernelRadius(uint32_t r)

Kernel radius as a scale for isotropic structures

*/
public ";

%javamethodmodifiers  rtk::simple::BlackTopHatImageFilter::SetKernelRadius "/**
Self& rtk::simple::BlackTopHatImageFilter::SetKernelRadius(const std::vector< uint32_t > &r)

Set/Get the radius of the kernel structuring element as a vector.

If the dimension of the image is greater then the length of r, then
the radius will be padded. If it is less the r will be truncated.

*/
public ";

%javamethodmodifiers  rtk::simple::BlackTopHatImageFilter::SetKernelType "/**
Self& rtk::simple::BlackTopHatImageFilter::SetKernelType(KernelEnum t)

Set/Get the kernel or structuring elemenent used for the morphology

*/
public ";

%javamethodmodifiers  rtk::simple::BlackTopHatImageFilter::SetKernelType "/**
Self& rtk::simple::BlackTopHatImageFilter::SetKernelType(KernelType t)
*/
public ";

%javamethodmodifiers  rtk::simple::BlackTopHatImageFilter::SetSafeBorder "/**
Self& rtk::simple::BlackTopHatImageFilter::SetSafeBorder(bool SafeBorder)

A safe border is added to input image to avoid borders effects and
remove it once the closing is done

*/
public ";

%javamethodmodifiers  rtk::simple::BlackTopHatImageFilter::ToString "/**
std::string rtk::simple::BlackTopHatImageFilter::ToString() const

Print ourselves out

*/
public ";

%javamethodmodifiers  rtk::simple::BlackTopHatImageFilter::~BlackTopHatImageFilter "/**
rtk::simple::BlackTopHatImageFilter::~BlackTopHatImageFilter()

Destructor

*/
public ";


%typemap(javaimports) rtk::simple::BoundedReciprocalImageFilter "/**

Computes 1/(1+x) for each pixel in the image.


The filter expect both the input and output images to have the same
number of dimensions, and both of a scalar image type.
See:
 rtk::simple::BoundedReciprocal for the procedural interface

 itk::BoundedReciprocalImageFilter for the Doxygen on the original ITK class.


C++ includes: srtkBoundedReciprocalImageFilter.h
*/"

%javamethodmodifiers  rtk::simple::BoundedReciprocalImageFilter::BoundedReciprocalImageFilter "/**
rtk::simple::BoundedReciprocalImageFilter::BoundedReciprocalImageFilter()

Default Constructor that takes no arguments and initializes default
parameters

*/
public ";

%javamethodmodifiers  rtk::simple::BoundedReciprocalImageFilter::Execute "/**
Image rtk::simple::BoundedReciprocalImageFilter::Execute(const Image &image1)

Execute the filter on the input image

*/
public ";

%javamethodmodifiers  rtk::simple::BoundedReciprocalImageFilter::GetName "/**
std::string rtk::simple::BoundedReciprocalImageFilter::GetName() const

Name of this class

*/
public ";

%javamethodmodifiers  rtk::simple::BoundedReciprocalImageFilter::ToString "/**
std::string rtk::simple::BoundedReciprocalImageFilter::ToString() const

Print ourselves out

*/
public ";

%javamethodmodifiers  rtk::simple::BoundedReciprocalImageFilter::~BoundedReciprocalImageFilter "/**
rtk::simple::BoundedReciprocalImageFilter::~BoundedReciprocalImageFilter()

Destructor

*/
public ";


%typemap(javaimports) rtk::simple::BoxMeanImageFilter "/**

Implements a fast rectangular mean filter using the accumulator
approach.


This code was contributed in the Insight Journal paper: \"Efficient
implementation of kernel filtering\" by Beare R., Lehmann G https://hdl.handle.net/1926/555 http://www.insight-journal.org/browse/publication/160


Richard Beare

See:
 rtk::simple::BoxMean for the procedural interface

 itk::BoxMeanImageFilter for the Doxygen on the original ITK class.


C++ includes: srtkBoxMeanImageFilter.h
*/"

%javamethodmodifiers  rtk::simple::BoxMeanImageFilter::BoxMeanImageFilter "/**
rtk::simple::BoxMeanImageFilter::BoxMeanImageFilter()

Default Constructor that takes no arguments and initializes default
parameters

*/
public ";

%javamethodmodifiers  rtk::simple::BoxMeanImageFilter::Execute "/**
Image rtk::simple::BoxMeanImageFilter::Execute(const Image &image1)

Execute the filter on the input image

*/
public ";

%javamethodmodifiers  rtk::simple::BoxMeanImageFilter::Execute "/**
Image rtk::simple::BoxMeanImageFilter::Execute(const Image &image1, const std::vector< unsigned int > &radius)

Execute the filter on the input image with the given parameters

*/
public ";

%javamethodmodifiers  rtk::simple::BoxMeanImageFilter::GetName "/**
std::string rtk::simple::BoxMeanImageFilter::GetName() const

Name of this class

*/
public ";

%javamethodmodifiers  rtk::simple::BoxMeanImageFilter::GetRadius "/**
std::vector<unsigned int> rtk::simple::BoxMeanImageFilter::GetRadius() const
*/
public ";

%javamethodmodifiers  rtk::simple::BoxMeanImageFilter::SetRadius "/**
Self& rtk::simple::BoxMeanImageFilter::SetRadius(const std::vector< unsigned int > &Radius)
*/
public ";

%javamethodmodifiers  rtk::simple::BoxMeanImageFilter::SetRadius "/**
Self& rtk::simple::BoxMeanImageFilter::SetRadius(unsigned int value)

Set the values of the Radius vector all to value

*/
public ";

%javamethodmodifiers  rtk::simple::BoxMeanImageFilter::ToString "/**
std::string rtk::simple::BoxMeanImageFilter::ToString() const

Print ourselves out

*/
public ";

%javamethodmodifiers  rtk::simple::BoxMeanImageFilter::~BoxMeanImageFilter "/**
rtk::simple::BoxMeanImageFilter::~BoxMeanImageFilter()

Destructor

*/
public ";


%typemap(javaimports) rtk::simple::BoxSigmaImageFilter "/**

Implements a fast rectangular sigma filter using the accumulator
approach.


This code was contributed in the Insight Journal paper: \"Efficient
implementation of kernel filtering\" by Beare R., Lehmann G https://hdl.handle.net/1926/555 http://www.insight-journal.org/browse/publication/160


Gaetan Lehmann

See:
 rtk::simple::BoxSigma for the procedural interface

 itk::BoxSigmaImageFilter for the Doxygen on the original ITK class.


C++ includes: srtkBoxSigmaImageFilter.h
*/"

%javamethodmodifiers  rtk::simple::BoxSigmaImageFilter::BoxSigmaImageFilter "/**
rtk::simple::BoxSigmaImageFilter::BoxSigmaImageFilter()

Default Constructor that takes no arguments and initializes default
parameters

*/
public ";

%javamethodmodifiers  rtk::simple::BoxSigmaImageFilter::Execute "/**
Image rtk::simple::BoxSigmaImageFilter::Execute(const Image &image1)

Execute the filter on the input image

*/
public ";

%javamethodmodifiers  rtk::simple::BoxSigmaImageFilter::Execute "/**
Image rtk::simple::BoxSigmaImageFilter::Execute(const Image &image1, const std::vector< unsigned int > &radius)

Execute the filter on the input image with the given parameters

*/
public ";

%javamethodmodifiers  rtk::simple::BoxSigmaImageFilter::GetName "/**
std::string rtk::simple::BoxSigmaImageFilter::GetName() const

Name of this class

*/
public ";

%javamethodmodifiers  rtk::simple::BoxSigmaImageFilter::GetRadius "/**
std::vector<unsigned int> rtk::simple::BoxSigmaImageFilter::GetRadius() const
*/
public ";

%javamethodmodifiers  rtk::simple::BoxSigmaImageFilter::SetRadius "/**
Self& rtk::simple::BoxSigmaImageFilter::SetRadius(const std::vector< unsigned int > &Radius)
*/
public ";

%javamethodmodifiers  rtk::simple::BoxSigmaImageFilter::SetRadius "/**
Self& rtk::simple::BoxSigmaImageFilter::SetRadius(unsigned int value)

Set the values of the Radius vector all to value

*/
public ";

%javamethodmodifiers  rtk::simple::BoxSigmaImageFilter::ToString "/**
std::string rtk::simple::BoxSigmaImageFilter::ToString() const

Print ourselves out

*/
public ";

%javamethodmodifiers  rtk::simple::BoxSigmaImageFilter::~BoxSigmaImageFilter "/**
rtk::simple::BoxSigmaImageFilter::~BoxSigmaImageFilter()

Destructor

*/
public ";


%typemap(javaimports) rtk::simple::CannyEdgeDetectionImageFilter "/**

This filter is an implementation of a Canny edge detector for scalar-
valued images.


Based on John Canny's paper \"A Computational Approach to Edge
Detection\"(IEEE Transactions on Pattern Analysis and Machine
Intelligence, Vol. PAMI-8, No.6, November 1986), there are four major
steps used in the edge-detection scheme: (1) Smooth the input image
with Gaussian filter. (2) Calculate the second directional derivatives
of the smoothed image. (3) Non-Maximum Suppression: the zero-crossings
of 2nd derivative are found, and the sign of third derivative is used
to find the correct extrema. (4) The hysteresis thresholding is
applied to the gradient magnitude (multiplied with zero-crossings) of
the smoothed image to find and link edges.

Inputs and Outputs
The input to this filter should be a scalar, real-valued Itk image of
arbitrary dimension. The output should also be a scalar, real-value
Itk image of the same dimensionality.
Parameters
There are four parameters for this filter that control the sub-filters
used by the algorithm.

Variance and Maximum error are used in the Gaussian smoothing of the
input image. See itkDiscreteGaussianImageFilter for information on
these parameters.

Threshold is the lowest allowed value in the output image. Its data
type is the same as the data type of the output image. Any values
below the Threshold level will be replaced with the OutsideValue
parameter value, whose default is zero.
 TodoEdge-linking will be added when an itk connected component
labeling algorithm is available.


See:
 DiscreteGaussianImageFilter


 ZeroCrossingImageFilter


 ThresholdImageFilter

 rtk::simple::CannyEdgeDetection for the procedural interface

 itk::CannyEdgeDetectionImageFilter for the Doxygen on the original ITK class.


C++ includes: srtkCannyEdgeDetectionImageFilter.h
*/"

%javamethodmodifiers  rtk::simple::CannyEdgeDetectionImageFilter::CannyEdgeDetectionImageFilter "/**
rtk::simple::CannyEdgeDetectionImageFilter::CannyEdgeDetectionImageFilter()

Default Constructor that takes no arguments and initializes default
parameters

*/
public ";

%javamethodmodifiers  rtk::simple::CannyEdgeDetectionImageFilter::Execute "/**
Image rtk::simple::CannyEdgeDetectionImageFilter::Execute(const Image &image1)

Execute the filter on the input image

*/
public ";

%javamethodmodifiers  rtk::simple::CannyEdgeDetectionImageFilter::Execute "/**
Image rtk::simple::CannyEdgeDetectionImageFilter::Execute(const Image &image1, double lowerThreshold, double upperThreshold,
const std::vector< double > &variance, const std::vector< double >
&maximumError)

Execute the filter on the input image with the given parameters

*/
public ";

%javamethodmodifiers  rtk::simple::CannyEdgeDetectionImageFilter::GetLowerThreshold "/**
double rtk::simple::CannyEdgeDetectionImageFilter::GetLowerThreshold() const
*/
public ";

%javamethodmodifiers  rtk::simple::CannyEdgeDetectionImageFilter::GetMaximumError "/**
std::vector<double> rtk::simple::CannyEdgeDetectionImageFilter::GetMaximumError() const

Standard get/set macros for filter parameters.

*/
public ";

%javamethodmodifiers  rtk::simple::CannyEdgeDetectionImageFilter::GetName "/**
std::string rtk::simple::CannyEdgeDetectionImageFilter::GetName() const

Name of this class

*/
public ";

%javamethodmodifiers  rtk::simple::CannyEdgeDetectionImageFilter::GetUpperThreshold "/**
double rtk::simple::CannyEdgeDetectionImageFilter::GetUpperThreshold() const
*/
public ";

%javamethodmodifiers  rtk::simple::CannyEdgeDetectionImageFilter::GetVariance "/**
std::vector<double> rtk::simple::CannyEdgeDetectionImageFilter::GetVariance() const

Standard get/set macros for filter parameters.

*/
public ";

%javamethodmodifiers  rtk::simple::CannyEdgeDetectionImageFilter::SetLowerThreshold "/**
Self& rtk::simple::CannyEdgeDetectionImageFilter::SetLowerThreshold(double LowerThreshold)
*/
public ";

%javamethodmodifiers  rtk::simple::CannyEdgeDetectionImageFilter::SetMaximumError "/**
Self& rtk::simple::CannyEdgeDetectionImageFilter::SetMaximumError(const std::vector< double > &MaximumError)

Set/Get the MaximumError parameter used by the Gaussian smoothing
filter in this algorithm

*/
public ";

%javamethodmodifiers  rtk::simple::CannyEdgeDetectionImageFilter::SetMaximumError "/**
Self& rtk::simple::CannyEdgeDetectionImageFilter::SetMaximumError(double value)

Set the values of the MaximumError vector all to value

*/
public ";

%javamethodmodifiers  rtk::simple::CannyEdgeDetectionImageFilter::SetUpperThreshold "/**
Self& rtk::simple::CannyEdgeDetectionImageFilter::SetUpperThreshold(double UpperThreshold)

Set the Threshold value for detected edges. TODO: Document in the
ITKv4 migration guide that the SetThreshold member function was
removed from the CannyEdgeDetectionImageFilter , and that both UpperThreshold and LowerThreshold need to be set. To
get the same results as with the SetThreshold method change
\"myfilter->SetThrehsold\" to \"myfilter->SetUpperThreshold\", and add
\"myfilter->SetLowerThreshold(GetUpperThreshold()/2.0)\".

*/
public ";

%javamethodmodifiers  rtk::simple::CannyEdgeDetectionImageFilter::SetVariance "/**
Self& rtk::simple::CannyEdgeDetectionImageFilter::SetVariance(const std::vector< double > &Variance)

Set/Get the Variance parameter used by the Gaussian smoothing filter
in this algorithm

*/
public ";

%javamethodmodifiers  rtk::simple::CannyEdgeDetectionImageFilter::SetVariance "/**
Self& rtk::simple::CannyEdgeDetectionImageFilter::SetVariance(double value)

Set the values of the Variance vector all to value

*/
public ";

%javamethodmodifiers  rtk::simple::CannyEdgeDetectionImageFilter::ToString "/**
std::string rtk::simple::CannyEdgeDetectionImageFilter::ToString() const

Print ourselves out

*/
public ";

%javamethodmodifiers  rtk::simple::CannyEdgeDetectionImageFilter::~CannyEdgeDetectionImageFilter "/**
rtk::simple::CannyEdgeDetectionImageFilter::~CannyEdgeDetectionImageFilter()

Destructor

*/
public ";


%typemap(javaimports) rtk::simple::CastImageFilter "/**

A hybrid cast image filter to convert images to other types of images.


Several different ITK classes are implemented under the hood, to
convert between different image types.


See:
 rtk::simple::Cast for the procedural interface


C++ includes: srtkCastImageFilter.h
*/"

%javamethodmodifiers  rtk::simple::CastImageFilter::CastImageFilter "/**
rtk::simple::CastImageFilter::CastImageFilter()

Default Constructor that takes no arguments and initializes default
parameters

*/
public ";

%javamethodmodifiers  rtk::simple::CastImageFilter::Execute "/**
Image rtk::simple::CastImageFilter::Execute(const Image &)
*/
public ";

%javamethodmodifiers  rtk::simple::CastImageFilter::GetName "/**
std::string rtk::simple::CastImageFilter::GetName() const

Name of this class

*/
public ";

%javamethodmodifiers  rtk::simple::CastImageFilter::GetOutputPixelType "/**
PixelIDValueEnum rtk::simple::CastImageFilter::GetOutputPixelType(void) const
*/
public ";

%javamethodmodifiers  rtk::simple::CastImageFilter::SetOutputPixelType "/**
Self& rtk::simple::CastImageFilter::SetOutputPixelType(PixelIDValueEnum pixelID)

Set/Get the output pixel type

*/
public ";

%javamethodmodifiers  rtk::simple::CastImageFilter::SetOutputPixelType "/**
Self& rtk::simple::CastImageFilter::SetOutputPixelType(PixelIDValueType pixelID)
*/
public ";

%javamethodmodifiers  rtk::simple::CastImageFilter::ToString "/**
std::string rtk::simple::CastImageFilter::ToString() const
*/
public ";


%typemap(javaimports) rtk::simple::CenteredTransformInitializerFilter "/**

CenteredTransformInitializerFilter is a helper class intended to initialize the center of rotation and
the translation of Transforms having the center of rotation among
their parameters.


This class is connected to the fixed image, moving image and transform
involved in the registration. Two modes of operation are possible:


Geometrical,

Center of mass
 In the first mode, the geometrical center of the moving image is
passed as initial center of rotation to the transform and the vector
from the center of the fixed image to the center of the moving image
is passed as the initial translation. This mode basically assumes that
the anatomical objects to be registered are centered in their
respective images. Hence the best initial guess for the registration
is the one that superimposes those two centers.

In the second mode, the moments of gray level values are computed for
both images. The center of mass of the moving image is then used as
center of rotation. The vector between the two centers of mass is
passes as the initial translation to the transform. This second
approach assumes that the moments of the anatomical objects are
similar for both images and hence the best initial guess for
registration is to superimpose both mass centers. Note that this
assumption will probably not hold in multi-modality registration.


See:
 itk::CenteredTransformInitializer


C++ includes: srtkCenteredTransformInitializerFilter.h
*/"

%javamethodmodifiers  rtk::simple::CenteredTransformInitializerFilter::CenteredTransformInitializerFilter "/**
rtk::simple::CenteredTransformInitializerFilter::CenteredTransformInitializerFilter()

Default Constructor that takes no arguments and initializes default
parameters

*/
public ";

%javamethodmodifiers  rtk::simple::CenteredTransformInitializerFilter::Execute "/**
Transform rtk::simple::CenteredTransformInitializerFilter::Execute(const Image &fixedImage, const Image &movingImage, const Transform
&transform)

Execute the filter on the input image

*/
public ";

%javamethodmodifiers  rtk::simple::CenteredTransformInitializerFilter::Execute "/**
Transform rtk::simple::CenteredTransformInitializerFilter::Execute(const Image &fixedImage, const Image &movingImage, const Transform
&transform, CenteredTransformInitializerFilter::OperationModeType
operationMode)

Execute the filter on the input image with the given parameters

*/
public ";

%javamethodmodifiers  rtk::simple::CenteredTransformInitializerFilter::GeometryOn "/**
Self& rtk::simple::CenteredTransformInitializerFilter::GeometryOn()

Select between using the geometrical center of the images or using the
center of mass given by the image intensities.

*/
public ";

%javamethodmodifiers  rtk::simple::CenteredTransformInitializerFilter::GetName "/**
std::string rtk::simple::CenteredTransformInitializerFilter::GetName() const

Name of this class

*/
public ";

%javamethodmodifiers  rtk::simple::CenteredTransformInitializerFilter::GetOperationMode "/**
OperationModeType rtk::simple::CenteredTransformInitializerFilter::GetOperationMode() const
*/
public ";

%javamethodmodifiers  rtk::simple::CenteredTransformInitializerFilter::MomentsOn "/**
Self& rtk::simple::CenteredTransformInitializerFilter::MomentsOn()

Select between using the geometrical center of the images or using the
center of mass given by the image intensities.

*/
public ";

%javamethodmodifiers  rtk::simple::CenteredTransformInitializerFilter::SetOperationMode "/**
Self& rtk::simple::CenteredTransformInitializerFilter::SetOperationMode(OperationModeType OperationMode)
*/
public ";

%javamethodmodifiers  rtk::simple::CenteredTransformInitializerFilter::ToString "/**
std::string rtk::simple::CenteredTransformInitializerFilter::ToString() const

Print ourselves out

*/
public ";

%javamethodmodifiers  rtk::simple::CenteredTransformInitializerFilter::~CenteredTransformInitializerFilter "/**
rtk::simple::CenteredTransformInitializerFilter::~CenteredTransformInitializerFilter()

Destructor

*/
public ";


%typemap(javaimports) rtk::simple::CenteredVersorTransformInitializerFilter "/**

CenteredVersorTransformInitializerFilter is a helper class intended to initialize the center of rotation,
versor, and translation of the VersorRigid3DTransform.


This class derived from the CenteredTransformInitializerand uses it in
a more constrained context. It always uses the Moments mode, and also
takes advantage of the second order moments in order to initialize the
Versorrepresenting rotation.


See:
 itk::CenteredVersorTransformInitializer for the Doxygen on the original ITK class.


C++ includes: srtkCenteredVersorTransformInitializerFilter.h
*/"

%javamethodmodifiers  rtk::simple::CenteredVersorTransformInitializerFilter::CenteredVersorTransformInitializerFilter "/**
rtk::simple::CenteredVersorTransformInitializerFilter::CenteredVersorTransformInitializerFilter()

Default Constructor that takes no arguments and initializes default
parameters

*/
public ";

%javamethodmodifiers  rtk::simple::CenteredVersorTransformInitializerFilter::ComputeRotationOff "/**
Self& rtk::simple::CenteredVersorTransformInitializerFilter::ComputeRotationOff()
*/
public ";

%javamethodmodifiers  rtk::simple::CenteredVersorTransformInitializerFilter::ComputeRotationOn "/**
Self& rtk::simple::CenteredVersorTransformInitializerFilter::ComputeRotationOn()

Set the value of ComputeRotation to true or false respectfully.

*/
public ";

%javamethodmodifiers  rtk::simple::CenteredVersorTransformInitializerFilter::Execute "/**
Transform rtk::simple::CenteredVersorTransformInitializerFilter::Execute(const Image &fixedImage, const Image &movingImage, const Transform
&transform)

Execute the filter on the input image

*/
public ";

%javamethodmodifiers  rtk::simple::CenteredVersorTransformInitializerFilter::Execute "/**
Transform rtk::simple::CenteredVersorTransformInitializerFilter::Execute(const Image &fixedImage, const Image &movingImage, const Transform
&transform, bool computeRotation)

Execute the filter on the input image with the given parameters

*/
public ";

%javamethodmodifiers  rtk::simple::CenteredVersorTransformInitializerFilter::GetComputeRotation "/**
bool rtk::simple::CenteredVersorTransformInitializerFilter::GetComputeRotation() const

Enable the use of the principal axes of each image to compute an
initial rotation that will align them.

*/
public ";

%javamethodmodifiers  rtk::simple::CenteredVersorTransformInitializerFilter::GetName "/**
std::string rtk::simple::CenteredVersorTransformInitializerFilter::GetName() const

Name of this class

*/
public ";

%javamethodmodifiers  rtk::simple::CenteredVersorTransformInitializerFilter::SetComputeRotation "/**
Self& rtk::simple::CenteredVersorTransformInitializerFilter::SetComputeRotation(bool ComputeRotation)

Enable the use of the principal axes of each image to compute an
initial rotation that will align them.

*/
public ";

%javamethodmodifiers  rtk::simple::CenteredVersorTransformInitializerFilter::ToString "/**
std::string rtk::simple::CenteredVersorTransformInitializerFilter::ToString() const

Print ourselves out

*/
public ";

%javamethodmodifiers  rtk::simple::CenteredVersorTransformInitializerFilter::~CenteredVersorTransformInitializerFilter "/**
rtk::simple::CenteredVersorTransformInitializerFilter::~CenteredVersorTransformInitializerFilter()

Destructor

*/
public ";


%typemap(javaimports) rtk::simple::ChangeLabelImageFilter "/**

Change Sets of Labels.


This filter produces an output image whose pixels are either copied
from the input if they are not being changed or are rewritten based on
the change parameters

This filter is templated over the input image type and the output
image type.

The filter expect both images to have the same number of dimensions.


Tim Kelliher. GE Research, Niskayuna, NY.

This work was supported by a grant from DARPA, executed by the U.S.
Army Medical Research and Materiel Command/TATRC Assistance Agreement,
Contract::W81XWH-05-2-0059.

See:
 rtk::simple::ChangeLabel for the procedural interface

 itk::ChangeLabelImageFilter for the Doxygen on the original ITK class.


C++ includes: srtkChangeLabelImageFilter.h
*/"

%javamethodmodifiers  rtk::simple::ChangeLabelImageFilter::ChangeLabelImageFilter "/**
rtk::simple::ChangeLabelImageFilter::ChangeLabelImageFilter()

Default Constructor that takes no arguments and initializes default
parameters

*/
public ";

%javamethodmodifiers  rtk::simple::ChangeLabelImageFilter::Execute "/**
Image rtk::simple::ChangeLabelImageFilter::Execute(const Image &image1)

Execute the filter on the input image

*/
public ";

%javamethodmodifiers  rtk::simple::ChangeLabelImageFilter::Execute "/**
Image rtk::simple::ChangeLabelImageFilter::Execute(const Image &image1, std::map< double, double > changeMap)

Execute the filter on the input image with the given parameters

*/
public ";

%javamethodmodifiers  rtk::simple::ChangeLabelImageFilter::GetChangeMap "/**
std::map<double,double> rtk::simple::ChangeLabelImageFilter::GetChangeMap() const
*/
public ";

%javamethodmodifiers  rtk::simple::ChangeLabelImageFilter::GetName "/**
std::string rtk::simple::ChangeLabelImageFilter::GetName() const

Name of this class

*/
public ";

%javamethodmodifiers  rtk::simple::ChangeLabelImageFilter::SetChangeMap "/**
Self& rtk::simple::ChangeLabelImageFilter::SetChangeMap(std::map< double, double > ChangeMap)

Set the entire change map

*/
public ";

%javamethodmodifiers  rtk::simple::ChangeLabelImageFilter::ToString "/**
std::string rtk::simple::ChangeLabelImageFilter::ToString() const

Print ourselves out

*/
public ";

%javamethodmodifiers  rtk::simple::ChangeLabelImageFilter::~ChangeLabelImageFilter "/**
rtk::simple::ChangeLabelImageFilter::~ChangeLabelImageFilter()

Destructor

*/
public ";


%typemap(javaimports) rtk::simple::ChangeLabelLabelMapFilter "/**

Replace the label Ids of selected LabelObjects with new label Ids.


This filter takes as input a label map and a list of pairs of Label
Ids, to produce as output a new label map where the label Ids have
been replaced according to the pairs in the list.

This implementation was taken from the Insight Journal paper: https://hdl.handle.net/1926/584 or http://www.insight-journal.org/browse/publication/176


Gaetan Lehmann. Biologie du Developpement et de la Reproduction, INRA
de Jouy-en-Josas, France.

See:
 ShapeLabelObject , RelabelComponentImageFilter

 rtk::simple::ChangeLabelLabelMapFilter for the procedural interface

 itk::ChangeLabelLabelMapFilter for the Doxygen on the original ITK class.


C++ includes: srtkChangeLabelLabelMapFilter.h
*/"

%javamethodmodifiers  rtk::simple::ChangeLabelLabelMapFilter::ChangeLabelLabelMapFilter "/**
rtk::simple::ChangeLabelLabelMapFilter::ChangeLabelLabelMapFilter()

Default Constructor that takes no arguments and initializes default
parameters

*/
public ";

%javamethodmodifiers  rtk::simple::ChangeLabelLabelMapFilter::Execute "/**
Image rtk::simple::ChangeLabelLabelMapFilter::Execute(const Image &image1)

Execute the filter on the input image

*/
public ";

%javamethodmodifiers  rtk::simple::ChangeLabelLabelMapFilter::Execute "/**
Image rtk::simple::ChangeLabelLabelMapFilter::Execute(const Image &image1, std::map< double, double > changeMap)

Execute the filter on the input image with the given parameters

*/
public ";

%javamethodmodifiers  rtk::simple::ChangeLabelLabelMapFilter::GetChangeMap "/**
std::map<double,double> rtk::simple::ChangeLabelLabelMapFilter::GetChangeMap() const
*/
public ";

%javamethodmodifiers  rtk::simple::ChangeLabelLabelMapFilter::GetName "/**
std::string rtk::simple::ChangeLabelLabelMapFilter::GetName() const

Name of this class

*/
public ";

%javamethodmodifiers  rtk::simple::ChangeLabelLabelMapFilter::SetChangeMap "/**
Self& rtk::simple::ChangeLabelLabelMapFilter::SetChangeMap(std::map< double, double > ChangeMap)
*/
public ";

%javamethodmodifiers  rtk::simple::ChangeLabelLabelMapFilter::ToString "/**
std::string rtk::simple::ChangeLabelLabelMapFilter::ToString() const

Print ourselves out

*/
public ";

%javamethodmodifiers  rtk::simple::ChangeLabelLabelMapFilter::~ChangeLabelLabelMapFilter "/**
rtk::simple::ChangeLabelLabelMapFilter::~ChangeLabelLabelMapFilter()

Destructor

*/
public ";


%typemap(javaimports) rtk::simple::CheckerBoardImageFilter "/**

Combines two images in a checkerboard pattern.


CheckerBoardImageFilter takes two input images that must have the same dimension, size,
origin and spacing and produces an output image of the same size by
combinining the pixels from the two input images in a checkerboard
pattern. This filter is commonly used for visually comparing two
images, in particular for evaluating the results of an image
registration process.

This filter is implemented as a multithreaded filter. It provides a
ThreadedGenerateData() method for its implementation.

Wiki Examples:

All Examples

Combine two images by alternating blocks of a checkerboard pattern
See:
 rtk::simple::CheckerBoard for the procedural interface

 itk::CheckerBoardImageFilter for the Doxygen on the original ITK class.



C++ includes: srtkCheckerBoardImageFilter.h
*/"

%javamethodmodifiers  rtk::simple::CheckerBoardImageFilter::CheckerBoardImageFilter "/**
rtk::simple::CheckerBoardImageFilter::CheckerBoardImageFilter()

Default Constructor that takes no arguments and initializes default
parameters

*/
public ";

%javamethodmodifiers  rtk::simple::CheckerBoardImageFilter::Execute "/**
Image rtk::simple::CheckerBoardImageFilter::Execute(const Image &image1, const Image &image2)

Execute the filter on the input images

*/
public ";

%javamethodmodifiers  rtk::simple::CheckerBoardImageFilter::Execute "/**
Image rtk::simple::CheckerBoardImageFilter::Execute(const Image &image1, const Image &image2, const std::vector< uint32_t
> &checkerPattern)

Execute the filter on the input images with the given parameters

*/
public ";

%javamethodmodifiers  rtk::simple::CheckerBoardImageFilter::GetCheckerPattern "/**
std::vector<uint32_t> rtk::simple::CheckerBoardImageFilter::GetCheckerPattern() const

Set array with number of checks to make per image dimension

*/
public ";

%javamethodmodifiers  rtk::simple::CheckerBoardImageFilter::GetName "/**
std::string rtk::simple::CheckerBoardImageFilter::GetName() const

Name of this class

*/
public ";

%javamethodmodifiers  rtk::simple::CheckerBoardImageFilter::SetCheckerPattern "/**
Self& rtk::simple::CheckerBoardImageFilter::SetCheckerPattern(const std::vector< uint32_t > &CheckerPattern)

Set array with number of checks to make per image dimension

*/
public ";

%javamethodmodifiers  rtk::simple::CheckerBoardImageFilter::SetCheckerPattern "/**
Self& rtk::simple::CheckerBoardImageFilter::SetCheckerPattern(uint32_t value)

Set the values of the CheckerPattern vector all to value

*/
public ";

%javamethodmodifiers  rtk::simple::CheckerBoardImageFilter::ToString "/**
std::string rtk::simple::CheckerBoardImageFilter::ToString() const

Print ourselves out

*/
public ";

%javamethodmodifiers  rtk::simple::CheckerBoardImageFilter::~CheckerBoardImageFilter "/**
rtk::simple::CheckerBoardImageFilter::~CheckerBoardImageFilter()

Destructor

*/
public ";


%typemap(javaimports) rtk::simple::ClampImageFilter "/**

Casts input pixels to output pixel type and clamps the output pixel
values to a specified range.


Default range corresponds to the range supported by the pixel type of
the output image.

This filter is templated over the input image type and the output
image type.


Gaetan Lehmann. Biologie du Developpement et de la Reproduction, INRA
de Jouy-en-Josas, France.

See:
 UnaryFunctorImageFilter


 CastImageFilter
Wiki Examples:

All Examples

Cast an image from one type to another but clamp to the output value
range
See:
 rtk::simple::Clamp for the procedural interface

 itk::ClampImageFilter for the Doxygen on the original ITK class.



C++ includes: srtkClampImageFilter.h
*/"

%javamethodmodifiers  rtk::simple::ClampImageFilter::ClampImageFilter "/**
rtk::simple::ClampImageFilter::ClampImageFilter()

Default Constructor that takes no arguments and initializes default
parameters

*/
public ";

%javamethodmodifiers  rtk::simple::ClampImageFilter::Execute "/**
Image rtk::simple::ClampImageFilter::Execute(const Image &image1)

Execute the filter on the input image

*/
public ";

%javamethodmodifiers  rtk::simple::ClampImageFilter::Execute "/**
Image rtk::simple::ClampImageFilter::Execute(const Image &image1, PixelIDValueEnum outputPixelType, double
lowerBound, double upperBound)

Execute the filter on the input image with the given parameters

*/
public ";

%javamethodmodifiers  rtk::simple::ClampImageFilter::GetLowerBound "/**
double rtk::simple::ClampImageFilter::GetLowerBound() const
*/
public ";

%javamethodmodifiers  rtk::simple::ClampImageFilter::GetName "/**
std::string rtk::simple::ClampImageFilter::GetName() const

Name of this class

*/
public ";

%javamethodmodifiers  rtk::simple::ClampImageFilter::GetOutputPixelType "/**
PixelIDValueEnum rtk::simple::ClampImageFilter::GetOutputPixelType() const
*/
public ";

%javamethodmodifiers  rtk::simple::ClampImageFilter::GetUpperBound "/**
double rtk::simple::ClampImageFilter::GetUpperBound() const
*/
public ";

%javamethodmodifiers  rtk::simple::ClampImageFilter::SetLowerBound "/**
Self& rtk::simple::ClampImageFilter::SetLowerBound(double LowerBound)
*/
public ";

%javamethodmodifiers  rtk::simple::ClampImageFilter::SetOutputPixelType "/**
Self& rtk::simple::ClampImageFilter::SetOutputPixelType(PixelIDValueEnum OutputPixelType)
*/
public ";

%javamethodmodifiers  rtk::simple::ClampImageFilter::SetUpperBound "/**
Self& rtk::simple::ClampImageFilter::SetUpperBound(double UpperBound)
*/
public ";

%javamethodmodifiers  rtk::simple::ClampImageFilter::ToString "/**
std::string rtk::simple::ClampImageFilter::ToString() const

Print ourselves out

*/
public ";

%javamethodmodifiers  rtk::simple::ClampImageFilter::~ClampImageFilter "/**
rtk::simple::ClampImageFilter::~ClampImageFilter()

Destructor

*/
public ";


%typemap(javaimports) rtk::simple::ClosingByReconstructionImageFilter "/**

Closing by reconstruction of an image.


This filter is similar to the morphological closing, but contrary to
the mophological closing, the closing by reconstruction preserves the
shape of the components. The closing by reconstruction of an image
\"f\" is defined as:

ClosingByReconstruction(f) = ErosionByReconstruction(f, Dilation(f)).

Closing by reconstruction not only preserves structures preserved by
the dilation, but also levels raises the contrast of the darkest
regions. If PreserveIntensities is on, a subsequent reconstruction by
dilation using a marker image that is the original image for all
unaffected pixels.

Closing by reconstruction is described in Chapter 6.3.9 of Pierre
Soille's book \"Morphological Image Analysis: Principles and
Applications\", Second Edition, Springer, 2003.


Gaetan Lehmann. Biologie du Developpement et de la Reproduction, INRA
de Jouy-en-Josas, France.

See:
 GrayscaleMorphologicalClosingImageFilter

 rtk::simple::ClosingByReconstruction for the procedural interface

 itk::ClosingByReconstructionImageFilter for the Doxygen on the original ITK class.


C++ includes: srtkClosingByReconstructionImageFilter.h
*/"

%javamethodmodifiers  rtk::simple::ClosingByReconstructionImageFilter::ClosingByReconstructionImageFilter "/**
rtk::simple::ClosingByReconstructionImageFilter::ClosingByReconstructionImageFilter()

Default Constructor that takes no arguments and initializes default
parameters

*/
public ";

%javamethodmodifiers  rtk::simple::ClosingByReconstructionImageFilter::Execute "/**
Image rtk::simple::ClosingByReconstructionImageFilter::Execute(const Image &image1)

Execute the filter on the input image

*/
public ";

%javamethodmodifiers  rtk::simple::ClosingByReconstructionImageFilter::Execute "/**
Image rtk::simple::ClosingByReconstructionImageFilter::Execute(const Image &image1, bool fullyConnected, bool preserveIntensities)

Execute the filter on the input image with the given parameters

*/
public ";

%javamethodmodifiers  rtk::simple::ClosingByReconstructionImageFilter::FullyConnectedOff "/**
Self& rtk::simple::ClosingByReconstructionImageFilter::FullyConnectedOff()
*/
public ";

%javamethodmodifiers  rtk::simple::ClosingByReconstructionImageFilter::FullyConnectedOn "/**
Self& rtk::simple::ClosingByReconstructionImageFilter::FullyConnectedOn()

Set the value of FullyConnected to true or false respectfully.

*/
public ";

%javamethodmodifiers  rtk::simple::ClosingByReconstructionImageFilter::GetFullyConnected "/**
bool rtk::simple::ClosingByReconstructionImageFilter::GetFullyConnected() const

Set/Get whether the connected components are defined strictly by face
connectivity or by face+edge+vertex connectivity. Default is
FullyConnectedOff. For objects that are 1 pixel wide, use
FullyConnectedOn.

*/
public ";

%javamethodmodifiers  rtk::simple::ClosingByReconstructionImageFilter::GetKernelRadius "/**
std::vector<uint32_t> rtk::simple::ClosingByReconstructionImageFilter::GetKernelRadius() const
*/
public ";

%javamethodmodifiers  rtk::simple::ClosingByReconstructionImageFilter::GetKernelType "/**
KernelEnum rtk::simple::ClosingByReconstructionImageFilter::GetKernelType() const
*/
public ";

%javamethodmodifiers  rtk::simple::ClosingByReconstructionImageFilter::GetName "/**
std::string rtk::simple::ClosingByReconstructionImageFilter::GetName() const

Name of this class

*/
public ";

%javamethodmodifiers  rtk::simple::ClosingByReconstructionImageFilter::GetPreserveIntensities "/**
bool rtk::simple::ClosingByReconstructionImageFilter::GetPreserveIntensities() const

Set/Get whether the original intensities of the image retained for
those pixels unaffected by the opening by reconstrcution. If Off, the
output pixel contrast will be reduced.

*/
public ";

%javamethodmodifiers  rtk::simple::ClosingByReconstructionImageFilter::PreserveIntensitiesOff "/**
Self& rtk::simple::ClosingByReconstructionImageFilter::PreserveIntensitiesOff()
*/
public ";

%javamethodmodifiers  rtk::simple::ClosingByReconstructionImageFilter::PreserveIntensitiesOn "/**
Self& rtk::simple::ClosingByReconstructionImageFilter::PreserveIntensitiesOn()

Set the value of PreserveIntensities to true or false respectfully.

*/
public ";

%javamethodmodifiers  rtk::simple::ClosingByReconstructionImageFilter::SetFullyConnected "/**
Self& rtk::simple::ClosingByReconstructionImageFilter::SetFullyConnected(bool FullyConnected)

Set/Get whether the connected components are defined strictly by face
connectivity or by face+edge+vertex connectivity. Default is
FullyConnectedOff. For objects that are 1 pixel wide, use
FullyConnectedOn.

*/
public ";

%javamethodmodifiers  rtk::simple::ClosingByReconstructionImageFilter::SetKernelRadius "/**
Self& rtk::simple::ClosingByReconstructionImageFilter::SetKernelRadius(uint32_t r)

Kernel radius as a scale for isotropic structures

*/
public ";

%javamethodmodifiers  rtk::simple::ClosingByReconstructionImageFilter::SetKernelRadius "/**
Self& rtk::simple::ClosingByReconstructionImageFilter::SetKernelRadius(const std::vector< uint32_t > &r)

Set/Get the radius of the kernel structuring element as a vector.

If the dimension of the image is greater then the length of r, then
the radius will be padded. If it is less the r will be truncated.

*/
public ";

%javamethodmodifiers  rtk::simple::ClosingByReconstructionImageFilter::SetKernelType "/**
Self& rtk::simple::ClosingByReconstructionImageFilter::SetKernelType(KernelEnum t)

Set/Get the kernel or structuring elemenent used for the morphology

*/
public ";

%javamethodmodifiers  rtk::simple::ClosingByReconstructionImageFilter::SetKernelType "/**
Self& rtk::simple::ClosingByReconstructionImageFilter::SetKernelType(KernelType t)
*/
public ";

%javamethodmodifiers  rtk::simple::ClosingByReconstructionImageFilter::SetPreserveIntensities "/**
Self& rtk::simple::ClosingByReconstructionImageFilter::SetPreserveIntensities(bool PreserveIntensities)

Set/Get whether the original intensities of the image retained for
those pixels unaffected by the opening by reconstrcution. If Off, the
output pixel contrast will be reduced.

*/
public ";

%javamethodmodifiers  rtk::simple::ClosingByReconstructionImageFilter::ToString "/**
std::string rtk::simple::ClosingByReconstructionImageFilter::ToString() const

Print ourselves out

*/
public ";

%javamethodmodifiers  rtk::simple::ClosingByReconstructionImageFilter::~ClosingByReconstructionImageFilter "/**
rtk::simple::ClosingByReconstructionImageFilter::~ClosingByReconstructionImageFilter()

Destructor

*/
public ";


%typemap(javaimports) rtk::simple::CollidingFrontsImageFilter "/**

Selects a region of space where two independent fronts run towards
each other.


The filter can be used to quickly segment anatomical structures (e.g.
for level set initialization).

The filter uses two instances of FastMarchingUpwindGradientImageFilter to compute the gradients of arrival times of two wavefronts
propagating from two sets of seeds. The input of the filter is used as
the speed of the two wavefronts. The output is the dot product between
the two gradient vector fields.

The filter works on the following basic idea. In the regions where the
dot product between the two gradient fields is negative, the two
fronts propagate in opposite directions. In the regions where the dot
product is positive, the two fronts propagate in the same direction.
This can be used to extract the region of space between two sets of
points.

If StopOnTargets is On, then each front will stop as soon as all seeds
of the other front have been reached. This can markedly speed up the
execution of the filter, since wave propagation does not take place on
the complete image.

Optionally, a connectivity criterion can be applied to the resulting
dot product image. In this case, the only negative region in the
output image is the one connected to the seeds.


Luca Antiga Ph.D. Biomedical Technologies Laboratory, Bioengineering
Department, Mario Negri Institute, Italy.

See:
 rtk::simple::CollidingFronts for the procedural interface

 itk::CollidingFrontsImageFilter for the Doxygen on the original ITK class.


C++ includes: srtkCollidingFrontsImageFilter.h
*/"

%javamethodmodifiers  rtk::simple::CollidingFrontsImageFilter::AddSeedPoint1 "/**
Self& rtk::simple::CollidingFrontsImageFilter::AddSeedPoint1(const std::vector< unsigned int > &point)

Add SeedPoints1 point.

*/
public ";

%javamethodmodifiers  rtk::simple::CollidingFrontsImageFilter::AddSeedPoint2 "/**
Self& rtk::simple::CollidingFrontsImageFilter::AddSeedPoint2(const std::vector< unsigned int > &point)

Add SeedPoints2 point.

*/
public ";

%javamethodmodifiers  rtk::simple::CollidingFrontsImageFilter::ApplyConnectivityOff "/**
Self& rtk::simple::CollidingFrontsImageFilter::ApplyConnectivityOff()
*/
public ";

%javamethodmodifiers  rtk::simple::CollidingFrontsImageFilter::ApplyConnectivityOn "/**
Self& rtk::simple::CollidingFrontsImageFilter::ApplyConnectivityOn()

Set the value of ApplyConnectivity to true or false respectfully.

*/
public ";

%javamethodmodifiers  rtk::simple::CollidingFrontsImageFilter::ClearSeedPoints1 "/**
Self& rtk::simple::CollidingFrontsImageFilter::ClearSeedPoints1()

Remove all SeedPoints1 points.

*/
public ";

%javamethodmodifiers  rtk::simple::CollidingFrontsImageFilter::ClearSeedPoints2 "/**
Self& rtk::simple::CollidingFrontsImageFilter::ClearSeedPoints2()

Remove all SeedPoints2 points.

*/
public ";

%javamethodmodifiers  rtk::simple::CollidingFrontsImageFilter::CollidingFrontsImageFilter "/**
rtk::simple::CollidingFrontsImageFilter::CollidingFrontsImageFilter()

Default Constructor that takes no arguments and initializes default
parameters

*/
public ";

%javamethodmodifiers  rtk::simple::CollidingFrontsImageFilter::Execute "/**
Image rtk::simple::CollidingFrontsImageFilter::Execute(const Image &image1)

Execute the filter on the input image

*/
public ";

%javamethodmodifiers  rtk::simple::CollidingFrontsImageFilter::Execute "/**
Image rtk::simple::CollidingFrontsImageFilter::Execute(const Image &image1, const std::vector< std::vector< unsigned int > >
&seedPoints1, const std::vector< std::vector< unsigned int > >
&seedPoints2, bool applyConnectivity, double negativeEpsilon, bool
stopOnTargets)

Execute the filter on the input image with the given parameters

*/
public ";

%javamethodmodifiers  rtk::simple::CollidingFrontsImageFilter::GetApplyConnectivity "/**
bool rtk::simple::CollidingFrontsImageFilter::GetApplyConnectivity() const
*/
public ";

%javamethodmodifiers  rtk::simple::CollidingFrontsImageFilter::GetName "/**
std::string rtk::simple::CollidingFrontsImageFilter::GetName() const

Name of this class

*/
public ";

%javamethodmodifiers  rtk::simple::CollidingFrontsImageFilter::GetNegativeEpsilon "/**
double rtk::simple::CollidingFrontsImageFilter::GetNegativeEpsilon() const
*/
public ";

%javamethodmodifiers  rtk::simple::CollidingFrontsImageFilter::GetSeedPoints1 "/**
std::vector< std::vector<unsigned int> > rtk::simple::CollidingFrontsImageFilter::GetSeedPoints1() const

Get the container of Seed Points representing the first initial front.

*/
public ";

%javamethodmodifiers  rtk::simple::CollidingFrontsImageFilter::GetSeedPoints2 "/**
std::vector< std::vector<unsigned int> > rtk::simple::CollidingFrontsImageFilter::GetSeedPoints2() const

Get the container of Seed Points representing the second initial
front.

*/
public ";

%javamethodmodifiers  rtk::simple::CollidingFrontsImageFilter::GetStopOnTargets "/**
bool rtk::simple::CollidingFrontsImageFilter::GetStopOnTargets() const
*/
public ";

%javamethodmodifiers  rtk::simple::CollidingFrontsImageFilter::SetApplyConnectivity "/**
Self& rtk::simple::CollidingFrontsImageFilter::SetApplyConnectivity(bool ApplyConnectivity)
*/
public ";

%javamethodmodifiers  rtk::simple::CollidingFrontsImageFilter::SetNegativeEpsilon "/**
Self& rtk::simple::CollidingFrontsImageFilter::SetNegativeEpsilon(double NegativeEpsilon)
*/
public ";

%javamethodmodifiers  rtk::simple::CollidingFrontsImageFilter::SetSeedPoints1 "/**
Self& rtk::simple::CollidingFrontsImageFilter::SetSeedPoints1(const std::vector< std::vector< unsigned int > > &SeedPoints1)

Set the container of Seed Points representing the first initial front.
Seed points are represented as a VectorContainer of LevelSetNodes.

*/
public ";

%javamethodmodifiers  rtk::simple::CollidingFrontsImageFilter::SetSeedPoints2 "/**
Self& rtk::simple::CollidingFrontsImageFilter::SetSeedPoints2(const std::vector< std::vector< unsigned int > > &SeedPoints2)

Set the container of Seed Points representing the second initial
front. Seed points are represented as a VectorContainer of LevelSetNodes.

*/
public ";

%javamethodmodifiers  rtk::simple::CollidingFrontsImageFilter::SetStopOnTargets "/**
Self& rtk::simple::CollidingFrontsImageFilter::SetStopOnTargets(bool StopOnTargets)
*/
public ";

%javamethodmodifiers  rtk::simple::CollidingFrontsImageFilter::StopOnTargetsOff "/**
Self& rtk::simple::CollidingFrontsImageFilter::StopOnTargetsOff()
*/
public ";

%javamethodmodifiers  rtk::simple::CollidingFrontsImageFilter::StopOnTargetsOn "/**
Self& rtk::simple::CollidingFrontsImageFilter::StopOnTargetsOn()

Set the value of StopOnTargets to true or false respectfully.

*/
public ";

%javamethodmodifiers  rtk::simple::CollidingFrontsImageFilter::ToString "/**
std::string rtk::simple::CollidingFrontsImageFilter::ToString() const

Print ourselves out

*/
public ";

%javamethodmodifiers  rtk::simple::CollidingFrontsImageFilter::~CollidingFrontsImageFilter "/**
rtk::simple::CollidingFrontsImageFilter::~CollidingFrontsImageFilter()

Destructor

*/
public ";


%typemap(javaimports) rtk::simple::Command "/**

An implementation of the Command design pattern for callback.


This class provides a callback mechanism for event that occur from the ProcessObject. These commands can be utilized to observe these events.

The Command can be created on the stack, and will automatically unregistered it's
self when destroyed.

For more information see the page Commands and Events for SimpleRTK.

C++ includes: srtkCommand.h
*/"

%javamethodmodifiers  rtk::simple::Command::Command "/**
rtk::simple::Command::Command()

Default Constructor.

*/
public ";

%javamethodmodifiers  rtk::simple::Command::Execute "/**
virtual void rtk::simple::Command::Execute(void)

The method that defines action to be taken by the command

*/
public ";

%javamethodmodifiers  rtk::simple::Command::GetName "/**
virtual std::string rtk::simple::Command::GetName() const

Set/Get Command Name

*/
public ";

%javamethodmodifiers  rtk::simple::Command::SetName "/**
virtual void rtk::simple::Command::SetName(const std::string &name)
*/
public ";

%javamethodmodifiers  rtk::simple::Command::~Command "/**
virtual rtk::simple::Command::~Command(void)

Destructor.

*/
public ";


%typemap(javaimports) rtk::simple::ComplexToImaginaryImageFilter "/**

Computes pixel-wise the imaginary part of a complex image.



See:
 rtk::simple::ComplexToImaginary for the procedural interface

 itk::ComplexToImaginaryImageFilter for the Doxygen on the original ITK class.


C++ includes: srtkComplexToImaginaryImageFilter.h
*/"

%javamethodmodifiers  rtk::simple::ComplexToImaginaryImageFilter::ComplexToImaginaryImageFilter "/**
rtk::simple::ComplexToImaginaryImageFilter::ComplexToImaginaryImageFilter()

Default Constructor that takes no arguments and initializes default
parameters

*/
public ";

%javamethodmodifiers  rtk::simple::ComplexToImaginaryImageFilter::Execute "/**
Image rtk::simple::ComplexToImaginaryImageFilter::Execute(const Image &image1)

Execute the filter on the input image

*/
public ";

%javamethodmodifiers  rtk::simple::ComplexToImaginaryImageFilter::GetName "/**
std::string rtk::simple::ComplexToImaginaryImageFilter::GetName() const

Name of this class

*/
public ";

%javamethodmodifiers  rtk::simple::ComplexToImaginaryImageFilter::ToString "/**
std::string rtk::simple::ComplexToImaginaryImageFilter::ToString() const

Print ourselves out

*/
public ";

%javamethodmodifiers  rtk::simple::ComplexToImaginaryImageFilter::~ComplexToImaginaryImageFilter "/**
rtk::simple::ComplexToImaginaryImageFilter::~ComplexToImaginaryImageFilter()

Destructor

*/
public ";


%typemap(javaimports) rtk::simple::ComplexToModulusImageFilter "/**

Computes pixel-wise the Modulus of a complex image.



See:
 rtk::simple::ComplexToModulus for the procedural interface

 itk::ComplexToModulusImageFilter for the Doxygen on the original ITK class.


C++ includes: srtkComplexToModulusImageFilter.h
*/"

%javamethodmodifiers  rtk::simple::ComplexToModulusImageFilter::ComplexToModulusImageFilter "/**
rtk::simple::ComplexToModulusImageFilter::ComplexToModulusImageFilter()

Default Constructor that takes no arguments and initializes default
parameters

*/
public ";

%javamethodmodifiers  rtk::simple::ComplexToModulusImageFilter::Execute "/**
Image rtk::simple::ComplexToModulusImageFilter::Execute(const Image &image1)

Execute the filter on the input image

*/
public ";

%javamethodmodifiers  rtk::simple::ComplexToModulusImageFilter::GetName "/**
std::string rtk::simple::ComplexToModulusImageFilter::GetName() const

Name of this class

*/
public ";

%javamethodmodifiers  rtk::simple::ComplexToModulusImageFilter::ToString "/**
std::string rtk::simple::ComplexToModulusImageFilter::ToString() const

Print ourselves out

*/
public ";

%javamethodmodifiers  rtk::simple::ComplexToModulusImageFilter::~ComplexToModulusImageFilter "/**
rtk::simple::ComplexToModulusImageFilter::~ComplexToModulusImageFilter()

Destructor

*/
public ";


%typemap(javaimports) rtk::simple::ComplexToPhaseImageFilter "/**

Computes pixel-wise the modulus of a complex image.



See:
 rtk::simple::ComplexToPhase for the procedural interface

 itk::ComplexToPhaseImageFilter for the Doxygen on the original ITK class.


C++ includes: srtkComplexToPhaseImageFilter.h
*/"

%javamethodmodifiers  rtk::simple::ComplexToPhaseImageFilter::ComplexToPhaseImageFilter "/**
rtk::simple::ComplexToPhaseImageFilter::ComplexToPhaseImageFilter()

Default Constructor that takes no arguments and initializes default
parameters

*/
public ";

%javamethodmodifiers  rtk::simple::ComplexToPhaseImageFilter::Execute "/**
Image rtk::simple::ComplexToPhaseImageFilter::Execute(const Image &image1)

Execute the filter on the input image

*/
public ";

%javamethodmodifiers  rtk::simple::ComplexToPhaseImageFilter::GetName "/**
std::string rtk::simple::ComplexToPhaseImageFilter::GetName() const

Name of this class

*/
public ";

%javamethodmodifiers  rtk::simple::ComplexToPhaseImageFilter::ToString "/**
std::string rtk::simple::ComplexToPhaseImageFilter::ToString() const

Print ourselves out

*/
public ";

%javamethodmodifiers  rtk::simple::ComplexToPhaseImageFilter::~ComplexToPhaseImageFilter "/**
rtk::simple::ComplexToPhaseImageFilter::~ComplexToPhaseImageFilter()

Destructor

*/
public ";


%typemap(javaimports) rtk::simple::ComplexToRealImageFilter "/**

Computes pixel-wise the real(x) part of a complex image.



See:
 rtk::simple::ComplexToReal for the procedural interface

 itk::ComplexToRealImageFilter for the Doxygen on the original ITK class.


C++ includes: srtkComplexToRealImageFilter.h
*/"

%javamethodmodifiers  rtk::simple::ComplexToRealImageFilter::ComplexToRealImageFilter "/**
rtk::simple::ComplexToRealImageFilter::ComplexToRealImageFilter()

Default Constructor that takes no arguments and initializes default
parameters

*/
public ";

%javamethodmodifiers  rtk::simple::ComplexToRealImageFilter::Execute "/**
Image rtk::simple::ComplexToRealImageFilter::Execute(const Image &image1)

Execute the filter on the input image

*/
public ";

%javamethodmodifiers  rtk::simple::ComplexToRealImageFilter::GetName "/**
std::string rtk::simple::ComplexToRealImageFilter::GetName() const

Name of this class

*/
public ";

%javamethodmodifiers  rtk::simple::ComplexToRealImageFilter::ToString "/**
std::string rtk::simple::ComplexToRealImageFilter::ToString() const

Print ourselves out

*/
public ";

%javamethodmodifiers  rtk::simple::ComplexToRealImageFilter::~ComplexToRealImageFilter "/**
rtk::simple::ComplexToRealImageFilter::~ComplexToRealImageFilter()

Destructor

*/
public ";


%typemap(javaimports) rtk::simple::ComposeImageFilter "/**

ComposeImageFilter combine several scalar images into a multicomponent image.


ComposeImageFilter combine several scalar images into an itk::Image of vector pixel ( itk::Vector , itk::RGBPixel , ...), of std::complex pixel, or in an itk::VectorImage .

Inputs and Usage
 All input images are expected to have the same template parameters
and have the same size and origin.

See:
 VectorImage


 VectorIndexSelectionCastImageFilter
Wiki Examples:

All Examples

Create a vector image from a collection of scalar images

Compose a vector image (with 3 components) from three scalar images

Convert a real image and an imaginary image to a complex image

See:
 rtk::simple::Compose for the procedural interface


C++ includes: srtkComposeImageFilter.h
*/"

%javamethodmodifiers  rtk::simple::ComposeImageFilter::ComposeImageFilter "/**
rtk::simple::ComposeImageFilter::ComposeImageFilter()

Default Constructor that takes no arguments and initializes default
parameters

*/
public ";

%javamethodmodifiers  rtk::simple::ComposeImageFilter::Execute "/**
Image rtk::simple::ComposeImageFilter::Execute(const std::vector< Image > &images)

Execute the filter on the input images

*/
public ";

%javamethodmodifiers  rtk::simple::ComposeImageFilter::Execute "/**
Image rtk::simple::ComposeImageFilter::Execute(const Image &image1)
*/
public ";

%javamethodmodifiers  rtk::simple::ComposeImageFilter::Execute "/**
Image rtk::simple::ComposeImageFilter::Execute(const Image &image1, const Image &image2)
*/
public ";

%javamethodmodifiers  rtk::simple::ComposeImageFilter::Execute "/**
Image rtk::simple::ComposeImageFilter::Execute(const Image &image1, const Image &image2, const Image &image3)
*/
public ";

%javamethodmodifiers  rtk::simple::ComposeImageFilter::Execute "/**
Image rtk::simple::ComposeImageFilter::Execute(const Image &image1, const Image &image2, const Image &image3, const
Image &image4)
*/
public ";

%javamethodmodifiers  rtk::simple::ComposeImageFilter::Execute "/**
Image rtk::simple::ComposeImageFilter::Execute(const Image &image1, const Image &image2, const Image &image3, const
Image &image4, const Image &image5)
*/
public ";

%javamethodmodifiers  rtk::simple::ComposeImageFilter::GetName "/**
std::string rtk::simple::ComposeImageFilter::GetName() const

Name of this class

*/
public ";

%javamethodmodifiers  rtk::simple::ComposeImageFilter::ToString "/**
std::string rtk::simple::ComposeImageFilter::ToString() const

Print ourselves out

*/
public ";

%javamethodmodifiers  rtk::simple::ComposeImageFilter::~ComposeImageFilter "/**
rtk::simple::ComposeImageFilter::~ComposeImageFilter()

Destructor

*/
public ";


%typemap(javaimports) rtk::simple::ConfidenceConnectedImageFilter "/**

Segment pixels with similar statistics using connectivity.


This filter extracts a connected set of pixels whose pixel intensities
are consistent with the pixel statistics of a seed point. The mean and
variance across a neighborhood (8-connected, 26-connected, etc.) are
calculated for a seed point. Then pixels connected to this seed point
whose values are within the confidence interval for the seed point are
grouped. The width of the confidence interval is controlled by the
\"Multiplier\" variable (the confidence interval is the mean plus or
minus the \"Multiplier\" times the standard deviation). If the
intensity variations across a segment were gaussian, a \"Multiplier\"
setting of 2.5 would define a confidence interval wide enough to
capture 99% of samples in the segment.

After this initial segmentation is calculated, the mean and variance
are re-calculated. All the pixels in the previous segmentation are
used to calculate the mean the standard deviation (as opposed to using
the pixels in the neighborhood of the seed point). The segmentation is
then recalculated using these refined estimates for the mean and
variance of the pixel values. This process is repeated for the
specified number of iterations. Setting the \"NumberOfIterations\" to
zero stops the algorithm after the initial segmentation from the seed
point.

NOTE: the lower and upper threshold are restricted to lie within the
valid numeric limits of the input data pixel type. Also, the limits
may be adjusted to contain the seed point's intensity.

Wiki Examples:

All Examples

Segment pixels with similar statistics using connectivity
See:
 rtk::simple::ConfidenceConnected for the procedural interface

 itk::ConfidenceConnectedImageFilter for the Doxygen on the original ITK class.



C++ includes: srtkConfidenceConnectedImageFilter.h
*/"

%javamethodmodifiers  rtk::simple::ConfidenceConnectedImageFilter::AddSeed "/**
Self& rtk::simple::ConfidenceConnectedImageFilter::AddSeed(const std::vector< unsigned int > &idx)

AddSeed - Add a seed to the end of the list

*/
public ";

%javamethodmodifiers  rtk::simple::ConfidenceConnectedImageFilter::ClearSeeds "/**
Self& rtk::simple::ConfidenceConnectedImageFilter::ClearSeeds()

ClearSeeds - Clear out all seeds in the list

*/
public ";

%javamethodmodifiers  rtk::simple::ConfidenceConnectedImageFilter::ConfidenceConnectedImageFilter "/**
rtk::simple::ConfidenceConnectedImageFilter::ConfidenceConnectedImageFilter()

Default Constructor that takes no arguments and initializes default
parameters

*/
public ";

%javamethodmodifiers  rtk::simple::ConfidenceConnectedImageFilter::Execute "/**
Image rtk::simple::ConfidenceConnectedImageFilter::Execute(const Image &image1)

Execute the filter on the input image

*/
public ";

%javamethodmodifiers  rtk::simple::ConfidenceConnectedImageFilter::Execute "/**
Image rtk::simple::ConfidenceConnectedImageFilter::Execute(const Image &image1, const std::vector< std::vector< unsigned int > >
&seedList, unsigned int numberOfIterations, double multiplier,
unsigned int initialNeighborhoodRadius, uint8_t replaceValue)

Execute the filter on the input image with the given parameters

*/
public ";

%javamethodmodifiers  rtk::simple::ConfidenceConnectedImageFilter::GetInitialNeighborhoodRadius "/**
unsigned int rtk::simple::ConfidenceConnectedImageFilter::GetInitialNeighborhoodRadius() const

Get/Set the radius of the neighborhood over which the statistics are
evaluated

*/
public ";

%javamethodmodifiers  rtk::simple::ConfidenceConnectedImageFilter::GetMean "/**
double rtk::simple::ConfidenceConnectedImageFilter::GetMean() const

Method to get access to the mean of the pixels accepted in the output
region. This method should only be invoked after the filter has been
executed using the Update() method.

This is a measurement. Its value is updated in the Execute methods, so
the value will only be valid after an execution.

*/
public ";

%javamethodmodifiers  rtk::simple::ConfidenceConnectedImageFilter::GetMultiplier "/**
double rtk::simple::ConfidenceConnectedImageFilter::GetMultiplier() const

Set/Get the multiplier to define the confidence interval. Multiplier
can be anything greater than zero. A typical value is 2.5

*/
public ";

%javamethodmodifiers  rtk::simple::ConfidenceConnectedImageFilter::GetName "/**
std::string rtk::simple::ConfidenceConnectedImageFilter::GetName() const

Name of this class

*/
public ";

%javamethodmodifiers  rtk::simple::ConfidenceConnectedImageFilter::GetNumberOfIterations "/**
unsigned int rtk::simple::ConfidenceConnectedImageFilter::GetNumberOfIterations() const

Set/Get the number of iterations

*/
public ";

%javamethodmodifiers  rtk::simple::ConfidenceConnectedImageFilter::GetReplaceValue "/**
uint8_t rtk::simple::ConfidenceConnectedImageFilter::GetReplaceValue() const

Set/Get value to replace thresholded pixels

*/
public ";

%javamethodmodifiers  rtk::simple::ConfidenceConnectedImageFilter::GetSeedList "/**
std::vector< std::vector<unsigned int> > rtk::simple::ConfidenceConnectedImageFilter::GetSeedList() const

Get SeedList

*/
public ";

%javamethodmodifiers  rtk::simple::ConfidenceConnectedImageFilter::GetVariance "/**
double rtk::simple::ConfidenceConnectedImageFilter::GetVariance() const

Method to get access to the variance of the pixels accepted in the
output region. This method should only be invoked after the filter has
been executed using the Update() method.

This is a measurement. Its value is updated in the Execute methods, so
the value will only be valid after an execution.

*/
public ";

%javamethodmodifiers  rtk::simple::ConfidenceConnectedImageFilter::SetInitialNeighborhoodRadius "/**
Self& rtk::simple::ConfidenceConnectedImageFilter::SetInitialNeighborhoodRadius(unsigned int InitialNeighborhoodRadius)

Get/Set the radius of the neighborhood over which the statistics are
evaluated

*/
public ";

%javamethodmodifiers  rtk::simple::ConfidenceConnectedImageFilter::SetMultiplier "/**
Self& rtk::simple::ConfidenceConnectedImageFilter::SetMultiplier(double Multiplier)

Set/Get the multiplier to define the confidence interval. Multiplier
can be anything greater than zero. A typical value is 2.5

*/
public ";

%javamethodmodifiers  rtk::simple::ConfidenceConnectedImageFilter::SetNumberOfIterations "/**
Self& rtk::simple::ConfidenceConnectedImageFilter::SetNumberOfIterations(unsigned int NumberOfIterations)

Set/Get the number of iterations

*/
public ";

%javamethodmodifiers  rtk::simple::ConfidenceConnectedImageFilter::SetReplaceValue "/**
Self& rtk::simple::ConfidenceConnectedImageFilter::SetReplaceValue(uint8_t ReplaceValue)

Set/Get value to replace thresholded pixels

*/
public ";

%javamethodmodifiers  rtk::simple::ConfidenceConnectedImageFilter::SetSeed "/**
Self& rtk::simple::ConfidenceConnectedImageFilter::SetSeed(const std::vector< unsigned int > &idx)

SetSeed - Set list to a single seed

*/
public ";

%javamethodmodifiers  rtk::simple::ConfidenceConnectedImageFilter::SetSeedList "/**
Self& rtk::simple::ConfidenceConnectedImageFilter::SetSeedList(const std::vector< std::vector< unsigned int > > &t)

Set SeedList

*/
public ";

%javamethodmodifiers  rtk::simple::ConfidenceConnectedImageFilter::ToString "/**
std::string rtk::simple::ConfidenceConnectedImageFilter::ToString() const

Print ourselves out

*/
public ";

%javamethodmodifiers  rtk::simple::ConfidenceConnectedImageFilter::~ConfidenceConnectedImageFilter "/**
rtk::simple::ConfidenceConnectedImageFilter::~ConfidenceConnectedImageFilter()

Destructor

*/
public ";


%typemap(javaimports) rtk::simple::ConnectedComponentImageFilter "/**

Label the objects in a binary image.


ConnectedComponentImageFilter labels the objects in a binary image (non-zero pixels are considered
to be objects, zero-valued pixels are considered to be background).
Each distinct object is assigned a unique label. The filter
experiments with some improvements to the existing implementation, and
is based on run length encoding along raster lines. The final object
labels start with 1 and are consecutive. Objects that are reached
earlier by a raster order scan have a lower label. This is different
to the behaviour of the original connected component image filter
which did not produce consecutive labels or impose any particular
ordering.

After the filter is executed, ObjectCount holds the number of
connected components.


See:
 ImageToImageFilter
Wiki Examples:

All Examples

Label connected components in a binary image
See:
 rtk::simple::ConnectedComponent for the procedural interface

 itk::ConnectedComponentImageFilter for the Doxygen on the original ITK class.



C++ includes: srtkConnectedComponentImageFilter.h
*/"

%javamethodmodifiers  rtk::simple::ConnectedComponentImageFilter::ConnectedComponentImageFilter "/**
rtk::simple::ConnectedComponentImageFilter::ConnectedComponentImageFilter()

Default Constructor that takes no arguments and initializes default
parameters

*/
public ";

%javamethodmodifiers  rtk::simple::ConnectedComponentImageFilter::Execute "/**
Image rtk::simple::ConnectedComponentImageFilter::Execute(const Image &image1)

Execute the filter on the input image

*/
public ";

%javamethodmodifiers  rtk::simple::ConnectedComponentImageFilter::Execute "/**
Image rtk::simple::ConnectedComponentImageFilter::Execute(const Image &image1, bool fullyConnected)

Execute the filter on the input image with the given parameters

*/
public ";

%javamethodmodifiers  rtk::simple::ConnectedComponentImageFilter::FullyConnectedOff "/**
Self& rtk::simple::ConnectedComponentImageFilter::FullyConnectedOff()
*/
public ";

%javamethodmodifiers  rtk::simple::ConnectedComponentImageFilter::FullyConnectedOn "/**
Self& rtk::simple::ConnectedComponentImageFilter::FullyConnectedOn()

Set the value of FullyConnected to true or false respectfully.

*/
public ";

%javamethodmodifiers  rtk::simple::ConnectedComponentImageFilter::GetFullyConnected "/**
bool rtk::simple::ConnectedComponentImageFilter::GetFullyConnected() const

Set/Get whether the connected components are defined strictly by face
connectivity or by face+edge+vertex connectivity. Default is
FullyConnectedOff. For objects that are 1 pixel wide, use
FullyConnectedOn.

*/
public ";

%javamethodmodifiers  rtk::simple::ConnectedComponentImageFilter::GetName "/**
std::string rtk::simple::ConnectedComponentImageFilter::GetName() const

Name of this class

*/
public ";

%javamethodmodifiers  rtk::simple::ConnectedComponentImageFilter::GetObjectCount "/**
uint32_t rtk::simple::ConnectedComponentImageFilter::GetObjectCount() const

This is a measurement. Its value is updated in the Execute methods, so
the value will only be valid after an execution.

*/
public ";

%javamethodmodifiers  rtk::simple::ConnectedComponentImageFilter::SetFullyConnected "/**
Self& rtk::simple::ConnectedComponentImageFilter::SetFullyConnected(bool FullyConnected)

Set/Get whether the connected components are defined strictly by face
connectivity or by face+edge+vertex connectivity. Default is
FullyConnectedOff. For objects that are 1 pixel wide, use
FullyConnectedOn.

*/
public ";

%javamethodmodifiers  rtk::simple::ConnectedComponentImageFilter::ToString "/**
std::string rtk::simple::ConnectedComponentImageFilter::ToString() const

Print ourselves out

*/
public ";

%javamethodmodifiers  rtk::simple::ConnectedComponentImageFilter::~ConnectedComponentImageFilter "/**
rtk::simple::ConnectedComponentImageFilter::~ConnectedComponentImageFilter()

Destructor

*/
public ";


%typemap(javaimports) rtk::simple::ConnectedThresholdImageFilter "/**

Label pixels that are connected to a seed and lie within a range of
values.


ConnectedThresholdImageFilter labels pixels with ReplaceValue that are connected to an initial Seed
AND lie within a Lower and Upper threshold range.
See:
 rtk::simple::ConnectedThreshold for the procedural interface

 itk::ConnectedThresholdImageFilter for the Doxygen on the original ITK class.


C++ includes: srtkConnectedThresholdImageFilter.h
*/"

%javamethodmodifiers  rtk::simple::ConnectedThresholdImageFilter::AddSeed "/**
Self& rtk::simple::ConnectedThresholdImageFilter::AddSeed(const std::vector< unsigned int > &idx)

AddSeed - Add a seed to the end of the list

*/
public ";

%javamethodmodifiers  rtk::simple::ConnectedThresholdImageFilter::ClearSeeds "/**
Self& rtk::simple::ConnectedThresholdImageFilter::ClearSeeds()

ClearSeeds - Clear out all seeds in the list

*/
public ";

%javamethodmodifiers  rtk::simple::ConnectedThresholdImageFilter::ConnectedThresholdImageFilter "/**
rtk::simple::ConnectedThresholdImageFilter::ConnectedThresholdImageFilter()

Default Constructor that takes no arguments and initializes default
parameters

*/
public ";

%javamethodmodifiers  rtk::simple::ConnectedThresholdImageFilter::Execute "/**
Image rtk::simple::ConnectedThresholdImageFilter::Execute(const Image &image1)

Execute the filter on the input image

*/
public ";

%javamethodmodifiers  rtk::simple::ConnectedThresholdImageFilter::Execute "/**
Image rtk::simple::ConnectedThresholdImageFilter::Execute(const Image &image1, const std::vector< std::vector< unsigned int > >
&seedList, double lower, double upper, uint8_t replaceValue,
ConnectedThresholdImageFilter::ConnectivityType connectivity)

Execute the filter on the input image with the given parameters

*/
public ";

%javamethodmodifiers  rtk::simple::ConnectedThresholdImageFilter::GetConnectivity "/**
ConnectivityType rtk::simple::ConnectedThresholdImageFilter::GetConnectivity() const

Type of connectivity to use (fully connected OR 4(2D), 6(3D), 2*N(ND)
connectivity)

*/
public ";

%javamethodmodifiers  rtk::simple::ConnectedThresholdImageFilter::GetLower "/**
double rtk::simple::ConnectedThresholdImageFilter::GetLower() const
*/
public ";

%javamethodmodifiers  rtk::simple::ConnectedThresholdImageFilter::GetName "/**
std::string rtk::simple::ConnectedThresholdImageFilter::GetName() const

Name of this class

*/
public ";

%javamethodmodifiers  rtk::simple::ConnectedThresholdImageFilter::GetReplaceValue "/**
uint8_t rtk::simple::ConnectedThresholdImageFilter::GetReplaceValue() const

Set/Get value to replace thresholded pixels. Pixels that lie * within
Lower and Upper (inclusive) will be replaced with this value. The
default is 1.

*/
public ";

%javamethodmodifiers  rtk::simple::ConnectedThresholdImageFilter::GetSeedList "/**
std::vector< std::vector<unsigned int> > rtk::simple::ConnectedThresholdImageFilter::GetSeedList() const

Get SeedList

*/
public ";

%javamethodmodifiers  rtk::simple::ConnectedThresholdImageFilter::GetUpper "/**
double rtk::simple::ConnectedThresholdImageFilter::GetUpper() const

Get Upper and Lower Threshold inputs as values

*/
public ";

%javamethodmodifiers  rtk::simple::ConnectedThresholdImageFilter::SetConnectivity "/**
Self& rtk::simple::ConnectedThresholdImageFilter::SetConnectivity(ConnectivityType Connectivity)

Type of connectivity to use (fully connected OR 4(2D), 6(3D), 2*N(ND)
connectivity)

*/
public ";

%javamethodmodifiers  rtk::simple::ConnectedThresholdImageFilter::SetLower "/**
Self& rtk::simple::ConnectedThresholdImageFilter::SetLower(double Lower)

Set Upper and Lower Threshold inputs as values

*/
public ";

%javamethodmodifiers  rtk::simple::ConnectedThresholdImageFilter::SetReplaceValue "/**
Self& rtk::simple::ConnectedThresholdImageFilter::SetReplaceValue(uint8_t ReplaceValue)

Set/Get value to replace thresholded pixels. Pixels that lie * within
Lower and Upper (inclusive) will be replaced with this value. The
default is 1.

*/
public ";

%javamethodmodifiers  rtk::simple::ConnectedThresholdImageFilter::SetSeed "/**
Self& rtk::simple::ConnectedThresholdImageFilter::SetSeed(const std::vector< unsigned int > &idx)

SetSeed - Set list to a single seed

*/
public ";

%javamethodmodifiers  rtk::simple::ConnectedThresholdImageFilter::SetSeedList "/**
Self& rtk::simple::ConnectedThresholdImageFilter::SetSeedList(const std::vector< std::vector< unsigned int > > &t)

Set SeedList

*/
public ";

%javamethodmodifiers  rtk::simple::ConnectedThresholdImageFilter::SetUpper "/**
Self& rtk::simple::ConnectedThresholdImageFilter::SetUpper(double Upper)

Set Upper and Lower Threshold inputs as values

*/
public ";

%javamethodmodifiers  rtk::simple::ConnectedThresholdImageFilter::ToString "/**
std::string rtk::simple::ConnectedThresholdImageFilter::ToString() const

Print ourselves out

*/
public ";

%javamethodmodifiers  rtk::simple::ConnectedThresholdImageFilter::~ConnectedThresholdImageFilter "/**
rtk::simple::ConnectedThresholdImageFilter::~ConnectedThresholdImageFilter()

Destructor

*/
public ";


%typemap(javaimports) rtk::simple::ConstantPadImageFilter "/**

Increase the image size by padding with a constant value.


ConstantPadImageFilter changes the output image region. If the output image region is larger
than the input image region, the extra pixels are filled in by a
constant value. The output image region must be specified.

Visual explanation of padding regions.This filter is implemented as a
multithreaded filter. It provides a ThreadedGenerateData() method for
its implementation.


See:
 WrapPadImageFilter , MirrorPadImageFilter
Wiki Examples:

All Examples

Pad an image with a constant value
See:
 rtk::simple::ConstantPad for the procedural interface

 itk::ConstantPadImageFilter for the Doxygen on the original ITK class.



C++ includes: srtkConstantPadImageFilter.h
*/"

%javamethodmodifiers  rtk::simple::ConstantPadImageFilter::ConstantPadImageFilter "/**
rtk::simple::ConstantPadImageFilter::ConstantPadImageFilter()

Default Constructor that takes no arguments and initializes default
parameters

*/
public ";

%javamethodmodifiers  rtk::simple::ConstantPadImageFilter::Execute "/**
Image rtk::simple::ConstantPadImageFilter::Execute(const Image &image1)

Execute the filter on the input image

*/
public ";

%javamethodmodifiers  rtk::simple::ConstantPadImageFilter::Execute "/**
Image rtk::simple::ConstantPadImageFilter::Execute(const Image &image1, const std::vector< unsigned int >
&padLowerBound, const std::vector< unsigned int > &padUpperBound,
double constant)

Execute the filter on the input image with the given parameters

*/
public ";

%javamethodmodifiers  rtk::simple::ConstantPadImageFilter::GetConstant "/**
double rtk::simple::ConstantPadImageFilter::GetConstant() const

Set/Get the pad value. Default is Zero.

*/
public ";

%javamethodmodifiers  rtk::simple::ConstantPadImageFilter::GetName "/**
std::string rtk::simple::ConstantPadImageFilter::GetName() const

Name of this class

*/
public ";

%javamethodmodifiers  rtk::simple::ConstantPadImageFilter::GetPadLowerBound "/**
std::vector<unsigned int> rtk::simple::ConstantPadImageFilter::GetPadLowerBound() const
*/
public ";

%javamethodmodifiers  rtk::simple::ConstantPadImageFilter::GetPadUpperBound "/**
std::vector<unsigned int> rtk::simple::ConstantPadImageFilter::GetPadUpperBound() const
*/
public ";

%javamethodmodifiers  rtk::simple::ConstantPadImageFilter::SetConstant "/**
Self& rtk::simple::ConstantPadImageFilter::SetConstant(double Constant)

Set/Get the pad value. Default is Zero.

*/
public ";

%javamethodmodifiers  rtk::simple::ConstantPadImageFilter::SetPadLowerBound "/**
Self& rtk::simple::ConstantPadImageFilter::SetPadLowerBound(const std::vector< unsigned int > &PadLowerBound)
*/
public ";

%javamethodmodifiers  rtk::simple::ConstantPadImageFilter::SetPadUpperBound "/**
Self& rtk::simple::ConstantPadImageFilter::SetPadUpperBound(const std::vector< unsigned int > &PadUpperBound)
*/
public ";

%javamethodmodifiers  rtk::simple::ConstantPadImageFilter::ToString "/**
std::string rtk::simple::ConstantPadImageFilter::ToString() const

Print ourselves out

*/
public ";

%javamethodmodifiers  rtk::simple::ConstantPadImageFilter::~ConstantPadImageFilter "/**
rtk::simple::ConstantPadImageFilter::~ConstantPadImageFilter()

Destructor

*/
public ";


%typemap(javaimports) rtk::simple::ConvolutionImageFilter "/**

Convolve a given image with an arbitrary image kernel.


This filter operates by centering the flipped kernel at each pixel in
the image and computing the inner product between pixel values in the
image and pixel values in the kernel. The center of the kernel is
defined as $ \\\\lfloor (2*i+s-1)/2 \\\\rfloor $ where $i$ is the index and $s$ is the size of the largest possible region of the kernel image. For
kernels with odd sizes in all dimensions, this corresponds to the
center pixel. If a dimension of the kernel image has an even size,
then the center index of the kernel in that dimension will be the
largest integral index that is less than the continuous index of the
image center.

The kernel can optionally be normalized to sum to 1 using NormalizeOn() . Normalization is off by default.


WARNING:
This filter ignores the spacing, origin, and orientation of the kernel
image and treats them as identical to those in the input image.
 This code was contributed in the Insight Journal paper:

\"Image Kernel Convolution\" by Tustison N., Gee J. https://hdl.handle.net/1926/1323 http://www.insight-journal.org/browse/publication/208


Nicholas J. Tustison
 James C. Gee

Wiki Examples:

All Examples

Convolve an image with a kernel
See:
 rtk::simple::Convolution for the procedural interface

 itk::ConvolutionImageFilter for the Doxygen on the original ITK class.



C++ includes: srtkConvolutionImageFilter.h
*/"

%javamethodmodifiers  rtk::simple::ConvolutionImageFilter::ConvolutionImageFilter "/**
rtk::simple::ConvolutionImageFilter::ConvolutionImageFilter()

Default Constructor that takes no arguments and initializes default
parameters

*/
public ";

%javamethodmodifiers  rtk::simple::ConvolutionImageFilter::Execute "/**
Image rtk::simple::ConvolutionImageFilter::Execute(const Image &image1, const Image &image2)

Execute the filter on the input images

*/
public ";

%javamethodmodifiers  rtk::simple::ConvolutionImageFilter::Execute "/**
Image rtk::simple::ConvolutionImageFilter::Execute(const Image &image1, const Image &image2, bool normalize,
ConvolutionImageFilter::BoundaryConditionType boundaryCondition,
ConvolutionImageFilter::OutputRegionModeType outputRegionMode)

Execute the filter on the input images with the given parameters

*/
public ";

%javamethodmodifiers  rtk::simple::ConvolutionImageFilter::GetBoundaryCondition "/**
BoundaryConditionType rtk::simple::ConvolutionImageFilter::GetBoundaryCondition() const
*/
public ";

%javamethodmodifiers  rtk::simple::ConvolutionImageFilter::GetName "/**
std::string rtk::simple::ConvolutionImageFilter::GetName() const

Name of this class

*/
public ";

%javamethodmodifiers  rtk::simple::ConvolutionImageFilter::GetNormalize "/**
bool rtk::simple::ConvolutionImageFilter::GetNormalize() const
*/
public ";

%javamethodmodifiers  rtk::simple::ConvolutionImageFilter::GetOutputRegionMode "/**
OutputRegionModeType rtk::simple::ConvolutionImageFilter::GetOutputRegionMode() const
*/
public ";

%javamethodmodifiers  rtk::simple::ConvolutionImageFilter::NormalizeOff "/**
Self& rtk::simple::ConvolutionImageFilter::NormalizeOff()
*/
public ";

%javamethodmodifiers  rtk::simple::ConvolutionImageFilter::NormalizeOn "/**
Self& rtk::simple::ConvolutionImageFilter::NormalizeOn()

Set the value of Normalize to true or false respectfully.

*/
public ";

%javamethodmodifiers  rtk::simple::ConvolutionImageFilter::SetBoundaryCondition "/**
Self& rtk::simple::ConvolutionImageFilter::SetBoundaryCondition(BoundaryConditionType BoundaryCondition)
*/
public ";

%javamethodmodifiers  rtk::simple::ConvolutionImageFilter::SetNormalize "/**
Self& rtk::simple::ConvolutionImageFilter::SetNormalize(bool Normalize)

Normalize the output image by the sum of the kernel components

*/
public ";

%javamethodmodifiers  rtk::simple::ConvolutionImageFilter::SetOutputRegionMode "/**
Self& rtk::simple::ConvolutionImageFilter::SetOutputRegionMode(OutputRegionModeType OutputRegionMode)
*/
public ";

%javamethodmodifiers  rtk::simple::ConvolutionImageFilter::ToString "/**
std::string rtk::simple::ConvolutionImageFilter::ToString() const

Print ourselves out

*/
public ";

%javamethodmodifiers  rtk::simple::ConvolutionImageFilter::~ConvolutionImageFilter "/**
rtk::simple::ConvolutionImageFilter::~ConvolutionImageFilter()

Destructor

*/
public ";


%typemap(javaimports) rtk::simple::CosImageFilter "/**

Computes the cosine of each pixel.


This filter is templated over the pixel type of the input image and
the pixel type of the output image.

The filter walks over all of the pixels in the input image, and for
each pixel does the following:


cast the pixel value to double ,

apply the std::cos() function to the double value,

cast the double value resulting from std::cos() to the pixel type of
the output image,

store the cast value into the output image.
 The filter expects both images to have the same dimension (e.g. both
2D, or both 3D, or both ND)
See:
 rtk::simple::Cos for the procedural interface

 itk::CosImageFilter for the Doxygen on the original ITK class.


C++ includes: srtkCosImageFilter.h
*/"

%javamethodmodifiers  rtk::simple::CosImageFilter::CosImageFilter "/**
rtk::simple::CosImageFilter::CosImageFilter()

Default Constructor that takes no arguments and initializes default
parameters

*/
public ";

%javamethodmodifiers  rtk::simple::CosImageFilter::Execute "/**
Image rtk::simple::CosImageFilter::Execute(const Image &image1)

Execute the filter on the input image

*/
public ";

%javamethodmodifiers  rtk::simple::CosImageFilter::GetName "/**
std::string rtk::simple::CosImageFilter::GetName() const

Name of this class

*/
public ";

%javamethodmodifiers  rtk::simple::CosImageFilter::ToString "/**
std::string rtk::simple::CosImageFilter::ToString() const

Print ourselves out

*/
public ";

%javamethodmodifiers  rtk::simple::CosImageFilter::~CosImageFilter "/**
rtk::simple::CosImageFilter::~CosImageFilter()

Destructor

*/
public ";


%typemap(javaimports) rtk::simple::CropImageFilter "/**

Decrease the image size by cropping the image by an itk::Size at both the upper and lower bounds of the largest possible region.


CropImageFilter changes the image boundary of an image by removing pixels outside the
target region. The target region is not specified in advance, but
calculated in BeforeThreadedGenerateData() .

This filter uses ExtractImageFilter to perform the cropping.

Wiki Examples:

All Examples

Crop an image by specifying the region to throw away
See:
 rtk::simple::Crop for the procedural interface

 itk::CropImageFilter for the Doxygen on the original ITK class.



C++ includes: srtkCropImageFilter.h
*/"

%javamethodmodifiers  rtk::simple::CropImageFilter::CropImageFilter "/**
rtk::simple::CropImageFilter::CropImageFilter()

Default Constructor that takes no arguments and initializes default
parameters

*/
public ";

%javamethodmodifiers  rtk::simple::CropImageFilter::Execute "/**
Image rtk::simple::CropImageFilter::Execute(const Image &image1)

Execute the filter on the input image

*/
public ";

%javamethodmodifiers  rtk::simple::CropImageFilter::Execute "/**
Image rtk::simple::CropImageFilter::Execute(const Image &image1, const std::vector< unsigned int >
&lowerBoundaryCropSize, const std::vector< unsigned int >
&upperBoundaryCropSize)

Execute the filter on the input image with the given parameters

*/
public ";

%javamethodmodifiers  rtk::simple::CropImageFilter::GetLowerBoundaryCropSize "/**
std::vector<unsigned int> rtk::simple::CropImageFilter::GetLowerBoundaryCropSize() const

Set/Get the cropping sizes for the upper and lower boundaries.

*/
public ";

%javamethodmodifiers  rtk::simple::CropImageFilter::GetName "/**
std::string rtk::simple::CropImageFilter::GetName() const

Name of this class

*/
public ";

%javamethodmodifiers  rtk::simple::CropImageFilter::GetUpperBoundaryCropSize "/**
std::vector<unsigned int> rtk::simple::CropImageFilter::GetUpperBoundaryCropSize() const

Set/Get the cropping sizes for the upper and lower boundaries.

*/
public ";

%javamethodmodifiers  rtk::simple::CropImageFilter::SetLowerBoundaryCropSize "/**
Self& rtk::simple::CropImageFilter::SetLowerBoundaryCropSize(const std::vector< unsigned int > &LowerBoundaryCropSize)

Set/Get the cropping sizes for the upper and lower boundaries.

*/
public ";

%javamethodmodifiers  rtk::simple::CropImageFilter::SetUpperBoundaryCropSize "/**
Self& rtk::simple::CropImageFilter::SetUpperBoundaryCropSize(const std::vector< unsigned int > &UpperBoundaryCropSize)

Set/Get the cropping sizes for the upper and lower boundaries.

*/
public ";

%javamethodmodifiers  rtk::simple::CropImageFilter::ToString "/**
std::string rtk::simple::CropImageFilter::ToString() const

Print ourselves out

*/
public ";

%javamethodmodifiers  rtk::simple::CropImageFilter::~CropImageFilter "/**
rtk::simple::CropImageFilter::~CropImageFilter()

Destructor

*/
public ";


%typemap(javaimports) rtk::simple::CurvatureAnisotropicDiffusionImageFilter "/**

This filter performs anisotropic diffusion on a scalar itk::Image using the modified curvature diffusion equation (MCDE) implemented in
itkCurvatureNDAnisotropicDiffusionFunction. For detailed information
on anisotropic diffusion and the MCDE see
itkAnisotropicDiffusionFunction and
itkCurvatureNDAnisotropicDiffusionFunction.

Inputs and Outputs
The input and output to this filter must be a scalar itk::Image with numerical pixel types (float or double). A user defined type
which correctly defines arithmetic operations with floating point
accuracy should also give correct results.
Parameters
Please first read all the documentation found in AnisotropicDiffusionImageFilter and AnisotropicDiffusionFunction . Also see CurvatureNDAnisotropicDiffusionFunction .
 The default time step for this filter is set to the maximum
theoretically stable value: 0.5 / 2^N, where N is the dimensionality
of the image. For a 2D image, this means valid time steps are below
0.1250. For a 3D image, valid time steps are below 0.0625.


See:
 AnisotropicDiffusionImageFilter


 AnisotropicDiffusionFunction


 CurvatureNDAnisotropicDiffusionFunction

 rtk::simple::CurvatureAnisotropicDiffusion for the procedural interface

 itk::CurvatureAnisotropicDiffusionImageFilter for the Doxygen on the original ITK class.


C++ includes: srtkCurvatureAnisotropicDiffusionImageFilter.h
*/"

%javamethodmodifiers  rtk::simple::CurvatureAnisotropicDiffusionImageFilter::CurvatureAnisotropicDiffusionImageFilter "/**
rtk::simple::CurvatureAnisotropicDiffusionImageFilter::CurvatureAnisotropicDiffusionImageFilter()

Default Constructor that takes no arguments and initializes default
parameters

*/
public ";

%javamethodmodifiers  rtk::simple::CurvatureAnisotropicDiffusionImageFilter::EstimateOptimalTimeStep "/**
double rtk::simple::CurvatureAnisotropicDiffusionImageFilter::EstimateOptimalTimeStep(Image &inImage)

This method autmatically sets the optimal timestep for an image given
its spacing.

*/
public ";

%javamethodmodifiers  rtk::simple::CurvatureAnisotropicDiffusionImageFilter::Execute "/**
Image rtk::simple::CurvatureAnisotropicDiffusionImageFilter::Execute(const Image &image1)

Execute the filter on the input image

*/
public ";

%javamethodmodifiers  rtk::simple::CurvatureAnisotropicDiffusionImageFilter::Execute "/**
Image rtk::simple::CurvatureAnisotropicDiffusionImageFilter::Execute(const Image &image1, double timeStep, double conductanceParameter,
unsigned int conductanceScalingUpdateInterval, uint32_t
numberOfIterations)

Execute the filter on the input image with the given parameters

*/
public ";

%javamethodmodifiers  rtk::simple::CurvatureAnisotropicDiffusionImageFilter::GetConductanceParameter "/**
double rtk::simple::CurvatureAnisotropicDiffusionImageFilter::GetConductanceParameter() const
*/
public ";

%javamethodmodifiers  rtk::simple::CurvatureAnisotropicDiffusionImageFilter::GetConductanceScalingUpdateInterval "/**
unsigned int rtk::simple::CurvatureAnisotropicDiffusionImageFilter::GetConductanceScalingUpdateInterval() const
*/
public ";

%javamethodmodifiers  rtk::simple::CurvatureAnisotropicDiffusionImageFilter::GetName "/**
std::string rtk::simple::CurvatureAnisotropicDiffusionImageFilter::GetName() const

Name of this class

*/
public ";

%javamethodmodifiers  rtk::simple::CurvatureAnisotropicDiffusionImageFilter::GetNumberOfIterations "/**
uint32_t rtk::simple::CurvatureAnisotropicDiffusionImageFilter::GetNumberOfIterations() const
*/
public ";

%javamethodmodifiers  rtk::simple::CurvatureAnisotropicDiffusionImageFilter::GetTimeStep "/**
double rtk::simple::CurvatureAnisotropicDiffusionImageFilter::GetTimeStep() const
*/
public ";

%javamethodmodifiers  rtk::simple::CurvatureAnisotropicDiffusionImageFilter::SetConductanceParameter "/**
Self& rtk::simple::CurvatureAnisotropicDiffusionImageFilter::SetConductanceParameter(double ConductanceParameter)
*/
public ";

%javamethodmodifiers  rtk::simple::CurvatureAnisotropicDiffusionImageFilter::SetConductanceScalingUpdateInterval "/**
Self& rtk::simple::CurvatureAnisotropicDiffusionImageFilter::SetConductanceScalingUpdateInterval(unsigned int ConductanceScalingUpdateInterval)
*/
public ";

%javamethodmodifiers  rtk::simple::CurvatureAnisotropicDiffusionImageFilter::SetNumberOfIterations "/**
Self& rtk::simple::CurvatureAnisotropicDiffusionImageFilter::SetNumberOfIterations(uint32_t NumberOfIterations)
*/
public ";

%javamethodmodifiers  rtk::simple::CurvatureAnisotropicDiffusionImageFilter::SetTimeStep "/**
Self& rtk::simple::CurvatureAnisotropicDiffusionImageFilter::SetTimeStep(double TimeStep)
*/
public ";

%javamethodmodifiers  rtk::simple::CurvatureAnisotropicDiffusionImageFilter::ToString "/**
std::string rtk::simple::CurvatureAnisotropicDiffusionImageFilter::ToString() const

Print ourselves out

*/
public ";

%javamethodmodifiers  rtk::simple::CurvatureAnisotropicDiffusionImageFilter::~CurvatureAnisotropicDiffusionImageFilter "/**
rtk::simple::CurvatureAnisotropicDiffusionImageFilter::~CurvatureAnisotropicDiffusionImageFilter()

Destructor

*/
public ";


%typemap(javaimports) rtk::simple::CurvatureFlowImageFilter "/**

Denoise an image using curvature driven flow.


CurvatureFlowImageFilter implements a curvature driven image denoising algorithm. Iso-
brightness contours in the grayscale input image are viewed as a level
set. The level set is then evolved using a curvature-based speed
function:

\\\\[ I_t = \\\\kappa |\\\\nabla I| \\\\] where $ \\\\kappa $ is the curvature.

The advantage of this approach is that sharp boundaries are preserved
with smoothing occurring only within a region. However, it should be
noted that continuous application of this scheme will result in the
eventual removal of all information as each contour shrinks to zero
and disappear.

Note that unlike level set segmentation algorithms, the image to be
denoised is already the level set and can be set directly as the input
using the SetInput() method.

This filter has two parameters: the number of update iterations to be
performed and the timestep between each update.

The timestep should be \"small enough\" to ensure numerical stability.
Stability is guarantee when the timestep meets the CFL (Courant-
Friedrichs-Levy) condition. Broadly speaking, this condition ensures
that each contour does not move more than one grid position at each
timestep. In the literature, the timestep is typically user specified
and have to manually tuned to the application.

This filter make use of the multi-threaded finite difference solver
hierarchy. Updates are computed using a CurvatureFlowFunction object. A zero flux Neumann boundary condition when computing
derivatives near the data boundary.

This filter may be streamed. To support streaming this filter produces
a padded output which takes into account edge effects. The size of the
padding is m_NumberOfIterations on each edge. Users of this filter
should only make use of the center valid central region.


WARNING:
This filter assumes that the input and output types have the same
dimensions. This filter also requires that the output image pixels are
of a floating point type. This filter works for any dimensional
images.
 Reference: \"Level Set Methods and Fast Marching Methods\", J.A.
Sethian, Cambridge Press, Chapter 16, Second edition, 1999.


See:
 DenseFiniteDifferenceImageFilter


 CurvatureFlowFunction


 MinMaxCurvatureFlowImageFilter


 BinaryMinMaxCurvatureFlowImageFilter Input/Output Restrictions: TInputImage and TOutputImage must have the
same dimension. TOutputImage's pixel type must be a real number type.

 rtk::simple::CurvatureFlow for the procedural interface

 itk::CurvatureFlowImageFilter for the Doxygen on the original ITK class.


C++ includes: srtkCurvatureFlowImageFilter.h
*/"

%javamethodmodifiers  rtk::simple::CurvatureFlowImageFilter::CurvatureFlowImageFilter "/**
rtk::simple::CurvatureFlowImageFilter::CurvatureFlowImageFilter()

Default Constructor that takes no arguments and initializes default
parameters

*/
public ";

%javamethodmodifiers  rtk::simple::CurvatureFlowImageFilter::Execute "/**
Image rtk::simple::CurvatureFlowImageFilter::Execute(const Image &image1)

Execute the filter on the input image

*/
public ";

%javamethodmodifiers  rtk::simple::CurvatureFlowImageFilter::Execute "/**
Image rtk::simple::CurvatureFlowImageFilter::Execute(const Image &image1, double timeStep, uint32_t numberOfIterations)

Execute the filter on the input image with the given parameters

*/
public ";

%javamethodmodifiers  rtk::simple::CurvatureFlowImageFilter::GetName "/**
std::string rtk::simple::CurvatureFlowImageFilter::GetName() const

Name of this class

*/
public ";

%javamethodmodifiers  rtk::simple::CurvatureFlowImageFilter::GetNumberOfIterations "/**
uint32_t rtk::simple::CurvatureFlowImageFilter::GetNumberOfIterations() const
*/
public ";

%javamethodmodifiers  rtk::simple::CurvatureFlowImageFilter::GetTimeStep "/**
double rtk::simple::CurvatureFlowImageFilter::GetTimeStep() const

Get the timestep parameter.

*/
public ";

%javamethodmodifiers  rtk::simple::CurvatureFlowImageFilter::SetNumberOfIterations "/**
Self& rtk::simple::CurvatureFlowImageFilter::SetNumberOfIterations(uint32_t NumberOfIterations)
*/
public ";

%javamethodmodifiers  rtk::simple::CurvatureFlowImageFilter::SetTimeStep "/**
Self& rtk::simple::CurvatureFlowImageFilter::SetTimeStep(double TimeStep)

Set the timestep parameter.

*/
public ";

%javamethodmodifiers  rtk::simple::CurvatureFlowImageFilter::ToString "/**
std::string rtk::simple::CurvatureFlowImageFilter::ToString() const

Print ourselves out

*/
public ";

%javamethodmodifiers  rtk::simple::CurvatureFlowImageFilter::~CurvatureFlowImageFilter "/**
rtk::simple::CurvatureFlowImageFilter::~CurvatureFlowImageFilter()

Destructor

*/
public ";


%typemap(javaimports) rtk::simple::CyclicShiftImageFilter "/**

Perform a cyclic spatial shift of image intensities on the image grid.


This filter supports arbitrary cyclic shifts of pixel values on the
image grid. If the Shift is set to [xOff, yOff], the value of the
pixel at [0, 0] in the input image will be the value of the pixel in
the output image at index [xOff modulo xSize, yOff modulo ySize] where
xSize and ySize are the sizes of the image in the x and y dimensions,
respectively. If a pixel value is moved across a boundary, the pixel
value is wrapped around that boundary. For example, if the image is
40-by-40 and the Shift is [13, 47], then the value of the pixel at [0,
0] in the input image will be the value of the pixel in the output
image at index [13, 7].

Negative Shifts are supported. This filter also works with images
whose largest possible region starts at a non-zero index.
See:
 rtk::simple::CyclicShift for the procedural interface

 itk::CyclicShiftImageFilter for the Doxygen on the original ITK class.


C++ includes: srtkCyclicShiftImageFilter.h
*/"

%javamethodmodifiers  rtk::simple::CyclicShiftImageFilter::CyclicShiftImageFilter "/**
rtk::simple::CyclicShiftImageFilter::CyclicShiftImageFilter()

Default Constructor that takes no arguments and initializes default
parameters

*/
public ";

%javamethodmodifiers  rtk::simple::CyclicShiftImageFilter::Execute "/**
Image rtk::simple::CyclicShiftImageFilter::Execute(const Image &image1)

Execute the filter on the input image

*/
public ";

%javamethodmodifiers  rtk::simple::CyclicShiftImageFilter::Execute "/**
Image rtk::simple::CyclicShiftImageFilter::Execute(const Image &image1, const std::vector< int > &shift)

Execute the filter on the input image with the given parameters

*/
public ";

%javamethodmodifiers  rtk::simple::CyclicShiftImageFilter::GetName "/**
std::string rtk::simple::CyclicShiftImageFilter::GetName() const

Name of this class

*/
public ";

%javamethodmodifiers  rtk::simple::CyclicShiftImageFilter::GetShift "/**
std::vector<int> rtk::simple::CyclicShiftImageFilter::GetShift() const

Set/get the shift. Shifts may be positive or negative.

*/
public ";

%javamethodmodifiers  rtk::simple::CyclicShiftImageFilter::SetShift "/**
Self& rtk::simple::CyclicShiftImageFilter::SetShift(const std::vector< int > &Shift)

Set/get the shift. Shifts may be positive or negative.

*/
public ";

%javamethodmodifiers  rtk::simple::CyclicShiftImageFilter::SetShift "/**
Self& rtk::simple::CyclicShiftImageFilter::SetShift(int value)

Set the values of the Shift vector all to value

*/
public ";

%javamethodmodifiers  rtk::simple::CyclicShiftImageFilter::ToString "/**
std::string rtk::simple::CyclicShiftImageFilter::ToString() const

Print ourselves out

*/
public ";

%javamethodmodifiers  rtk::simple::CyclicShiftImageFilter::~CyclicShiftImageFilter "/**
rtk::simple::CyclicShiftImageFilter::~CyclicShiftImageFilter()

Destructor

*/
public ";


%typemap(javaimports) rtk::simple::DanielssonDistanceMapImageFilter "/**

This filter computes the distance map of the input image as an
approximation with pixel accuracy to the Euclidean distance.


TInputImageInput Image Type

TOutputImageOutput Image Type

TVoronoiImageVoronoi Image Type. Note the default value is TInputImage.

The input is assumed to contain numeric codes defining objects. The
filter will produce as output the following images:


AVoronoi partitionusing the same numeric codes as the input.

Adistance mapwith the approximation to the euclidean distance. from a
particular pixel to the nearest object to this pixel in the input
image.

Avector mapcontaining the component of the vector relating the current
pixel with the closest point of the closest object to this pixel.
Given that the components of the distance are computed in \"pixels\",
the vector is represented by an itk::Offset . That is, physical coordinates are not used.
 This filter is N-dimensional and known to be efficient in
computational time. The algorithm is the N-dimensional version of the
4SED algorithm given for two dimensions in:

Danielsson, Per-Erik. Euclidean Distance Mapping. Computer Graphics
and Image Processing 14, 227-248 (1980).
See:
 rtk::simple::DanielssonDistanceMap for the procedural interface

 itk::DanielssonDistanceMapImageFilter for the Doxygen on the original ITK class.


C++ includes: srtkDanielssonDistanceMapImageFilter.h
*/"

%javamethodmodifiers  rtk::simple::DanielssonDistanceMapImageFilter::DanielssonDistanceMapImageFilter "/**
rtk::simple::DanielssonDistanceMapImageFilter::DanielssonDistanceMapImageFilter()

Default Constructor that takes no arguments and initializes default
parameters

*/
public ";

%javamethodmodifiers  rtk::simple::DanielssonDistanceMapImageFilter::Execute "/**
Image rtk::simple::DanielssonDistanceMapImageFilter::Execute(const Image &image1)

Execute the filter on the input image

*/
public ";

%javamethodmodifiers  rtk::simple::DanielssonDistanceMapImageFilter::Execute "/**
Image rtk::simple::DanielssonDistanceMapImageFilter::Execute(const Image &image1, bool inputIsBinary, bool squaredDistance, bool
useImageSpacing)

Execute the filter on the input image with the given parameters

*/
public ";

%javamethodmodifiers  rtk::simple::DanielssonDistanceMapImageFilter::GetInputIsBinary "/**
bool rtk::simple::DanielssonDistanceMapImageFilter::GetInputIsBinary() const

Get if the input is binary. See SetInputIsBinary() .

*/
public ";

%javamethodmodifiers  rtk::simple::DanielssonDistanceMapImageFilter::GetName "/**
std::string rtk::simple::DanielssonDistanceMapImageFilter::GetName() const

Name of this class

*/
public ";

%javamethodmodifiers  rtk::simple::DanielssonDistanceMapImageFilter::GetSquaredDistance "/**
bool rtk::simple::DanielssonDistanceMapImageFilter::GetSquaredDistance() const

Get the distance squared.

*/
public ";

%javamethodmodifiers  rtk::simple::DanielssonDistanceMapImageFilter::GetUseImageSpacing "/**
bool rtk::simple::DanielssonDistanceMapImageFilter::GetUseImageSpacing() const

Get whether spacing is used.

*/
public ";

%javamethodmodifiers  rtk::simple::DanielssonDistanceMapImageFilter::InputIsBinaryOff "/**
Self& rtk::simple::DanielssonDistanceMapImageFilter::InputIsBinaryOff()
*/
public ";

%javamethodmodifiers  rtk::simple::DanielssonDistanceMapImageFilter::InputIsBinaryOn "/**
Self& rtk::simple::DanielssonDistanceMapImageFilter::InputIsBinaryOn()

Set the value of InputIsBinary to true or false respectfully.

*/
public ";

%javamethodmodifiers  rtk::simple::DanielssonDistanceMapImageFilter::SetInputIsBinary "/**
Self& rtk::simple::DanielssonDistanceMapImageFilter::SetInputIsBinary(bool InputIsBinary)

Set if the input is binary. If this variable is set, each nonzero
pixel in the input image will be given a unique numeric code to be
used by the Voronoi partition. If the image is binary but you are not
interested in the Voronoi regions of the different nonzero pixels,
then you need not set this.

*/
public ";

%javamethodmodifiers  rtk::simple::DanielssonDistanceMapImageFilter::SetSquaredDistance "/**
Self& rtk::simple::DanielssonDistanceMapImageFilter::SetSquaredDistance(bool SquaredDistance)

Set if the distance should be squared.

*/
public ";

%javamethodmodifiers  rtk::simple::DanielssonDistanceMapImageFilter::SetUseImageSpacing "/**
Self& rtk::simple::DanielssonDistanceMapImageFilter::SetUseImageSpacing(bool UseImageSpacing)

Set if image spacing should be used in computing distances.

*/
public ";

%javamethodmodifiers  rtk::simple::DanielssonDistanceMapImageFilter::SquaredDistanceOff "/**
Self& rtk::simple::DanielssonDistanceMapImageFilter::SquaredDistanceOff()
*/
public ";

%javamethodmodifiers  rtk::simple::DanielssonDistanceMapImageFilter::SquaredDistanceOn "/**
Self& rtk::simple::DanielssonDistanceMapImageFilter::SquaredDistanceOn()

Set the value of SquaredDistance to true or false respectfully.

*/
public ";

%javamethodmodifiers  rtk::simple::DanielssonDistanceMapImageFilter::ToString "/**
std::string rtk::simple::DanielssonDistanceMapImageFilter::ToString() const

Print ourselves out

*/
public ";

%javamethodmodifiers  rtk::simple::DanielssonDistanceMapImageFilter::UseImageSpacingOff "/**
Self& rtk::simple::DanielssonDistanceMapImageFilter::UseImageSpacingOff()
*/
public ";

%javamethodmodifiers  rtk::simple::DanielssonDistanceMapImageFilter::UseImageSpacingOn "/**
Self& rtk::simple::DanielssonDistanceMapImageFilter::UseImageSpacingOn()

Set the value of UseImageSpacing to true or false respectfully.

*/
public ";

%javamethodmodifiers  rtk::simple::DanielssonDistanceMapImageFilter::~DanielssonDistanceMapImageFilter "/**
rtk::simple::DanielssonDistanceMapImageFilter::~DanielssonDistanceMapImageFilter()

Destructor

*/
public ";


%typemap(javaimports) rtk::simple::DemonsRegistrationFilter "/**

Deformably register two images using the demons algorithm.


DemonsRegistrationFilter implements the demons deformable algorithm that register two images
by computing the displacement field which will map a moving image onto
a fixed image.

A displacement field is represented as a image whose pixel type is
some vector type with at least N elements, where N is the dimension of
the fixed image. The vector type must support element access via
operator []. It is assumed that the vector elements behave like
floating point scalars.

This class is templated over the fixed image type, moving image type
and the displacement field type.

The input fixed and moving images are set via methods SetFixedImage
and SetMovingImage respectively. An initial displacement field maybe
set via SetInitialDisplacementField or SetInput. If no initial field
is set, a zero field is used as the initial condition.

The algorithm has one parameters: the number of iteration to be
performed.

The output displacement field can be obtained via methods GetOutput or
GetDisplacementField.

This class make use of the finite difference solver hierarchy. Update
for each iteration is computed in DemonsRegistrationFunction .


WARNING:
This filter assumes that the fixed image type, moving image type and
displacement field type all have the same number of dimensions.

See:
 DemonsRegistrationFunction

 itk::DemonsRegistrationFilter for the Doxygen on the original ITK class.


C++ includes: srtkDemonsRegistrationFilter.h
*/"

%javamethodmodifiers  rtk::simple::DemonsRegistrationFilter::DemonsRegistrationFilter "/**
rtk::simple::DemonsRegistrationFilter::DemonsRegistrationFilter()

Default Constructor that takes no arguments and initializes default
parameters

*/
public ";

%javamethodmodifiers  rtk::simple::DemonsRegistrationFilter::Execute "/**
Image rtk::simple::DemonsRegistrationFilter::Execute(const Image &fixedImage, const Image &movingImage, const Image
&initialDisplacementField)

Execute the filter on the input image

*/
public ";

%javamethodmodifiers  rtk::simple::DemonsRegistrationFilter::Execute "/**
Image rtk::simple::DemonsRegistrationFilter::Execute(const Image &fixedImage, const Image &movingImage)
*/
public ";

%javamethodmodifiers  rtk::simple::DemonsRegistrationFilter::Execute "/**
Image rtk::simple::DemonsRegistrationFilter::Execute(const Image &fixedImage, const Image &movingImage, const Image
&initialDisplacementField, const std::vector< double >
&standardDeviations, uint32_t numberOfIterations, double
maximumRMSError, bool useMovingImageGradient, bool
smoothDisplacementField, bool smoothUpdateField, const std::vector<
double > &updateFieldStandardDeviations, unsigned int
maximumKernelWidth, double maximumError, double
intensityDifferenceThreshold, bool useImageSpacing)

Execute the filter on the input image with the given parameters

*/
public ";

%javamethodmodifiers  rtk::simple::DemonsRegistrationFilter::Execute "/**
Image rtk::simple::DemonsRegistrationFilter::Execute(const Image &fixedImage, const Image &movingImage, const std::vector<
double > &standardDeviations, uint32_t numberOfIterations, double
maximumRMSError, bool useMovingImageGradient, bool
smoothDisplacementField, bool smoothUpdateField, const std::vector<
double > &updateFieldStandardDeviations, unsigned int
maximumKernelWidth, double maximumError, double
intensityDifferenceThreshold, bool useImageSpacing)
*/
public ";

%javamethodmodifiers  rtk::simple::DemonsRegistrationFilter::GetElapsedIterations "/**
uint32_t rtk::simple::DemonsRegistrationFilter::GetElapsedIterations() const

Number of iterations run.


This is an active measurement. It may be accessed while the filter is
being executing in command call-backs and can be accessed after
execution.

*/
public ";

%javamethodmodifiers  rtk::simple::DemonsRegistrationFilter::GetIntensityDifferenceThreshold "/**
double rtk::simple::DemonsRegistrationFilter::GetIntensityDifferenceThreshold() const
*/
public ";

%javamethodmodifiers  rtk::simple::DemonsRegistrationFilter::GetMaximumError "/**
double rtk::simple::DemonsRegistrationFilter::GetMaximumError() const

Set/Get the desired maximum error of the Guassian kernel approximate.

*/
public ";

%javamethodmodifiers  rtk::simple::DemonsRegistrationFilter::GetMaximumKernelWidth "/**
unsigned int rtk::simple::DemonsRegistrationFilter::GetMaximumKernelWidth() const

Set/Get the desired limits of the Gaussian kernel width.

*/
public ";

%javamethodmodifiers  rtk::simple::DemonsRegistrationFilter::GetMaximumRMSError "/**
double rtk::simple::DemonsRegistrationFilter::GetMaximumRMSError() const
*/
public ";

%javamethodmodifiers  rtk::simple::DemonsRegistrationFilter::GetMetric "/**
double rtk::simple::DemonsRegistrationFilter::GetMetric() const

Get the metric value. The metric value is the mean square difference
in intensity between the fixed image and transforming moving image
computed over the the overlapping region between the two images. This
is value is only available for the previous iteration and NOT the
current iteration.

This is an active measurement. It may be accessed while the filter is
being executing in command call-backs and can be accessed after
execution.

*/
public ";

%javamethodmodifiers  rtk::simple::DemonsRegistrationFilter::GetName "/**
std::string rtk::simple::DemonsRegistrationFilter::GetName() const

Name of this class

*/
public ";

%javamethodmodifiers  rtk::simple::DemonsRegistrationFilter::GetNumberOfIterations "/**
uint32_t rtk::simple::DemonsRegistrationFilter::GetNumberOfIterations() const
*/
public ";

%javamethodmodifiers  rtk::simple::DemonsRegistrationFilter::GetRMSChange "/**
double rtk::simple::DemonsRegistrationFilter::GetRMSChange() const

The Root Mean Square of the levelset upon termination.


This is a measurement. Its value is updated in the Execute methods, so
the value will only be valid after an execution.

*/
public ";

%javamethodmodifiers  rtk::simple::DemonsRegistrationFilter::GetSmoothDisplacementField "/**
bool rtk::simple::DemonsRegistrationFilter::GetSmoothDisplacementField() const

Set/Get whether the displacement field is smoothed (regularized).
Smoothing the displacement yields a solution elastic in nature. If
SmoothDisplacementField is on, then the displacement field is smoothed
with a Gaussian whose standard deviations are specified with SetStandardDeviations()

*/
public ";

%javamethodmodifiers  rtk::simple::DemonsRegistrationFilter::GetSmoothUpdateField "/**
bool rtk::simple::DemonsRegistrationFilter::GetSmoothUpdateField() const

Set/Get whether the update field is smoothed (regularized). Smoothing
the update field yields a solution viscous in nature. If
SmoothUpdateField is on, then the update field is smoothed with a
Gaussian whose standard deviations are specified with SetUpdateFieldStandardDeviations()

*/
public ";

%javamethodmodifiers  rtk::simple::DemonsRegistrationFilter::GetStandardDeviations "/**
std::vector<double> rtk::simple::DemonsRegistrationFilter::GetStandardDeviations() const

Set/Get the Gaussian smoothing standard deviations for the
displacement field. The values are set with respect to pixel
coordinates.

*/
public ";

%javamethodmodifiers  rtk::simple::DemonsRegistrationFilter::GetUpdateFieldStandardDeviations "/**
std::vector<double> rtk::simple::DemonsRegistrationFilter::GetUpdateFieldStandardDeviations() const

Set the Gaussian smoothing standard deviations for the update field.
The values are set with respect to pixel coordinates.

*/
public ";

%javamethodmodifiers  rtk::simple::DemonsRegistrationFilter::GetUseImageSpacing "/**
bool rtk::simple::DemonsRegistrationFilter::GetUseImageSpacing() const
*/
public ";

%javamethodmodifiers  rtk::simple::DemonsRegistrationFilter::GetUseMovingImageGradient "/**
bool rtk::simple::DemonsRegistrationFilter::GetUseMovingImageGradient() const

Switch between using the fixed image and moving image gradient for
computing the displacement field updates.

*/
public ";

%javamethodmodifiers  rtk::simple::DemonsRegistrationFilter::SetIntensityDifferenceThreshold "/**
Self& rtk::simple::DemonsRegistrationFilter::SetIntensityDifferenceThreshold(double IntensityDifferenceThreshold)

Set/Get the threshold below which the absolute difference of intensity
yields a match. When the intensities match between a moving and fixed
image pixel, the update vector (for that iteration) will be the zero
vector. Default is 0.001.

*/
public ";

%javamethodmodifiers  rtk::simple::DemonsRegistrationFilter::SetMaximumError "/**
Self& rtk::simple::DemonsRegistrationFilter::SetMaximumError(double MaximumError)

Set/Get the desired maximum error of the Guassian kernel approximate.

*/
public ";

%javamethodmodifiers  rtk::simple::DemonsRegistrationFilter::SetMaximumKernelWidth "/**
Self& rtk::simple::DemonsRegistrationFilter::SetMaximumKernelWidth(unsigned int MaximumKernelWidth)

Set/Get the desired limits of the Gaussian kernel width.

*/
public ";

%javamethodmodifiers  rtk::simple::DemonsRegistrationFilter::SetMaximumRMSError "/**
Self& rtk::simple::DemonsRegistrationFilter::SetMaximumRMSError(double MaximumRMSError)
*/
public ";

%javamethodmodifiers  rtk::simple::DemonsRegistrationFilter::SetNumberOfIterations "/**
Self& rtk::simple::DemonsRegistrationFilter::SetNumberOfIterations(uint32_t NumberOfIterations)
*/
public ";

%javamethodmodifiers  rtk::simple::DemonsRegistrationFilter::SetSmoothDisplacementField "/**
Self& rtk::simple::DemonsRegistrationFilter::SetSmoothDisplacementField(bool SmoothDisplacementField)

Set/Get whether the displacement field is smoothed (regularized).
Smoothing the displacement yields a solution elastic in nature. If
SmoothDisplacementField is on, then the displacement field is smoothed
with a Gaussian whose standard deviations are specified with SetStandardDeviations()

*/
public ";

%javamethodmodifiers  rtk::simple::DemonsRegistrationFilter::SetSmoothUpdateField "/**
Self& rtk::simple::DemonsRegistrationFilter::SetSmoothUpdateField(bool SmoothUpdateField)

Set/Get whether the update field is smoothed (regularized). Smoothing
the update field yields a solution viscous in nature. If
SmoothUpdateField is on, then the update field is smoothed with a
Gaussian whose standard deviations are specified with SetUpdateFieldStandardDeviations()

*/
public ";

%javamethodmodifiers  rtk::simple::DemonsRegistrationFilter::SetStandardDeviations "/**
Self& rtk::simple::DemonsRegistrationFilter::SetStandardDeviations(const std::vector< double > &StandardDeviations)

Set/Get the Gaussian smoothing standard deviations for the
displacement field. The values are set with respect to pixel
coordinates.

*/
public ";

%javamethodmodifiers  rtk::simple::DemonsRegistrationFilter::SetStandardDeviations "/**
Self& rtk::simple::DemonsRegistrationFilter::SetStandardDeviations(double value)

Set the values of the StandardDeviations vector all to value

*/
public ";

%javamethodmodifiers  rtk::simple::DemonsRegistrationFilter::SetUpdateFieldStandardDeviations "/**
Self& rtk::simple::DemonsRegistrationFilter::SetUpdateFieldStandardDeviations(const std::vector< double > &UpdateFieldStandardDeviations)

Set the Gaussian smoothing standard deviations for the update field.
The values are set with respect to pixel coordinates.

*/
public ";

%javamethodmodifiers  rtk::simple::DemonsRegistrationFilter::SetUpdateFieldStandardDeviations "/**
Self& rtk::simple::DemonsRegistrationFilter::SetUpdateFieldStandardDeviations(double value)

Set the values of the UpdateFieldStandardDeviations vector all to
value

*/
public ";

%javamethodmodifiers  rtk::simple::DemonsRegistrationFilter::SetUseImageSpacing "/**
Self& rtk::simple::DemonsRegistrationFilter::SetUseImageSpacing(bool UseImageSpacing)
*/
public ";

%javamethodmodifiers  rtk::simple::DemonsRegistrationFilter::SetUseMovingImageGradient "/**
Self& rtk::simple::DemonsRegistrationFilter::SetUseMovingImageGradient(bool UseMovingImageGradient)

Switch between using the fixed image and moving image gradient for
computing the displacement field updates.

*/
public ";

%javamethodmodifiers  rtk::simple::DemonsRegistrationFilter::SmoothDisplacementFieldOff "/**
Self& rtk::simple::DemonsRegistrationFilter::SmoothDisplacementFieldOff()
*/
public ";

%javamethodmodifiers  rtk::simple::DemonsRegistrationFilter::SmoothDisplacementFieldOn "/**
Self& rtk::simple::DemonsRegistrationFilter::SmoothDisplacementFieldOn()

Set the value of SmoothDisplacementField to true or false
respectfully.

*/
public ";

%javamethodmodifiers  rtk::simple::DemonsRegistrationFilter::SmoothUpdateFieldOff "/**
Self& rtk::simple::DemonsRegistrationFilter::SmoothUpdateFieldOff()
*/
public ";

%javamethodmodifiers  rtk::simple::DemonsRegistrationFilter::SmoothUpdateFieldOn "/**
Self& rtk::simple::DemonsRegistrationFilter::SmoothUpdateFieldOn()

Set the value of SmoothUpdateField to true or false respectfully.

*/
public ";

%javamethodmodifiers  rtk::simple::DemonsRegistrationFilter::ToString "/**
std::string rtk::simple::DemonsRegistrationFilter::ToString() const

Print ourselves out

*/
public ";

%javamethodmodifiers  rtk::simple::DemonsRegistrationFilter::UseImageSpacingOff "/**
Self& rtk::simple::DemonsRegistrationFilter::UseImageSpacingOff()
*/
public ";

%javamethodmodifiers  rtk::simple::DemonsRegistrationFilter::UseImageSpacingOn "/**
Self& rtk::simple::DemonsRegistrationFilter::UseImageSpacingOn()

Set the value of UseImageSpacing to true or false respectfully.

*/
public ";

%javamethodmodifiers  rtk::simple::DemonsRegistrationFilter::UseMovingImageGradientOff "/**
Self& rtk::simple::DemonsRegistrationFilter::UseMovingImageGradientOff()
*/
public ";

%javamethodmodifiers  rtk::simple::DemonsRegistrationFilter::UseMovingImageGradientOn "/**
Self& rtk::simple::DemonsRegistrationFilter::UseMovingImageGradientOn()

Set the value of UseMovingImageGradient to true or false respectfully.

*/
public ";

%javamethodmodifiers  rtk::simple::DemonsRegistrationFilter::~DemonsRegistrationFilter "/**
rtk::simple::DemonsRegistrationFilter::~DemonsRegistrationFilter()

Destructor

*/
public ";


%typemap(javaimports) rtk::simple::DerivativeImageFilter "/**

Computes the directional derivative of an image. The directional
derivative at each pixel location is computed by convolution with a
derivative operator of user-specified order.


SetOrder specifies the order of the derivative.

SetDirection specifies the direction of the derivative with respect to
the coordinate axes of the image.


See:
 Image


 Neighborhood


 NeighborhoodOperator


 NeighborhoodIterator
Wiki Examples:

All Examples

Compute the derivative of an image in a particular direction
See:
 rtk::simple::Derivative for the procedural interface

 itk::DerivativeImageFilter for the Doxygen on the original ITK class.



C++ includes: srtkDerivativeImageFilter.h
*/"

%javamethodmodifiers  rtk::simple::DerivativeImageFilter::DerivativeImageFilter "/**
rtk::simple::DerivativeImageFilter::DerivativeImageFilter()

Default Constructor that takes no arguments and initializes default
parameters

*/
public ";

%javamethodmodifiers  rtk::simple::DerivativeImageFilter::Execute "/**
Image rtk::simple::DerivativeImageFilter::Execute(const Image &image1)

Execute the filter on the input image

*/
public ";

%javamethodmodifiers  rtk::simple::DerivativeImageFilter::Execute "/**
Image rtk::simple::DerivativeImageFilter::Execute(const Image &image1, unsigned int direction, unsigned int order, bool
useImageSpacing)

Execute the filter on the input image with the given parameters

*/
public ";

%javamethodmodifiers  rtk::simple::DerivativeImageFilter::GetDirection "/**
unsigned int rtk::simple::DerivativeImageFilter::GetDirection() const

The output pixel type must be signed. Standard get/set macros for
filter parameters.

*/
public ";

%javamethodmodifiers  rtk::simple::DerivativeImageFilter::GetName "/**
std::string rtk::simple::DerivativeImageFilter::GetName() const

Name of this class

*/
public ";

%javamethodmodifiers  rtk::simple::DerivativeImageFilter::GetOrder "/**
unsigned int rtk::simple::DerivativeImageFilter::GetOrder() const

The output pixel type must be signed. Standard get/set macros for
filter parameters.

*/
public ";

%javamethodmodifiers  rtk::simple::DerivativeImageFilter::GetUseImageSpacing "/**
bool rtk::simple::DerivativeImageFilter::GetUseImageSpacing() const

Set/Get whether or not the filter will use the spacing of the input
image in its calculations

*/
public ";

%javamethodmodifiers  rtk::simple::DerivativeImageFilter::SetDirection "/**
Self& rtk::simple::DerivativeImageFilter::SetDirection(unsigned int Direction)

The output pixel type must be signed. Standard get/set macros for
filter parameters.

*/
public ";

%javamethodmodifiers  rtk::simple::DerivativeImageFilter::SetOrder "/**
Self& rtk::simple::DerivativeImageFilter::SetOrder(unsigned int Order)

The output pixel type must be signed. Standard get/set macros for
filter parameters.

*/
public ";

%javamethodmodifiers  rtk::simple::DerivativeImageFilter::SetUseImageSpacing "/**
Self& rtk::simple::DerivativeImageFilter::SetUseImageSpacing(bool UseImageSpacing)

Set/Get whether or not the filter will use the spacing of the input
image in its calculations

*/
public ";

%javamethodmodifiers  rtk::simple::DerivativeImageFilter::ToString "/**
std::string rtk::simple::DerivativeImageFilter::ToString() const

Print ourselves out

*/
public ";

%javamethodmodifiers  rtk::simple::DerivativeImageFilter::UseImageSpacingOff "/**
Self& rtk::simple::DerivativeImageFilter::UseImageSpacingOff()
*/
public ";

%javamethodmodifiers  rtk::simple::DerivativeImageFilter::UseImageSpacingOn "/**
Self& rtk::simple::DerivativeImageFilter::UseImageSpacingOn()

Set the value of UseImageSpacing to true or false respectfully.

*/
public ";

%javamethodmodifiers  rtk::simple::DerivativeImageFilter::~DerivativeImageFilter "/**
rtk::simple::DerivativeImageFilter::~DerivativeImageFilter()

Destructor

*/
public ";


%typemap(javaimports) rtk::simple::DiffeomorphicDemonsRegistrationFilter "/**

Deformably register two images using a diffeomorphic demons algorithm.


This class was contributed by Tom Vercauteren, INRIA & Mauna Kea
Technologies, based on a variation of the DemonsRegistrationFilter . The basic modification is to use diffeomorphism exponentials.

See T. Vercauteren, X. Pennec, A. Perchant and N. Ayache, \"Non-
parametric Diffeomorphic Image Registration with the Demons
Algorithm\", Proc. of MICCAI 2007.

DiffeomorphicDemonsRegistrationFilter implements the demons deformable algorithm that register two images
by computing the deformation field which will map a moving image onto
a fixed image.

A deformation field is represented as a image whose pixel type is some
vector type with at least N elements, where N is the dimension of the
fixed image. The vector type must support element access via operator
[]. It is assumed that the vector elements behave like floating point
scalars.

This class is templated over the fixed image type, moving image type
and the deformation field type.

The input fixed and moving images are set via methods SetFixedImage
and SetMovingImage respectively. An initial deformation field maybe
set via SetInitialDisplacementField or SetInput. If no initial field
is set, a zero field is used as the initial condition.

The output deformation field can be obtained via methods GetOutput or
GetDisplacementField.

This class make use of the finite difference solver hierarchy. Update
for each iteration is computed in DemonsRegistrationFunction .


Tom Vercauteren, INRIA & Mauna Kea Technologies

WARNING:
This filter assumes that the fixed image type, moving image type and
deformation field type all have the same number of dimensions.
 This implementation was taken from the Insight Journal paper: https://hdl.handle.net/1926/510


See:
 DemonsRegistrationFilter


 DemonsRegistrationFunction

 itk::DiffeomorphicDemonsRegistrationFilter for the Doxygen on the original ITK class.


C++ includes: srtkDiffeomorphicDemonsRegistrationFilter.h
*/"

%javamethodmodifiers  rtk::simple::DiffeomorphicDemonsRegistrationFilter::DiffeomorphicDemonsRegistrationFilter "/**
rtk::simple::DiffeomorphicDemonsRegistrationFilter::DiffeomorphicDemonsRegistrationFilter()

Default Constructor that takes no arguments and initializes default
parameters

*/
public ";

%javamethodmodifiers  rtk::simple::DiffeomorphicDemonsRegistrationFilter::Execute "/**
Image rtk::simple::DiffeomorphicDemonsRegistrationFilter::Execute(const Image &fixedImage, const Image &movingImage, const Image
&initialDisplacementField)

Execute the filter on the input image

*/
public ";

%javamethodmodifiers  rtk::simple::DiffeomorphicDemonsRegistrationFilter::Execute "/**
Image rtk::simple::DiffeomorphicDemonsRegistrationFilter::Execute(const Image &fixedImage, const Image &movingImage)
*/
public ";

%javamethodmodifiers  rtk::simple::DiffeomorphicDemonsRegistrationFilter::Execute "/**
Image rtk::simple::DiffeomorphicDemonsRegistrationFilter::Execute(const Image &fixedImage, const Image &movingImage, const Image
&initialDisplacementField, const std::vector< double >
&standardDeviations, uint32_t numberOfIterations, double
maximumRMSError,
DiffeomorphicDemonsRegistrationFilter::UseGradientTypeType
useGradientType, bool useFirstOrderExp, double
maximumUpdateStepLength, bool smoothDisplacementField, bool
smoothUpdateField, const std::vector< double >
&updateFieldStandardDeviations, unsigned int maximumKernelWidth,
double maximumError, double intensityDifferenceThreshold, bool
useImageSpacing)

Execute the filter on the input image with the given parameters

*/
public ";

%javamethodmodifiers  rtk::simple::DiffeomorphicDemonsRegistrationFilter::Execute "/**
Image rtk::simple::DiffeomorphicDemonsRegistrationFilter::Execute(const Image &fixedImage, const Image &movingImage, const std::vector<
double > &standardDeviations, uint32_t numberOfIterations, double
maximumRMSError,
DiffeomorphicDemonsRegistrationFilter::UseGradientTypeType
useGradientType, bool useFirstOrderExp, double
maximumUpdateStepLength, bool smoothDisplacementField, bool
smoothUpdateField, const std::vector< double >
&updateFieldStandardDeviations, unsigned int maximumKernelWidth,
double maximumError, double intensityDifferenceThreshold, bool
useImageSpacing)
*/
public ";

%javamethodmodifiers  rtk::simple::DiffeomorphicDemonsRegistrationFilter::GetElapsedIterations "/**
uint32_t rtk::simple::DiffeomorphicDemonsRegistrationFilter::GetElapsedIterations() const

Number of iterations run.


This is an active measurement. It may be accessed while the filter is
being executing in command call-backs and can be accessed after
execution.

*/
public ";

%javamethodmodifiers  rtk::simple::DiffeomorphicDemonsRegistrationFilter::GetIntensityDifferenceThreshold "/**
double rtk::simple::DiffeomorphicDemonsRegistrationFilter::GetIntensityDifferenceThreshold() const
*/
public ";

%javamethodmodifiers  rtk::simple::DiffeomorphicDemonsRegistrationFilter::GetMaximumError "/**
double rtk::simple::DiffeomorphicDemonsRegistrationFilter::GetMaximumError() const

Set/Get the desired maximum error of the Guassian kernel approximate.

*/
public ";

%javamethodmodifiers  rtk::simple::DiffeomorphicDemonsRegistrationFilter::GetMaximumKernelWidth "/**
unsigned int rtk::simple::DiffeomorphicDemonsRegistrationFilter::GetMaximumKernelWidth() const

Set/Get the desired limits of the Gaussian kernel width.

*/
public ";

%javamethodmodifiers  rtk::simple::DiffeomorphicDemonsRegistrationFilter::GetMaximumRMSError "/**
double rtk::simple::DiffeomorphicDemonsRegistrationFilter::GetMaximumRMSError() const
*/
public ";

%javamethodmodifiers  rtk::simple::DiffeomorphicDemonsRegistrationFilter::GetMaximumUpdateStepLength "/**
double rtk::simple::DiffeomorphicDemonsRegistrationFilter::GetMaximumUpdateStepLength() const
*/
public ";

%javamethodmodifiers  rtk::simple::DiffeomorphicDemonsRegistrationFilter::GetMetric "/**
double rtk::simple::DiffeomorphicDemonsRegistrationFilter::GetMetric() const

Get the metric value. The metric value is the mean square difference
in intensity between the fixed image and transforming moving image
computed over the the overlapping region between the two images. This
value is calculated for the current iteration

This is an active measurement. It may be accessed while the filter is
being executing in command call-backs and can be accessed after
execution.

*/
public ";

%javamethodmodifiers  rtk::simple::DiffeomorphicDemonsRegistrationFilter::GetName "/**
std::string rtk::simple::DiffeomorphicDemonsRegistrationFilter::GetName() const

Name of this class

*/
public ";

%javamethodmodifiers  rtk::simple::DiffeomorphicDemonsRegistrationFilter::GetNumberOfIterations "/**
uint32_t rtk::simple::DiffeomorphicDemonsRegistrationFilter::GetNumberOfIterations() const
*/
public ";

%javamethodmodifiers  rtk::simple::DiffeomorphicDemonsRegistrationFilter::GetRMSChange "/**
double rtk::simple::DiffeomorphicDemonsRegistrationFilter::GetRMSChange() const

Set/Get the root mean squared change of the previous iteration. May
not be used by all solvers.

This is a measurement. Its value is updated in the Execute methods, so
the value will only be valid after an execution.

*/
public ";

%javamethodmodifiers  rtk::simple::DiffeomorphicDemonsRegistrationFilter::GetSmoothDisplacementField "/**
bool rtk::simple::DiffeomorphicDemonsRegistrationFilter::GetSmoothDisplacementField() const

Set/Get whether the displacement field is smoothed (regularized).
Smoothing the displacement yields a solution elastic in nature. If
SmoothDisplacementField is on, then the displacement field is smoothed
with a Gaussian whose standard deviations are specified with SetStandardDeviations()

*/
public ";

%javamethodmodifiers  rtk::simple::DiffeomorphicDemonsRegistrationFilter::GetSmoothUpdateField "/**
bool rtk::simple::DiffeomorphicDemonsRegistrationFilter::GetSmoothUpdateField() const

Set/Get whether the update field is smoothed (regularized). Smoothing
the update field yields a solution viscous in nature. If
SmoothUpdateField is on, then the update field is smoothed with a
Gaussian whose standard deviations are specified with SetUpdateFieldStandardDeviations()

*/
public ";

%javamethodmodifiers  rtk::simple::DiffeomorphicDemonsRegistrationFilter::GetStandardDeviations "/**
std::vector<double> rtk::simple::DiffeomorphicDemonsRegistrationFilter::GetStandardDeviations() const

Set/Get the Gaussian smoothing standard deviations for the
displacement field. The values are set with respect to pixel
coordinates.

*/
public ";

%javamethodmodifiers  rtk::simple::DiffeomorphicDemonsRegistrationFilter::GetUpdateFieldStandardDeviations "/**
std::vector<double> rtk::simple::DiffeomorphicDemonsRegistrationFilter::GetUpdateFieldStandardDeviations() const

Set the Gaussian smoothing standard deviations for the update field.
The values are set with respect to pixel coordinates.

*/
public ";

%javamethodmodifiers  rtk::simple::DiffeomorphicDemonsRegistrationFilter::GetUseFirstOrderExp "/**
bool rtk::simple::DiffeomorphicDemonsRegistrationFilter::GetUseFirstOrderExp() const

Use a first-order approximation of the exponential. This amounts to
using an update rule of the type s <- s o (Id + u) instead of s <- s o
exp(u)

*/
public ";

%javamethodmodifiers  rtk::simple::DiffeomorphicDemonsRegistrationFilter::GetUseGradientType "/**
UseGradientTypeType rtk::simple::DiffeomorphicDemonsRegistrationFilter::GetUseGradientType() const
*/
public ";

%javamethodmodifiers  rtk::simple::DiffeomorphicDemonsRegistrationFilter::GetUseImageSpacing "/**
bool rtk::simple::DiffeomorphicDemonsRegistrationFilter::GetUseImageSpacing() const
*/
public ";

%javamethodmodifiers  rtk::simple::DiffeomorphicDemonsRegistrationFilter::SetIntensityDifferenceThreshold "/**
Self& rtk::simple::DiffeomorphicDemonsRegistrationFilter::SetIntensityDifferenceThreshold(double IntensityDifferenceThreshold)

Set/Get the threshold below which the absolute difference of intensity
yields a match. When the intensities match between a moving and fixed
image pixel, the update vector (for that iteration) will be the zero
vector. Default is 0.001.

*/
public ";

%javamethodmodifiers  rtk::simple::DiffeomorphicDemonsRegistrationFilter::SetMaximumError "/**
Self& rtk::simple::DiffeomorphicDemonsRegistrationFilter::SetMaximumError(double MaximumError)

Set/Get the desired maximum error of the Guassian kernel approximate.

*/
public ";

%javamethodmodifiers  rtk::simple::DiffeomorphicDemonsRegistrationFilter::SetMaximumKernelWidth "/**
Self& rtk::simple::DiffeomorphicDemonsRegistrationFilter::SetMaximumKernelWidth(unsigned int MaximumKernelWidth)

Set/Get the desired limits of the Gaussian kernel width.

*/
public ";

%javamethodmodifiers  rtk::simple::DiffeomorphicDemonsRegistrationFilter::SetMaximumRMSError "/**
Self& rtk::simple::DiffeomorphicDemonsRegistrationFilter::SetMaximumRMSError(double MaximumRMSError)
*/
public ";

%javamethodmodifiers  rtk::simple::DiffeomorphicDemonsRegistrationFilter::SetMaximumUpdateStepLength "/**
Self& rtk::simple::DiffeomorphicDemonsRegistrationFilter::SetMaximumUpdateStepLength(double MaximumUpdateStepLength)

Set/Get the maximum length in terms of pixels of the vectors in the
update buffer.

*/
public ";

%javamethodmodifiers  rtk::simple::DiffeomorphicDemonsRegistrationFilter::SetNumberOfIterations "/**
Self& rtk::simple::DiffeomorphicDemonsRegistrationFilter::SetNumberOfIterations(uint32_t NumberOfIterations)
*/
public ";

%javamethodmodifiers  rtk::simple::DiffeomorphicDemonsRegistrationFilter::SetSmoothDisplacementField "/**
Self& rtk::simple::DiffeomorphicDemonsRegistrationFilter::SetSmoothDisplacementField(bool SmoothDisplacementField)

Set/Get whether the displacement field is smoothed (regularized).
Smoothing the displacement yields a solution elastic in nature. If
SmoothDisplacementField is on, then the displacement field is smoothed
with a Gaussian whose standard deviations are specified with SetStandardDeviations()

*/
public ";

%javamethodmodifiers  rtk::simple::DiffeomorphicDemonsRegistrationFilter::SetSmoothUpdateField "/**
Self& rtk::simple::DiffeomorphicDemonsRegistrationFilter::SetSmoothUpdateField(bool SmoothUpdateField)

Set/Get whether the update field is smoothed (regularized). Smoothing
the update field yields a solution viscous in nature. If
SmoothUpdateField is on, then the update field is smoothed with a
Gaussian whose standard deviations are specified with SetUpdateFieldStandardDeviations()

*/
public ";

%javamethodmodifiers  rtk::simple::DiffeomorphicDemonsRegistrationFilter::SetStandardDeviations "/**
Self& rtk::simple::DiffeomorphicDemonsRegistrationFilter::SetStandardDeviations(const std::vector< double > &StandardDeviations)

Set/Get the Gaussian smoothing standard deviations for the
displacement field. The values are set with respect to pixel
coordinates.

*/
public ";

%javamethodmodifiers  rtk::simple::DiffeomorphicDemonsRegistrationFilter::SetStandardDeviations "/**
Self& rtk::simple::DiffeomorphicDemonsRegistrationFilter::SetStandardDeviations(double value)

Set the values of the StandardDeviations vector all to value

*/
public ";

%javamethodmodifiers  rtk::simple::DiffeomorphicDemonsRegistrationFilter::SetUpdateFieldStandardDeviations "/**
Self& rtk::simple::DiffeomorphicDemonsRegistrationFilter::SetUpdateFieldStandardDeviations(const std::vector< double > &UpdateFieldStandardDeviations)

Set the Gaussian smoothing standard deviations for the update field.
The values are set with respect to pixel coordinates.

*/
public ";

%javamethodmodifiers  rtk::simple::DiffeomorphicDemonsRegistrationFilter::SetUpdateFieldStandardDeviations "/**
Self& rtk::simple::DiffeomorphicDemonsRegistrationFilter::SetUpdateFieldStandardDeviations(double value)

Set the values of the UpdateFieldStandardDeviations vector all to
value

*/
public ";

%javamethodmodifiers  rtk::simple::DiffeomorphicDemonsRegistrationFilter::SetUseFirstOrderExp "/**
Self& rtk::simple::DiffeomorphicDemonsRegistrationFilter::SetUseFirstOrderExp(bool UseFirstOrderExp)

Use a first-order approximation of the exponential. This amounts to
using an update rule of the type s <- s o (Id + u) instead of s <- s o
exp(u)

*/
public ";

%javamethodmodifiers  rtk::simple::DiffeomorphicDemonsRegistrationFilter::SetUseGradientType "/**
Self& rtk::simple::DiffeomorphicDemonsRegistrationFilter::SetUseGradientType(UseGradientTypeType UseGradientType)
*/
public ";

%javamethodmodifiers  rtk::simple::DiffeomorphicDemonsRegistrationFilter::SetUseImageSpacing "/**
Self& rtk::simple::DiffeomorphicDemonsRegistrationFilter::SetUseImageSpacing(bool UseImageSpacing)
*/
public ";

%javamethodmodifiers  rtk::simple::DiffeomorphicDemonsRegistrationFilter::SmoothDisplacementFieldOff "/**
Self& rtk::simple::DiffeomorphicDemonsRegistrationFilter::SmoothDisplacementFieldOff()
*/
public ";

%javamethodmodifiers  rtk::simple::DiffeomorphicDemonsRegistrationFilter::SmoothDisplacementFieldOn "/**
Self& rtk::simple::DiffeomorphicDemonsRegistrationFilter::SmoothDisplacementFieldOn()

Set the value of SmoothDisplacementField to true or false
respectfully.

*/
public ";

%javamethodmodifiers  rtk::simple::DiffeomorphicDemonsRegistrationFilter::SmoothUpdateFieldOff "/**
Self& rtk::simple::DiffeomorphicDemonsRegistrationFilter::SmoothUpdateFieldOff()
*/
public ";

%javamethodmodifiers  rtk::simple::DiffeomorphicDemonsRegistrationFilter::SmoothUpdateFieldOn "/**
Self& rtk::simple::DiffeomorphicDemonsRegistrationFilter::SmoothUpdateFieldOn()

Set the value of SmoothUpdateField to true or false respectfully.

*/
public ";

%javamethodmodifiers  rtk::simple::DiffeomorphicDemonsRegistrationFilter::ToString "/**
std::string rtk::simple::DiffeomorphicDemonsRegistrationFilter::ToString() const

Print ourselves out

*/
public ";

%javamethodmodifiers  rtk::simple::DiffeomorphicDemonsRegistrationFilter::UseFirstOrderExpOff "/**
Self& rtk::simple::DiffeomorphicDemonsRegistrationFilter::UseFirstOrderExpOff()
*/
public ";

%javamethodmodifiers  rtk::simple::DiffeomorphicDemonsRegistrationFilter::UseFirstOrderExpOn "/**
Self& rtk::simple::DiffeomorphicDemonsRegistrationFilter::UseFirstOrderExpOn()

Set the value of UseFirstOrderExp to true or false respectfully.

*/
public ";

%javamethodmodifiers  rtk::simple::DiffeomorphicDemonsRegistrationFilter::UseImageSpacingOff "/**
Self& rtk::simple::DiffeomorphicDemonsRegistrationFilter::UseImageSpacingOff()
*/
public ";

%javamethodmodifiers  rtk::simple::DiffeomorphicDemonsRegistrationFilter::UseImageSpacingOn "/**
Self& rtk::simple::DiffeomorphicDemonsRegistrationFilter::UseImageSpacingOn()

Set the value of UseImageSpacing to true or false respectfully.

*/
public ";

%javamethodmodifiers  rtk::simple::DiffeomorphicDemonsRegistrationFilter::~DiffeomorphicDemonsRegistrationFilter "/**
rtk::simple::DiffeomorphicDemonsRegistrationFilter::~DiffeomorphicDemonsRegistrationFilter()

Destructor

*/
public ";


%typemap(javaimports) rtk::simple::DilateObjectMorphologyImageFilter "/**

dilation of an object in an image


Dilate an image using binary morphology. Pixel values matching the
object value are considered the \"foreground\" and all other pixels
are \"background\". This is useful in processing mask images
containing only one object.

If a pixel's value is equal to the object value and the pixel is
adjacent to a non-object valued pixel, then the kernel is centered on
the object-value pixel and neighboring pixels covered by the kernel
are assigned the object value. The structuring element is assumed to
be composed of binary values (zero or one).


See:
 ObjectMorphologyImageFilter , ErodeObjectMorphologyImageFilter


 BinaryDilateImageFilter

 rtk::simple::DilateObjectMorphology for the procedural interface

 itk::DilateObjectMorphologyImageFilter for the Doxygen on the original ITK class.


C++ includes: srtkDilateObjectMorphologyImageFilter.h
*/"

%javamethodmodifiers  rtk::simple::DilateObjectMorphologyImageFilter::DilateObjectMorphologyImageFilter "/**
rtk::simple::DilateObjectMorphologyImageFilter::DilateObjectMorphologyImageFilter()

Default Constructor that takes no arguments and initializes default
parameters

*/
public ";

%javamethodmodifiers  rtk::simple::DilateObjectMorphologyImageFilter::Execute "/**
Image rtk::simple::DilateObjectMorphologyImageFilter::Execute(const Image &image1)

Execute the filter on the input image

*/
public ";

%javamethodmodifiers  rtk::simple::DilateObjectMorphologyImageFilter::Execute "/**
Image rtk::simple::DilateObjectMorphologyImageFilter::Execute(const Image &image1, double objectValue)

Execute the filter on the input image with the given parameters

*/
public ";

%javamethodmodifiers  rtk::simple::DilateObjectMorphologyImageFilter::GetKernelRadius "/**
std::vector<uint32_t> rtk::simple::DilateObjectMorphologyImageFilter::GetKernelRadius() const
*/
public ";

%javamethodmodifiers  rtk::simple::DilateObjectMorphologyImageFilter::GetKernelType "/**
KernelEnum rtk::simple::DilateObjectMorphologyImageFilter::GetKernelType() const
*/
public ";

%javamethodmodifiers  rtk::simple::DilateObjectMorphologyImageFilter::GetName "/**
std::string rtk::simple::DilateObjectMorphologyImageFilter::GetName() const

Name of this class

*/
public ";

%javamethodmodifiers  rtk::simple::DilateObjectMorphologyImageFilter::GetObjectValue "/**
double rtk::simple::DilateObjectMorphologyImageFilter::GetObjectValue() const
*/
public ";

%javamethodmodifiers  rtk::simple::DilateObjectMorphologyImageFilter::SetKernelRadius "/**
Self& rtk::simple::DilateObjectMorphologyImageFilter::SetKernelRadius(uint32_t r)

Kernel radius as a scale for isotropic structures

*/
public ";

%javamethodmodifiers  rtk::simple::DilateObjectMorphologyImageFilter::SetKernelRadius "/**
Self& rtk::simple::DilateObjectMorphologyImageFilter::SetKernelRadius(const std::vector< uint32_t > &r)

Set/Get the radius of the kernel structuring element as a vector.

If the dimension of the image is greater then the length of r, then
the radius will be padded. If it is less the r will be truncated.

*/
public ";

%javamethodmodifiers  rtk::simple::DilateObjectMorphologyImageFilter::SetKernelType "/**
Self& rtk::simple::DilateObjectMorphologyImageFilter::SetKernelType(KernelEnum t)

Set/Get the kernel or structuring elemenent used for the morphology

*/
public ";

%javamethodmodifiers  rtk::simple::DilateObjectMorphologyImageFilter::SetKernelType "/**
Self& rtk::simple::DilateObjectMorphologyImageFilter::SetKernelType(KernelType t)
*/
public ";

%javamethodmodifiers  rtk::simple::DilateObjectMorphologyImageFilter::SetObjectValue "/**
Self& rtk::simple::DilateObjectMorphologyImageFilter::SetObjectValue(double ObjectValue)
*/
public ";

%javamethodmodifiers  rtk::simple::DilateObjectMorphologyImageFilter::ToString "/**
std::string rtk::simple::DilateObjectMorphologyImageFilter::ToString() const

Print ourselves out

*/
public ";

%javamethodmodifiers  rtk::simple::DilateObjectMorphologyImageFilter::~DilateObjectMorphologyImageFilter "/**
rtk::simple::DilateObjectMorphologyImageFilter::~DilateObjectMorphologyImageFilter()

Destructor

*/
public ";


%typemap(javaimports) rtk::simple::DiscreteGaussianDerivativeImageFilter "/**

Calculates image derivatives using discrete derivative gaussian
kernels. This filter calculates Gaussian derivative by separable
convolution of an image and a discrete Gaussian derivative operator
(kernel).


The Gaussian operators used here were described by Tony Lindeberg
(Discrete Scale-Space Theory and the Scale-Space Primal Sketch.
Dissertation. Royal Institute of Technology, Stockholm, Sweden. May
1991.)

The variance or standard deviation (sigma) will be evaluated as pixel
units if SetUseImageSpacing is off (false) or as physical units if
SetUseImageSpacing is on (true, default). The variance can be set
independently in each dimension.

When the Gaussian kernel is small, this filter tends to run faster
than itk::RecursiveGaussianImageFilter .


Ivan Macia, VICOMTech, Spain, http://www.vicomtech.es
 This implementation was taken from the Insight Journal paper: https://hdl.handle.net/1926/1290


See:
 GaussianDerivativeOperator


 Image


 Neighborhood


 NeighborhoodOperator

 rtk::simple::DiscreteGaussianDerivative for the procedural interface

 itk::DiscreteGaussianDerivativeImageFilter for the Doxygen on the original ITK class.


C++ includes: srtkDiscreteGaussianDerivativeImageFilter.h
*/"

%javamethodmodifiers  rtk::simple::DiscreteGaussianDerivativeImageFilter::DiscreteGaussianDerivativeImageFilter "/**
rtk::simple::DiscreteGaussianDerivativeImageFilter::DiscreteGaussianDerivativeImageFilter()

Default Constructor that takes no arguments and initializes default
parameters

*/
public ";

%javamethodmodifiers  rtk::simple::DiscreteGaussianDerivativeImageFilter::Execute "/**
Image rtk::simple::DiscreteGaussianDerivativeImageFilter::Execute(const Image &image1)

Execute the filter on the input image

*/
public ";

%javamethodmodifiers  rtk::simple::DiscreteGaussianDerivativeImageFilter::Execute "/**
Image rtk::simple::DiscreteGaussianDerivativeImageFilter::Execute(const Image &image1, const std::vector< double > &variance, const
std::vector< unsigned int > &order, unsigned int maximumKernelWidth,
double maximumError, bool useImageSpacing, bool normalizeAcrossScale)

Execute the filter on the input image with the given parameters

*/
public ";

%javamethodmodifiers  rtk::simple::DiscreteGaussianDerivativeImageFilter::GetMaximumError "/**
double rtk::simple::DiscreteGaussianDerivativeImageFilter::GetMaximumError() const

The algorithm will size the discrete kernel so that the error
resulting from truncation of the kernel is no greater than
MaximumError. The default is 0.01 in each dimension.

*/
public ";

%javamethodmodifiers  rtk::simple::DiscreteGaussianDerivativeImageFilter::GetMaximumKernelWidth "/**
unsigned int rtk::simple::DiscreteGaussianDerivativeImageFilter::GetMaximumKernelWidth() const

Set the kernel to be no wider than MaximumKernelWidth pixels, even if
MaximumError demands it. The default is 32 pixels.

*/
public ";

%javamethodmodifiers  rtk::simple::DiscreteGaussianDerivativeImageFilter::GetName "/**
std::string rtk::simple::DiscreteGaussianDerivativeImageFilter::GetName() const

Name of this class

*/
public ";

%javamethodmodifiers  rtk::simple::DiscreteGaussianDerivativeImageFilter::GetNormalizeAcrossScale "/**
bool rtk::simple::DiscreteGaussianDerivativeImageFilter::GetNormalizeAcrossScale() const

Set/Get the flag for calculating scale-space normalized derivatives.
Normalized derivatives are obtained multiplying by the scale parameter
t.

*/
public ";

%javamethodmodifiers  rtk::simple::DiscreteGaussianDerivativeImageFilter::GetOrder "/**
std::vector<unsigned int> rtk::simple::DiscreteGaussianDerivativeImageFilter::GetOrder() const

Order of derivatives in each dimension. Sets the derivative order
independently for each dimension, but see also SetOrder(const unsigned int v) . The default is 1 in each dimension.

*/
public ";

%javamethodmodifiers  rtk::simple::DiscreteGaussianDerivativeImageFilter::GetUseImageSpacing "/**
bool rtk::simple::DiscreteGaussianDerivativeImageFilter::GetUseImageSpacing() const

Set/Get whether or not the filter will use the spacing of the input
image in its calculations. Default is ImageSpacingOn.

*/
public ";

%javamethodmodifiers  rtk::simple::DiscreteGaussianDerivativeImageFilter::GetVariance "/**
std::vector<double> rtk::simple::DiscreteGaussianDerivativeImageFilter::GetVariance() const

The variance for the discrete Gaussian kernel. Sets the variance
independently for each dimension, but see also SetVariance(const double v) . The default is 0.0 in each dimension. If UseImageSpacing is true,
the units are the physical units of your image. If UseImageSpacing is
false then the units are pixels.

*/
public ";

%javamethodmodifiers  rtk::simple::DiscreteGaussianDerivativeImageFilter::NormalizeAcrossScaleOff "/**
Self& rtk::simple::DiscreteGaussianDerivativeImageFilter::NormalizeAcrossScaleOff()
*/
public ";

%javamethodmodifiers  rtk::simple::DiscreteGaussianDerivativeImageFilter::NormalizeAcrossScaleOn "/**
Self& rtk::simple::DiscreteGaussianDerivativeImageFilter::NormalizeAcrossScaleOn()

Set the value of NormalizeAcrossScale to true or false respectfully.

*/
public ";

%javamethodmodifiers  rtk::simple::DiscreteGaussianDerivativeImageFilter::SetMaximumError "/**
Self& rtk::simple::DiscreteGaussianDerivativeImageFilter::SetMaximumError(double MaximumError)

Convenience Set methods for setting all dimensional parameters to the
same values.

*/
public ";

%javamethodmodifiers  rtk::simple::DiscreteGaussianDerivativeImageFilter::SetMaximumKernelWidth "/**
Self& rtk::simple::DiscreteGaussianDerivativeImageFilter::SetMaximumKernelWidth(unsigned int MaximumKernelWidth)

Set the kernel to be no wider than MaximumKernelWidth pixels, even if
MaximumError demands it. The default is 32 pixels.

*/
public ";

%javamethodmodifiers  rtk::simple::DiscreteGaussianDerivativeImageFilter::SetNormalizeAcrossScale "/**
Self& rtk::simple::DiscreteGaussianDerivativeImageFilter::SetNormalizeAcrossScale(bool NormalizeAcrossScale)

Set/Get the flag for calculating scale-space normalized derivatives.
Normalized derivatives are obtained multiplying by the scale parameter
t.

*/
public ";

%javamethodmodifiers  rtk::simple::DiscreteGaussianDerivativeImageFilter::SetOrder "/**
Self& rtk::simple::DiscreteGaussianDerivativeImageFilter::SetOrder(const std::vector< unsigned int > &Order)

Convenience Set methods for setting all dimensional parameters to the
same values.

*/
public ";

%javamethodmodifiers  rtk::simple::DiscreteGaussianDerivativeImageFilter::SetOrder "/**
Self& rtk::simple::DiscreteGaussianDerivativeImageFilter::SetOrder(unsigned int value)

Set the values of the Order vector all to value

*/
public ";

%javamethodmodifiers  rtk::simple::DiscreteGaussianDerivativeImageFilter::SetUseImageSpacing "/**
Self& rtk::simple::DiscreteGaussianDerivativeImageFilter::SetUseImageSpacing(bool UseImageSpacing)

Set/Get whether or not the filter will use the spacing of the input
image in its calculations. Default is ImageSpacingOn.

*/
public ";

%javamethodmodifiers  rtk::simple::DiscreteGaussianDerivativeImageFilter::SetVariance "/**
Self& rtk::simple::DiscreteGaussianDerivativeImageFilter::SetVariance(const std::vector< double > &Variance)

Convenience Set methods for setting all dimensional parameters to the
same values.

*/
public ";

%javamethodmodifiers  rtk::simple::DiscreteGaussianDerivativeImageFilter::SetVariance "/**
Self& rtk::simple::DiscreteGaussianDerivativeImageFilter::SetVariance(double value)

Set the values of the Variance vector all to value

*/
public ";

%javamethodmodifiers  rtk::simple::DiscreteGaussianDerivativeImageFilter::ToString "/**
std::string rtk::simple::DiscreteGaussianDerivativeImageFilter::ToString() const

Print ourselves out

*/
public ";

%javamethodmodifiers  rtk::simple::DiscreteGaussianDerivativeImageFilter::UseImageSpacingOff "/**
Self& rtk::simple::DiscreteGaussianDerivativeImageFilter::UseImageSpacingOff()
*/
public ";

%javamethodmodifiers  rtk::simple::DiscreteGaussianDerivativeImageFilter::UseImageSpacingOn "/**
Self& rtk::simple::DiscreteGaussianDerivativeImageFilter::UseImageSpacingOn()

Set the value of UseImageSpacing to true or false respectfully.

*/
public ";

%javamethodmodifiers  rtk::simple::DiscreteGaussianDerivativeImageFilter::~DiscreteGaussianDerivativeImageFilter "/**
rtk::simple::DiscreteGaussianDerivativeImageFilter::~DiscreteGaussianDerivativeImageFilter()

Destructor

*/
public ";


%typemap(javaimports) rtk::simple::DiscreteGaussianImageFilter "/**

Blurs an image by separable convolution with discrete gaussian
kernels. This filter performs Gaussian blurring by separable
convolution of an image and a discrete Gaussian operator (kernel).


The Gaussian operator used here was described by Tony Lindeberg
(Discrete Scale-Space Theory and the Scale-Space Primal Sketch.
Dissertation. Royal Institute of Technology, Stockholm, Sweden. May
1991.) The Gaussian kernel used here was designed so that smoothing
and derivative operations commute after discretization.

The variance or standard deviation (sigma) will be evaluated as pixel
units if SetUseImageSpacing is off (false) or as physical units if
SetUseImageSpacing is on (true, default). The variance can be set
independently in each dimension.

When the Gaussian kernel is small, this filter tends to run faster
than itk::RecursiveGaussianImageFilter .


See:
 GaussianOperator


 Image


 Neighborhood


 NeighborhoodOperator


 RecursiveGaussianImageFilter
Wiki Examples:

All Examples

Smooth an image with a discrete Gaussian filter
See:
 rtk::simple::DiscreteGaussian for the procedural interface

 itk::DiscreteGaussianImageFilter for the Doxygen on the original ITK class.



C++ includes: srtkDiscreteGaussianImageFilter.h
*/"

%javamethodmodifiers  rtk::simple::DiscreteGaussianImageFilter::DiscreteGaussianImageFilter "/**
rtk::simple::DiscreteGaussianImageFilter::DiscreteGaussianImageFilter()

Default Constructor that takes no arguments and initializes default
parameters

*/
public ";

%javamethodmodifiers  rtk::simple::DiscreteGaussianImageFilter::Execute "/**
Image rtk::simple::DiscreteGaussianImageFilter::Execute(const Image &image1)

Execute the filter on the input image

*/
public ";

%javamethodmodifiers  rtk::simple::DiscreteGaussianImageFilter::Execute "/**
Image rtk::simple::DiscreteGaussianImageFilter::Execute(const Image &image1, double variance, unsigned int
maximumKernelWidth, double maximumError, bool useImageSpacing)

Execute the filter on the input image with the given parameters

*/
public ";

%javamethodmodifiers  rtk::simple::DiscreteGaussianImageFilter::GetMaximumError "/**
double rtk::simple::DiscreteGaussianImageFilter::GetMaximumError() const

The algorithm will size the discrete kernel so that the error
resulting from truncation of the kernel is no greater than
MaximumError. The default is 0.01 in each dimension.

*/
public ";

%javamethodmodifiers  rtk::simple::DiscreteGaussianImageFilter::GetMaximumKernelWidth "/**
unsigned int rtk::simple::DiscreteGaussianImageFilter::GetMaximumKernelWidth() const

Set the kernel to be no wider than MaximumKernelWidth pixels, even if
MaximumError demands it. The default is 32 pixels.

*/
public ";

%javamethodmodifiers  rtk::simple::DiscreteGaussianImageFilter::GetName "/**
std::string rtk::simple::DiscreteGaussianImageFilter::GetName() const

Name of this class

*/
public ";

%javamethodmodifiers  rtk::simple::DiscreteGaussianImageFilter::GetUseImageSpacing "/**
bool rtk::simple::DiscreteGaussianImageFilter::GetUseImageSpacing() const

Set/Get whether or not the filter will use the spacing of the input
image in its calculations

*/
public ";

%javamethodmodifiers  rtk::simple::DiscreteGaussianImageFilter::GetVariance "/**
double rtk::simple::DiscreteGaussianImageFilter::GetVariance() const

The variance for the discrete Gaussian kernel. Sets the variance
independently for each dimension, but see also SetVariance(const double v) . The default is 0.0 in each dimension. If UseImageSpacing is true,
the units are the physical units of your image. If UseImageSpacing is
false then the units are pixels.

*/
public ";

%javamethodmodifiers  rtk::simple::DiscreteGaussianImageFilter::SetMaximumError "/**
Self& rtk::simple::DiscreteGaussianImageFilter::SetMaximumError(double MaximumError)
*/
public ";

%javamethodmodifiers  rtk::simple::DiscreteGaussianImageFilter::SetMaximumKernelWidth "/**
Self& rtk::simple::DiscreteGaussianImageFilter::SetMaximumKernelWidth(unsigned int MaximumKernelWidth)

Set the kernel to be no wider than MaximumKernelWidth pixels, even if
MaximumError demands it. The default is 32 pixels.

*/
public ";

%javamethodmodifiers  rtk::simple::DiscreteGaussianImageFilter::SetUseImageSpacing "/**
Self& rtk::simple::DiscreteGaussianImageFilter::SetUseImageSpacing(bool UseImageSpacing)

Set/Get whether or not the filter will use the spacing of the input
image in its calculations

*/
public ";

%javamethodmodifiers  rtk::simple::DiscreteGaussianImageFilter::SetVariance "/**
Self& rtk::simple::DiscreteGaussianImageFilter::SetVariance(double Variance)
*/
public ";

%javamethodmodifiers  rtk::simple::DiscreteGaussianImageFilter::ToString "/**
std::string rtk::simple::DiscreteGaussianImageFilter::ToString() const

Print ourselves out

*/
public ";

%javamethodmodifiers  rtk::simple::DiscreteGaussianImageFilter::UseImageSpacingOff "/**
Self& rtk::simple::DiscreteGaussianImageFilter::UseImageSpacingOff()
*/
public ";

%javamethodmodifiers  rtk::simple::DiscreteGaussianImageFilter::UseImageSpacingOn "/**
Self& rtk::simple::DiscreteGaussianImageFilter::UseImageSpacingOn()

Set the value of UseImageSpacing to true or false respectfully.

*/
public ";

%javamethodmodifiers  rtk::simple::DiscreteGaussianImageFilter::~DiscreteGaussianImageFilter "/**
rtk::simple::DiscreteGaussianImageFilter::~DiscreteGaussianImageFilter()

Destructor

*/
public ";


%typemap(javaimports) rtk::simple::DisplacementFieldJacobianDeterminantFilter "/**

Computes a scalar image from a vector image (e.g., deformation field)
input, where each output scalar at each pixel is the Jacobian
determinant of the vector field at that location. This calculation is
correct in the case where the vector image is a \"displacement\" from
the current location. The computation for the jacobian determinant is:
det[ dT/dx ] = det[ I + du/dx ].


Overview
This filter is based on itkVectorGradientMagnitudeImageFilter and
supports the m_DerivativeWeights weights for partial derivatives.
 Note that the determinant of a zero vector field is also zero,
whereas the Jacobian determinant of the corresponding identity warp
transformation is 1.0. In order to compute the effective deformation
Jacobian determinant 1.0 must be added to the diagonal elements of
Jacobian prior to taking the derivative. i.e. det([ (1.0+dx/dx) dx/dy
dx/dz ; dy/dx (1.0+dy/dy) dy/dz; dz/dx dz/dy (1.0+dz/dz) ])

Template Parameters (Input and Output)
This filter has one required template parameter which defines the
input image type. The pixel type of the input image is assumed to be a
vector (e.g., itk::Vector , itk::RGBPixel , itk::FixedArray ). The scalar type of the vector components must be castable to
floating point. Instantiating with an image of RGBPixel<unsigned
short>, for example, is allowed, but the filter will convert it to an
image of Vector<float,3> for processing.
 The second template parameter, TRealType, can be optionally specified
to define the scalar numerical type used in calculations. This is the
component type of the output image, which will be of
itk::Vector<TRealType, N>, where N is the number of channels in the
multiple component input image. The default type of TRealType is
float. For extra precision, you may safely change this parameter to
double.

The third template parameter is the output image type. The third
parameter will be automatically constructed from the first and second
parameters, so it is not necessary (or advisable) to set this
parameter explicitly. Given an M-channel input image with
dimensionality N, and a numerical type specified as TRealType, the
output image will be of type itk::Image<TRealType, N>.

Filter Parameters
The method SetUseImageSpacingOn will cause derivatives in the image to
be scaled (inversely) with the pixel size of the input image,
effectively taking derivatives in world coordinates (versus isotropic
image space). SetUseImageSpacingOff turns this functionality off.
Default is UseImageSpacingOn. The parameter UseImageSpacing can be set
directly with the method SetUseImageSpacing(bool) .
 Weights can be applied to the derivatives directly using the
SetDerivativeWeights method. Note that if UseImageSpacing is set to
TRUE (ON), then these weights will be overridden by weights derived
from the image spacing when the filter is updated. The argument to
this method is a C array of TRealValue type.

Constraints
We use vnl_det for determinent computation, which only supports square
matrices. So the vector dimension of the input image values must be
equal to the image dimensions, which is trivially true for a
deformation field that maps an n-dimensional space onto itself.
 Currently, dimensions up to and including 4 are supported. This
limitation comes from the presence of vnl_det() functions for matrices
of dimension up to 4x4.

The template parameter TRealType must be floating point (float or
double) or a user-defined \"real\" numerical type with arithmetic
operations defined sufficient to compute derivatives.


See:
 Image


 Neighborhood


 NeighborhoodOperator


 NeighborhoodIterator

This class was adapted by

Hans J. Johnson, The University of Iowa from code provided by
 Tom Vercauteren, INRIA & Mauna Kea Technologies

Torsten Rohlfing, Neuroscience Program, SRI International.
See:
 rtk::simple::DisplacementFieldJacobianDeterminantFilter for the procedural interface

 itk::DisplacementFieldJacobianDeterminantFilter for the Doxygen on the original ITK class.


C++ includes: srtkDisplacementFieldJacobianDeterminantFilter.h
*/"

%javamethodmodifiers  rtk::simple::DisplacementFieldJacobianDeterminantFilter::DisplacementFieldJacobianDeterminantFilter "/**
rtk::simple::DisplacementFieldJacobianDeterminantFilter::DisplacementFieldJacobianDeterminantFilter()

Default Constructor that takes no arguments and initializes default
parameters

*/
public ";

%javamethodmodifiers  rtk::simple::DisplacementFieldJacobianDeterminantFilter::Execute "/**
Image rtk::simple::DisplacementFieldJacobianDeterminantFilter::Execute(const Image &image1)

Execute the filter on the input image

*/
public ";

%javamethodmodifiers  rtk::simple::DisplacementFieldJacobianDeterminantFilter::Execute "/**
Image rtk::simple::DisplacementFieldJacobianDeterminantFilter::Execute(const Image &image1, bool useImageSpacing, const std::vector< double
> &derivativeWeights)

Execute the filter on the input image with the given parameters

*/
public ";

%javamethodmodifiers  rtk::simple::DisplacementFieldJacobianDeterminantFilter::GetDerivativeWeights "/**
std::vector<double> rtk::simple::DisplacementFieldJacobianDeterminantFilter::GetDerivativeWeights() const

Directly Set/Get the array of weights used in the gradient
calculations. Note that calling UseImageSpacingOn will clobber these
values.

*/
public ";

%javamethodmodifiers  rtk::simple::DisplacementFieldJacobianDeterminantFilter::GetName "/**
std::string rtk::simple::DisplacementFieldJacobianDeterminantFilter::GetName() const

Name of this class

*/
public ";

%javamethodmodifiers  rtk::simple::DisplacementFieldJacobianDeterminantFilter::GetUseImageSpacing "/**
bool rtk::simple::DisplacementFieldJacobianDeterminantFilter::GetUseImageSpacing() const
*/
public ";

%javamethodmodifiers  rtk::simple::DisplacementFieldJacobianDeterminantFilter::SetDerivativeWeights "/**
Self& rtk::simple::DisplacementFieldJacobianDeterminantFilter::SetDerivativeWeights(const std::vector< double > &DerivativeWeights)

Directly Set/Get the array of weights used in the gradient
calculations. Note that calling UseImageSpacingOn will clobber these
values.

*/
public ";

%javamethodmodifiers  rtk::simple::DisplacementFieldJacobianDeterminantFilter::SetUseImageSpacing "/**
Self& rtk::simple::DisplacementFieldJacobianDeterminantFilter::SetUseImageSpacing(bool UseImageSpacing)

Set/Get whether or not the filter will use the spacing of the input
image in its calculations

*/
public ";

%javamethodmodifiers  rtk::simple::DisplacementFieldJacobianDeterminantFilter::ToString "/**
std::string rtk::simple::DisplacementFieldJacobianDeterminantFilter::ToString() const

Print ourselves out

*/
public ";

%javamethodmodifiers  rtk::simple::DisplacementFieldJacobianDeterminantFilter::UseImageSpacingOff "/**
Self& rtk::simple::DisplacementFieldJacobianDeterminantFilter::UseImageSpacingOff()
*/
public ";

%javamethodmodifiers  rtk::simple::DisplacementFieldJacobianDeterminantFilter::UseImageSpacingOn "/**
Self& rtk::simple::DisplacementFieldJacobianDeterminantFilter::UseImageSpacingOn()

Set the value of UseImageSpacing to true or false respectfully.

*/
public ";

%javamethodmodifiers  rtk::simple::DisplacementFieldJacobianDeterminantFilter::~DisplacementFieldJacobianDeterminantFilter "/**
rtk::simple::DisplacementFieldJacobianDeterminantFilter::~DisplacementFieldJacobianDeterminantFilter()

Destructor

*/
public ";


%typemap(javaimports) rtk::simple::DisplacementFieldTransform "/**

A dense deformable transform over a bounded spatial domain for 2D or
3D coordinates space.



See:
 itk::DisplacementFieldTransform


C++ includes: srtkDisplacementFieldTransform.h
*/"

%javamethodmodifiers  rtk::simple::DisplacementFieldTransform::DisplacementFieldTransform "/**
rtk::simple::DisplacementFieldTransform::DisplacementFieldTransform(unsigned int dimensions)
*/
public ";

%javamethodmodifiers  rtk::simple::DisplacementFieldTransform::DisplacementFieldTransform "/**
rtk::simple::DisplacementFieldTransform::DisplacementFieldTransform(Image &)

Consume an image to construct a displacement field transform.



WARNING:
The input displacement image is transferred to the constructed
transform object. The input image is modified to be a default
constructed Image object.
Image must be of srtkVectorFloat64 pixel type with the number of components
equal to the image dimension.

*/
public ";

%javamethodmodifiers  rtk::simple::DisplacementFieldTransform::DisplacementFieldTransform "/**
rtk::simple::DisplacementFieldTransform::DisplacementFieldTransform(const DisplacementFieldTransform &)
*/
public ";

%javamethodmodifiers  rtk::simple::DisplacementFieldTransform::DisplacementFieldTransform "/**
rtk::simple::DisplacementFieldTransform::DisplacementFieldTransform(const Transform &)
*/
public ";

%javamethodmodifiers  rtk::simple::DisplacementFieldTransform::GetDisplacementField "/**
Image rtk::simple::DisplacementFieldTransform::GetDisplacementField() const

Todo
The returned image should not directly modify the internal
displacement field.


*/
public ";

%javamethodmodifiers  rtk::simple::DisplacementFieldTransform::GetInverseDisplacementField "/**
Image rtk::simple::DisplacementFieldTransform::GetInverseDisplacementField() const

Todo
The returned image is should not directly modify the internal
displacement field.


*/
public ";

%javamethodmodifiers  rtk::simple::DisplacementFieldTransform::GetName "/**
std::string rtk::simple::DisplacementFieldTransform::GetName() const

Name of this class

*/
public ";

%javamethodmodifiers  rtk::simple::DisplacementFieldTransform::SetDisplacementField "/**
Self& rtk::simple::DisplacementFieldTransform::SetDisplacementField(Image &)

Consume an image, and set the displacement field.


parameters
WARNING:
The ownership of the input displacement image is transferred to the
constructed transform object. The input image is modified to be a
default constructed Image object.
Image must be of srtkVectorFloat64 pixel type with the number of components
equal to the image dimension.

*/
public ";

%javamethodmodifiers  rtk::simple::DisplacementFieldTransform::SetInterpolator "/**
Self& rtk::simple::DisplacementFieldTransform::SetInterpolator(InterpolatorEnum interp)
*/
public ";

%javamethodmodifiers  rtk::simple::DisplacementFieldTransform::SetInverseDisplacementField "/**
Self& rtk::simple::DisplacementFieldTransform::SetInverseDisplacementField(Image &)

fixed parameter

*/
public ";

%javamethodmodifiers  rtk::simple::DisplacementFieldTransform::SetSmoothingBSplineOnUpdate "/**
Self& rtk::simple::DisplacementFieldTransform::SetSmoothingBSplineOnUpdate(const std::vector< unsigned int >
&numberOfControlPointsForUpdateField=std::vector< unsigned int >(3,
4), const std::vector< unsigned int >
&numberOfControlPointsForTotalField=std::vector< unsigned int >(3, 4),
bool enforceStationaryBoundary=true, unsigned int order=3)
*/
public ";

%javamethodmodifiers  rtk::simple::DisplacementFieldTransform::SetSmoothingGaussianOnUpdate "/**
Self& rtk::simple::DisplacementFieldTransform::SetSmoothingGaussianOnUpdate(double varianceForUpdateField=1.75, double varianceForTotalField=0.5)
*/
public ";

%javamethodmodifiers  rtk::simple::DisplacementFieldTransform::SetSmoothingOff "/**
Self& rtk::simple::DisplacementFieldTransform::SetSmoothingOff()
*/
public ";


%typemap(javaimports) rtk::simple::DivideFloorImageFilter "/**

Implements pixel-wise generic operation of two images, or of an image
and a constant.


This class is parameterized over the types of the two input images and
the type of the output image. It is also parameterized by the
operation to be applied. A Functor style is used.

The constant must be of the same type than the pixel type of the
corresponding image. It is wrapped in a SimpleDataObjectDecorator so it can be updated through the pipeline. The SetConstant() and
GetConstant() methods are provided as shortcuts to set or get the
constant value without manipulating the decorator.


See:
 UnaryFunctorImageFilter TernaryFunctorImageFilter
Wiki Examples:

All Examples

Apply a predefined operation to corresponding pixels in two images

Apply a custom operation to corresponding pixels in two images
See:
 rtk::simple::DivideFloor for the procedural interface

 itk::BinaryFunctorImageFilter for the Doxygen on the original ITK class.



C++ includes: srtkDivideFloorImageFilter.h
*/"

%javamethodmodifiers  rtk::simple::DivideFloorImageFilter::DivideFloorImageFilter "/**
rtk::simple::DivideFloorImageFilter::DivideFloorImageFilter()

Default Constructor that takes no arguments and initializes default
parameters

*/
public ";

%javamethodmodifiers  rtk::simple::DivideFloorImageFilter::Execute "/**
Image rtk::simple::DivideFloorImageFilter::Execute(const Image &image1, const Image &image2)

Execute the filter on the input images

*/
public ";

%javamethodmodifiers  rtk::simple::DivideFloorImageFilter::Execute "/**
Image rtk::simple::DivideFloorImageFilter::Execute(const Image &image1, double constant)

Execute the filter with an image and a constant

*/
public ";

%javamethodmodifiers  rtk::simple::DivideFloorImageFilter::Execute "/**
Image rtk::simple::DivideFloorImageFilter::Execute(double constant, const Image &image2)
*/
public ";

%javamethodmodifiers  rtk::simple::DivideFloorImageFilter::GetName "/**
std::string rtk::simple::DivideFloorImageFilter::GetName() const

Name of this class

*/
public ";

%javamethodmodifiers  rtk::simple::DivideFloorImageFilter::ToString "/**
std::string rtk::simple::DivideFloorImageFilter::ToString() const

Print ourselves out

*/
public ";

%javamethodmodifiers  rtk::simple::DivideFloorImageFilter::~DivideFloorImageFilter "/**
rtk::simple::DivideFloorImageFilter::~DivideFloorImageFilter()

Destructor

*/
public ";


%typemap(javaimports) rtk::simple::DivideImageFilter "/**

Pixel-wise division of two images.


This class is templated over the types of the two input images and the
type of the output image. When the divisor is zero, the division
result is set to the maximum number that can be represented by default
to avoid exception. Numeric conversions (castings) are done by the C++
defaults.

Wiki Examples:

All Examples

Pixel-wise division of two images
See:
 rtk::simple::Divide for the procedural interface

 itk::DivideImageFilter for the Doxygen on the original ITK class.



C++ includes: srtkDivideImageFilter.h
*/"

%javamethodmodifiers  rtk::simple::DivideImageFilter::DivideImageFilter "/**
rtk::simple::DivideImageFilter::DivideImageFilter()

Default Constructor that takes no arguments and initializes default
parameters

*/
public ";

%javamethodmodifiers  rtk::simple::DivideImageFilter::Execute "/**
Image rtk::simple::DivideImageFilter::Execute(const Image &image1, const Image &image2)

Execute the filter on the input images

*/
public ";

%javamethodmodifiers  rtk::simple::DivideImageFilter::Execute "/**
Image rtk::simple::DivideImageFilter::Execute(const Image &image1, double constant)

Execute the filter with an image and a constant

*/
public ";

%javamethodmodifiers  rtk::simple::DivideImageFilter::Execute "/**
Image rtk::simple::DivideImageFilter::Execute(double constant, const Image &image2)
*/
public ";

%javamethodmodifiers  rtk::simple::DivideImageFilter::GetName "/**
std::string rtk::simple::DivideImageFilter::GetName() const

Name of this class

*/
public ";

%javamethodmodifiers  rtk::simple::DivideImageFilter::ToString "/**
std::string rtk::simple::DivideImageFilter::ToString() const

Print ourselves out

*/
public ";

%javamethodmodifiers  rtk::simple::DivideImageFilter::~DivideImageFilter "/**
rtk::simple::DivideImageFilter::~DivideImageFilter()

Destructor

*/
public ";


%typemap(javaimports) rtk::simple::DivideRealImageFilter "/**

Implements pixel-wise generic operation of two images, or of an image
and a constant.


This class is parameterized over the types of the two input images and
the type of the output image. It is also parameterized by the
operation to be applied. A Functor style is used.

The constant must be of the same type than the pixel type of the
corresponding image. It is wrapped in a SimpleDataObjectDecorator so it can be updated through the pipeline. The SetConstant() and
GetConstant() methods are provided as shortcuts to set or get the
constant value without manipulating the decorator.


See:
 UnaryFunctorImageFilter TernaryFunctorImageFilter
Wiki Examples:

All Examples

Apply a predefined operation to corresponding pixels in two images

Apply a custom operation to corresponding pixels in two images
See:
 rtk::simple::DivideReal for the procedural interface

 itk::BinaryFunctorImageFilter for the Doxygen on the original ITK class.



C++ includes: srtkDivideRealImageFilter.h
*/"

%javamethodmodifiers  rtk::simple::DivideRealImageFilter::DivideRealImageFilter "/**
rtk::simple::DivideRealImageFilter::DivideRealImageFilter()

Default Constructor that takes no arguments and initializes default
parameters

*/
public ";

%javamethodmodifiers  rtk::simple::DivideRealImageFilter::Execute "/**
Image rtk::simple::DivideRealImageFilter::Execute(const Image &image1, const Image &image2)

Execute the filter on the input images

*/
public ";

%javamethodmodifiers  rtk::simple::DivideRealImageFilter::Execute "/**
Image rtk::simple::DivideRealImageFilter::Execute(const Image &image1, double constant)

Execute the filter with an image and a constant

*/
public ";

%javamethodmodifiers  rtk::simple::DivideRealImageFilter::Execute "/**
Image rtk::simple::DivideRealImageFilter::Execute(double constant, const Image &image2)
*/
public ";

%javamethodmodifiers  rtk::simple::DivideRealImageFilter::GetName "/**
std::string rtk::simple::DivideRealImageFilter::GetName() const

Name of this class

*/
public ";

%javamethodmodifiers  rtk::simple::DivideRealImageFilter::ToString "/**
std::string rtk::simple::DivideRealImageFilter::ToString() const

Print ourselves out

*/
public ";

%javamethodmodifiers  rtk::simple::DivideRealImageFilter::~DivideRealImageFilter "/**
rtk::simple::DivideRealImageFilter::~DivideRealImageFilter()

Destructor

*/
public ";


%typemap(javaimports) rtk::simple::DoubleThresholdImageFilter "/**

Binarize an input image using double thresholding.


Double threshold addresses the difficulty in selecting a threshold
that will select the objects of interest without selecting extraneous
objects. Double threshold considers two threshold ranges: a narrow
range and a wide range (where the wide range encompasses the narrow
range). If the wide range was used for a traditional threshold (where
values inside the range map to the foreground and values outside the
range map to the background), many extraneous pixels may survive the
threshold operation. If the narrow range was used for a traditional
threshold, then too few pixels may survive the threshold.

Double threshold uses the narrow threshold image as a marker image and
the wide threshold image as a mask image in the geodesic dilation.
Essentially, the marker image (narrow threshold) is dilated but
constrained to lie within the mask image (wide threshold). Thus, only
the objects of interest (those pixels that survived the narrow
threshold) are extracted but the those objects appear in the final
image as they would have if the wide threshold was used.


See:
 GrayscaleGeodesicDilateImageFilter


 MorphologyImageFilter , GrayscaleDilateImageFilter , GrayscaleFunctionDilateImageFilter , BinaryDilateImageFilter

 rtk::simple::DoubleThreshold for the procedural interface

 itk::DoubleThresholdImageFilter for the Doxygen on the original ITK class.


C++ includes: srtkDoubleThresholdImageFilter.h
*/"

%javamethodmodifiers  rtk::simple::DoubleThresholdImageFilter::DoubleThresholdImageFilter "/**
rtk::simple::DoubleThresholdImageFilter::DoubleThresholdImageFilter()

Default Constructor that takes no arguments and initializes default
parameters

*/
public ";

%javamethodmodifiers  rtk::simple::DoubleThresholdImageFilter::Execute "/**
Image rtk::simple::DoubleThresholdImageFilter::Execute(const Image &image1)

Execute the filter on the input image

*/
public ";

%javamethodmodifiers  rtk::simple::DoubleThresholdImageFilter::Execute "/**
Image rtk::simple::DoubleThresholdImageFilter::Execute(const Image &image1, double threshold1, double threshold2, double
threshold3, double threshold4, uint8_t insideValue, uint8_t
outsideValue, bool fullyConnected)

Execute the filter on the input image with the given parameters

*/
public ";

%javamethodmodifiers  rtk::simple::DoubleThresholdImageFilter::FullyConnectedOff "/**
Self& rtk::simple::DoubleThresholdImageFilter::FullyConnectedOff()
*/
public ";

%javamethodmodifiers  rtk::simple::DoubleThresholdImageFilter::FullyConnectedOn "/**
Self& rtk::simple::DoubleThresholdImageFilter::FullyConnectedOn()

Set the value of FullyConnected to true or false respectfully.

*/
public ";

%javamethodmodifiers  rtk::simple::DoubleThresholdImageFilter::GetFullyConnected "/**
bool rtk::simple::DoubleThresholdImageFilter::GetFullyConnected() const

Set/Get whether the connected components are defined strictly by face
connectivity or by face+edge+vertex connectivity. Default is
FullyConnectedOff. For objects that are 1 pixel wide, use
FullyConnectedOn.

*/
public ";

%javamethodmodifiers  rtk::simple::DoubleThresholdImageFilter::GetInsideValue "/**
uint8_t rtk::simple::DoubleThresholdImageFilter::GetInsideValue() const

Get the \"inside\" pixel value.

*/
public ";

%javamethodmodifiers  rtk::simple::DoubleThresholdImageFilter::GetName "/**
std::string rtk::simple::DoubleThresholdImageFilter::GetName() const

Name of this class

*/
public ";

%javamethodmodifiers  rtk::simple::DoubleThresholdImageFilter::GetOutsideValue "/**
uint8_t rtk::simple::DoubleThresholdImageFilter::GetOutsideValue() const

Get the \"outside\" pixel value.

*/
public ";

%javamethodmodifiers  rtk::simple::DoubleThresholdImageFilter::GetThreshold1 "/**
double rtk::simple::DoubleThresholdImageFilter::GetThreshold1() const

Get the threshold values.

*/
public ";

%javamethodmodifiers  rtk::simple::DoubleThresholdImageFilter::GetThreshold2 "/**
double rtk::simple::DoubleThresholdImageFilter::GetThreshold2() const

Get the threshold values.

*/
public ";

%javamethodmodifiers  rtk::simple::DoubleThresholdImageFilter::GetThreshold3 "/**
double rtk::simple::DoubleThresholdImageFilter::GetThreshold3() const

Get the threshold values.

*/
public ";

%javamethodmodifiers  rtk::simple::DoubleThresholdImageFilter::GetThreshold4 "/**
double rtk::simple::DoubleThresholdImageFilter::GetThreshold4() const

Get the threshold values.

*/
public ";

%javamethodmodifiers  rtk::simple::DoubleThresholdImageFilter::SetFullyConnected "/**
Self& rtk::simple::DoubleThresholdImageFilter::SetFullyConnected(bool FullyConnected)

Set/Get whether the connected components are defined strictly by face
connectivity or by face+edge+vertex connectivity. Default is
FullyConnectedOff. For objects that are 1 pixel wide, use
FullyConnectedOn.

*/
public ";

%javamethodmodifiers  rtk::simple::DoubleThresholdImageFilter::SetInsideValue "/**
Self& rtk::simple::DoubleThresholdImageFilter::SetInsideValue(uint8_t InsideValue)

Set the \"inside\" pixel value. The default value NumericTraits<OutputPixelType>::max()

*/
public ";

%javamethodmodifiers  rtk::simple::DoubleThresholdImageFilter::SetOutsideValue "/**
Self& rtk::simple::DoubleThresholdImageFilter::SetOutsideValue(uint8_t OutsideValue)

Set the \"outside\" pixel value. The default value NumericTraits<OutputPixelType>::ZeroValue() .

*/
public ";

%javamethodmodifiers  rtk::simple::DoubleThresholdImageFilter::SetThreshold1 "/**
Self& rtk::simple::DoubleThresholdImageFilter::SetThreshold1(double Threshold1)

Set the thresholds. Four thresholds should be specified. The two lower
thresholds default to NumericTraits<InputPixelType>::NonpositiveMin() . The two upper thresholds default NumericTraits<InputPixelType>::max . Threshold1 <= Threshold2 <= Threshold3 <= Threshold4.

*/
public ";

%javamethodmodifiers  rtk::simple::DoubleThresholdImageFilter::SetThreshold2 "/**
Self& rtk::simple::DoubleThresholdImageFilter::SetThreshold2(double Threshold2)

Set the thresholds. Four thresholds should be specified. The two lower
thresholds default to NumericTraits<InputPixelType>::NonpositiveMin() . The two upper thresholds default NumericTraits<InputPixelType>::max . Threshold1 <= Threshold2 <= Threshold3 <= Threshold4.

*/
public ";

%javamethodmodifiers  rtk::simple::DoubleThresholdImageFilter::SetThreshold3 "/**
Self& rtk::simple::DoubleThresholdImageFilter::SetThreshold3(double Threshold3)

Set the thresholds. Four thresholds should be specified. The two lower
thresholds default to NumericTraits<InputPixelType>::NonpositiveMin() . The two upper thresholds default NumericTraits<InputPixelType>::max . Threshold1 <= Threshold2 <= Threshold3 <= Threshold4.

*/
public ";

%javamethodmodifiers  rtk::simple::DoubleThresholdImageFilter::SetThreshold4 "/**
Self& rtk::simple::DoubleThresholdImageFilter::SetThreshold4(double Threshold4)

Set the thresholds. Four thresholds should be specified. The two lower
thresholds default to NumericTraits<InputPixelType>::NonpositiveMin() . The two upper thresholds default NumericTraits<InputPixelType>::max . Threshold1 <= Threshold2 <= Threshold3 <= Threshold4.

*/
public ";

%javamethodmodifiers  rtk::simple::DoubleThresholdImageFilter::ToString "/**
std::string rtk::simple::DoubleThresholdImageFilter::ToString() const

Print ourselves out

*/
public ";

%javamethodmodifiers  rtk::simple::DoubleThresholdImageFilter::~DoubleThresholdImageFilter "/**
rtk::simple::DoubleThresholdImageFilter::~DoubleThresholdImageFilter()

Destructor

*/
public ";


%typemap(javaimports) rtk::simple::EdgePotentialImageFilter "/**

Computes the edge potential of an image from the image gradient.


Input to this filter should be a CovariantVector image representing the image gradient.

The filter expect both the input and output images to have the same
number of dimensions, and the output to be of a scalar image type.
See:
 rtk::simple::EdgePotential for the procedural interface

 itk::EdgePotentialImageFilter for the Doxygen on the original ITK class.


C++ includes: srtkEdgePotentialImageFilter.h
*/"

%javamethodmodifiers  rtk::simple::EdgePotentialImageFilter::EdgePotentialImageFilter "/**
rtk::simple::EdgePotentialImageFilter::EdgePotentialImageFilter()

Default Constructor that takes no arguments and initializes default
parameters

*/
public ";

%javamethodmodifiers  rtk::simple::EdgePotentialImageFilter::Execute "/**
Image rtk::simple::EdgePotentialImageFilter::Execute(const Image &image1)

Execute the filter on the input image

*/
public ";

%javamethodmodifiers  rtk::simple::EdgePotentialImageFilter::GetName "/**
std::string rtk::simple::EdgePotentialImageFilter::GetName() const

Name of this class

*/
public ";

%javamethodmodifiers  rtk::simple::EdgePotentialImageFilter::ToString "/**
std::string rtk::simple::EdgePotentialImageFilter::ToString() const

Print ourselves out

*/
public ";

%javamethodmodifiers  rtk::simple::EdgePotentialImageFilter::~EdgePotentialImageFilter "/**
rtk::simple::EdgePotentialImageFilter::~EdgePotentialImageFilter()

Destructor

*/
public ";


%typemap(javaimports) rtk::simple::EqualImageFilter "/**

Implements pixel-wise generic operation of two images, or of an image
and a constant.


This class is parameterized over the types of the two input images and
the type of the output image. It is also parameterized by the
operation to be applied. A Functor style is used.

The constant must be of the same type than the pixel type of the
corresponding image. It is wrapped in a SimpleDataObjectDecorator so it can be updated through the pipeline. The SetConstant() and
GetConstant() methods are provided as shortcuts to set or get the
constant value without manipulating the decorator.


See:
 UnaryFunctorImageFilter TernaryFunctorImageFilter
Wiki Examples:

All Examples

Apply a predefined operation to corresponding pixels in two images

Apply a custom operation to corresponding pixels in two images
See:
 rtk::simple::Equal for the procedural interface

 itk::BinaryFunctorImageFilter for the Doxygen on the original ITK class.



C++ includes: srtkEqualImageFilter.h
*/"

%javamethodmodifiers  rtk::simple::EqualImageFilter::EqualImageFilter "/**
rtk::simple::EqualImageFilter::EqualImageFilter()

Default Constructor that takes no arguments and initializes default
parameters

*/
public ";

%javamethodmodifiers  rtk::simple::EqualImageFilter::Execute "/**
Image rtk::simple::EqualImageFilter::Execute(const Image &image1, const Image &image2)

Execute the filter on the input images

*/
public ";

%javamethodmodifiers  rtk::simple::EqualImageFilter::Execute "/**
Image rtk::simple::EqualImageFilter::Execute(const Image &image1, const Image &image2, uint8_t backgroundValue,
uint8_t foregroundValue)

Execute the filter on the input images with the given parameters

*/
public ";

%javamethodmodifiers  rtk::simple::EqualImageFilter::Execute "/**
Image rtk::simple::EqualImageFilter::Execute(const Image &image1, double constant)

Execute the filter with an image and a constant

*/
public ";

%javamethodmodifiers  rtk::simple::EqualImageFilter::Execute "/**
Image rtk::simple::EqualImageFilter::Execute(double constant, const Image &image2)
*/
public ";

%javamethodmodifiers  rtk::simple::EqualImageFilter::Execute "/**
Image rtk::simple::EqualImageFilter::Execute(const Image &image1, double constant, uint8_t backgroundValue,
uint8_t foregroundValue)

Execute the filter on an image and a constant with the given
parameters

*/
public ";

%javamethodmodifiers  rtk::simple::EqualImageFilter::Execute "/**
Image rtk::simple::EqualImageFilter::Execute(double constant, const Image &image2, uint8_t backgroundValue,
uint8_t foregroundValue)
*/
public ";

%javamethodmodifiers  rtk::simple::EqualImageFilter::GetBackgroundValue "/**
uint8_t rtk::simple::EqualImageFilter::GetBackgroundValue() const

Set/Get the value used to mark the false pixels of the operator.

*/
public ";

%javamethodmodifiers  rtk::simple::EqualImageFilter::GetForegroundValue "/**
uint8_t rtk::simple::EqualImageFilter::GetForegroundValue() const

Set/Get the value used to mark the true pixels of the operator.

*/
public ";

%javamethodmodifiers  rtk::simple::EqualImageFilter::GetName "/**
std::string rtk::simple::EqualImageFilter::GetName() const

Name of this class

*/
public ";

%javamethodmodifiers  rtk::simple::EqualImageFilter::SetBackgroundValue "/**
Self& rtk::simple::EqualImageFilter::SetBackgroundValue(uint8_t BackgroundValue)

Set/Get the value used to mark the false pixels of the operator.

*/
public ";

%javamethodmodifiers  rtk::simple::EqualImageFilter::SetForegroundValue "/**
Self& rtk::simple::EqualImageFilter::SetForegroundValue(uint8_t ForegroundValue)

Set/Get the value used to mark the true pixels of the operator.

*/
public ";

%javamethodmodifiers  rtk::simple::EqualImageFilter::ToString "/**
std::string rtk::simple::EqualImageFilter::ToString() const

Print ourselves out

*/
public ";

%javamethodmodifiers  rtk::simple::EqualImageFilter::~EqualImageFilter "/**
rtk::simple::EqualImageFilter::~EqualImageFilter()

Destructor

*/
public ";


%typemap(javaimports) rtk::simple::ErodeObjectMorphologyImageFilter "/**

Erosion of an object in an image.


Erosion of an image using binary morphology. Pixel values matching the
object value are considered the \"object\" and all other pixels are
\"background\". This is useful in processing mask images containing
only one object.

If the pixel covered by the center of the kernel has the pixel value
ObjectValue and the pixel is adjacent to a non-object valued pixel,
then the kernel is centered on the object-value pixel and neighboring
pixels covered by the kernel are assigned the background value. The
structuring element is assumed to be composed of binary values (zero
or one).


See:
 ObjectMorphologyImageFilter , BinaryFunctionErodeImageFilter


 BinaryErodeImageFilter

 rtk::simple::ErodeObjectMorphology for the procedural interface

 itk::ErodeObjectMorphologyImageFilter for the Doxygen on the original ITK class.


C++ includes: srtkErodeObjectMorphologyImageFilter.h
*/"

%javamethodmodifiers  rtk::simple::ErodeObjectMorphologyImageFilter::ErodeObjectMorphologyImageFilter "/**
rtk::simple::ErodeObjectMorphologyImageFilter::ErodeObjectMorphologyImageFilter()

Default Constructor that takes no arguments and initializes default
parameters

*/
public ";

%javamethodmodifiers  rtk::simple::ErodeObjectMorphologyImageFilter::Execute "/**
Image rtk::simple::ErodeObjectMorphologyImageFilter::Execute(const Image &image1)

Execute the filter on the input image

*/
public ";

%javamethodmodifiers  rtk::simple::ErodeObjectMorphologyImageFilter::Execute "/**
Image rtk::simple::ErodeObjectMorphologyImageFilter::Execute(const Image &image1, double objectValue, double backgroundValue)

Execute the filter on the input image with the given parameters

*/
public ";

%javamethodmodifiers  rtk::simple::ErodeObjectMorphologyImageFilter::GetBackgroundValue "/**
double rtk::simple::ErodeObjectMorphologyImageFilter::GetBackgroundValue() const

Get the value to be assigned to eroded pixels

*/
public ";

%javamethodmodifiers  rtk::simple::ErodeObjectMorphologyImageFilter::GetKernelRadius "/**
std::vector<uint32_t> rtk::simple::ErodeObjectMorphologyImageFilter::GetKernelRadius() const
*/
public ";

%javamethodmodifiers  rtk::simple::ErodeObjectMorphologyImageFilter::GetKernelType "/**
KernelEnum rtk::simple::ErodeObjectMorphologyImageFilter::GetKernelType() const
*/
public ";

%javamethodmodifiers  rtk::simple::ErodeObjectMorphologyImageFilter::GetName "/**
std::string rtk::simple::ErodeObjectMorphologyImageFilter::GetName() const

Name of this class

*/
public ";

%javamethodmodifiers  rtk::simple::ErodeObjectMorphologyImageFilter::GetObjectValue "/**
double rtk::simple::ErodeObjectMorphologyImageFilter::GetObjectValue() const
*/
public ";

%javamethodmodifiers  rtk::simple::ErodeObjectMorphologyImageFilter::SetBackgroundValue "/**
Self& rtk::simple::ErodeObjectMorphologyImageFilter::SetBackgroundValue(double BackgroundValue)

Set the value to be assigned to eroded pixels

*/
public ";

%javamethodmodifiers  rtk::simple::ErodeObjectMorphologyImageFilter::SetKernelRadius "/**
Self& rtk::simple::ErodeObjectMorphologyImageFilter::SetKernelRadius(uint32_t r)

Kernel radius as a scale for isotropic structures

*/
public ";

%javamethodmodifiers  rtk::simple::ErodeObjectMorphologyImageFilter::SetKernelRadius "/**
Self& rtk::simple::ErodeObjectMorphologyImageFilter::SetKernelRadius(const std::vector< uint32_t > &r)

Set/Get the radius of the kernel structuring element as a vector.

If the dimension of the image is greater then the length of r, then
the radius will be padded. If it is less the r will be truncated.

*/
public ";

%javamethodmodifiers  rtk::simple::ErodeObjectMorphologyImageFilter::SetKernelType "/**
Self& rtk::simple::ErodeObjectMorphologyImageFilter::SetKernelType(KernelEnum t)

Set/Get the kernel or structuring elemenent used for the morphology

*/
public ";

%javamethodmodifiers  rtk::simple::ErodeObjectMorphologyImageFilter::SetKernelType "/**
Self& rtk::simple::ErodeObjectMorphologyImageFilter::SetKernelType(KernelType t)
*/
public ";

%javamethodmodifiers  rtk::simple::ErodeObjectMorphologyImageFilter::SetObjectValue "/**
Self& rtk::simple::ErodeObjectMorphologyImageFilter::SetObjectValue(double ObjectValue)
*/
public ";

%javamethodmodifiers  rtk::simple::ErodeObjectMorphologyImageFilter::ToString "/**
std::string rtk::simple::ErodeObjectMorphologyImageFilter::ToString() const

Print ourselves out

*/
public ";

%javamethodmodifiers  rtk::simple::ErodeObjectMorphologyImageFilter::~ErodeObjectMorphologyImageFilter "/**
rtk::simple::ErodeObjectMorphologyImageFilter::~ErodeObjectMorphologyImageFilter()

Destructor

*/
public ";


%typemap(javaimports) rtk::simple::Euler2DTransform "/**

A rigid 2D transform with rotation in radians around a fixed center
with translation.



See:
 itk::Euler2DTransform


C++ includes: srtkEuler2DTransform.h
*/"

%javamethodmodifiers  rtk::simple::Euler2DTransform::Euler2DTransform "/**
rtk::simple::Euler2DTransform::Euler2DTransform()
*/
public ";

%javamethodmodifiers  rtk::simple::Euler2DTransform::Euler2DTransform "/**
rtk::simple::Euler2DTransform::Euler2DTransform(const std::vector< double > &fixedCenter, double angle=0.0, const
std::vector< double > &translation=std::vector< double >(2, 0.0))
*/
public ";

%javamethodmodifiers  rtk::simple::Euler2DTransform::Euler2DTransform "/**
rtk::simple::Euler2DTransform::Euler2DTransform(const Euler2DTransform &)
*/
public ";

%javamethodmodifiers  rtk::simple::Euler2DTransform::Euler2DTransform "/**
rtk::simple::Euler2DTransform::Euler2DTransform(const Transform &)
*/
public ";

%javamethodmodifiers  rtk::simple::Euler2DTransform::GetAngle "/**
double rtk::simple::Euler2DTransform::GetAngle() const
*/
public ";

%javamethodmodifiers  rtk::simple::Euler2DTransform::GetCenter "/**
std::vector<double> rtk::simple::Euler2DTransform::GetCenter() const
*/
public ";

%javamethodmodifiers  rtk::simple::Euler2DTransform::GetMatrix "/**
std::vector<double> rtk::simple::Euler2DTransform::GetMatrix() const

additional methods

*/
public ";

%javamethodmodifiers  rtk::simple::Euler2DTransform::GetName "/**
std::string rtk::simple::Euler2DTransform::GetName() const

Name of this class

*/
public ";

%javamethodmodifiers  rtk::simple::Euler2DTransform::GetTranslation "/**
std::vector<double> rtk::simple::Euler2DTransform::GetTranslation() const
*/
public ";

%javamethodmodifiers  rtk::simple::Euler2DTransform::SetAngle "/**
Self& rtk::simple::Euler2DTransform::SetAngle(double angle)

parameter

*/
public ";

%javamethodmodifiers  rtk::simple::Euler2DTransform::SetCenter "/**
Self& rtk::simple::Euler2DTransform::SetCenter(const std::vector< double > &params)

fixed parameter

*/
public ";

%javamethodmodifiers  rtk::simple::Euler2DTransform::SetMatrix "/**
Self& rtk::simple::Euler2DTransform::SetMatrix(const std::vector< double > &matrix, double tolerance=1e-10)
*/
public ";

%javamethodmodifiers  rtk::simple::Euler2DTransform::SetTranslation "/**
Self& rtk::simple::Euler2DTransform::SetTranslation(const std::vector< double > &translation)
*/
public ";


%typemap(javaimports) rtk::simple::Euler3DTransform "/**

A rigid 3D transform with rotation in radians around a fixed center
with translation.



See:
 itk::Euler3DTransform


C++ includes: srtkEuler3DTransform.h
*/"

%javamethodmodifiers  rtk::simple::Euler3DTransform::ComputeZYXOff "/**
Self& rtk::simple::Euler3DTransform::ComputeZYXOff()
*/
public ";

%javamethodmodifiers  rtk::simple::Euler3DTransform::ComputeZYXOn "/**
Self& rtk::simple::Euler3DTransform::ComputeZYXOn()
*/
public ";

%javamethodmodifiers  rtk::simple::Euler3DTransform::Euler3DTransform "/**
rtk::simple::Euler3DTransform::Euler3DTransform()
*/
public ";

%javamethodmodifiers  rtk::simple::Euler3DTransform::Euler3DTransform "/**
rtk::simple::Euler3DTransform::Euler3DTransform(const std::vector< double > &fixedCenter, double angleX=0.0, double
angleY=0.0, double angleZ=0.0, const std::vector< double >
&translation=std::vector< double >(3, 0.0))
*/
public ";

%javamethodmodifiers  rtk::simple::Euler3DTransform::Euler3DTransform "/**
rtk::simple::Euler3DTransform::Euler3DTransform(const Euler3DTransform &)
*/
public ";

%javamethodmodifiers  rtk::simple::Euler3DTransform::Euler3DTransform "/**
rtk::simple::Euler3DTransform::Euler3DTransform(const Transform &)
*/
public ";

%javamethodmodifiers  rtk::simple::Euler3DTransform::GetAngleX "/**
double rtk::simple::Euler3DTransform::GetAngleX() const
*/
public ";

%javamethodmodifiers  rtk::simple::Euler3DTransform::GetAngleY "/**
double rtk::simple::Euler3DTransform::GetAngleY() const
*/
public ";

%javamethodmodifiers  rtk::simple::Euler3DTransform::GetAngleZ "/**
double rtk::simple::Euler3DTransform::GetAngleZ() const
*/
public ";

%javamethodmodifiers  rtk::simple::Euler3DTransform::GetCenter "/**
std::vector<double> rtk::simple::Euler3DTransform::GetCenter() const
*/
public ";

%javamethodmodifiers  rtk::simple::Euler3DTransform::GetComputeZYX "/**
bool rtk::simple::Euler3DTransform::GetComputeZYX() const
*/
public ";

%javamethodmodifiers  rtk::simple::Euler3DTransform::GetMatrix "/**
std::vector<double> rtk::simple::Euler3DTransform::GetMatrix() const

additional methods

*/
public ";

%javamethodmodifiers  rtk::simple::Euler3DTransform::GetName "/**
std::string rtk::simple::Euler3DTransform::GetName() const

Name of this class

*/
public ";

%javamethodmodifiers  rtk::simple::Euler3DTransform::GetTranslation "/**
std::vector<double> rtk::simple::Euler3DTransform::GetTranslation() const
*/
public ";

%javamethodmodifiers  rtk::simple::Euler3DTransform::SetCenter "/**
Self& rtk::simple::Euler3DTransform::SetCenter(const std::vector< double > &params)

fixed parameter

*/
public ";

%javamethodmodifiers  rtk::simple::Euler3DTransform::SetComputeZYX "/**
Self& rtk::simple::Euler3DTransform::SetComputeZYX(bool _arg)
*/
public ";

%javamethodmodifiers  rtk::simple::Euler3DTransform::SetMatrix "/**
Self& rtk::simple::Euler3DTransform::SetMatrix(const std::vector< double > &matrix, double tolerance=1e-10)
*/
public ";

%javamethodmodifiers  rtk::simple::Euler3DTransform::SetRotation "/**
Self& rtk::simple::Euler3DTransform::SetRotation(double angleX, double angleY, double angleZ)

parameter

*/
public ";

%javamethodmodifiers  rtk::simple::Euler3DTransform::SetTranslation "/**
Self& rtk::simple::Euler3DTransform::SetTranslation(const std::vector< double > &translation)
*/
public ";


%typemap(javaimports) rtk::simple::ExpImageFilter "/**

Computes the exponential function of each pixel.


The computation is performed using std::exp(x).
See:
 rtk::simple::Exp for the procedural interface

 itk::ExpImageFilter for the Doxygen on the original ITK class.


C++ includes: srtkExpImageFilter.h
*/"

%javamethodmodifiers  rtk::simple::ExpImageFilter::Execute "/**
Image rtk::simple::ExpImageFilter::Execute(const Image &image1)

Execute the filter on the input image

*/
public ";

%javamethodmodifiers  rtk::simple::ExpImageFilter::ExpImageFilter "/**
rtk::simple::ExpImageFilter::ExpImageFilter()

Default Constructor that takes no arguments and initializes default
parameters

*/
public ";

%javamethodmodifiers  rtk::simple::ExpImageFilter::GetName "/**
std::string rtk::simple::ExpImageFilter::GetName() const

Name of this class

*/
public ";

%javamethodmodifiers  rtk::simple::ExpImageFilter::ToString "/**
std::string rtk::simple::ExpImageFilter::ToString() const

Print ourselves out

*/
public ";

%javamethodmodifiers  rtk::simple::ExpImageFilter::~ExpImageFilter "/**
rtk::simple::ExpImageFilter::~ExpImageFilter()

Destructor

*/
public ";


%typemap(javaimports) rtk::simple::ExpNegativeImageFilter "/**

Computes the function exp(-K.x) for each input pixel.


Every output pixel is equal to std::exp(-K.x ). where x is the
intensity of the homologous input pixel, and K is a user-provided
constant.
See:
 rtk::simple::ExpNegative for the procedural interface

 itk::ExpNegativeImageFilter for the Doxygen on the original ITK class.


C++ includes: srtkExpNegativeImageFilter.h
*/"

%javamethodmodifiers  rtk::simple::ExpNegativeImageFilter::Execute "/**
Image rtk::simple::ExpNegativeImageFilter::Execute(const Image &image1)

Execute the filter on the input image

*/
public ";

%javamethodmodifiers  rtk::simple::ExpNegativeImageFilter::ExpNegativeImageFilter "/**
rtk::simple::ExpNegativeImageFilter::ExpNegativeImageFilter()

Default Constructor that takes no arguments and initializes default
parameters

*/
public ";

%javamethodmodifiers  rtk::simple::ExpNegativeImageFilter::GetName "/**
std::string rtk::simple::ExpNegativeImageFilter::GetName() const

Name of this class

*/
public ";

%javamethodmodifiers  rtk::simple::ExpNegativeImageFilter::ToString "/**
std::string rtk::simple::ExpNegativeImageFilter::ToString() const

Print ourselves out

*/
public ";

%javamethodmodifiers  rtk::simple::ExpNegativeImageFilter::~ExpNegativeImageFilter "/**
rtk::simple::ExpNegativeImageFilter::~ExpNegativeImageFilter()

Destructor

*/
public ";


%typemap(javaimports) rtk::simple::ExpandImageFilter "/**

Expand the size of an image by an integer factor in each dimension.


ExpandImageFilter increases the size of an image by an integer factor in each dimension
using a interpolation method. The output image size in each dimension
is given by:

OutputSize[j] = InputSize[j] * ExpandFactors[j]

The output values are obtained by interpolating the input image. The
default interpolation type used is the LinearInterpolateImageFunction . The user can specify a particular interpolation function via SetInterpolator() . Note that the input interpolator must derive from base class InterpolateImageFunction .

This filter will produce an output with different pixel spacing that
its input image such that:

OutputSpacing[j] = InputSpacing[j] / ExpandFactors[j]

The filter is templated over the input image type and the output image
type.

This filter is implemented as a multithreaded filter and supports
streaming.


WARNING:
This filter only works for image with scalar pixel types. For vector
images use VectorExpandImageFilter .
 This filter assumes that the input and output image has the same
number of dimensions.


See:
 InterpolateImageFunction


LinearInterpolationImageFunction


 VectorExpandImageFilter

 rtk::simple::Expand for the procedural interface

 itk::ExpandImageFilter for the Doxygen on the original ITK class.


C++ includes: srtkExpandImageFilter.h
*/"

%javamethodmodifiers  rtk::simple::ExpandImageFilter::Execute "/**
Image rtk::simple::ExpandImageFilter::Execute(const Image &image1)

Execute the filter on the input image

*/
public ";

%javamethodmodifiers  rtk::simple::ExpandImageFilter::Execute "/**
Image rtk::simple::ExpandImageFilter::Execute(const Image &image1, const std::vector< unsigned int >
&expandFactors, InterpolatorEnum interpolator)

Execute the filter on the input image with the given parameters

*/
public ";

%javamethodmodifiers  rtk::simple::ExpandImageFilter::ExpandImageFilter "/**
rtk::simple::ExpandImageFilter::ExpandImageFilter()

Default Constructor that takes no arguments and initializes default
parameters

*/
public ";

%javamethodmodifiers  rtk::simple::ExpandImageFilter::GetExpandFactors "/**
std::vector<unsigned int> rtk::simple::ExpandImageFilter::GetExpandFactors() const

Get the expand factors.

*/
public ";

%javamethodmodifiers  rtk::simple::ExpandImageFilter::GetInterpolator "/**
InterpolatorEnum rtk::simple::ExpandImageFilter::GetInterpolator() const

Get/Set the interpolator function.

*/
public ";

%javamethodmodifiers  rtk::simple::ExpandImageFilter::GetName "/**
std::string rtk::simple::ExpandImageFilter::GetName() const

Name of this class

*/
public ";

%javamethodmodifiers  rtk::simple::ExpandImageFilter::SetExpandFactor "/**
Self& rtk::simple::ExpandImageFilter::SetExpandFactor(unsigned int e)

Custom public declarations

*/
public ";

%javamethodmodifiers  rtk::simple::ExpandImageFilter::SetExpandFactors "/**
Self& rtk::simple::ExpandImageFilter::SetExpandFactors(const std::vector< unsigned int > &ExpandFactors)

Set the expand factors. Values are clamped to a minimum value of 1.
Default is 1 for all dimensions.

*/
public ";

%javamethodmodifiers  rtk::simple::ExpandImageFilter::SetExpandFactors "/**
Self& rtk::simple::ExpandImageFilter::SetExpandFactors(unsigned int value)

Set the values of the ExpandFactors vector all to value

*/
public ";

%javamethodmodifiers  rtk::simple::ExpandImageFilter::SetInterpolator "/**
Self& rtk::simple::ExpandImageFilter::SetInterpolator(InterpolatorEnum Interpolator)

Get/Set the interpolator function.

*/
public ";

%javamethodmodifiers  rtk::simple::ExpandImageFilter::ToString "/**
std::string rtk::simple::ExpandImageFilter::ToString() const

Print ourselves out

*/
public ";

%javamethodmodifiers  rtk::simple::ExpandImageFilter::~ExpandImageFilter "/**
rtk::simple::ExpandImageFilter::~ExpandImageFilter()

Destructor

*/
public ";


%typemap(javaimports) rtk::simple::ExtractImageFilter "/**

Decrease the image size by cropping the image to the selected region
bounds.


ExtractImageFilter changes the image boundary of an image by removing pixels outside the
target region. The target region must be specified.

ExtractImageFilter also collapses dimensions so that the input image may have more
dimensions than the output image (i.e. 4-D input image to a 3-D output
image). To specify what dimensions to collapse, the ExtractionRegion
must be specified. For any dimension dim where
ExtractionRegion.Size[dim] = 0, that dimension is collapsed. The index
to collapse on is specified by ExtractionRegion.Index[dim]. For
example, we have a image 4D = a 4x4x4x4 image, and we want to get a 3D
image, 3D = a 4x4x4 image, specified as [x,y,z,2] from 4D (i.e. the
3rd \"time\" slice from 4D). The ExtractionRegion.Size = [4,4,4,0] and
ExtractionRegion.Index = [0,0,0,2].

The number of dimension in ExtractionRegion.Size and Index must = InputImageDimension. The number of non-zero dimensions in
ExtractionRegion.Size must = OutputImageDimension.

The output image produced by this filter will have the same origin as
the input image, while the ImageRegion of the output image will start at the starting index value provided
in the ExtractRegion parameter. If you are looking for a filter that
will re-compute the origin of the output image, and provide an output
image region whose index is set to zeros, then you may want to use the RegionOfInterestImageFilter . The output spacing is is simply the collapsed version of the input
spacing.

Determining the direction of the collapsed output image from an larger
dimensional input space is an ill defined problem in general. It is
required that the application developer select the desired
transformation strategy for collapsing direction cosigns. It is
REQUIRED that a strategy be explicitly requested (i.e. there is no
working default). Direction Collapsing Strategies: 1)
DirectionCollapseToUnknown(); This is the default and the filter can
not run when this is set. The reason is to explicitly force the
application developer to define their desired behavior. 1)
DirectionCollapseToIdentity(); Output has identity direction no matter
what 2) DirectionCollapseToSubmatrix(); Output direction is the sub-
matrix if it is positive definite, else throw an exception.

This filter is implemented as a multithreaded filter. It provides a
ThreadedGenerateData() method for its implementation.


This filter is derived from InPlaceImageFilter . When the input to this filter matched the output requirested
region, like with streaming filter for input, then setting this filter
to run in-place will result in no copying of the bulk pixel data.

See:
 CropImageFilter
Wiki Examples:

All Examples

Crop an image by specifying the region to keep
See:
 rtk::simple::Extract for the procedural interface

 itk::ExtractImageFilter<InputImageType, typename InputImageType::template Rebind for the
Doxygen on the original ITK class.



C++ includes: srtkExtractImageFilter.h
*/"

%javamethodmodifiers  rtk::simple::ExtractImageFilter::Execute "/**
Image rtk::simple::ExtractImageFilter::Execute(const Image &image1)

Execute the filter on the input image

*/
public ";

%javamethodmodifiers  rtk::simple::ExtractImageFilter::Execute "/**
Image rtk::simple::ExtractImageFilter::Execute(const Image &image1, const std::vector< unsigned int > &size, const
std::vector< int > &index,
ExtractImageFilter::DirectionCollapseToStrategyType
directionCollapseToStrategy)

Execute the filter on the input image with the given parameters

*/
public ";

%javamethodmodifiers  rtk::simple::ExtractImageFilter::ExtractImageFilter "/**
rtk::simple::ExtractImageFilter::ExtractImageFilter()

Default Constructor that takes no arguments and initializes default
parameters

*/
public ";

%javamethodmodifiers  rtk::simple::ExtractImageFilter::GetDirectionCollapseToStrategy "/**
DirectionCollapseToStrategyType rtk::simple::ExtractImageFilter::GetDirectionCollapseToStrategy() const

NOTE: The SetDirectionCollapseToUknown is explicitly not defined. It
is a state that a filter can be in only when it is first instantiate
prior to being initialized. Get the currently set strategy for
collapsing directions of physical space.

*/
public ";

%javamethodmodifiers  rtk::simple::ExtractImageFilter::GetIndex "/**
std::vector<int> rtk::simple::ExtractImageFilter::GetIndex() const
*/
public ";

%javamethodmodifiers  rtk::simple::ExtractImageFilter::GetName "/**
std::string rtk::simple::ExtractImageFilter::GetName() const

Name of this class

*/
public ";

%javamethodmodifiers  rtk::simple::ExtractImageFilter::GetSize "/**
std::vector<unsigned int> rtk::simple::ExtractImageFilter::GetSize() const
*/
public ";

%javamethodmodifiers  rtk::simple::ExtractImageFilter::SetDirectionCollapseToStrategy "/**
Self& rtk::simple::ExtractImageFilter::SetDirectionCollapseToStrategy(DirectionCollapseToStrategyType DirectionCollapseToStrategy)

     Set the strategy to be used to collapse pysical space dimensions.

itk::itkExtractImageFilter::DIRECTIONCOLLAPSETOIDENTITY Set the
strategy so that all collapsed images have an identity direction. Use
this strategy when you know that retention of the physical space
orientation of the collapsed image is not important.

itk::itkExtractImageFilter::DIRECTIONCOLLAPSETOGUESS Set the strategy
so that all collapsed images where output direction is the sub-matrix
it it is positive definite, else return identity. This is backwards
compatible with ITKv3, but is highly discouraged because the results
are difficult to anticipate under differing data scenerios.

itk::itkExtractImageFilter::DIRECTIONCOLLAPSETOSUBMATRIX Set the
strategy so that all collapsed images where output direction is the
sub-matrix it it is positive definite, else throw an exception. Use
this strategy when it is known that properly identified physical space
sub-volumes can be reliably extracted from a higher dimensional space.
For example when the application programmer knows that a 4D image is
3D+time, and that the 3D sub-space is properly defined.

*/
public ";

%javamethodmodifiers  rtk::simple::ExtractImageFilter::SetIndex "/**
Self& rtk::simple::ExtractImageFilter::SetIndex(const std::vector< int > &Index)

odo the internal setting of the method needs work!!!

*/
public ";

%javamethodmodifiers  rtk::simple::ExtractImageFilter::SetSize "/**
Self& rtk::simple::ExtractImageFilter::SetSize(const std::vector< unsigned int > &Size)
*/
public ";

%javamethodmodifiers  rtk::simple::ExtractImageFilter::ToString "/**
std::string rtk::simple::ExtractImageFilter::ToString() const

Print ourselves out

*/
public ";

%javamethodmodifiers  rtk::simple::ExtractImageFilter::~ExtractImageFilter "/**
rtk::simple::ExtractImageFilter::~ExtractImageFilter()

Destructor

*/
public ";


%typemap(javaimports) rtk::simple::FFTConvolutionImageFilter "/**

Convolve a given image with an arbitrary image kernel using
multiplication in the Fourier domain.


This filter produces output equivalent to the output of the ConvolutionImageFilter . However, it takes advantage of the convolution theorem to
accelerate the convolution computation when the kernel is large.


WARNING:
This filter ignores the spacing, origin, and orientation of the kernel
image and treats them as identical to those in the input image.
 This code was adapted from the Insight Journal contribution:

\"FFT Based Convolution\" by Gaetan Lehmann https://hdl.handle.net/10380/3154


See:
 ConvolutionImageFilter

 rtk::simple::FFTConvolution for the procedural interface

 itk::FFTConvolutionImageFilter for the Doxygen on the original ITK class.


C++ includes: srtkFFTConvolutionImageFilter.h
*/"

%javamethodmodifiers  rtk::simple::FFTConvolutionImageFilter::Execute "/**
Image rtk::simple::FFTConvolutionImageFilter::Execute(const Image &image1, const Image &image2)

Execute the filter on the input images

*/
public ";

%javamethodmodifiers  rtk::simple::FFTConvolutionImageFilter::Execute "/**
Image rtk::simple::FFTConvolutionImageFilter::Execute(const Image &image1, const Image &image2, bool normalize,
FFTConvolutionImageFilter::BoundaryConditionType boundaryCondition,
FFTConvolutionImageFilter::OutputRegionModeType outputRegionMode)

Execute the filter on the input images with the given parameters

*/
public ";

%javamethodmodifiers  rtk::simple::FFTConvolutionImageFilter::FFTConvolutionImageFilter "/**
rtk::simple::FFTConvolutionImageFilter::FFTConvolutionImageFilter()

Default Constructor that takes no arguments and initializes default
parameters

*/
public ";

%javamethodmodifiers  rtk::simple::FFTConvolutionImageFilter::GetBoundaryCondition "/**
BoundaryConditionType rtk::simple::FFTConvolutionImageFilter::GetBoundaryCondition() const
*/
public ";

%javamethodmodifiers  rtk::simple::FFTConvolutionImageFilter::GetName "/**
std::string rtk::simple::FFTConvolutionImageFilter::GetName() const

Name of this class

*/
public ";

%javamethodmodifiers  rtk::simple::FFTConvolutionImageFilter::GetNormalize "/**
bool rtk::simple::FFTConvolutionImageFilter::GetNormalize() const
*/
public ";

%javamethodmodifiers  rtk::simple::FFTConvolutionImageFilter::GetOutputRegionMode "/**
OutputRegionModeType rtk::simple::FFTConvolutionImageFilter::GetOutputRegionMode() const
*/
public ";

%javamethodmodifiers  rtk::simple::FFTConvolutionImageFilter::NormalizeOff "/**
Self& rtk::simple::FFTConvolutionImageFilter::NormalizeOff()
*/
public ";

%javamethodmodifiers  rtk::simple::FFTConvolutionImageFilter::NormalizeOn "/**
Self& rtk::simple::FFTConvolutionImageFilter::NormalizeOn()

Set the value of Normalize to true or false respectfully.

*/
public ";

%javamethodmodifiers  rtk::simple::FFTConvolutionImageFilter::SetBoundaryCondition "/**
Self& rtk::simple::FFTConvolutionImageFilter::SetBoundaryCondition(BoundaryConditionType BoundaryCondition)
*/
public ";

%javamethodmodifiers  rtk::simple::FFTConvolutionImageFilter::SetNormalize "/**
Self& rtk::simple::FFTConvolutionImageFilter::SetNormalize(bool Normalize)

Normalize the output image by the sum of the kernel components

*/
public ";

%javamethodmodifiers  rtk::simple::FFTConvolutionImageFilter::SetOutputRegionMode "/**
Self& rtk::simple::FFTConvolutionImageFilter::SetOutputRegionMode(OutputRegionModeType OutputRegionMode)
*/
public ";

%javamethodmodifiers  rtk::simple::FFTConvolutionImageFilter::ToString "/**
std::string rtk::simple::FFTConvolutionImageFilter::ToString() const

Print ourselves out

*/
public ";

%javamethodmodifiers  rtk::simple::FFTConvolutionImageFilter::~FFTConvolutionImageFilter "/**
rtk::simple::FFTConvolutionImageFilter::~FFTConvolutionImageFilter()

Destructor

*/
public ";


%typemap(javaimports) rtk::simple::FFTNormalizedCorrelationImageFilter "/**

Calculate normalized cross correlation using FFTs.


This filter calculates the normalized cross correlation (NCC) of two
images using FFTs instead of spatial correlation. It is much faster
than spatial correlation for reasonably large structuring elements.
This filter is a subclass of the more general MaskedFFTNormalizedCorrelationImageFilter and operates by essentially setting the masks in that algorithm to
images of ones. As described in detail in the references below, there
is no computational overhead to utilizing the more general masked
algorithm because the FFTs of the images of ones are still necessary
for the computations.

Inputs: Two images are required as inputs, fixedImage and movingImage.
In the context of correlation, inputs are often defined as: \"image\"
and \"template\". In this filter, the fixedImage plays the role of the
image, and the movingImage plays the role of the template. However,
this filter is capable of correlating any two images and is not
restricted to small movingImages (templates).

Optional parameters: The RequiredNumberOfOverlappingPixels enables the
user to specify how many voxels of the two images must overlap; any
location in the correlation map that results from fewer than this
number of voxels will be set to zero. Larger values zero-out pixels on
a larger border around the correlation image. Thus, larger values
remove less stable computations but also limit the capture range. If
RequiredNumberOfOverlappingPixels is set to 0, the default, no zeroing
will take place.

Image size: fixedImage and movingImage need not be the same size.
Furthermore, whereas some algorithms require that the \"template\" be
smaller than the \"image\" because of errors in the regions where the
two are not fully overlapping, this filter has no such restriction.

Image spacing: Since the computations are done in the pixel domain, all
input images must have the same spacing.

Outputs; The output is an image of RealPixelType that is the NCC of
the two images and its values range from -1.0 to 1.0. The size of this
NCC image is, by definition, size(fixedImage) + size(movingImage) - 1.

Example filter usage:


WARNING:
The pixel type of the output image must be of real type (float or
double). ConceptChecking is used to enforce the output pixel type. You
will get a compilation error if the pixel type of the output image is
not float or double.
 References: 1) D. Padfield. \"Masked object registration in the
Fourier domain.\" Transactions on Image Processing. 2) D. Padfield. \"Masked FFT registration\". In Proc.
Computer Vision and Pattern Recognition, 2010.


: Dirk Padfield, GE Global Research, padfield@research.ge.com

See:
 rtk::simple::FFTNormalizedCorrelation for the procedural interface

 itk::FFTNormalizedCorrelationImageFilter for the Doxygen on the original ITK class.


C++ includes: srtkFFTNormalizedCorrelationImageFilter.h
*/"

%javamethodmodifiers  rtk::simple::FFTNormalizedCorrelationImageFilter::Execute "/**
Image rtk::simple::FFTNormalizedCorrelationImageFilter::Execute(const Image &image1, const Image &image2)

Execute the filter on the input images

*/
public ";

%javamethodmodifiers  rtk::simple::FFTNormalizedCorrelationImageFilter::Execute "/**
Image rtk::simple::FFTNormalizedCorrelationImageFilter::Execute(const Image &image1, const Image &image2, uint64_t
requiredNumberOfOverlappingPixels)

Execute the filter on the input images with the given parameters

*/
public ";

%javamethodmodifiers  rtk::simple::FFTNormalizedCorrelationImageFilter::FFTNormalizedCorrelationImageFilter "/**
rtk::simple::FFTNormalizedCorrelationImageFilter::FFTNormalizedCorrelationImageFilter()

Default Constructor that takes no arguments and initializes default
parameters

*/
public ";

%javamethodmodifiers  rtk::simple::FFTNormalizedCorrelationImageFilter::GetName "/**
std::string rtk::simple::FFTNormalizedCorrelationImageFilter::GetName() const

Name of this class

*/
public ";

%javamethodmodifiers  rtk::simple::FFTNormalizedCorrelationImageFilter::GetRequiredNumberOfOverlappingPixels "/**
uint64_t rtk::simple::FFTNormalizedCorrelationImageFilter::GetRequiredNumberOfOverlappingPixels() const
*/
public ";

%javamethodmodifiers  rtk::simple::FFTNormalizedCorrelationImageFilter::SetRequiredNumberOfOverlappingPixels "/**
Self& rtk::simple::FFTNormalizedCorrelationImageFilter::SetRequiredNumberOfOverlappingPixels(uint64_t RequiredNumberOfOverlappingPixels)
*/
public ";

%javamethodmodifiers  rtk::simple::FFTNormalizedCorrelationImageFilter::ToString "/**
std::string rtk::simple::FFTNormalizedCorrelationImageFilter::ToString() const

Print ourselves out

*/
public ";

%javamethodmodifiers  rtk::simple::FFTNormalizedCorrelationImageFilter::~FFTNormalizedCorrelationImageFilter "/**
rtk::simple::FFTNormalizedCorrelationImageFilter::~FFTNormalizedCorrelationImageFilter()

Destructor

*/
public ";


%typemap(javaimports) rtk::simple::FFTPadImageFilter "/**

Pad an image to make it suitable for an FFT transformation.


FFT filters usually requires a specific image size. The size is
decomposed in several prime factors, and the filter only supports
prime factors up to a maximum value. This filter automatically finds
the greatest prime factor required by the available implementation and
pads the input appropriately.

This code was adapted from the Insight Journal contribution:

\"FFT Based Convolution\" by Gaetan Lehmann https://hdl.handle.net/10380/3154


Gaetan Lehmann

See:
 FFTShiftImageFilter

 rtk::simple::FFTPad for the procedural interface

 itk::FFTPadImageFilter for the Doxygen on the original ITK class.


C++ includes: srtkFFTPadImageFilter.h
*/"

%javamethodmodifiers  rtk::simple::FFTPadImageFilter::Execute "/**
Image rtk::simple::FFTPadImageFilter::Execute(const Image &image1)

Execute the filter on the input image

*/
public ";

%javamethodmodifiers  rtk::simple::FFTPadImageFilter::Execute "/**
Image rtk::simple::FFTPadImageFilter::Execute(const Image &image1, FFTPadImageFilter::BoundaryConditionType
boundaryCondition, int sizeGreatestPrimeFactor)

Execute the filter on the input image with the given parameters

*/
public ";

%javamethodmodifiers  rtk::simple::FFTPadImageFilter::FFTPadImageFilter "/**
rtk::simple::FFTPadImageFilter::FFTPadImageFilter()

Default Constructor that takes no arguments and initializes default
parameters

*/
public ";

%javamethodmodifiers  rtk::simple::FFTPadImageFilter::GetBoundaryCondition "/**
BoundaryConditionType rtk::simple::FFTPadImageFilter::GetBoundaryCondition() const
*/
public ";

%javamethodmodifiers  rtk::simple::FFTPadImageFilter::GetName "/**
std::string rtk::simple::FFTPadImageFilter::GetName() const

Name of this class

*/
public ";

%javamethodmodifiers  rtk::simple::FFTPadImageFilter::GetSizeGreatestPrimeFactor "/**
int rtk::simple::FFTPadImageFilter::GetSizeGreatestPrimeFactor() const

Set/Get the greatest prime factor allowed on the size of the padded
image. The filter increase the size of the image to reach a size with
the greatest prime factor smaller or equal to the specified value. The
default value is 13, which is the greatest prime number for which the
FFT are precomputed in FFTW, and thus gives very good performance. A
greatest prime factor of 2 produce a size which is a power of 2, and
thus is suitable for vnl base fft filters. A greatest prime factor of
1 or less - typically 0 - disable the extra padding.

*/
public ";

%javamethodmodifiers  rtk::simple::FFTPadImageFilter::SetBoundaryCondition "/**
Self& rtk::simple::FFTPadImageFilter::SetBoundaryCondition(BoundaryConditionType BoundaryCondition)
*/
public ";

%javamethodmodifiers  rtk::simple::FFTPadImageFilter::SetSizeGreatestPrimeFactor "/**
Self& rtk::simple::FFTPadImageFilter::SetSizeGreatestPrimeFactor(int SizeGreatestPrimeFactor)

Set/Get the greatest prime factor allowed on the size of the padded
image. The filter increase the size of the image to reach a size with
the greatest prime factor smaller or equal to the specified value. The
default value is 13, which is the greatest prime number for which the
FFT are precomputed in FFTW, and thus gives very good performance. A
greatest prime factor of 2 produce a size which is a power of 2, and
thus is suitable for vnl base fft filters. A greatest prime factor of
1 or less - typically 0 - disable the extra padding.

*/
public ";

%javamethodmodifiers  rtk::simple::FFTPadImageFilter::ToString "/**
std::string rtk::simple::FFTPadImageFilter::ToString() const

Print ourselves out

*/
public ";

%javamethodmodifiers  rtk::simple::FFTPadImageFilter::~FFTPadImageFilter "/**
rtk::simple::FFTPadImageFilter::~FFTPadImageFilter()

Destructor

*/
public ";


%typemap(javaimports) rtk::simple::FFTShiftImageFilter "/**

Shift the zero-frequency components of a Fourier transfrom to the
center of the image.


The Fourier transform produces an image where the zero frequency
components are in the corner of the image, making it difficult to
understand. This filter shifts the component to the center of the
image.


For images with an odd-sized dimension, applying this filter twice
will not produce the same image as the original one without using
SetInverse(true) on one (and only one) of the two filters.
https://hdl.handle.net/1926/321


Gaetan Lehmann. Biologie du Developpement et de la Reproduction, INRA
de Jouy-en-Josas, France.

See:
 ForwardFFTImageFilter , InverseFFTImageFilter

 rtk::simple::FFTShift for the procedural interface

 itk::FFTShiftImageFilter for the Doxygen on the original ITK class.


C++ includes: srtkFFTShiftImageFilter.h
*/"

%javamethodmodifiers  rtk::simple::FFTShiftImageFilter::Execute "/**
Image rtk::simple::FFTShiftImageFilter::Execute(const Image &image1)

Execute the filter on the input image

*/
public ";

%javamethodmodifiers  rtk::simple::FFTShiftImageFilter::Execute "/**
Image rtk::simple::FFTShiftImageFilter::Execute(const Image &image1, bool inverse)

Execute the filter on the input image with the given parameters

*/
public ";

%javamethodmodifiers  rtk::simple::FFTShiftImageFilter::FFTShiftImageFilter "/**
rtk::simple::FFTShiftImageFilter::FFTShiftImageFilter()

Default Constructor that takes no arguments and initializes default
parameters

*/
public ";

%javamethodmodifiers  rtk::simple::FFTShiftImageFilter::GetInverse "/**
bool rtk::simple::FFTShiftImageFilter::GetInverse() const

Set/Get whether the filter must invert the transform or not. This
option has no effect if none of the size of the input image is even,
but is required to restore the original image if at least one of the
dimensions has an odd size.

*/
public ";

%javamethodmodifiers  rtk::simple::FFTShiftImageFilter::GetName "/**
std::string rtk::simple::FFTShiftImageFilter::GetName() const

Name of this class

*/
public ";

%javamethodmodifiers  rtk::simple::FFTShiftImageFilter::InverseOff "/**
Self& rtk::simple::FFTShiftImageFilter::InverseOff()
*/
public ";

%javamethodmodifiers  rtk::simple::FFTShiftImageFilter::InverseOn "/**
Self& rtk::simple::FFTShiftImageFilter::InverseOn()

Set the value of Inverse to true or false respectfully.

*/
public ";

%javamethodmodifiers  rtk::simple::FFTShiftImageFilter::SetInverse "/**
Self& rtk::simple::FFTShiftImageFilter::SetInverse(bool Inverse)

Set/Get whether the filter must invert the transform or not. This
option has no effect if none of the size of the input image is even,
but is required to restore the original image if at least one of the
dimensions has an odd size.

*/
public ";

%javamethodmodifiers  rtk::simple::FFTShiftImageFilter::ToString "/**
std::string rtk::simple::FFTShiftImageFilter::ToString() const

Print ourselves out

*/
public ";

%javamethodmodifiers  rtk::simple::FFTShiftImageFilter::~FFTShiftImageFilter "/**
rtk::simple::FFTShiftImageFilter::~FFTShiftImageFilter()

Destructor

*/
public ";


%typemap(javaimports) rtk::simple::FastApproximateRankImageFilter "/**

A separable rank filter.


Medians aren't separable, but if you want a large robust smoother to
be relatively quick then it is worthwhile pretending that they are.

This code was contributed in the Insight Journal paper: \"Efficient
implementation of kernel filtering\" by Beare R., Lehmann G https://hdl.handle.net/1926/555 http://www.insight-journal.org/browse/publication/160


Richard Beare

See:
 rtk::simple::FastApproximateRank for the procedural interface

 itk::FastApproximateRankImageFilter for the Doxygen on the original ITK class.


C++ includes: srtkFastApproximateRankImageFilter.h
*/"

%javamethodmodifiers  rtk::simple::FastApproximateRankImageFilter::Execute "/**
Image rtk::simple::FastApproximateRankImageFilter::Execute(const Image &image1)

Execute the filter on the input image

*/
public ";

%javamethodmodifiers  rtk::simple::FastApproximateRankImageFilter::Execute "/**
Image rtk::simple::FastApproximateRankImageFilter::Execute(const Image &image1, double rank, const std::vector< unsigned int >
&radius)

Execute the filter on the input image with the given parameters

*/
public ";

%javamethodmodifiers  rtk::simple::FastApproximateRankImageFilter::FastApproximateRankImageFilter "/**
rtk::simple::FastApproximateRankImageFilter::FastApproximateRankImageFilter()

Default Constructor that takes no arguments and initializes default
parameters

*/
public ";

%javamethodmodifiers  rtk::simple::FastApproximateRankImageFilter::GetName "/**
std::string rtk::simple::FastApproximateRankImageFilter::GetName() const

Name of this class

*/
public ";

%javamethodmodifiers  rtk::simple::FastApproximateRankImageFilter::GetRadius "/**
std::vector<unsigned int> rtk::simple::FastApproximateRankImageFilter::GetRadius() const
*/
public ";

%javamethodmodifiers  rtk::simple::FastApproximateRankImageFilter::GetRank "/**
double rtk::simple::FastApproximateRankImageFilter::GetRank() const
*/
public ";

%javamethodmodifiers  rtk::simple::FastApproximateRankImageFilter::SetRadius "/**
Self& rtk::simple::FastApproximateRankImageFilter::SetRadius(const std::vector< unsigned int > &Radius)
*/
public ";

%javamethodmodifiers  rtk::simple::FastApproximateRankImageFilter::SetRadius "/**
Self& rtk::simple::FastApproximateRankImageFilter::SetRadius(unsigned int value)

Set the values of the Radius vector all to value

*/
public ";

%javamethodmodifiers  rtk::simple::FastApproximateRankImageFilter::SetRank "/**
Self& rtk::simple::FastApproximateRankImageFilter::SetRank(double Rank)
*/
public ";

%javamethodmodifiers  rtk::simple::FastApproximateRankImageFilter::ToString "/**
std::string rtk::simple::FastApproximateRankImageFilter::ToString() const

Print ourselves out

*/
public ";

%javamethodmodifiers  rtk::simple::FastApproximateRankImageFilter::~FastApproximateRankImageFilter "/**
rtk::simple::FastApproximateRankImageFilter::~FastApproximateRankImageFilter()

Destructor

*/
public ";


%typemap(javaimports) rtk::simple::FastMarchingBaseImageFilter "/**

Fast Marching Method on Image .


The speed function can be specified as a speed image or a speed
constant. The speed image is set using the method SetInput(). If the
speed image is RTK_NULLPTR, a constant speed function is used and is
specified using method the SetSpeedConstant() .

If the speed function is constant and of value one, fast marching
results is an approximate distance function from the initial alive
points.

There are two ways to specify the output image information (
LargestPossibleRegion, Spacing, Origin):
it is copied directly from the input speed image

it is specified by the user. Default values are used if the user does
not specify all the information.
 The output information is computed as follows.

If the speed image is RTK_NULLPTR or if the OverrideOutputInformation
is set to true, the output information is set from user specified
parameters. These parameters can be specified using methods
FastMarchingImageFilterBase::SetOutputRegion() ,

FastMarchingImageFilterBase::SetOutputSpacing() ,

FastMarchingImageFilterBase::SetOutputDirection() ,

FastMarchingImageFilterBase::SetOutputOrigin() .
 Else the output information is copied from the input speed image.

Implementation of this class is based on Chapter 8 of \"Level Set
Methods and Fast Marching Methods\", J.A. Sethian, Cambridge Press,
Second edition, 1999.

TTraitstraits


See:
ImageFastMarchingTraits


ImageFastMarchingTraits2

 rtk::simple::FastMarchingBase for the procedural interface

 itk::FastMarchingImageFilterBase for the Doxygen on the original ITK class.


C++ includes: srtkFastMarchingBaseImageFilter.h
*/"

%javamethodmodifiers  rtk::simple::FastMarchingBaseImageFilter::AddTrialPoint "/**
Self& rtk::simple::FastMarchingBaseImageFilter::AddTrialPoint(std::vector< unsigned int > t)

Add trial point

*/
public ";

%javamethodmodifiers  rtk::simple::FastMarchingBaseImageFilter::ClearTrialPoints "/**
Self& rtk::simple::FastMarchingBaseImageFilter::ClearTrialPoints()

Clear trial points

*/
public ";

%javamethodmodifiers  rtk::simple::FastMarchingBaseImageFilter::Execute "/**
Image rtk::simple::FastMarchingBaseImageFilter::Execute(const Image &image1)

Execute the filter on the input image

*/
public ";

%javamethodmodifiers  rtk::simple::FastMarchingBaseImageFilter::Execute "/**
Image rtk::simple::FastMarchingBaseImageFilter::Execute(const Image &, std::vector< std::vector< unsigned int > >
trialPoints, double normalizationFactor, double stoppingValue,
FastMarchingBaseImageFilter::TopologyCheckType topologyCheck)

Execute the filter on the input image with the given parameters

*/
public ";

%javamethodmodifiers  rtk::simple::FastMarchingBaseImageFilter::FastMarchingBaseImageFilter "/**
rtk::simple::FastMarchingBaseImageFilter::FastMarchingBaseImageFilter()

Default Constructor that takes no arguments and initializes default
parameters

*/
public ";

%javamethodmodifiers  rtk::simple::FastMarchingBaseImageFilter::GetName "/**
std::string rtk::simple::FastMarchingBaseImageFilter::GetName() const

Name of this class

*/
public ";

%javamethodmodifiers  rtk::simple::FastMarchingBaseImageFilter::GetNormalizationFactor "/**
double rtk::simple::FastMarchingBaseImageFilter::GetNormalizationFactor() const

Set/Get the Normalization Factor for the Speed Image . The values in the Speed Image is divided by this factor. This allows the use of images with integer
pixel types to represent the speed.

*/
public ";

%javamethodmodifiers  rtk::simple::FastMarchingBaseImageFilter::GetStoppingValue "/**
double rtk::simple::FastMarchingBaseImageFilter::GetStoppingValue() const

Get the Fast Marching algorithm Stopping Value.

*/
public ";

%javamethodmodifiers  rtk::simple::FastMarchingBaseImageFilter::GetTopologyCheck "/**
TopologyCheckType rtk::simple::FastMarchingBaseImageFilter::GetTopologyCheck() const
*/
public ";

%javamethodmodifiers  rtk::simple::FastMarchingBaseImageFilter::GetTrialPoints "/**
std::vector< std::vector<unsigned int> > rtk::simple::FastMarchingBaseImageFilter::GetTrialPoints() const

Get trial points

*/
public ";

%javamethodmodifiers  rtk::simple::FastMarchingBaseImageFilter::SetNormalizationFactor "/**
Self& rtk::simple::FastMarchingBaseImageFilter::SetNormalizationFactor(double NormalizationFactor)

Set/Get the Normalization Factor for the Speed Image . The values in the Speed Image is divided by this factor. This allows the use of images with integer
pixel types to represent the speed.

*/
public ";

%javamethodmodifiers  rtk::simple::FastMarchingBaseImageFilter::SetStoppingValue "/**
Self& rtk::simple::FastMarchingBaseImageFilter::SetStoppingValue(double StoppingValue)

Set the Fast Marching algorithm Stopping Value. The Fast Marching
algorithm is terminated when the value of the smallest trial point is
greater than the stopping value.

*/
public ";

%javamethodmodifiers  rtk::simple::FastMarchingBaseImageFilter::SetTopologyCheck "/**
Self& rtk::simple::FastMarchingBaseImageFilter::SetTopologyCheck(TopologyCheckType TopologyCheck)
*/
public ";

%javamethodmodifiers  rtk::simple::FastMarchingBaseImageFilter::SetTrialPoints "/**
Self& rtk::simple::FastMarchingBaseImageFilter::SetTrialPoints(std::vector< std::vector< unsigned int > > t)

Set trial points. The default trial value (i.e. 0.0) is used for each
index.

*/
public ";

%javamethodmodifiers  rtk::simple::FastMarchingBaseImageFilter::ToString "/**
std::string rtk::simple::FastMarchingBaseImageFilter::ToString() const

Print ourselves out

*/
public ";

%javamethodmodifiers  rtk::simple::FastMarchingBaseImageFilter::~FastMarchingBaseImageFilter "/**
rtk::simple::FastMarchingBaseImageFilter::~FastMarchingBaseImageFilter()

Destructor

*/
public ";


%typemap(javaimports) rtk::simple::FastMarchingImageFilter "/**

Solve an Eikonal equation using Fast Marching.


Fast marching solves an Eikonal equation where the speed is always
non-negative and depends on the position only. Starting from an
initial position on the front, fast marching systematically moves the
front forward one grid point at a time.

Updates are preformed using an entropy satisfy scheme where only
\"upwind\" neighborhoods are used. This implementation of Fast
Marching uses a std::priority_queue to locate the next proper grid
position to update.

Fast Marching sweeps through N grid points in (N log N) steps to
obtain the arrival time value as the front propagates through the
grid.

Implementation of this class is based on Chapter 8 of \"Level Set
Methods and Fast Marching Methods\", J.A. Sethian, Cambridge Press,
Second edition, 1999.

This class is templated over the level set image type and the speed
image type. The initial front is specified by two containers: one
containing the known points and one containing the trial points. Alive
points are those that are already part of the object, and trial points
are considered for inclusion. In order for the filter to evolve, at
least some trial points must be specified. These can for instance be
specified as the layer of pixels around the alive points.

The speed function can be specified as a speed image or a speed
constant. The speed image is set using the method SetInput() . If the
speed image is RTK_NULLPTR, a constant speed function is used and is
specified using method the SetSpeedConstant() .

If the speed function is constant and of value one, fast marching
results in an approximate distance function from the initial alive
points. FastMarchingImageFilter is used in the ReinitializeLevelSetImageFilter object to create a signed distance function from the zero level set.

The algorithm can be terminated early by setting an appropriate
stopping value. The algorithm terminates when the current arrival time
being processed is greater than the stopping value.

There are two ways to specify the output image information (
LargestPossibleRegion, Spacing, Origin): (a) it is copied directly
from the input speed image or (b) it is specified by the user. Default
values are used if the user does not specify all the information.

The output information is computed as follows. If the speed image is
RTK_NULLPTR or if the OverrideOutputInformation is set to true, the
output information is set from user specified parameters. These
parameters can be specified using methods SetOutputRegion() ,
SetOutputSpacing() , SetOutputDirection() , and SetOutputOrigin() .
Else if the speed image is not RTK_NULLPTR, the output information is
copied from the input speed image.

Possible Improvements: In the current implemenation,
std::priority_queue only allows taking nodes out from the front and
putting nodes in from the back. To update a value already on the heap,
a new node is added to the heap. The defunct old node is left on the
heap. When it is removed from the top, it will be recognized as
invalid and not used. Future implementations can implement the heap in
a different way allowing the values to be updated. This will generally
require some sift-up and sift-down functions and an image of back-
pointers going from the image to heap in order to locate the node
which is to be updated.


See:
 LevelSetTypeDefault

 rtk::simple::FastMarching for the procedural interface

 itk::FastMarchingImageFilter for the Doxygen on the original ITK class.


C++ includes: srtkFastMarchingImageFilter.h
*/"

%javamethodmodifiers  rtk::simple::FastMarchingImageFilter::AddTrialPoint "/**
Self& rtk::simple::FastMarchingImageFilter::AddTrialPoint(const std::vector< unsigned int > &point)

Add TrialPoints point.

*/
public ";

%javamethodmodifiers  rtk::simple::FastMarchingImageFilter::ClearTrialPoints "/**
Self& rtk::simple::FastMarchingImageFilter::ClearTrialPoints()

Remove all TrialPoints points.

*/
public ";

%javamethodmodifiers  rtk::simple::FastMarchingImageFilter::Execute "/**
Image rtk::simple::FastMarchingImageFilter::Execute(const Image &image1)

Execute the filter on the input image

*/
public ";

%javamethodmodifiers  rtk::simple::FastMarchingImageFilter::Execute "/**
Image rtk::simple::FastMarchingImageFilter::Execute(const Image &image1, const std::vector< std::vector< unsigned int > >
&trialPoints, double normalizationFactor, double stoppingValue)

Execute the filter on the input image with the given parameters

*/
public ";

%javamethodmodifiers  rtk::simple::FastMarchingImageFilter::FastMarchingImageFilter "/**
rtk::simple::FastMarchingImageFilter::FastMarchingImageFilter()

Default Constructor that takes no arguments and initializes default
parameters

*/
public ";

%javamethodmodifiers  rtk::simple::FastMarchingImageFilter::GetName "/**
std::string rtk::simple::FastMarchingImageFilter::GetName() const

Name of this class

*/
public ";

%javamethodmodifiers  rtk::simple::FastMarchingImageFilter::GetNormalizationFactor "/**
double rtk::simple::FastMarchingImageFilter::GetNormalizationFactor() const

Set/Get the Normalization Factor for the Speed Image . The values in the Speed Image is divided by this factor. This allows the use of images with integer
pixel types to represent the speed.

*/
public ";

%javamethodmodifiers  rtk::simple::FastMarchingImageFilter::GetStoppingValue "/**
double rtk::simple::FastMarchingImageFilter::GetStoppingValue() const

Get the Fast Marching algorithm Stopping Value.

*/
public ";

%javamethodmodifiers  rtk::simple::FastMarchingImageFilter::GetTrialPoints "/**
std::vector< std::vector<unsigned int> > rtk::simple::FastMarchingImageFilter::GetTrialPoints() const

Get the container of Trial Points representing the initial front.

*/
public ";

%javamethodmodifiers  rtk::simple::FastMarchingImageFilter::SetNormalizationFactor "/**
Self& rtk::simple::FastMarchingImageFilter::SetNormalizationFactor(double NormalizationFactor)

Set/Get the Normalization Factor for the Speed Image . The values in the Speed Image is divided by this factor. This allows the use of images with integer
pixel types to represent the speed.

*/
public ";

%javamethodmodifiers  rtk::simple::FastMarchingImageFilter::SetStoppingValue "/**
Self& rtk::simple::FastMarchingImageFilter::SetStoppingValue(double StoppingValue)

Set the Fast Marching algorithm Stopping Value. The Fast Marching
algorithm is terminated when the value of the smallest trial point is
greater than the stopping value.

*/
public ";

%javamethodmodifiers  rtk::simple::FastMarchingImageFilter::SetTrialPoints "/**
Self& rtk::simple::FastMarchingImageFilter::SetTrialPoints(const std::vector< std::vector< unsigned int > > &TrialPoints)

Set the container of Trial Points representing the initial front.
Trial points are represented as a VectorContainer of LevelSetNodes.

*/
public ";

%javamethodmodifiers  rtk::simple::FastMarchingImageFilter::ToString "/**
std::string rtk::simple::FastMarchingImageFilter::ToString() const

Print ourselves out

*/
public ";

%javamethodmodifiers  rtk::simple::FastMarchingImageFilter::~FastMarchingImageFilter "/**
rtk::simple::FastMarchingImageFilter::~FastMarchingImageFilter()

Destructor

*/
public ";


%typemap(javaimports) rtk::simple::FastMarchingUpwindGradientImageFilter "/**

Generates the upwind gradient field of fast marching arrival times.


This filter adds some extra functionality to its base class. While the
solution T(x) of the Eikonal equation is being generated by the base
class with the fast marching method, the filter generates the upwind
gradient vectors of T(x), storing them in an image.

Since the Eikonal equation generates the arrival times of a wave
travelling at a given speed, the generated gradient vectors can be
interpreted as the slowness (1/velocity) vectors of the front (the
quantity inside the modulus operator in the Eikonal equation).

Gradient vectors are computed using upwind finite differences, that
is, information only propagates from points where the wavefront has
already passed. This is consistent with how the fast marching method
works.

One more extra feature is the possibility to define a set of Target
points where the propagation stops. This can be used to avoid
computing the Eikonal solution for the whole domain. The front can be
stopped either when one Target point is reached or all Target points
are reached. The propagation can stop after a time TargetOffset has
passed since the stop condition is met. This way the solution is
computed a bit downstream the Target points, so that the level sets of
T(x) corresponding to the Target are smooth.


Luca Antiga Ph.D. Biomedical Technologies Laboratory, Bioengineering
Department, Mario Negri Institute, Italy.

See:
 rtk::simple::FastMarchingUpwindGradient for the procedural interface

 itk::FastMarchingUpwindGradientImageFilter for the Doxygen on the original ITK class.


C++ includes: srtkFastMarchingUpwindGradientImageFilter.h
*/"

%javamethodmodifiers  rtk::simple::FastMarchingUpwindGradientImageFilter::AddTargetPoint "/**
Self& rtk::simple::FastMarchingUpwindGradientImageFilter::AddTargetPoint(const std::vector< unsigned int > &point)

Add TargetPoints point.

*/
public ";

%javamethodmodifiers  rtk::simple::FastMarchingUpwindGradientImageFilter::AddTrialPoint "/**
Self& rtk::simple::FastMarchingUpwindGradientImageFilter::AddTrialPoint(const std::vector< unsigned int > &point)

Add TrialPoints point.

*/
public ";

%javamethodmodifiers  rtk::simple::FastMarchingUpwindGradientImageFilter::ClearTargetPoints "/**
Self& rtk::simple::FastMarchingUpwindGradientImageFilter::ClearTargetPoints()

Remove all TargetPoints points.

*/
public ";

%javamethodmodifiers  rtk::simple::FastMarchingUpwindGradientImageFilter::ClearTrialPoints "/**
Self& rtk::simple::FastMarchingUpwindGradientImageFilter::ClearTrialPoints()

Remove all TrialPoints points.

*/
public ";

%javamethodmodifiers  rtk::simple::FastMarchingUpwindGradientImageFilter::Execute "/**
Image rtk::simple::FastMarchingUpwindGradientImageFilter::Execute(const Image &image1)

Execute the filter on the input image

*/
public ";

%javamethodmodifiers  rtk::simple::FastMarchingUpwindGradientImageFilter::Execute "/**
Image rtk::simple::FastMarchingUpwindGradientImageFilter::Execute(const Image &image1, const std::vector< std::vector< unsigned int > >
&trialPoints, unsigned int numberOfTargets, const std::vector<
std::vector< unsigned int > > &targetPoints, double targetOffset,
double normalizationFactor)

Execute the filter on the input image with the given parameters

*/
public ";

%javamethodmodifiers  rtk::simple::FastMarchingUpwindGradientImageFilter::FastMarchingUpwindGradientImageFilter "/**
rtk::simple::FastMarchingUpwindGradientImageFilter::FastMarchingUpwindGradientImageFilter()

Default Constructor that takes no arguments and initializes default
parameters

*/
public ";

%javamethodmodifiers  rtk::simple::FastMarchingUpwindGradientImageFilter::GetGradientImage "/**
Image rtk::simple::FastMarchingUpwindGradientImageFilter::GetGradientImage() const

Get the gradient image.

This is a measurement. Its value is updated in the Execute methods, so
the value will only be valid after an execution.

*/
public ";

%javamethodmodifiers  rtk::simple::FastMarchingUpwindGradientImageFilter::GetName "/**
std::string rtk::simple::FastMarchingUpwindGradientImageFilter::GetName() const

Name of this class

*/
public ";

%javamethodmodifiers  rtk::simple::FastMarchingUpwindGradientImageFilter::GetNormalizationFactor "/**
double rtk::simple::FastMarchingUpwindGradientImageFilter::GetNormalizationFactor() const

Set/Get the Normalization Factor for the Speed Image . The values in the Speed Image is divided by this factor. This allows the use of images with integer
pixel types to represent the speed.

*/
public ";

%javamethodmodifiers  rtk::simple::FastMarchingUpwindGradientImageFilter::GetNumberOfTargets "/**
unsigned int rtk::simple::FastMarchingUpwindGradientImageFilter::GetNumberOfTargets() const

Get the number of targets.

*/
public ";

%javamethodmodifiers  rtk::simple::FastMarchingUpwindGradientImageFilter::GetTargetOffset "/**
double rtk::simple::FastMarchingUpwindGradientImageFilter::GetTargetOffset() const

Get the TargetOffset ivar.

*/
public ";

%javamethodmodifiers  rtk::simple::FastMarchingUpwindGradientImageFilter::GetTargetPoints "/**
std::vector< std::vector<unsigned int> > rtk::simple::FastMarchingUpwindGradientImageFilter::GetTargetPoints() const

Get the container of Target Points.

*/
public ";

%javamethodmodifiers  rtk::simple::FastMarchingUpwindGradientImageFilter::GetTargetValue "/**
double rtk::simple::FastMarchingUpwindGradientImageFilter::GetTargetValue() const

Get the arrival time corresponding to the last reached target. If
TargetReachedMode is set to NoTargets, TargetValue contains the last
(aka largest) Eikonal solution value generated.

This is a measurement. Its value is updated in the Execute methods, so
the value will only be valid after an execution.

*/
public ";

%javamethodmodifiers  rtk::simple::FastMarchingUpwindGradientImageFilter::GetTrialPoints "/**
std::vector< std::vector<unsigned int> > rtk::simple::FastMarchingUpwindGradientImageFilter::GetTrialPoints() const
*/
public ";

%javamethodmodifiers  rtk::simple::FastMarchingUpwindGradientImageFilter::SetNormalizationFactor "/**
Self& rtk::simple::FastMarchingUpwindGradientImageFilter::SetNormalizationFactor(double NormalizationFactor)

Set/Get the Normalization Factor for the Speed Image . The values in the Speed Image is divided by this factor. This allows the use of images with integer
pixel types to represent the speed.

*/
public ";

%javamethodmodifiers  rtk::simple::FastMarchingUpwindGradientImageFilter::SetNumberOfTargets "/**
Self& rtk::simple::FastMarchingUpwindGradientImageFilter::SetNumberOfTargets(unsigned int NumberOfTargets)
*/
public ";

%javamethodmodifiers  rtk::simple::FastMarchingUpwindGradientImageFilter::SetTargetOffset "/**
Self& rtk::simple::FastMarchingUpwindGradientImageFilter::SetTargetOffset(double TargetOffset)

Set how long (in terms of arrival times) after targets are reached the
front must stop. This is useful to ensure that the level set of target
arrival time is smooth.

*/
public ";

%javamethodmodifiers  rtk::simple::FastMarchingUpwindGradientImageFilter::SetTargetPoints "/**
Self& rtk::simple::FastMarchingUpwindGradientImageFilter::SetTargetPoints(const std::vector< std::vector< unsigned int > > &TargetPoints)

Set the container of Target Points. If a target point is reached, the
propagation stops. Trial points are represented as a VectorContainer of LevelSetNodes.

*/
public ";

%javamethodmodifiers  rtk::simple::FastMarchingUpwindGradientImageFilter::SetTrialPoints "/**
Self& rtk::simple::FastMarchingUpwindGradientImageFilter::SetTrialPoints(const std::vector< std::vector< unsigned int > > &TrialPoints)
*/
public ";

%javamethodmodifiers  rtk::simple::FastMarchingUpwindGradientImageFilter::ToString "/**
std::string rtk::simple::FastMarchingUpwindGradientImageFilter::ToString() const

Print ourselves out

*/
public ";

%javamethodmodifiers  rtk::simple::FastMarchingUpwindGradientImageFilter::~FastMarchingUpwindGradientImageFilter "/**
rtk::simple::FastMarchingUpwindGradientImageFilter::~FastMarchingUpwindGradientImageFilter()

Destructor

*/
public ";


%typemap(javaimports) rtk::simple::FastSymmetricForcesDemonsRegistrationFilter "/**

Deformably register two images using a symmetric forces demons
algorithm.


This class was contributed by Tom Vercauteren, INRIA & Mauna Kea
Technologies based on a variation of the DemonsRegistrationFilter .

FastSymmetricForcesDemonsRegistrationFilter implements the demons deformable algorithm that register two images
by computing the deformation field which will map a moving image onto
a fixed image.

A deformation field is represented as a image whose pixel type is some
vector type with at least N elements, where N is the dimension of the
fixed image. The vector type must support element access via operator
[]. It is assumed that the vector elements behave like floating point
scalars.

This class is templated over the fixed image type, moving image type
and the deformation field type.

The input fixed and moving images are set via methods SetFixedImage
and SetMovingImage respectively. An initial deformation field maybe
set via SetInitialDisplacementField or SetInput. If no initial field
is set, a zero field is used as the initial condition.

The output deformation field can be obtained via methods GetOutput or
GetDisplacementField.

This class make use of the finite difference solver hierarchy. Update
for each iteration is computed in DemonsRegistrationFunction .


Tom Vercauteren, INRIA & Mauna Kea Technologies
 This implementation was taken from the Insight Journal paper: https://hdl.handle.net/1926/510


WARNING:
This filter assumes that the fixed image type, moving image type and
deformation field type all have the same number of dimensions.

See:
 DemonsRegistrationFilter


 DemonsRegistrationFunction

 itk::FastSymmetricForcesDemonsRegistrationFilter for the Doxygen on the original ITK class.


C++ includes: srtkFastSymmetricForcesDemonsRegistrationFilter.h
*/"

%javamethodmodifiers  rtk::simple::FastSymmetricForcesDemonsRegistrationFilter::Execute "/**
Image rtk::simple::FastSymmetricForcesDemonsRegistrationFilter::Execute(const Image &fixedImage, const Image &movingImage, const Image
&initialDisplacementField)

Execute the filter on the input image

*/
public ";

%javamethodmodifiers  rtk::simple::FastSymmetricForcesDemonsRegistrationFilter::Execute "/**
Image rtk::simple::FastSymmetricForcesDemonsRegistrationFilter::Execute(const Image &fixedImage, const Image &movingImage)
*/
public ";

%javamethodmodifiers  rtk::simple::FastSymmetricForcesDemonsRegistrationFilter::Execute "/**
Image rtk::simple::FastSymmetricForcesDemonsRegistrationFilter::Execute(const Image &fixedImage, const Image &movingImage, const Image
&initialDisplacementField, const std::vector< double >
&standardDeviations, uint32_t numberOfIterations, double
maximumRMSError,
FastSymmetricForcesDemonsRegistrationFilter::UseGradientTypeType
useGradientType, double maximumUpdateStepLength, bool
smoothDisplacementField, bool smoothUpdateField, const std::vector<
double > &updateFieldStandardDeviations, unsigned int
maximumKernelWidth, double maximumError, double
intensityDifferenceThreshold, bool useImageSpacing)

Execute the filter on the input image with the given parameters

*/
public ";

%javamethodmodifiers  rtk::simple::FastSymmetricForcesDemonsRegistrationFilter::Execute "/**
Image rtk::simple::FastSymmetricForcesDemonsRegistrationFilter::Execute(const Image &fixedImage, const Image &movingImage, const std::vector<
double > &standardDeviations, uint32_t numberOfIterations, double
maximumRMSError,
FastSymmetricForcesDemonsRegistrationFilter::UseGradientTypeType
useGradientType, double maximumUpdateStepLength, bool
smoothDisplacementField, bool smoothUpdateField, const std::vector<
double > &updateFieldStandardDeviations, unsigned int
maximumKernelWidth, double maximumError, double
intensityDifferenceThreshold, bool useImageSpacing)
*/
public ";

%javamethodmodifiers  rtk::simple::FastSymmetricForcesDemonsRegistrationFilter::FastSymmetricForcesDemonsRegistrationFilter "/**
rtk::simple::FastSymmetricForcesDemonsRegistrationFilter::FastSymmetricForcesDemonsRegistrationFilter()

Default Constructor that takes no arguments and initializes default
parameters

*/
public ";

%javamethodmodifiers  rtk::simple::FastSymmetricForcesDemonsRegistrationFilter::GetElapsedIterations "/**
uint32_t rtk::simple::FastSymmetricForcesDemonsRegistrationFilter::GetElapsedIterations() const

Number of iterations run.


This is an active measurement. It may be accessed while the filter is
being executing in command call-backs and can be accessed after
execution.

*/
public ";

%javamethodmodifiers  rtk::simple::FastSymmetricForcesDemonsRegistrationFilter::GetIntensityDifferenceThreshold "/**
double rtk::simple::FastSymmetricForcesDemonsRegistrationFilter::GetIntensityDifferenceThreshold() const
*/
public ";

%javamethodmodifiers  rtk::simple::FastSymmetricForcesDemonsRegistrationFilter::GetMaximumError "/**
double rtk::simple::FastSymmetricForcesDemonsRegistrationFilter::GetMaximumError() const

Set/Get the desired maximum error of the Guassian kernel approximate.

*/
public ";

%javamethodmodifiers  rtk::simple::FastSymmetricForcesDemonsRegistrationFilter::GetMaximumKernelWidth "/**
unsigned int rtk::simple::FastSymmetricForcesDemonsRegistrationFilter::GetMaximumKernelWidth() const

Set/Get the desired limits of the Gaussian kernel width.

*/
public ";

%javamethodmodifiers  rtk::simple::FastSymmetricForcesDemonsRegistrationFilter::GetMaximumRMSError "/**
double rtk::simple::FastSymmetricForcesDemonsRegistrationFilter::GetMaximumRMSError() const
*/
public ";

%javamethodmodifiers  rtk::simple::FastSymmetricForcesDemonsRegistrationFilter::GetMaximumUpdateStepLength "/**
double rtk::simple::FastSymmetricForcesDemonsRegistrationFilter::GetMaximumUpdateStepLength() const
*/
public ";

%javamethodmodifiers  rtk::simple::FastSymmetricForcesDemonsRegistrationFilter::GetMetric "/**
double rtk::simple::FastSymmetricForcesDemonsRegistrationFilter::GetMetric() const

Get the metric value. The metric value is the mean square difference
in intensity between the fixed image and transforming moving image
computed over the the overlapping region between the two images. This
value is calculated for the current iteration

This is an active measurement. It may be accessed while the filter is
being executing in command call-backs and can be accessed after
execution.

*/
public ";

%javamethodmodifiers  rtk::simple::FastSymmetricForcesDemonsRegistrationFilter::GetName "/**
std::string rtk::simple::FastSymmetricForcesDemonsRegistrationFilter::GetName() const

Name of this class

*/
public ";

%javamethodmodifiers  rtk::simple::FastSymmetricForcesDemonsRegistrationFilter::GetNumberOfIterations "/**
uint32_t rtk::simple::FastSymmetricForcesDemonsRegistrationFilter::GetNumberOfIterations() const
*/
public ";

%javamethodmodifiers  rtk::simple::FastSymmetricForcesDemonsRegistrationFilter::GetRMSChange "/**
double rtk::simple::FastSymmetricForcesDemonsRegistrationFilter::GetRMSChange() const

Set/Get the root mean squared change of the previous iteration. May
not be used by all solvers.

This is a measurement. Its value is updated in the Execute methods, so
the value will only be valid after an execution.

*/
public ";

%javamethodmodifiers  rtk::simple::FastSymmetricForcesDemonsRegistrationFilter::GetSmoothDisplacementField "/**
bool rtk::simple::FastSymmetricForcesDemonsRegistrationFilter::GetSmoothDisplacementField() const

Set/Get whether the displacement field is smoothed (regularized).
Smoothing the displacement yields a solution elastic in nature. If
SmoothDisplacementField is on, then the displacement field is smoothed
with a Gaussian whose standard deviations are specified with SetStandardDeviations()

*/
public ";

%javamethodmodifiers  rtk::simple::FastSymmetricForcesDemonsRegistrationFilter::GetSmoothUpdateField "/**
bool rtk::simple::FastSymmetricForcesDemonsRegistrationFilter::GetSmoothUpdateField() const

Set/Get whether the update field is smoothed (regularized). Smoothing
the update field yields a solution viscous in nature. If
SmoothUpdateField is on, then the update field is smoothed with a
Gaussian whose standard deviations are specified with SetUpdateFieldStandardDeviations()

*/
public ";

%javamethodmodifiers  rtk::simple::FastSymmetricForcesDemonsRegistrationFilter::GetStandardDeviations "/**
std::vector<double> rtk::simple::FastSymmetricForcesDemonsRegistrationFilter::GetStandardDeviations() const

Set/Get the Gaussian smoothing standard deviations for the
displacement field. The values are set with respect to pixel
coordinates.

*/
public ";

%javamethodmodifiers  rtk::simple::FastSymmetricForcesDemonsRegistrationFilter::GetUpdateFieldStandardDeviations "/**
std::vector<double> rtk::simple::FastSymmetricForcesDemonsRegistrationFilter::GetUpdateFieldStandardDeviations() const

Set the Gaussian smoothing standard deviations for the update field.
The values are set with respect to pixel coordinates.

*/
public ";

%javamethodmodifiers  rtk::simple::FastSymmetricForcesDemonsRegistrationFilter::GetUseGradientType "/**
UseGradientTypeType rtk::simple::FastSymmetricForcesDemonsRegistrationFilter::GetUseGradientType() const
*/
public ";

%javamethodmodifiers  rtk::simple::FastSymmetricForcesDemonsRegistrationFilter::GetUseImageSpacing "/**
bool rtk::simple::FastSymmetricForcesDemonsRegistrationFilter::GetUseImageSpacing() const
*/
public ";

%javamethodmodifiers  rtk::simple::FastSymmetricForcesDemonsRegistrationFilter::SetIntensityDifferenceThreshold "/**
Self& rtk::simple::FastSymmetricForcesDemonsRegistrationFilter::SetIntensityDifferenceThreshold(double IntensityDifferenceThreshold)

Set/Get the threshold below which the absolute difference of intensity
yields a match. When the intensities match between a moving and fixed
image pixel, the update vector (for that iteration) will be the zero
vector. Default is 0.001.

*/
public ";

%javamethodmodifiers  rtk::simple::FastSymmetricForcesDemonsRegistrationFilter::SetMaximumError "/**
Self& rtk::simple::FastSymmetricForcesDemonsRegistrationFilter::SetMaximumError(double MaximumError)

Set/Get the desired maximum error of the Guassian kernel approximate.

*/
public ";

%javamethodmodifiers  rtk::simple::FastSymmetricForcesDemonsRegistrationFilter::SetMaximumKernelWidth "/**
Self& rtk::simple::FastSymmetricForcesDemonsRegistrationFilter::SetMaximumKernelWidth(unsigned int MaximumKernelWidth)

Set/Get the desired limits of the Gaussian kernel width.

*/
public ";

%javamethodmodifiers  rtk::simple::FastSymmetricForcesDemonsRegistrationFilter::SetMaximumRMSError "/**
Self& rtk::simple::FastSymmetricForcesDemonsRegistrationFilter::SetMaximumRMSError(double MaximumRMSError)
*/
public ";

%javamethodmodifiers  rtk::simple::FastSymmetricForcesDemonsRegistrationFilter::SetMaximumUpdateStepLength "/**
Self& rtk::simple::FastSymmetricForcesDemonsRegistrationFilter::SetMaximumUpdateStepLength(double MaximumUpdateStepLength)
*/
public ";

%javamethodmodifiers  rtk::simple::FastSymmetricForcesDemonsRegistrationFilter::SetNumberOfIterations "/**
Self& rtk::simple::FastSymmetricForcesDemonsRegistrationFilter::SetNumberOfIterations(uint32_t NumberOfIterations)
*/
public ";

%javamethodmodifiers  rtk::simple::FastSymmetricForcesDemonsRegistrationFilter::SetSmoothDisplacementField "/**
Self& rtk::simple::FastSymmetricForcesDemonsRegistrationFilter::SetSmoothDisplacementField(bool SmoothDisplacementField)

Set/Get whether the displacement field is smoothed (regularized).
Smoothing the displacement yields a solution elastic in nature. If
SmoothDisplacementField is on, then the displacement field is smoothed
with a Gaussian whose standard deviations are specified with SetStandardDeviations()

*/
public ";

%javamethodmodifiers  rtk::simple::FastSymmetricForcesDemonsRegistrationFilter::SetSmoothUpdateField "/**
Self& rtk::simple::FastSymmetricForcesDemonsRegistrationFilter::SetSmoothUpdateField(bool SmoothUpdateField)

Set/Get whether the update field is smoothed (regularized). Smoothing
the update field yields a solution viscous in nature. If
SmoothUpdateField is on, then the update field is smoothed with a
Gaussian whose standard deviations are specified with SetUpdateFieldStandardDeviations()

*/
public ";

%javamethodmodifiers  rtk::simple::FastSymmetricForcesDemonsRegistrationFilter::SetStandardDeviations "/**
Self& rtk::simple::FastSymmetricForcesDemonsRegistrationFilter::SetStandardDeviations(const std::vector< double > &StandardDeviations)

Set/Get the Gaussian smoothing standard deviations for the
displacement field. The values are set with respect to pixel
coordinates.

*/
public ";

%javamethodmodifiers  rtk::simple::FastSymmetricForcesDemonsRegistrationFilter::SetStandardDeviations "/**
Self& rtk::simple::FastSymmetricForcesDemonsRegistrationFilter::SetStandardDeviations(double value)

Set the values of the StandardDeviations vector all to value

*/
public ";

%javamethodmodifiers  rtk::simple::FastSymmetricForcesDemonsRegistrationFilter::SetUpdateFieldStandardDeviations "/**
Self& rtk::simple::FastSymmetricForcesDemonsRegistrationFilter::SetUpdateFieldStandardDeviations(const std::vector< double > &UpdateFieldStandardDeviations)

Set the Gaussian smoothing standard deviations for the update field.
The values are set with respect to pixel coordinates.

*/
public ";

%javamethodmodifiers  rtk::simple::FastSymmetricForcesDemonsRegistrationFilter::SetUpdateFieldStandardDeviations "/**
Self& rtk::simple::FastSymmetricForcesDemonsRegistrationFilter::SetUpdateFieldStandardDeviations(double value)

Set the values of the UpdateFieldStandardDeviations vector all to
value

*/
public ";

%javamethodmodifiers  rtk::simple::FastSymmetricForcesDemonsRegistrationFilter::SetUseGradientType "/**
Self& rtk::simple::FastSymmetricForcesDemonsRegistrationFilter::SetUseGradientType(UseGradientTypeType UseGradientType)
*/
public ";

%javamethodmodifiers  rtk::simple::FastSymmetricForcesDemonsRegistrationFilter::SetUseImageSpacing "/**
Self& rtk::simple::FastSymmetricForcesDemonsRegistrationFilter::SetUseImageSpacing(bool UseImageSpacing)
*/
public ";

%javamethodmodifiers  rtk::simple::FastSymmetricForcesDemonsRegistrationFilter::SmoothDisplacementFieldOff "/**
Self& rtk::simple::FastSymmetricForcesDemonsRegistrationFilter::SmoothDisplacementFieldOff()
*/
public ";

%javamethodmodifiers  rtk::simple::FastSymmetricForcesDemonsRegistrationFilter::SmoothDisplacementFieldOn "/**
Self& rtk::simple::FastSymmetricForcesDemonsRegistrationFilter::SmoothDisplacementFieldOn()

Set the value of SmoothDisplacementField to true or false
respectfully.

*/
public ";

%javamethodmodifiers  rtk::simple::FastSymmetricForcesDemonsRegistrationFilter::SmoothUpdateFieldOff "/**
Self& rtk::simple::FastSymmetricForcesDemonsRegistrationFilter::SmoothUpdateFieldOff()
*/
public ";

%javamethodmodifiers  rtk::simple::FastSymmetricForcesDemonsRegistrationFilter::SmoothUpdateFieldOn "/**
Self& rtk::simple::FastSymmetricForcesDemonsRegistrationFilter::SmoothUpdateFieldOn()

Set the value of SmoothUpdateField to true or false respectfully.

*/
public ";

%javamethodmodifiers  rtk::simple::FastSymmetricForcesDemonsRegistrationFilter::ToString "/**
std::string rtk::simple::FastSymmetricForcesDemonsRegistrationFilter::ToString() const

Print ourselves out

*/
public ";

%javamethodmodifiers  rtk::simple::FastSymmetricForcesDemonsRegistrationFilter::UseImageSpacingOff "/**
Self& rtk::simple::FastSymmetricForcesDemonsRegistrationFilter::UseImageSpacingOff()
*/
public ";

%javamethodmodifiers  rtk::simple::FastSymmetricForcesDemonsRegistrationFilter::UseImageSpacingOn "/**
Self& rtk::simple::FastSymmetricForcesDemonsRegistrationFilter::UseImageSpacingOn()

Set the value of UseImageSpacing to true or false respectfully.

*/
public ";

%javamethodmodifiers  rtk::simple::FastSymmetricForcesDemonsRegistrationFilter::~FastSymmetricForcesDemonsRegistrationFilter "/**
rtk::simple::FastSymmetricForcesDemonsRegistrationFilter::~FastSymmetricForcesDemonsRegistrationFilter()

Destructor

*/
public ";


%typemap(javaimports) rtk::simple::FlipImageFilter "/**

Flips an image across user specified axes.


FlipImageFilter flips an image across user specified axes. The flip axes are set via
method SetFlipAxes( array ) where the input is a
FixedArray<bool,ImageDimension>. The image is flipped across axes for
which array[i] is true.

In terms of grid coordinates the image is flipped within the
LargestPossibleRegion of the input image. As such, the
LargestPossibleRegion of the ouput image is the same as the input.

In terms of geometric coordinates, the output origin is such that the
image is flipped with respect to the coordinate axes.

Wiki Examples:

All Examples

Flip an image over specified axes
See:
 rtk::simple::Flip for the procedural interface

 itk::FlipImageFilter for the Doxygen on the original ITK class.



C++ includes: srtkFlipImageFilter.h
*/"

%javamethodmodifiers  rtk::simple::FlipImageFilter::Execute "/**
Image rtk::simple::FlipImageFilter::Execute(const Image &image1)

Execute the filter on the input image

*/
public ";

%javamethodmodifiers  rtk::simple::FlipImageFilter::Execute "/**
Image rtk::simple::FlipImageFilter::Execute(const Image &image1, const std::vector< bool > &flipAxes, bool
flipAboutOrigin)

Execute the filter on the input image with the given parameters

*/
public ";

%javamethodmodifiers  rtk::simple::FlipImageFilter::FlipAboutOriginOff "/**
Self& rtk::simple::FlipImageFilter::FlipAboutOriginOff()
*/
public ";

%javamethodmodifiers  rtk::simple::FlipImageFilter::FlipAboutOriginOn "/**
Self& rtk::simple::FlipImageFilter::FlipAboutOriginOn()

Set the value of FlipAboutOrigin to true or false respectfully.

*/
public ";

%javamethodmodifiers  rtk::simple::FlipImageFilter::FlipImageFilter "/**
rtk::simple::FlipImageFilter::FlipImageFilter()

Default Constructor that takes no arguments and initializes default
parameters

*/
public ";

%javamethodmodifiers  rtk::simple::FlipImageFilter::GetFlipAboutOrigin "/**
bool rtk::simple::FlipImageFilter::GetFlipAboutOrigin() const

Controls how the output origin is computed. If FlipAboutOrigin is
\"on\", the flip will occur about the origin of the axis, otherwise,
the flip will occur about the center of the axis.

*/
public ";

%javamethodmodifiers  rtk::simple::FlipImageFilter::GetFlipAxes "/**
std::vector<bool> rtk::simple::FlipImageFilter::GetFlipAxes() const

Set/Get the axis to be flipped. The image is flipped along axes for
which array[i] is true.

*/
public ";

%javamethodmodifiers  rtk::simple::FlipImageFilter::GetName "/**
std::string rtk::simple::FlipImageFilter::GetName() const

Name of this class

*/
public ";

%javamethodmodifiers  rtk::simple::FlipImageFilter::SetFlipAboutOrigin "/**
Self& rtk::simple::FlipImageFilter::SetFlipAboutOrigin(bool FlipAboutOrigin)

Controls how the output origin is computed. If FlipAboutOrigin is
\"on\", the flip will occur about the origin of the axis, otherwise,
the flip will occur about the center of the axis.

*/
public ";

%javamethodmodifiers  rtk::simple::FlipImageFilter::SetFlipAxes "/**
Self& rtk::simple::FlipImageFilter::SetFlipAxes(const std::vector< bool > &FlipAxes)

Set/Get the axis to be flipped. The image is flipped along axes for
which array[i] is true.

*/
public ";

%javamethodmodifiers  rtk::simple::FlipImageFilter::ToString "/**
std::string rtk::simple::FlipImageFilter::ToString() const

Print ourselves out

*/
public ";

%javamethodmodifiers  rtk::simple::FlipImageFilter::~FlipImageFilter "/**
rtk::simple::FlipImageFilter::~FlipImageFilter()

Destructor

*/
public ";


%typemap(javaimports) rtk::simple::ForwardFFTImageFilter "/**

Base class for forward Fast Fourier Transform .


This is a base class for the \"forward\" or \"direct\" discrete
Fourier Transform . This is an abstract base class: the actual implementation is
provided by the best child class available on the system when the
object is created via the object factory system.

This class transforms a real input image into its full complex Fourier
transform. The Fourier transform of a real input image has Hermitian
symmetry: $ f(\\\\mathbf{x}) = f^*(-\\\\mathbf{x}) $ . That is, when the result of the transform is split in half along
the x-dimension, the values in the second half of the transform are
the complex conjugates of values in the first half reflected about the
center of the image in each dimension.

This filter works only for real single-component input image types.


See:
 InverseFFTImageFilter , FFTComplexToComplexImageFilter

 rtk::simple::ForwardFFT for the procedural interface

 itk::ForwardFFTImageFilter for the Doxygen on the original ITK class.


C++ includes: srtkForwardFFTImageFilter.h
*/"

%javamethodmodifiers  rtk::simple::ForwardFFTImageFilter::Execute "/**
Image rtk::simple::ForwardFFTImageFilter::Execute(const Image &image1)

Execute the filter on the input image

*/
public ";

%javamethodmodifiers  rtk::simple::ForwardFFTImageFilter::ForwardFFTImageFilter "/**
rtk::simple::ForwardFFTImageFilter::ForwardFFTImageFilter()

Default Constructor that takes no arguments and initializes default
parameters

*/
public ";

%javamethodmodifiers  rtk::simple::ForwardFFTImageFilter::GetName "/**
std::string rtk::simple::ForwardFFTImageFilter::GetName() const

Name of this class

*/
public ";

%javamethodmodifiers  rtk::simple::ForwardFFTImageFilter::ToString "/**
std::string rtk::simple::ForwardFFTImageFilter::ToString() const

Print ourselves out

*/
public ";

%javamethodmodifiers  rtk::simple::ForwardFFTImageFilter::~ForwardFFTImageFilter "/**
rtk::simple::ForwardFFTImageFilter::~ForwardFFTImageFilter()

Destructor

*/
public ";


%typemap(javaimports) rtk::simple::FunctionCommand "/**

A Command class which allows setting an external function, or member function.

C++ includes: srtkFunctionCommand.h
*/"

%javamethodmodifiers  rtk::simple::FunctionCommand::Execute "/**
virtual void rtk::simple::FunctionCommand::Execute(void)

The method that defines action to be taken by the command

*/
public ";

%javamethodmodifiers  rtk::simple::FunctionCommand::FunctionCommand "/**
rtk::simple::FunctionCommand::FunctionCommand()
*/
public ";

%javamethodmodifiers  rtk::simple::FunctionCommand::SetCallbackFunction "/**
void rtk::simple::FunctionCommand::SetCallbackFunction(T *object, void(T::*pMemberFunction)())

Generic method to set a class's member function to be called in the
Execute method.

*/
public ";

%javamethodmodifiers  rtk::simple::FunctionCommand::SetCallbackFunction "/**
void rtk::simple::FunctionCommand::SetCallbackFunction(void(*pFunction)())

Set a C-Style function to be called in the Execute method

*/
public ";

%javamethodmodifiers  rtk::simple::FunctionCommand::SetCallbackFunction "/**
void rtk::simple::FunctionCommand::SetCallbackFunction(void(*pFunction)(void *), void *clientData)

Set a C-Style function with a void* clientData as an argument. The
caller is responsible for managing the life of the clientData and that
it's valid when Execute is called with the clientData.

*/
public ";


%typemap(javaimports) rtk::simple::GaborImageSource "/**

Generate an n-dimensional image of a Gabor filter.


GaborImageSource generates an image of either the real (i.e. symmetric) or complex
(i.e. antisymmetric) part of the Gabor filter with the orientation
directed along the x-axis. The GaborKernelFunction is used to evaluate the contribution along the x-axis whereas a non-
normalized 1-D Gaussian envelope provides the contribution in each of
the remaining N dimensions. Orientation can be manipulated via the Transform classes of the toolkit.

The output image may be of any dimension.

This implementation was contributed as a paper to the Insight Journal https://hdl.handle.net/1926/500
See:
 rtk::simple::GaborImageSource for the procedural interface

 itk::GaborImageSource for the Doxygen on the original ITK class.


C++ includes: srtkGaborImageSource.h
*/"

%javamethodmodifiers  rtk::simple::GaborImageSource::Execute "/**
Image rtk::simple::GaborImageSource::Execute()

Execute the filter on the input image

*/
public ";

%javamethodmodifiers  rtk::simple::GaborImageSource::Execute "/**
Image rtk::simple::GaborImageSource::Execute(PixelIDValueEnum outputPixelType, const std::vector< unsigned int >
&size, const std::vector< double > &sigma, const std::vector< double >
&mean, double frequency, const std::vector< double > &origin, const
std::vector< double > &spacing, std::vector< double > direction)

Execute the filter on the input image with the given parameters

*/
public ";

%javamethodmodifiers  rtk::simple::GaborImageSource::GaborImageSource "/**
rtk::simple::GaborImageSource::GaborImageSource()

Default Constructor that takes no arguments and initializes default
parameters

*/
public ";

%javamethodmodifiers  rtk::simple::GaborImageSource::GetDirection "/**
std::vector<double> rtk::simple::GaborImageSource::GetDirection() const
*/
public ";

%javamethodmodifiers  rtk::simple::GaborImageSource::GetFrequency "/**
double rtk::simple::GaborImageSource::GetFrequency() const
*/
public ";

%javamethodmodifiers  rtk::simple::GaborImageSource::GetMean "/**
std::vector<double> rtk::simple::GaborImageSource::GetMean() const
*/
public ";

%javamethodmodifiers  rtk::simple::GaborImageSource::GetName "/**
std::string rtk::simple::GaborImageSource::GetName() const

Name of this class

*/
public ";

%javamethodmodifiers  rtk::simple::GaborImageSource::GetOrigin "/**
std::vector<double> rtk::simple::GaborImageSource::GetOrigin() const
*/
public ";

%javamethodmodifiers  rtk::simple::GaborImageSource::GetOutputPixelType "/**
PixelIDValueEnum rtk::simple::GaborImageSource::GetOutputPixelType() const
*/
public ";

%javamethodmodifiers  rtk::simple::GaborImageSource::GetSigma "/**
std::vector<double> rtk::simple::GaborImageSource::GetSigma() const
*/
public ";

%javamethodmodifiers  rtk::simple::GaborImageSource::GetSize "/**
std::vector<unsigned int> rtk::simple::GaborImageSource::GetSize() const
*/
public ";

%javamethodmodifiers  rtk::simple::GaborImageSource::GetSpacing "/**
std::vector<double> rtk::simple::GaborImageSource::GetSpacing() const
*/
public ";

%javamethodmodifiers  rtk::simple::GaborImageSource::SetDirection "/**
Self& rtk::simple::GaborImageSource::SetDirection(std::vector< double > Direction)
*/
public ";

%javamethodmodifiers  rtk::simple::GaborImageSource::SetFrequency "/**
Self& rtk::simple::GaborImageSource::SetFrequency(double Frequency)
*/
public ";

%javamethodmodifiers  rtk::simple::GaborImageSource::SetMean "/**
Self& rtk::simple::GaborImageSource::SetMean(const std::vector< double > &Mean)
*/
public ";

%javamethodmodifiers  rtk::simple::GaborImageSource::SetMean "/**
Self& rtk::simple::GaborImageSource::SetMean(double value)

Set the values of the Mean vector all to value

*/
public ";

%javamethodmodifiers  rtk::simple::GaborImageSource::SetOrigin "/**
Self& rtk::simple::GaborImageSource::SetOrigin(const std::vector< double > &Origin)
*/
public ";

%javamethodmodifiers  rtk::simple::GaborImageSource::SetOutputPixelType "/**
Self& rtk::simple::GaborImageSource::SetOutputPixelType(PixelIDValueEnum OutputPixelType)
*/
public ";

%javamethodmodifiers  rtk::simple::GaborImageSource::SetSigma "/**
Self& rtk::simple::GaborImageSource::SetSigma(const std::vector< double > &Sigma)
*/
public ";

%javamethodmodifiers  rtk::simple::GaborImageSource::SetSigma "/**
Self& rtk::simple::GaborImageSource::SetSigma(double value)

Set the values of the Sigma vector all to value

*/
public ";

%javamethodmodifiers  rtk::simple::GaborImageSource::SetSize "/**
Self& rtk::simple::GaborImageSource::SetSize(const std::vector< unsigned int > &Size)
*/
public ";

%javamethodmodifiers  rtk::simple::GaborImageSource::SetSpacing "/**
Self& rtk::simple::GaborImageSource::SetSpacing(const std::vector< double > &Spacing)
*/
public ";

%javamethodmodifiers  rtk::simple::GaborImageSource::ToString "/**
std::string rtk::simple::GaborImageSource::ToString() const

Print ourselves out

*/
public ";

%javamethodmodifiers  rtk::simple::GaborImageSource::~GaborImageSource "/**
rtk::simple::GaborImageSource::~GaborImageSource()

Destructor

*/
public ";


%typemap(javaimports) rtk::simple::GaussianImageSource "/**

Generate an n-dimensional image of a Gaussian.


GaussianImageSource generates an image of a Gaussian. m_Normalized determines whether or
not the Gaussian is normalized (whether or not the sum over infinite
space is 1.0) When creating an image, it is preferable tonotnormalize
the Gaussian m_Scale scales the output of the Gaussian to span a range
larger than 0->1, and is typically set to the maximum value of the
output data type (for instance, 255 for uchars)

The output image may be of any dimension.
See:
 rtk::simple::GaussianImageSource for the procedural interface

 itk::GaussianImageSource for the Doxygen on the original ITK class.


C++ includes: srtkGaussianImageSource.h
*/"

%javamethodmodifiers  rtk::simple::GaussianImageSource::Execute "/**
Image rtk::simple::GaussianImageSource::Execute()

Execute the filter on the input image

*/
public ";

%javamethodmodifiers  rtk::simple::GaussianImageSource::Execute "/**
Image rtk::simple::GaussianImageSource::Execute(PixelIDValueEnum outputPixelType, const std::vector< unsigned int >
&size, const std::vector< double > &sigma, const std::vector< double >
&mean, double scale, const std::vector< double > &origin, const
std::vector< double > &spacing, std::vector< double > direction)

Execute the filter on the input image with the given parameters

*/
public ";

%javamethodmodifiers  rtk::simple::GaussianImageSource::GaussianImageSource "/**
rtk::simple::GaussianImageSource::GaussianImageSource()

Default Constructor that takes no arguments and initializes default
parameters

*/
public ";

%javamethodmodifiers  rtk::simple::GaussianImageSource::GetDirection "/**
std::vector<double> rtk::simple::GaussianImageSource::GetDirection() const
*/
public ";

%javamethodmodifiers  rtk::simple::GaussianImageSource::GetMean "/**
std::vector<double> rtk::simple::GaussianImageSource::GetMean() const

Gets and sets for Gaussian parameters

*/
public ";

%javamethodmodifiers  rtk::simple::GaussianImageSource::GetName "/**
std::string rtk::simple::GaussianImageSource::GetName() const

Name of this class

*/
public ";

%javamethodmodifiers  rtk::simple::GaussianImageSource::GetOrigin "/**
std::vector<double> rtk::simple::GaussianImageSource::GetOrigin() const
*/
public ";

%javamethodmodifiers  rtk::simple::GaussianImageSource::GetOutputPixelType "/**
PixelIDValueEnum rtk::simple::GaussianImageSource::GetOutputPixelType() const
*/
public ";

%javamethodmodifiers  rtk::simple::GaussianImageSource::GetScale "/**
double rtk::simple::GaussianImageSource::GetScale() const

Gets and sets for Gaussian parameters

*/
public ";

%javamethodmodifiers  rtk::simple::GaussianImageSource::GetSigma "/**
std::vector<double> rtk::simple::GaussianImageSource::GetSigma() const

Gets and sets for Gaussian parameters

*/
public ";

%javamethodmodifiers  rtk::simple::GaussianImageSource::GetSize "/**
std::vector<unsigned int> rtk::simple::GaussianImageSource::GetSize() const
*/
public ";

%javamethodmodifiers  rtk::simple::GaussianImageSource::GetSpacing "/**
std::vector<double> rtk::simple::GaussianImageSource::GetSpacing() const
*/
public ";

%javamethodmodifiers  rtk::simple::GaussianImageSource::SetDirection "/**
Self& rtk::simple::GaussianImageSource::SetDirection(std::vector< double > Direction)
*/
public ";

%javamethodmodifiers  rtk::simple::GaussianImageSource::SetMean "/**
Self& rtk::simple::GaussianImageSource::SetMean(const std::vector< double > &Mean)

Gets and sets for Gaussian parameters

*/
public ";

%javamethodmodifiers  rtk::simple::GaussianImageSource::SetMean "/**
Self& rtk::simple::GaussianImageSource::SetMean(double value)

Set the values of the Mean vector all to value

*/
public ";

%javamethodmodifiers  rtk::simple::GaussianImageSource::SetOrigin "/**
Self& rtk::simple::GaussianImageSource::SetOrigin(const std::vector< double > &Origin)
*/
public ";

%javamethodmodifiers  rtk::simple::GaussianImageSource::SetOutputPixelType "/**
Self& rtk::simple::GaussianImageSource::SetOutputPixelType(PixelIDValueEnum OutputPixelType)
*/
public ";

%javamethodmodifiers  rtk::simple::GaussianImageSource::SetScale "/**
Self& rtk::simple::GaussianImageSource::SetScale(double Scale)

Gets and sets for Gaussian parameters

*/
public ";

%javamethodmodifiers  rtk::simple::GaussianImageSource::SetSigma "/**
Self& rtk::simple::GaussianImageSource::SetSigma(const std::vector< double > &Sigma)

Gets and sets for Gaussian parameters

*/
public ";

%javamethodmodifiers  rtk::simple::GaussianImageSource::SetSigma "/**
Self& rtk::simple::GaussianImageSource::SetSigma(double value)

Set the values of the Sigma vector all to value

*/
public ";

%javamethodmodifiers  rtk::simple::GaussianImageSource::SetSize "/**
Self& rtk::simple::GaussianImageSource::SetSize(const std::vector< unsigned int > &Size)
*/
public ";

%javamethodmodifiers  rtk::simple::GaussianImageSource::SetSpacing "/**
Self& rtk::simple::GaussianImageSource::SetSpacing(const std::vector< double > &Spacing)
*/
public ";

%javamethodmodifiers  rtk::simple::GaussianImageSource::ToString "/**
std::string rtk::simple::GaussianImageSource::ToString() const

Print ourselves out

*/
public ";

%javamethodmodifiers  rtk::simple::GaussianImageSource::~GaussianImageSource "/**
rtk::simple::GaussianImageSource::~GaussianImageSource()

Destructor

*/
public ";


%typemap(javaimports) rtk::simple::GenericException "/**

The base SimpleRTK exception class.

C++ includes: srtkExceptionObject.h
*/"

%javamethodmodifiers  rtk::simple::GenericException::GenericException "/**
rtk::simple::GenericException::GenericException()
 throw ()
Default constructor. Needed to ensure the exception object can be
copied.

*/
public ";

%javamethodmodifiers  rtk::simple::GenericException::GenericException "/**
rtk::simple::GenericException::GenericException(const GenericException &e)
 throw ()*/
public ";

%javamethodmodifiers  rtk::simple::GenericException::GenericException "/**
rtk::simple::GenericException::GenericException(const char *file, unsigned int lineNumber)
 throw ()
Constructor. Needed to ensure the exception object can be copied.

*/
public ";

%javamethodmodifiers  rtk::simple::GenericException::GenericException "/**
rtk::simple::GenericException::GenericException(const std::string &file, unsigned int lineNumber)
 throw ()
Constructor. Needed to ensure the exception object can be copied.

*/
public ";

%javamethodmodifiers  rtk::simple::GenericException::GenericException "/**
rtk::simple::GenericException::GenericException(const std::string &file, unsigned int lineNumber, const std::string
&desc)
 throw ()
Constructor. Needed to ensure the exception object can be copied.

*/
public ";

%javamethodmodifiers  rtk::simple::GenericException::GetDescription "/**
virtual const char* rtk::simple::GenericException::GetDescription() const
*/
public ";

%javamethodmodifiers  rtk::simple::GenericException::GetFile "/**
virtual const char* rtk::simple::GenericException::GetFile() const

What file did the exception occur in?

*/
public ";

%javamethodmodifiers  rtk::simple::GenericException::GetLine "/**
virtual unsigned int rtk::simple::GenericException::GetLine() const

What line did the exception occur in?

*/
public ";

%javamethodmodifiers  rtk::simple::GenericException::GetLocation "/**
virtual const char* rtk::simple::GenericException::GetLocation() const
*/
public ";

%javamethodmodifiers  rtk::simple::GenericException::GetNameOfClass "/**
virtual const char* rtk::simple::GenericException::GetNameOfClass() const
*/
public ";

%javamethodmodifiers  rtk::simple::GenericException::ToString "/**
std::string rtk::simple::GenericException::ToString() const

Return a description of the error

*/
public ";

%javamethodmodifiers  rtk::simple::GenericException::what "/**
const char* rtk::simple::GenericException::what() const
 throw ()*/
public ";

%javamethodmodifiers  rtk::simple::GenericException::~GenericException "/**
virtual rtk::simple::GenericException::~GenericException()
 throw ( )
Virtual destructor needed for subclasses. Has to have empty throw().

*/
public ";


%typemap(javaimports) rtk::simple::GeodesicActiveContourLevelSetImageFilter "/**

Segments structures in images based on a user supplied edge potential
map.


IMPORTANT
The SegmentationLevelSetImageFilter class and the GeodesicActiveContourLevelSetFunction class contain additional information necessary to gain full
understanding of how to use this filter.
OVERVIEW
This class is a level set method segmentation filter. An initial
contour is propagated outwards (or inwards) until it ''sticks'' to the
shape boundaries. This is done by using a level set speed function
based on a user supplied edge potential map.
INPUTS
This filter requires two inputs. The first input is a initial level
set. The initial level set is a real image which contains the initial
contour/surface as the zero level set. For example, a signed distance
function from the initial contour/surface is typically used. Unlike
the simpler ShapeDetectionLevelSetImageFilter the initial contour does not have to lie wholly within the shape to
be segmented. The initial contour is allow to overlap the shape
boundary. The extra advection term in the update equation behaves like
a doublet and attracts the contour to the boundary. This approach for
segmentation follows that of Caselles et al (1997).

The second input is the feature image. For this filter, this is the
edge potential map. General characteristics of an edge potential map
is that it has values close to zero in regions near the edges and
values close to one inside the shape itself. Typically, the edge
potential map is compute from the image gradient, for example:
\\\\[ g(I) = 1 / ( 1 + | (\\\\nabla * G)(I)| ) \\\\] \\\\[ g(I) = \\\\exp^{-|(\\\\nabla * G)(I)|} \\\\]

where $ I $ is image intensity and $ (\\\\nabla * G) $ is the derivative of Gaussian operator.


See SegmentationLevelSetImageFilter and SparseFieldLevelSetImageFilter for more information on Inputs.
PARAMETERS
The PropagationScaling parameter can be used to switch from
propagation outwards (POSITIVE scaling parameter) versus propagating
inwards (NEGATIVE scaling parameter).
 This implementation allows the user to set the weights between the
propagation, advection and curvature term using methods SetPropagationScaling() , SetAdvectionScaling() , SetCurvatureScaling() . In general, the larger the CurvatureScaling, the smoother the
resulting contour. To follow the implementation in Caselles et al
paper, set the PropagationScaling to $ c $ (the inflation or ballon force) and AdvectionScaling and
CurvatureScaling both to 1.0.

OUTPUTS
The filter outputs a single, scalar, real-valued image. Negative
values in the output image represent the inside of the segmented
region and positive values in the image represent the outside of the
segmented region. The zero crossings of the image correspond to the
position of the propagating front.

See SparseFieldLevelSetImageFilter and SegmentationLevelSetImageFilter for more information.
REFERENCES

\"Geodesic Active Contours\", V. Caselles, R. Kimmel and G. Sapiro.
International Journal on Computer Vision, Vol 22, No. 1, pp 61-97,
1997

See:
 SegmentationLevelSetImageFilter


 GeodesicActiveContourLevelSetFunction


 SparseFieldLevelSetImageFilter

 rtk::simple::GeodesicActiveContourLevelSet for the procedural interface

 itk::GeodesicActiveContourLevelSetImageFilter for the Doxygen on the original ITK class.


C++ includes: srtkGeodesicActiveContourLevelSetImageFilter.h
*/"

%javamethodmodifiers  rtk::simple::GeodesicActiveContourLevelSetImageFilter::Execute "/**
Image rtk::simple::GeodesicActiveContourLevelSetImageFilter::Execute(const Image &image1, const Image &image2)

Execute the filter on the input images

*/
public ";

%javamethodmodifiers  rtk::simple::GeodesicActiveContourLevelSetImageFilter::Execute "/**
Image rtk::simple::GeodesicActiveContourLevelSetImageFilter::Execute(const Image &image1, const Image &image2, double maximumRMSError,
double propagationScaling, double curvatureScaling, double
advectionScaling, uint32_t numberOfIterations, bool
reverseExpansionDirection)

Execute the filter on the input images with the given parameters

*/
public ";

%javamethodmodifiers  rtk::simple::GeodesicActiveContourLevelSetImageFilter::GeodesicActiveContourLevelSetImageFilter "/**
rtk::simple::GeodesicActiveContourLevelSetImageFilter::GeodesicActiveContourLevelSetImageFilter()

Default Constructor that takes no arguments and initializes default
parameters

*/
public ";

%javamethodmodifiers  rtk::simple::GeodesicActiveContourLevelSetImageFilter::GetAdvectionScaling "/**
double rtk::simple::GeodesicActiveContourLevelSetImageFilter::GetAdvectionScaling() const
*/
public ";

%javamethodmodifiers  rtk::simple::GeodesicActiveContourLevelSetImageFilter::GetCurvatureScaling "/**
double rtk::simple::GeodesicActiveContourLevelSetImageFilter::GetCurvatureScaling() const
*/
public ";

%javamethodmodifiers  rtk::simple::GeodesicActiveContourLevelSetImageFilter::GetElapsedIterations "/**
uint32_t rtk::simple::GeodesicActiveContourLevelSetImageFilter::GetElapsedIterations() const

Number of iterations run.


This is a measurement. Its value is updated in the Execute methods, so
the value will only be valid after an execution.

*/
public ";

%javamethodmodifiers  rtk::simple::GeodesicActiveContourLevelSetImageFilter::GetMaximumRMSError "/**
double rtk::simple::GeodesicActiveContourLevelSetImageFilter::GetMaximumRMSError() const
*/
public ";

%javamethodmodifiers  rtk::simple::GeodesicActiveContourLevelSetImageFilter::GetName "/**
std::string rtk::simple::GeodesicActiveContourLevelSetImageFilter::GetName() const

Name of this class

*/
public ";

%javamethodmodifiers  rtk::simple::GeodesicActiveContourLevelSetImageFilter::GetNumberOfIterations "/**
uint32_t rtk::simple::GeodesicActiveContourLevelSetImageFilter::GetNumberOfIterations() const
*/
public ";

%javamethodmodifiers  rtk::simple::GeodesicActiveContourLevelSetImageFilter::GetPropagationScaling "/**
double rtk::simple::GeodesicActiveContourLevelSetImageFilter::GetPropagationScaling() const
*/
public ";

%javamethodmodifiers  rtk::simple::GeodesicActiveContourLevelSetImageFilter::GetReverseExpansionDirection "/**
bool rtk::simple::GeodesicActiveContourLevelSetImageFilter::GetReverseExpansionDirection() const
*/
public ";

%javamethodmodifiers  rtk::simple::GeodesicActiveContourLevelSetImageFilter::GetRMSChange "/**
double rtk::simple::GeodesicActiveContourLevelSetImageFilter::GetRMSChange() const

The Root Mean Square of the levelset upon termination.


This is a measurement. Its value is updated in the Execute methods, so
the value will only be valid after an execution.

*/
public ";

%javamethodmodifiers  rtk::simple::GeodesicActiveContourLevelSetImageFilter::ReverseExpansionDirectionOff "/**
Self& rtk::simple::GeodesicActiveContourLevelSetImageFilter::ReverseExpansionDirectionOff()
*/
public ";

%javamethodmodifiers  rtk::simple::GeodesicActiveContourLevelSetImageFilter::ReverseExpansionDirectionOn "/**
Self& rtk::simple::GeodesicActiveContourLevelSetImageFilter::ReverseExpansionDirectionOn()

Set the value of ReverseExpansionDirection to true or false
respectfully.

*/
public ";

%javamethodmodifiers  rtk::simple::GeodesicActiveContourLevelSetImageFilter::SetAdvectionScaling "/**
Self& rtk::simple::GeodesicActiveContourLevelSetImageFilter::SetAdvectionScaling(double AdvectionScaling)
*/
public ";

%javamethodmodifiers  rtk::simple::GeodesicActiveContourLevelSetImageFilter::SetCurvatureScaling "/**
Self& rtk::simple::GeodesicActiveContourLevelSetImageFilter::SetCurvatureScaling(double CurvatureScaling)
*/
public ";

%javamethodmodifiers  rtk::simple::GeodesicActiveContourLevelSetImageFilter::SetMaximumRMSError "/**
Self& rtk::simple::GeodesicActiveContourLevelSetImageFilter::SetMaximumRMSError(double MaximumRMSError)
*/
public ";

%javamethodmodifiers  rtk::simple::GeodesicActiveContourLevelSetImageFilter::SetNumberOfIterations "/**
Self& rtk::simple::GeodesicActiveContourLevelSetImageFilter::SetNumberOfIterations(uint32_t NumberOfIterations)
*/
public ";

%javamethodmodifiers  rtk::simple::GeodesicActiveContourLevelSetImageFilter::SetPropagationScaling "/**
Self& rtk::simple::GeodesicActiveContourLevelSetImageFilter::SetPropagationScaling(double PropagationScaling)
*/
public ";

%javamethodmodifiers  rtk::simple::GeodesicActiveContourLevelSetImageFilter::SetReverseExpansionDirection "/**
Self& rtk::simple::GeodesicActiveContourLevelSetImageFilter::SetReverseExpansionDirection(bool ReverseExpansionDirection)
*/
public ";

%javamethodmodifiers  rtk::simple::GeodesicActiveContourLevelSetImageFilter::ToString "/**
std::string rtk::simple::GeodesicActiveContourLevelSetImageFilter::ToString() const

Print ourselves out

*/
public ";

%javamethodmodifiers  rtk::simple::GeodesicActiveContourLevelSetImageFilter::~GeodesicActiveContourLevelSetImageFilter "/**
rtk::simple::GeodesicActiveContourLevelSetImageFilter::~GeodesicActiveContourLevelSetImageFilter()

Destructor

*/
public ";


%typemap(javaimports) rtk::simple::GradientAnisotropicDiffusionImageFilter "/**

This filter performs anisotropic diffusion on a scalar itk::Image using the classic Perona-Malik, gradient magnitude based equation
implemented in itkGradientNDAnisotropicDiffusionFunction. For detailed
information on anisotropic diffusion, see
itkAnisotropicDiffusionFunction and
itkGradientNDAnisotropicDiffusionFunction.

Inputs and Outputs
The input to this filter should be a scalar itk::Image of any dimensionality. The output image will be a diffused copy of
the input.
Parameters
Please see the description of parameters given in
itkAnisotropicDiffusionImageFilter.

See:
 AnisotropicDiffusionImageFilter


 AnisotropicDiffusionFunction


GradientAnisotropicDiffusionFunction

 rtk::simple::GradientAnisotropicDiffusion for the procedural interface

 itk::GradientAnisotropicDiffusionImageFilter for the Doxygen on the original ITK class.


C++ includes: srtkGradientAnisotropicDiffusionImageFilter.h
*/"

%javamethodmodifiers  rtk::simple::GradientAnisotropicDiffusionImageFilter::EstimateOptimalTimeStep "/**
double rtk::simple::GradientAnisotropicDiffusionImageFilter::EstimateOptimalTimeStep(Image &inImage)

This method autmatically sets the optimal timestep for an image given
its spacing.

*/
public ";

%javamethodmodifiers  rtk::simple::GradientAnisotropicDiffusionImageFilter::Execute "/**
Image rtk::simple::GradientAnisotropicDiffusionImageFilter::Execute(const Image &image1)

Execute the filter on the input image

*/
public ";

%javamethodmodifiers  rtk::simple::GradientAnisotropicDiffusionImageFilter::Execute "/**
Image rtk::simple::GradientAnisotropicDiffusionImageFilter::Execute(const Image &image1, double timeStep, double conductanceParameter,
unsigned int conductanceScalingUpdateInterval, uint32_t
numberOfIterations)

Execute the filter on the input image with the given parameters

*/
public ";

%javamethodmodifiers  rtk::simple::GradientAnisotropicDiffusionImageFilter::GetConductanceParameter "/**
double rtk::simple::GradientAnisotropicDiffusionImageFilter::GetConductanceParameter() const
*/
public ";

%javamethodmodifiers  rtk::simple::GradientAnisotropicDiffusionImageFilter::GetConductanceScalingUpdateInterval "/**
unsigned int rtk::simple::GradientAnisotropicDiffusionImageFilter::GetConductanceScalingUpdateInterval() const
*/
public ";

%javamethodmodifiers  rtk::simple::GradientAnisotropicDiffusionImageFilter::GetName "/**
std::string rtk::simple::GradientAnisotropicDiffusionImageFilter::GetName() const

Name of this class

*/
public ";

%javamethodmodifiers  rtk::simple::GradientAnisotropicDiffusionImageFilter::GetNumberOfIterations "/**
uint32_t rtk::simple::GradientAnisotropicDiffusionImageFilter::GetNumberOfIterations() const
*/
public ";

%javamethodmodifiers  rtk::simple::GradientAnisotropicDiffusionImageFilter::GetTimeStep "/**
double rtk::simple::GradientAnisotropicDiffusionImageFilter::GetTimeStep() const
*/
public ";

%javamethodmodifiers  rtk::simple::GradientAnisotropicDiffusionImageFilter::GradientAnisotropicDiffusionImageFilter "/**
rtk::simple::GradientAnisotropicDiffusionImageFilter::GradientAnisotropicDiffusionImageFilter()

Default Constructor that takes no arguments and initializes default
parameters

*/
public ";

%javamethodmodifiers  rtk::simple::GradientAnisotropicDiffusionImageFilter::SetConductanceParameter "/**
Self& rtk::simple::GradientAnisotropicDiffusionImageFilter::SetConductanceParameter(double ConductanceParameter)
*/
public ";

%javamethodmodifiers  rtk::simple::GradientAnisotropicDiffusionImageFilter::SetConductanceScalingUpdateInterval "/**
Self& rtk::simple::GradientAnisotropicDiffusionImageFilter::SetConductanceScalingUpdateInterval(unsigned int ConductanceScalingUpdateInterval)
*/
public ";

%javamethodmodifiers  rtk::simple::GradientAnisotropicDiffusionImageFilter::SetNumberOfIterations "/**
Self& rtk::simple::GradientAnisotropicDiffusionImageFilter::SetNumberOfIterations(uint32_t NumberOfIterations)
*/
public ";

%javamethodmodifiers  rtk::simple::GradientAnisotropicDiffusionImageFilter::SetTimeStep "/**
Self& rtk::simple::GradientAnisotropicDiffusionImageFilter::SetTimeStep(double TimeStep)
*/
public ";

%javamethodmodifiers  rtk::simple::GradientAnisotropicDiffusionImageFilter::ToString "/**
std::string rtk::simple::GradientAnisotropicDiffusionImageFilter::ToString() const

Print ourselves out

*/
public ";

%javamethodmodifiers  rtk::simple::GradientAnisotropicDiffusionImageFilter::~GradientAnisotropicDiffusionImageFilter "/**
rtk::simple::GradientAnisotropicDiffusionImageFilter::~GradientAnisotropicDiffusionImageFilter()

Destructor

*/
public ";


%typemap(javaimports) rtk::simple::GradientImageFilter "/**

Computes the gradient of an image using directional derivatives.


Computes the gradient of an image using directional derivatives. The
directional derivative at each pixel location is computed by
convolution with a first-order derivative operator.

The second template parameter defines the value type used in the
derivative operator (defaults to float). The third template parameter
defines the value type used for output image (defaults to float). The
output image is defined as a covariant vector image whose value type
is specified as this third template parameter.


See:
 Image


 Neighborhood


 NeighborhoodOperator


 NeighborhoodIterator

 rtk::simple::Gradient for the procedural interface

 itk::GradientImageFilter for the Doxygen on the original ITK class.


C++ includes: srtkGradientImageFilter.h
*/"

%javamethodmodifiers  rtk::simple::GradientImageFilter::Execute "/**
Image rtk::simple::GradientImageFilter::Execute(const Image &image1)

Execute the filter on the input image

*/
public ";

%javamethodmodifiers  rtk::simple::GradientImageFilter::Execute "/**
Image rtk::simple::GradientImageFilter::Execute(const Image &image1, bool useImageSpacing, bool useImageDirection)

Execute the filter on the input image with the given parameters

*/
public ";

%javamethodmodifiers  rtk::simple::GradientImageFilter::GetName "/**
std::string rtk::simple::GradientImageFilter::GetName() const

Name of this class

*/
public ";

%javamethodmodifiers  rtk::simple::GradientImageFilter::GetUseImageDirection "/**
bool rtk::simple::GradientImageFilter::GetUseImageDirection() const

The UseImageDirection flag determines whether image derivatives are
computed with respect to the image grid or with respect to the
physical space. When this flag is ON the derivatives are computed with
respect to the coodinate system of physical space. The difference is
whether we take into account the image Direction or not. The flag ON
will take into account the image direction and will result in an extra
matrix multiplication compared to the amount of computation performed
when the flag is OFF. The default value of this flag is On.

*/
public ";

%javamethodmodifiers  rtk::simple::GradientImageFilter::GetUseImageSpacing "/**
bool rtk::simple::GradientImageFilter::GetUseImageSpacing() const

Set/Get whether or not the filter will use the spacing of the input
image in its calculations

*/
public ";

%javamethodmodifiers  rtk::simple::GradientImageFilter::GradientImageFilter "/**
rtk::simple::GradientImageFilter::GradientImageFilter()

Default Constructor that takes no arguments and initializes default
parameters

*/
public ";

%javamethodmodifiers  rtk::simple::GradientImageFilter::SetUseImageDirection "/**
Self& rtk::simple::GradientImageFilter::SetUseImageDirection(bool UseImageDirection)

The UseImageDirection flag determines whether image derivatives are
computed with respect to the image grid or with respect to the
physical space. When this flag is ON the derivatives are computed with
respect to the coodinate system of physical space. The difference is
whether we take into account the image Direction or not. The flag ON
will take into account the image direction and will result in an extra
matrix multiplication compared to the amount of computation performed
when the flag is OFF. The default value of this flag is On.

*/
public ";

%javamethodmodifiers  rtk::simple::GradientImageFilter::SetUseImageSpacing "/**
Self& rtk::simple::GradientImageFilter::SetUseImageSpacing(bool UseImageSpacing)

Set/Get whether or not the filter will use the spacing of the input
image in its calculations

*/
public ";

%javamethodmodifiers  rtk::simple::GradientImageFilter::ToString "/**
std::string rtk::simple::GradientImageFilter::ToString() const

Print ourselves out

*/
public ";

%javamethodmodifiers  rtk::simple::GradientImageFilter::UseImageDirectionOff "/**
Self& rtk::simple::GradientImageFilter::UseImageDirectionOff()
*/
public ";

%javamethodmodifiers  rtk::simple::GradientImageFilter::UseImageDirectionOn "/**
Self& rtk::simple::GradientImageFilter::UseImageDirectionOn()

Set the value of UseImageDirection to true or false respectfully.

*/
public ";

%javamethodmodifiers  rtk::simple::GradientImageFilter::UseImageSpacingOff "/**
Self& rtk::simple::GradientImageFilter::UseImageSpacingOff()
*/
public ";

%javamethodmodifiers  rtk::simple::GradientImageFilter::UseImageSpacingOn "/**
Self& rtk::simple::GradientImageFilter::UseImageSpacingOn()

Set the value of UseImageSpacing to true or false respectfully.

*/
public ";

%javamethodmodifiers  rtk::simple::GradientImageFilter::~GradientImageFilter "/**
rtk::simple::GradientImageFilter::~GradientImageFilter()

Destructor

*/
public ";


%typemap(javaimports) rtk::simple::GradientMagnitudeImageFilter "/**

Computes the gradient magnitude of an image region at each pixel.



See:
 Image


 Neighborhood


 NeighborhoodOperator


 NeighborhoodIterator
Wiki Examples:

All Examples

Compute the gradient magnitude image
See:
 rtk::simple::GradientMagnitude for the procedural interface

 itk::GradientMagnitudeImageFilter for the Doxygen on the original ITK class.



C++ includes: srtkGradientMagnitudeImageFilter.h
*/"

%javamethodmodifiers  rtk::simple::GradientMagnitudeImageFilter::Execute "/**
Image rtk::simple::GradientMagnitudeImageFilter::Execute(const Image &image1)

Execute the filter on the input image

*/
public ";

%javamethodmodifiers  rtk::simple::GradientMagnitudeImageFilter::Execute "/**
Image rtk::simple::GradientMagnitudeImageFilter::Execute(const Image &image1, bool useImageSpacing)

Execute the filter on the input image with the given parameters

*/
public ";

%javamethodmodifiers  rtk::simple::GradientMagnitudeImageFilter::GetName "/**
std::string rtk::simple::GradientMagnitudeImageFilter::GetName() const

Name of this class

*/
public ";

%javamethodmodifiers  rtk::simple::GradientMagnitudeImageFilter::GetUseImageSpacing "/**
bool rtk::simple::GradientMagnitudeImageFilter::GetUseImageSpacing() const

Set/Get whether or not the filter will use the spacing of the input
image in its calculations

*/
public ";

%javamethodmodifiers  rtk::simple::GradientMagnitudeImageFilter::GradientMagnitudeImageFilter "/**
rtk::simple::GradientMagnitudeImageFilter::GradientMagnitudeImageFilter()

Default Constructor that takes no arguments and initializes default
parameters

*/
public ";

%javamethodmodifiers  rtk::simple::GradientMagnitudeImageFilter::SetUseImageSpacing "/**
Self& rtk::simple::GradientMagnitudeImageFilter::SetUseImageSpacing(bool UseImageSpacing)

Set/Get whether or not the filter will use the spacing of the input
image in its calculations

*/
public ";

%javamethodmodifiers  rtk::simple::GradientMagnitudeImageFilter::ToString "/**
std::string rtk::simple::GradientMagnitudeImageFilter::ToString() const

Print ourselves out

*/
public ";

%javamethodmodifiers  rtk::simple::GradientMagnitudeImageFilter::UseImageSpacingOff "/**
Self& rtk::simple::GradientMagnitudeImageFilter::UseImageSpacingOff()
*/
public ";

%javamethodmodifiers  rtk::simple::GradientMagnitudeImageFilter::UseImageSpacingOn "/**
Self& rtk::simple::GradientMagnitudeImageFilter::UseImageSpacingOn()

Set the value of UseImageSpacing to true or false respectfully.

*/
public ";

%javamethodmodifiers  rtk::simple::GradientMagnitudeImageFilter::~GradientMagnitudeImageFilter "/**
rtk::simple::GradientMagnitudeImageFilter::~GradientMagnitudeImageFilter()

Destructor

*/
public ";


%typemap(javaimports) rtk::simple::GradientMagnitudeRecursiveGaussianImageFilter "/**

Computes the Magnitude of the Gradient of an image by convolution with
the first derivative of a Gaussian.


This filter is implemented using the recursive gaussian filters

Wiki Examples:

All Examples

Find the gradient magnitude of the image first smoothed with a
Gaussian kernel
See:
 rtk::simple::GradientMagnitudeRecursiveGaussian for the procedural interface

 itk::GradientMagnitudeRecursiveGaussianImageFilter for the Doxygen on the original ITK class.



C++ includes: srtkGradientMagnitudeRecursiveGaussianImageFilter.h
*/"

%javamethodmodifiers  rtk::simple::GradientMagnitudeRecursiveGaussianImageFilter::Execute "/**
Image rtk::simple::GradientMagnitudeRecursiveGaussianImageFilter::Execute(const Image &image1)

Execute the filter on the input image

*/
public ";

%javamethodmodifiers  rtk::simple::GradientMagnitudeRecursiveGaussianImageFilter::Execute "/**
Image rtk::simple::GradientMagnitudeRecursiveGaussianImageFilter::Execute(const Image &image1, double sigma, bool normalizeAcrossScale)

Execute the filter on the input image with the given parameters

*/
public ";

%javamethodmodifiers  rtk::simple::GradientMagnitudeRecursiveGaussianImageFilter::GetName "/**
std::string rtk::simple::GradientMagnitudeRecursiveGaussianImageFilter::GetName() const

Name of this class

*/
public ";

%javamethodmodifiers  rtk::simple::GradientMagnitudeRecursiveGaussianImageFilter::GetNormalizeAcrossScale "/**
bool rtk::simple::GradientMagnitudeRecursiveGaussianImageFilter::GetNormalizeAcrossScale() const

Define which normalization factor will be used for the Gaussian
See:
 RecursiveGaussianImageFilter::SetNormalizeAcrossScale


*/
public ";

%javamethodmodifiers  rtk::simple::GradientMagnitudeRecursiveGaussianImageFilter::GetSigma "/**
double rtk::simple::GradientMagnitudeRecursiveGaussianImageFilter::GetSigma() const

Set Sigma value. Sigma is measured in the units of image spacing.

*/
public ";

%javamethodmodifiers  rtk::simple::GradientMagnitudeRecursiveGaussianImageFilter::GradientMagnitudeRecursiveGaussianImageFilter "/**
rtk::simple::GradientMagnitudeRecursiveGaussianImageFilter::GradientMagnitudeRecursiveGaussianImageFilter()

Default Constructor that takes no arguments and initializes default
parameters

*/
public ";

%javamethodmodifiers  rtk::simple::GradientMagnitudeRecursiveGaussianImageFilter::NormalizeAcrossScaleOff "/**
Self& rtk::simple::GradientMagnitudeRecursiveGaussianImageFilter::NormalizeAcrossScaleOff()
*/
public ";

%javamethodmodifiers  rtk::simple::GradientMagnitudeRecursiveGaussianImageFilter::NormalizeAcrossScaleOn "/**
Self& rtk::simple::GradientMagnitudeRecursiveGaussianImageFilter::NormalizeAcrossScaleOn()

Set the value of NormalizeAcrossScale to true or false respectfully.

*/
public ";

%javamethodmodifiers  rtk::simple::GradientMagnitudeRecursiveGaussianImageFilter::SetNormalizeAcrossScale "/**
Self& rtk::simple::GradientMagnitudeRecursiveGaussianImageFilter::SetNormalizeAcrossScale(bool NormalizeAcrossScale)

Define which normalization factor will be used for the Gaussian
See:
 RecursiveGaussianImageFilter::SetNormalizeAcrossScale


*/
public ";

%javamethodmodifiers  rtk::simple::GradientMagnitudeRecursiveGaussianImageFilter::SetSigma "/**
Self& rtk::simple::GradientMagnitudeRecursiveGaussianImageFilter::SetSigma(double Sigma)

Set Sigma value. Sigma is measured in the units of image spacing.

*/
public ";

%javamethodmodifiers  rtk::simple::GradientMagnitudeRecursiveGaussianImageFilter::ToString "/**
std::string rtk::simple::GradientMagnitudeRecursiveGaussianImageFilter::ToString() const

Print ourselves out

*/
public ";

%javamethodmodifiers  rtk::simple::GradientMagnitudeRecursiveGaussianImageFilter::~GradientMagnitudeRecursiveGaussianImageFilter "/**
rtk::simple::GradientMagnitudeRecursiveGaussianImageFilter::~GradientMagnitudeRecursiveGaussianImageFilter()

Destructor

*/
public ";


%typemap(javaimports) rtk::simple::GradientRecursiveGaussianImageFilter "/**

Computes the gradient of an image by convolution with the first
derivative of a Gaussian.


This filter is implemented using the recursive gaussian filters.

This filter supports both scalar and vector pixel types within the
input image, including VectorImage type.

Wiki Examples:

All Examples

Compute the gradient of an image by convolution with the first
derivative of a Gaussian
See:
 rtk::simple::GradientRecursiveGaussian for the procedural interface

 itk::GradientRecursiveGaussianImageFilter for the Doxygen on the original ITK class.



C++ includes: srtkGradientRecursiveGaussianImageFilter.h
*/"

%javamethodmodifiers  rtk::simple::GradientRecursiveGaussianImageFilter::Execute "/**
Image rtk::simple::GradientRecursiveGaussianImageFilter::Execute(const Image &image1)

Execute the filter on the input image

*/
public ";

%javamethodmodifiers  rtk::simple::GradientRecursiveGaussianImageFilter::Execute "/**
Image rtk::simple::GradientRecursiveGaussianImageFilter::Execute(const Image &image1, double sigma, bool normalizeAcrossScale, bool
useImageDirection)

Execute the filter on the input image with the given parameters

*/
public ";

%javamethodmodifiers  rtk::simple::GradientRecursiveGaussianImageFilter::GetName "/**
std::string rtk::simple::GradientRecursiveGaussianImageFilter::GetName() const

Name of this class

*/
public ";

%javamethodmodifiers  rtk::simple::GradientRecursiveGaussianImageFilter::GetNormalizeAcrossScale "/**
bool rtk::simple::GradientRecursiveGaussianImageFilter::GetNormalizeAcrossScale() const

Define which normalization factor will be used for the Gaussian
See:
 RecursiveGaussianImageFilter::SetNormalizeAcrossScale


*/
public ";

%javamethodmodifiers  rtk::simple::GradientRecursiveGaussianImageFilter::GetSigma "/**
double rtk::simple::GradientRecursiveGaussianImageFilter::GetSigma() const
*/
public ";

%javamethodmodifiers  rtk::simple::GradientRecursiveGaussianImageFilter::GetUseImageDirection "/**
bool rtk::simple::GradientRecursiveGaussianImageFilter::GetUseImageDirection() const

The UseImageDirection flag determines whether the gradients are
computed with respect to the image grid or with respect to the
physical space. When this flag is ON the gradients are computed with
respect to the coodinate system of physical space. The difference is
whether we take into account the image Direction or not. The flag ON
will take into account the image direction and will result in an extra
matrix multiplication compared to the amount of computation performed
when the flag is OFF. The default value of this flag is On.

*/
public ";

%javamethodmodifiers  rtk::simple::GradientRecursiveGaussianImageFilter::GradientRecursiveGaussianImageFilter "/**
rtk::simple::GradientRecursiveGaussianImageFilter::GradientRecursiveGaussianImageFilter()

Default Constructor that takes no arguments and initializes default
parameters

*/
public ";

%javamethodmodifiers  rtk::simple::GradientRecursiveGaussianImageFilter::NormalizeAcrossScaleOff "/**
Self& rtk::simple::GradientRecursiveGaussianImageFilter::NormalizeAcrossScaleOff()
*/
public ";

%javamethodmodifiers  rtk::simple::GradientRecursiveGaussianImageFilter::NormalizeAcrossScaleOn "/**
Self& rtk::simple::GradientRecursiveGaussianImageFilter::NormalizeAcrossScaleOn()

Set the value of NormalizeAcrossScale to true or false respectfully.

*/
public ";

%javamethodmodifiers  rtk::simple::GradientRecursiveGaussianImageFilter::SetNormalizeAcrossScale "/**
Self& rtk::simple::GradientRecursiveGaussianImageFilter::SetNormalizeAcrossScale(bool NormalizeAcrossScale)

Define which normalization factor will be used for the Gaussian
See:
 RecursiveGaussianImageFilter::SetNormalizeAcrossScale


*/
public ";

%javamethodmodifiers  rtk::simple::GradientRecursiveGaussianImageFilter::SetSigma "/**
Self& rtk::simple::GradientRecursiveGaussianImageFilter::SetSigma(double Sigma)

Set Sigma value. Sigma is measured in the units of image spacing.

*/
public ";

%javamethodmodifiers  rtk::simple::GradientRecursiveGaussianImageFilter::SetUseImageDirection "/**
Self& rtk::simple::GradientRecursiveGaussianImageFilter::SetUseImageDirection(bool UseImageDirection)

The UseImageDirection flag determines whether the gradients are
computed with respect to the image grid or with respect to the
physical space. When this flag is ON the gradients are computed with
respect to the coodinate system of physical space. The difference is
whether we take into account the image Direction or not. The flag ON
will take into account the image direction and will result in an extra
matrix multiplication compared to the amount of computation performed
when the flag is OFF. The default value of this flag is On.

*/
public ";

%javamethodmodifiers  rtk::simple::GradientRecursiveGaussianImageFilter::ToString "/**
std::string rtk::simple::GradientRecursiveGaussianImageFilter::ToString() const

Print ourselves out

*/
public ";

%javamethodmodifiers  rtk::simple::GradientRecursiveGaussianImageFilter::UseImageDirectionOff "/**
Self& rtk::simple::GradientRecursiveGaussianImageFilter::UseImageDirectionOff()
*/
public ";

%javamethodmodifiers  rtk::simple::GradientRecursiveGaussianImageFilter::UseImageDirectionOn "/**
Self& rtk::simple::GradientRecursiveGaussianImageFilter::UseImageDirectionOn()

Set the value of UseImageDirection to true or false respectfully.

*/
public ";

%javamethodmodifiers  rtk::simple::GradientRecursiveGaussianImageFilter::~GradientRecursiveGaussianImageFilter "/**
rtk::simple::GradientRecursiveGaussianImageFilter::~GradientRecursiveGaussianImageFilter()

Destructor

*/
public ";


%typemap(javaimports) rtk::simple::GrayscaleConnectedClosingImageFilter "/**

Enhance pixels associated with a dark object (identified by a seed
pixel) where the dark object is surrounded by a brigher object.


GrayscaleConnectedClosingImagefilter is useful for enhancing dark
objects that are surrounded by bright borders. This filter makes it
easier to threshold the image and extract just the object of interest.

Geodesic morphology and the connected closing algorithm are described
in Chapter 6 of Pierre Soille's book \"Morphological Image Analysis:
Principles and Applications\", Second Edition, Springer, 2003.


See:
 GrayscaleGeodesicDilateImageFilter


 MorphologyImageFilter , GrayscaleDilateImageFilter , GrayscaleFunctionDilateImageFilter , BinaryDilateImageFilter

 rtk::simple::GrayscaleConnectedClosing for the procedural interface

 itk::GrayscaleConnectedClosingImageFilter for the Doxygen on the original ITK class.


C++ includes: srtkGrayscaleConnectedClosingImageFilter.h
*/"

%javamethodmodifiers  rtk::simple::GrayscaleConnectedClosingImageFilter::Execute "/**
Image rtk::simple::GrayscaleConnectedClosingImageFilter::Execute(const Image &image1)

Execute the filter on the input image

*/
public ";

%javamethodmodifiers  rtk::simple::GrayscaleConnectedClosingImageFilter::Execute "/**
Image rtk::simple::GrayscaleConnectedClosingImageFilter::Execute(const Image &image1, const std::vector< uint32_t > &seed, bool
fullyConnected)

Execute the filter on the input image with the given parameters

*/
public ";

%javamethodmodifiers  rtk::simple::GrayscaleConnectedClosingImageFilter::FullyConnectedOff "/**
Self& rtk::simple::GrayscaleConnectedClosingImageFilter::FullyConnectedOff()
*/
public ";

%javamethodmodifiers  rtk::simple::GrayscaleConnectedClosingImageFilter::FullyConnectedOn "/**
Self& rtk::simple::GrayscaleConnectedClosingImageFilter::FullyConnectedOn()

Set the value of FullyConnected to true or false respectfully.

*/
public ";

%javamethodmodifiers  rtk::simple::GrayscaleConnectedClosingImageFilter::GetFullyConnected "/**
bool rtk::simple::GrayscaleConnectedClosingImageFilter::GetFullyConnected() const

Set/Get whether the connected components are defined strictly by face
connectivity or by face+edge+vertex connectivity. Default is
FullyConnectedOff. For objects that are 1 pixel wide, use
FullyConnectedOn.

*/
public ";

%javamethodmodifiers  rtk::simple::GrayscaleConnectedClosingImageFilter::GetName "/**
std::string rtk::simple::GrayscaleConnectedClosingImageFilter::GetName() const

Name of this class

*/
public ";

%javamethodmodifiers  rtk::simple::GrayscaleConnectedClosingImageFilter::GetSeed "/**
std::vector<uint32_t> rtk::simple::GrayscaleConnectedClosingImageFilter::GetSeed() const

Set/Get the seed pixel for the segmentation

*/
public ";

%javamethodmodifiers  rtk::simple::GrayscaleConnectedClosingImageFilter::GrayscaleConnectedClosingImageFilter "/**
rtk::simple::GrayscaleConnectedClosingImageFilter::GrayscaleConnectedClosingImageFilter()

Default Constructor that takes no arguments and initializes default
parameters

*/
public ";

%javamethodmodifiers  rtk::simple::GrayscaleConnectedClosingImageFilter::SetFullyConnected "/**
Self& rtk::simple::GrayscaleConnectedClosingImageFilter::SetFullyConnected(bool FullyConnected)

Set/Get whether the connected components are defined strictly by face
connectivity or by face+edge+vertex connectivity. Default is
FullyConnectedOff. For objects that are 1 pixel wide, use
FullyConnectedOn.

*/
public ";

%javamethodmodifiers  rtk::simple::GrayscaleConnectedClosingImageFilter::SetSeed "/**
Self& rtk::simple::GrayscaleConnectedClosingImageFilter::SetSeed(const std::vector< uint32_t > &Seed)

Set/Get the seed pixel for the segmentation

*/
public ";

%javamethodmodifiers  rtk::simple::GrayscaleConnectedClosingImageFilter::ToString "/**
std::string rtk::simple::GrayscaleConnectedClosingImageFilter::ToString() const

Print ourselves out

*/
public ";

%javamethodmodifiers  rtk::simple::GrayscaleConnectedClosingImageFilter::~GrayscaleConnectedClosingImageFilter "/**
rtk::simple::GrayscaleConnectedClosingImageFilter::~GrayscaleConnectedClosingImageFilter()

Destructor

*/
public ";


%typemap(javaimports) rtk::simple::GrayscaleConnectedOpeningImageFilter "/**

Enhance pixels associated with a bright object (identified by a seed
pixel) where the bright object is surrounded by a darker object.


GrayscaleConnectedOpeningImagefilter is useful for enhancing bright
objects that are surrounded by dark borders. This filter makes it
easier to threshold the image and extract just the object of interest.

Geodesic morphology and the connected opening algorithm is described
in Chapter 6 of Pierre Soille's book \"Morphological Image Analysis:
Principles and Applications\", Second Edition, Springer, 2003.


See:
 GrayscaleGeodesicDilateImageFilter


 MorphologyImageFilter , GrayscaleDilateImageFilter , GrayscaleFunctionDilateImageFilter , BinaryDilateImageFilter

 rtk::simple::GrayscaleConnectedOpening for the procedural interface

 itk::GrayscaleConnectedOpeningImageFilter for the Doxygen on the original ITK class.


C++ includes: srtkGrayscaleConnectedOpeningImageFilter.h
*/"

%javamethodmodifiers  rtk::simple::GrayscaleConnectedOpeningImageFilter::Execute "/**
Image rtk::simple::GrayscaleConnectedOpeningImageFilter::Execute(const Image &image1)

Execute the filter on the input image

*/
public ";

%javamethodmodifiers  rtk::simple::GrayscaleConnectedOpeningImageFilter::Execute "/**
Image rtk::simple::GrayscaleConnectedOpeningImageFilter::Execute(const Image &image1, const std::vector< unsigned int > &seed, bool
fullyConnected)

Execute the filter on the input image with the given parameters

*/
public ";

%javamethodmodifiers  rtk::simple::GrayscaleConnectedOpeningImageFilter::FullyConnectedOff "/**
Self& rtk::simple::GrayscaleConnectedOpeningImageFilter::FullyConnectedOff()
*/
public ";

%javamethodmodifiers  rtk::simple::GrayscaleConnectedOpeningImageFilter::FullyConnectedOn "/**
Self& rtk::simple::GrayscaleConnectedOpeningImageFilter::FullyConnectedOn()

Set the value of FullyConnected to true or false respectfully.

*/
public ";

%javamethodmodifiers  rtk::simple::GrayscaleConnectedOpeningImageFilter::GetFullyConnected "/**
bool rtk::simple::GrayscaleConnectedOpeningImageFilter::GetFullyConnected() const

Set/Get whether the connected components are defined strictly by face
connectivity or by face+edge+vertex connectivity. Default is
FullyConnectedOff. For objects that are 1 pixel wide, use
FullyConnectedOn.

*/
public ";

%javamethodmodifiers  rtk::simple::GrayscaleConnectedOpeningImageFilter::GetName "/**
std::string rtk::simple::GrayscaleConnectedOpeningImageFilter::GetName() const

Name of this class

*/
public ";

%javamethodmodifiers  rtk::simple::GrayscaleConnectedOpeningImageFilter::GetSeed "/**
std::vector<unsigned int> rtk::simple::GrayscaleConnectedOpeningImageFilter::GetSeed() const

Set/Get the seed pixel for the segmentation

*/
public ";

%javamethodmodifiers  rtk::simple::GrayscaleConnectedOpeningImageFilter::GrayscaleConnectedOpeningImageFilter "/**
rtk::simple::GrayscaleConnectedOpeningImageFilter::GrayscaleConnectedOpeningImageFilter()

Default Constructor that takes no arguments and initializes default
parameters

*/
public ";

%javamethodmodifiers  rtk::simple::GrayscaleConnectedOpeningImageFilter::SetFullyConnected "/**
Self& rtk::simple::GrayscaleConnectedOpeningImageFilter::SetFullyConnected(bool FullyConnected)

Set/Get whether the connected components are defined strictly by face
connectivity or by face+edge+vertex connectivity. Default is
FullyConnectedOff. For objects that are 1 pixel wide, use
FullyConnectedOn.

*/
public ";

%javamethodmodifiers  rtk::simple::GrayscaleConnectedOpeningImageFilter::SetSeed "/**
Self& rtk::simple::GrayscaleConnectedOpeningImageFilter::SetSeed(const std::vector< unsigned int > &Seed)

Set/Get the seed pixel for the segmentation

*/
public ";

%javamethodmodifiers  rtk::simple::GrayscaleConnectedOpeningImageFilter::ToString "/**
std::string rtk::simple::GrayscaleConnectedOpeningImageFilter::ToString() const

Print ourselves out

*/
public ";

%javamethodmodifiers  rtk::simple::GrayscaleConnectedOpeningImageFilter::~GrayscaleConnectedOpeningImageFilter "/**
rtk::simple::GrayscaleConnectedOpeningImageFilter::~GrayscaleConnectedOpeningImageFilter()

Destructor

*/
public ";


%typemap(javaimports) rtk::simple::GrayscaleDilateImageFilter "/**

gray scale dilation of an image


Dilate an image using grayscale morphology. Dilation takes the maximum
of all the pixels identified by the structuring element.

The structuring element is assumed to be composed of binary values
(zero or one). Only elements of the structuring element having values
> 0 are candidates for affecting the center pixel.


See:
 MorphologyImageFilter , GrayscaleFunctionDilateImageFilter , BinaryDilateImageFilter
Wiki Examples:

All Examples

Dilate a grayscale image
See:
 rtk::simple::GrayscaleDilate for the procedural interface

 itk::GrayscaleDilateImageFilter for the Doxygen on the original ITK class.



C++ includes: srtkGrayscaleDilateImageFilter.h
*/"

%javamethodmodifiers  rtk::simple::GrayscaleDilateImageFilter::Execute "/**
Image rtk::simple::GrayscaleDilateImageFilter::Execute(const Image &image1)

Execute the filter on the input image

*/
public ";

%javamethodmodifiers  rtk::simple::GrayscaleDilateImageFilter::GetKernelRadius "/**
std::vector<uint32_t> rtk::simple::GrayscaleDilateImageFilter::GetKernelRadius() const
*/
public ";

%javamethodmodifiers  rtk::simple::GrayscaleDilateImageFilter::GetKernelType "/**
KernelEnum rtk::simple::GrayscaleDilateImageFilter::GetKernelType() const
*/
public ";

%javamethodmodifiers  rtk::simple::GrayscaleDilateImageFilter::GetName "/**
std::string rtk::simple::GrayscaleDilateImageFilter::GetName() const

Name of this class

*/
public ";

%javamethodmodifiers  rtk::simple::GrayscaleDilateImageFilter::GrayscaleDilateImageFilter "/**
rtk::simple::GrayscaleDilateImageFilter::GrayscaleDilateImageFilter()

Default Constructor that takes no arguments and initializes default
parameters

*/
public ";

%javamethodmodifiers  rtk::simple::GrayscaleDilateImageFilter::SetKernelRadius "/**
Self& rtk::simple::GrayscaleDilateImageFilter::SetKernelRadius(uint32_t r)

Kernel radius as a scale for isotropic structures

*/
public ";

%javamethodmodifiers  rtk::simple::GrayscaleDilateImageFilter::SetKernelRadius "/**
Self& rtk::simple::GrayscaleDilateImageFilter::SetKernelRadius(const std::vector< uint32_t > &r)

Set/Get the radius of the kernel structuring element as a vector.

If the dimension of the image is greater then the length of r, then
the radius will be padded. If it is less the r will be truncated.

*/
public ";

%javamethodmodifiers  rtk::simple::GrayscaleDilateImageFilter::SetKernelType "/**
Self& rtk::simple::GrayscaleDilateImageFilter::SetKernelType(KernelEnum t)

Set/Get the kernel or structuring elemenent used for the morphology

*/
public ";

%javamethodmodifiers  rtk::simple::GrayscaleDilateImageFilter::SetKernelType "/**
Self& rtk::simple::GrayscaleDilateImageFilter::SetKernelType(KernelType t)
*/
public ";

%javamethodmodifiers  rtk::simple::GrayscaleDilateImageFilter::ToString "/**
std::string rtk::simple::GrayscaleDilateImageFilter::ToString() const

Print ourselves out

*/
public ";

%javamethodmodifiers  rtk::simple::GrayscaleDilateImageFilter::~GrayscaleDilateImageFilter "/**
rtk::simple::GrayscaleDilateImageFilter::~GrayscaleDilateImageFilter()

Destructor

*/
public ";


%typemap(javaimports) rtk::simple::GrayscaleErodeImageFilter "/**

gray scale dilation of an image


Erode an image using grayscale morphology. Dilation takes the maximum
of all the pixels identified by the structuring element.

The structuring element is assumed to be composed of binary values
(zero or one). Only elements of the structuring element having values
> 0 are candidates for affecting the center pixel.


See:
 MorphologyImageFilter , GrayscaleFunctionErodeImageFilter , BinaryErodeImageFilter
Wiki Examples:

All Examples

Erode a grayscale image
See:
 rtk::simple::GrayscaleErode for the procedural interface

 itk::GrayscaleErodeImageFilter for the Doxygen on the original ITK class.



C++ includes: srtkGrayscaleErodeImageFilter.h
*/"

%javamethodmodifiers  rtk::simple::GrayscaleErodeImageFilter::Execute "/**
Image rtk::simple::GrayscaleErodeImageFilter::Execute(const Image &image1)

Execute the filter on the input image

*/
public ";

%javamethodmodifiers  rtk::simple::GrayscaleErodeImageFilter::GetKernelRadius "/**
std::vector<uint32_t> rtk::simple::GrayscaleErodeImageFilter::GetKernelRadius() const
*/
public ";

%javamethodmodifiers  rtk::simple::GrayscaleErodeImageFilter::GetKernelType "/**
KernelEnum rtk::simple::GrayscaleErodeImageFilter::GetKernelType() const
*/
public ";

%javamethodmodifiers  rtk::simple::GrayscaleErodeImageFilter::GetName "/**
std::string rtk::simple::GrayscaleErodeImageFilter::GetName() const

Name of this class

*/
public ";

%javamethodmodifiers  rtk::simple::GrayscaleErodeImageFilter::GrayscaleErodeImageFilter "/**
rtk::simple::GrayscaleErodeImageFilter::GrayscaleErodeImageFilter()

Default Constructor that takes no arguments and initializes default
parameters

*/
public ";

%javamethodmodifiers  rtk::simple::GrayscaleErodeImageFilter::SetKernelRadius "/**
Self& rtk::simple::GrayscaleErodeImageFilter::SetKernelRadius(uint32_t r)

Kernel radius as a scale for isotropic structures

*/
public ";

%javamethodmodifiers  rtk::simple::GrayscaleErodeImageFilter::SetKernelRadius "/**
Self& rtk::simple::GrayscaleErodeImageFilter::SetKernelRadius(const std::vector< uint32_t > &r)

Set/Get the radius of the kernel structuring element as a vector.

If the dimension of the image is greater then the length of r, then
the radius will be padded. If it is less the r will be truncated.

*/
public ";

%javamethodmodifiers  rtk::simple::GrayscaleErodeImageFilter::SetKernelType "/**
Self& rtk::simple::GrayscaleErodeImageFilter::SetKernelType(KernelEnum t)

Set/Get the kernel or structuring elemenent used for the morphology

*/
public ";

%javamethodmodifiers  rtk::simple::GrayscaleErodeImageFilter::SetKernelType "/**
Self& rtk::simple::GrayscaleErodeImageFilter::SetKernelType(KernelType t)
*/
public ";

%javamethodmodifiers  rtk::simple::GrayscaleErodeImageFilter::ToString "/**
std::string rtk::simple::GrayscaleErodeImageFilter::ToString() const

Print ourselves out

*/
public ";

%javamethodmodifiers  rtk::simple::GrayscaleErodeImageFilter::~GrayscaleErodeImageFilter "/**
rtk::simple::GrayscaleErodeImageFilter::~GrayscaleErodeImageFilter()

Destructor

*/
public ";


%typemap(javaimports) rtk::simple::GrayscaleFillholeImageFilter "/**

Remove local minima not connected to the boundary of the image.


GrayscaleFillholeImageFilter fills holes in a grayscale image. Holes are local minima in the
grayscale topography that are not connected to boundaries of the
image. Gray level values adjacent to a hole are extrapolated across
the hole.

This filter is used to smooth over local minima without affecting the
values of local maxima. If you take the difference between the output
of this filter and the original image (and perhaps threshold the
difference above a small value), you'll obtain a map of the local
minima.

This filter uses the ReconstructionByErosionImageFilter . It provides its own input as the \"mask\" input to the geodesic
erosion. The \"marker\" image for the geodesic erosion is constructed
such that boundary pixels match the boundary pixels of the input image
and the interior pixels are set to the maximum pixel value in the
input image.

Geodesic morphology and the Fillhole algorithm is described in Chapter
6 of Pierre Soille's book \"Morphological Image Analysis: Principles
and Applications\", Second Edition, Springer, 2003.


See:
 ReconstructionByErosionImageFilter


 MorphologyImageFilter , GrayscaleErodeImageFilter , GrayscaleFunctionErodeImageFilter , BinaryErodeImageFilter

 rtk::simple::GrayscaleFillhole for the procedural interface

 itk::GrayscaleFillholeImageFilter for the Doxygen on the original ITK class.


C++ includes: srtkGrayscaleFillholeImageFilter.h
*/"

%javamethodmodifiers  rtk::simple::GrayscaleFillholeImageFilter::Execute "/**
Image rtk::simple::GrayscaleFillholeImageFilter::Execute(const Image &image1)

Execute the filter on the input image

*/
public ";

%javamethodmodifiers  rtk::simple::GrayscaleFillholeImageFilter::Execute "/**
Image rtk::simple::GrayscaleFillholeImageFilter::Execute(const Image &image1, bool fullyConnected)

Execute the filter on the input image with the given parameters

*/
public ";

%javamethodmodifiers  rtk::simple::GrayscaleFillholeImageFilter::FullyConnectedOff "/**
Self& rtk::simple::GrayscaleFillholeImageFilter::FullyConnectedOff()
*/
public ";

%javamethodmodifiers  rtk::simple::GrayscaleFillholeImageFilter::FullyConnectedOn "/**
Self& rtk::simple::GrayscaleFillholeImageFilter::FullyConnectedOn()

Set the value of FullyConnected to true or false respectfully.

*/
public ";

%javamethodmodifiers  rtk::simple::GrayscaleFillholeImageFilter::GetFullyConnected "/**
bool rtk::simple::GrayscaleFillholeImageFilter::GetFullyConnected() const

Set/Get whether the connected components are defined strictly by face
connectivity or by face+edge+vertex connectivity. Default is
FullyConnectedOff. For objects that are 1 pixel wide, use
FullyConnectedOn.

*/
public ";

%javamethodmodifiers  rtk::simple::GrayscaleFillholeImageFilter::GetName "/**
std::string rtk::simple::GrayscaleFillholeImageFilter::GetName() const

Name of this class

*/
public ";

%javamethodmodifiers  rtk::simple::GrayscaleFillholeImageFilter::GrayscaleFillholeImageFilter "/**
rtk::simple::GrayscaleFillholeImageFilter::GrayscaleFillholeImageFilter()

Default Constructor that takes no arguments and initializes default
parameters

*/
public ";

%javamethodmodifiers  rtk::simple::GrayscaleFillholeImageFilter::SetFullyConnected "/**
Self& rtk::simple::GrayscaleFillholeImageFilter::SetFullyConnected(bool FullyConnected)

Set/Get whether the connected components are defined strictly by face
connectivity or by face+edge+vertex connectivity. Default is
FullyConnectedOff. For objects that are 1 pixel wide, use
FullyConnectedOn.

*/
public ";

%javamethodmodifiers  rtk::simple::GrayscaleFillholeImageFilter::ToString "/**
std::string rtk::simple::GrayscaleFillholeImageFilter::ToString() const

Print ourselves out

*/
public ";

%javamethodmodifiers  rtk::simple::GrayscaleFillholeImageFilter::~GrayscaleFillholeImageFilter "/**
rtk::simple::GrayscaleFillholeImageFilter::~GrayscaleFillholeImageFilter()

Destructor

*/
public ";


%typemap(javaimports) rtk::simple::GrayscaleGeodesicDilateImageFilter "/**

geodesic gray scale dilation of an image


Geodesic dilation operates on a \"marker\" image and a \"mask\" image.
The marker image is dilated using an elementary structuring element
(neighborhood of radius one using only the face connected neighbors).
The resulting image is then compared with the mask image. The output
image is the pixelwise minimum of the dilated marker image and the
mask image.

Geodesic dilation is run either one iteration or until convergence. In
the convergence case, the filter is equivalent to \"reconstruction by
dilation\". This filter is implemented to handle both scenarios. The
one iteration case is multi-threaded. The convergence case is
delegated to another instance of the same filter (but configured to
run a single iteration).

The marker image must be less than or equal to the mask image (on a
pixel by pixel basis).

Geodesic morphology is described in Chapter 6 of Pierre Soille's book
\"Morphological Image Analysis: Principles and Applications\", Second
Edition, Springer, 2003.

A noniterative version of this algorithm can be found in the ReconstructionByDilationImageFilter . This noniterative solution is much faster than the implementation
provided here. All ITK filters that previously used
GrayscaleGeodesicDiliateImageFilter as part of their implementation
have been converted to use the ReconstructionByDilationImageFilter . The GrayscaleGeodesicDilateImageFilter is maintained for backward compatibility.


See:
 MorphologyImageFilter , GrayscaleDilateImageFilter , GrayscaleFunctionDilateImageFilter , BinaryDilateImageFilter , ReconstructionByDilationImageFilter

 rtk::simple::GrayscaleGeodesicDilate for the procedural interface

 itk::GrayscaleGeodesicDilateImageFilter for the Doxygen on the original ITK class.


C++ includes: srtkGrayscaleGeodesicDilateImageFilter.h
*/"

%javamethodmodifiers  rtk::simple::GrayscaleGeodesicDilateImageFilter::Execute "/**
Image rtk::simple::GrayscaleGeodesicDilateImageFilter::Execute(const Image &image1, const Image &image2)

Execute the filter on the input images

*/
public ";

%javamethodmodifiers  rtk::simple::GrayscaleGeodesicDilateImageFilter::Execute "/**
Image rtk::simple::GrayscaleGeodesicDilateImageFilter::Execute(const Image &image1, const Image &image2, bool runOneIteration, bool
fullyConnected)

Execute the filter on the input images with the given parameters

*/
public ";

%javamethodmodifiers  rtk::simple::GrayscaleGeodesicDilateImageFilter::FullyConnectedOff "/**
Self& rtk::simple::GrayscaleGeodesicDilateImageFilter::FullyConnectedOff()
*/
public ";

%javamethodmodifiers  rtk::simple::GrayscaleGeodesicDilateImageFilter::FullyConnectedOn "/**
Self& rtk::simple::GrayscaleGeodesicDilateImageFilter::FullyConnectedOn()

Set the value of FullyConnected to true or false respectfully.

*/
public ";

%javamethodmodifiers  rtk::simple::GrayscaleGeodesicDilateImageFilter::GetFullyConnected "/**
bool rtk::simple::GrayscaleGeodesicDilateImageFilter::GetFullyConnected() const

Set/Get whether the connected components are defined strictly by face
connectivity or by face+edge+vertex connectivity. Default is
FullyConnectedOff. For objects that are 1 pixel wide, use
FullyConnectedOn.

*/
public ";

%javamethodmodifiers  rtk::simple::GrayscaleGeodesicDilateImageFilter::GetName "/**
std::string rtk::simple::GrayscaleGeodesicDilateImageFilter::GetName() const

Name of this class

*/
public ";

%javamethodmodifiers  rtk::simple::GrayscaleGeodesicDilateImageFilter::GetRunOneIteration "/**
bool rtk::simple::GrayscaleGeodesicDilateImageFilter::GetRunOneIteration() const

Set/Get whether the filter should run one iteration or until
convergence. When run to convergence, this filter is equivalent to
\"reconstruction by dilation\". Default is off.

*/
public ";

%javamethodmodifiers  rtk::simple::GrayscaleGeodesicDilateImageFilter::GrayscaleGeodesicDilateImageFilter "/**
rtk::simple::GrayscaleGeodesicDilateImageFilter::GrayscaleGeodesicDilateImageFilter()

Default Constructor that takes no arguments and initializes default
parameters

*/
public ";

%javamethodmodifiers  rtk::simple::GrayscaleGeodesicDilateImageFilter::RunOneIterationOff "/**
Self& rtk::simple::GrayscaleGeodesicDilateImageFilter::RunOneIterationOff()
*/
public ";

%javamethodmodifiers  rtk::simple::GrayscaleGeodesicDilateImageFilter::RunOneIterationOn "/**
Self& rtk::simple::GrayscaleGeodesicDilateImageFilter::RunOneIterationOn()

Set the value of RunOneIteration to true or false respectfully.

*/
public ";

%javamethodmodifiers  rtk::simple::GrayscaleGeodesicDilateImageFilter::SetFullyConnected "/**
Self& rtk::simple::GrayscaleGeodesicDilateImageFilter::SetFullyConnected(bool FullyConnected)

Set/Get whether the connected components are defined strictly by face
connectivity or by face+edge+vertex connectivity. Default is
FullyConnectedOff. For objects that are 1 pixel wide, use
FullyConnectedOn.

*/
public ";

%javamethodmodifiers  rtk::simple::GrayscaleGeodesicDilateImageFilter::SetRunOneIteration "/**
Self& rtk::simple::GrayscaleGeodesicDilateImageFilter::SetRunOneIteration(bool RunOneIteration)

Set/Get whether the filter should run one iteration or until
convergence. When run to convergence, this filter is equivalent to
\"reconstruction by dilation\". Default is off.

*/
public ";

%javamethodmodifiers  rtk::simple::GrayscaleGeodesicDilateImageFilter::ToString "/**
std::string rtk::simple::GrayscaleGeodesicDilateImageFilter::ToString() const

Print ourselves out

*/
public ";

%javamethodmodifiers  rtk::simple::GrayscaleGeodesicDilateImageFilter::~GrayscaleGeodesicDilateImageFilter "/**
rtk::simple::GrayscaleGeodesicDilateImageFilter::~GrayscaleGeodesicDilateImageFilter()

Destructor

*/
public ";


%typemap(javaimports) rtk::simple::GrayscaleGeodesicErodeImageFilter "/**

geodesic gray scale erosion of an image


Geodesic erosion operates on a \"marker\" image and a \"mask\" image.
The marker image is eroded using an elementary structuring element
(neighborhood of radius one using only the face connected neighbors).
The resulting image is then compared with the mask image. The output
image is the pixelwise maximum of the eroded marker image and the mask
image.

Geodesic erosion is run either one iteration or until convergence. In
the convergence case, the filter is equivalent to \"reconstruction by
erosion\". This filter is implemented to handle both scenarios. The
one iteration case is multi-threaded. The convergence case is
delegated to another instance of the same filter (but configured to
run a single iteration).

The marker image must be greater than or equal to the mask image (on a
pixel by pixel basis).

Geodesic morphology is described in Chapter 6 of Pierre Soille's book
\"Morphological Image Analysis: Principles and Applications\", Second
Edition, Springer, 2003.

A noniterative version of this algorithm can be found in the ReconstructionByErosionImageFilter . This noniterative solution is much faster than the implementation
provided here. All ITK filters that previously used GrayscaleGeodesicErodeImageFilter as part of their implementation have been converted to use the ReconstructionByErosionImageFilter . The GrayscaleGeodesicErodeImageFilter is maintained for backward compatibility.


See:
 MorphologyImageFilter , GrayscaleErodeImageFilter , GrayscaleFunctionErodeImageFilter , BinaryErodeImageFilter , ReconstructionByErosionImageFilter

 rtk::simple::GrayscaleGeodesicErode for the procedural interface

 itk::GrayscaleGeodesicErodeImageFilter for the Doxygen on the original ITK class.


C++ includes: srtkGrayscaleGeodesicErodeImageFilter.h
*/"

%javamethodmodifiers  rtk::simple::GrayscaleGeodesicErodeImageFilter::Execute "/**
Image rtk::simple::GrayscaleGeodesicErodeImageFilter::Execute(const Image &image1, const Image &image2)

Execute the filter on the input images

*/
public ";

%javamethodmodifiers  rtk::simple::GrayscaleGeodesicErodeImageFilter::Execute "/**
Image rtk::simple::GrayscaleGeodesicErodeImageFilter::Execute(const Image &image1, const Image &image2, bool runOneIteration, bool
fullyConnected)

Execute the filter on the input images with the given parameters

*/
public ";

%javamethodmodifiers  rtk::simple::GrayscaleGeodesicErodeImageFilter::FullyConnectedOff "/**
Self& rtk::simple::GrayscaleGeodesicErodeImageFilter::FullyConnectedOff()
*/
public ";

%javamethodmodifiers  rtk::simple::GrayscaleGeodesicErodeImageFilter::FullyConnectedOn "/**
Self& rtk::simple::GrayscaleGeodesicErodeImageFilter::FullyConnectedOn()

Set the value of FullyConnected to true or false respectfully.

*/
public ";

%javamethodmodifiers  rtk::simple::GrayscaleGeodesicErodeImageFilter::GetFullyConnected "/**
bool rtk::simple::GrayscaleGeodesicErodeImageFilter::GetFullyConnected() const

Set/Get whether the connected components are defined strictly by face
connectivity or by face+edge+vertex connectivity. Default is
FullyConnectedOff. For objects that are 1 pixel wide, use
FullyConnectedOn.

*/
public ";

%javamethodmodifiers  rtk::simple::GrayscaleGeodesicErodeImageFilter::GetName "/**
std::string rtk::simple::GrayscaleGeodesicErodeImageFilter::GetName() const

Name of this class

*/
public ";

%javamethodmodifiers  rtk::simple::GrayscaleGeodesicErodeImageFilter::GetRunOneIteration "/**
bool rtk::simple::GrayscaleGeodesicErodeImageFilter::GetRunOneIteration() const

Set/Get whether the filter should run one iteration or until
convergence. When run to convergence, this filter is equivalent to
\"reconstruction by erosion\". Default is off.

*/
public ";

%javamethodmodifiers  rtk::simple::GrayscaleGeodesicErodeImageFilter::GrayscaleGeodesicErodeImageFilter "/**
rtk::simple::GrayscaleGeodesicErodeImageFilter::GrayscaleGeodesicErodeImageFilter()

Default Constructor that takes no arguments and initializes default
parameters

*/
public ";

%javamethodmodifiers  rtk::simple::GrayscaleGeodesicErodeImageFilter::RunOneIterationOff "/**
Self& rtk::simple::GrayscaleGeodesicErodeImageFilter::RunOneIterationOff()
*/
public ";

%javamethodmodifiers  rtk::simple::GrayscaleGeodesicErodeImageFilter::RunOneIterationOn "/**
Self& rtk::simple::GrayscaleGeodesicErodeImageFilter::RunOneIterationOn()

Set the value of RunOneIteration to true or false respectfully.

*/
public ";

%javamethodmodifiers  rtk::simple::GrayscaleGeodesicErodeImageFilter::SetFullyConnected "/**
Self& rtk::simple::GrayscaleGeodesicErodeImageFilter::SetFullyConnected(bool FullyConnected)

Set/Get whether the connected components are defined strictly by face
connectivity or by face+edge+vertex connectivity. Default is
FullyConnectedOff. For objects that are 1 pixel wide, use
FullyConnectedOn.

*/
public ";

%javamethodmodifiers  rtk::simple::GrayscaleGeodesicErodeImageFilter::SetRunOneIteration "/**
Self& rtk::simple::GrayscaleGeodesicErodeImageFilter::SetRunOneIteration(bool RunOneIteration)

Set/Get whether the filter should run one iteration or until
convergence. When run to convergence, this filter is equivalent to
\"reconstruction by erosion\". Default is off.

*/
public ";

%javamethodmodifiers  rtk::simple::GrayscaleGeodesicErodeImageFilter::ToString "/**
std::string rtk::simple::GrayscaleGeodesicErodeImageFilter::ToString() const

Print ourselves out

*/
public ";

%javamethodmodifiers  rtk::simple::GrayscaleGeodesicErodeImageFilter::~GrayscaleGeodesicErodeImageFilter "/**
rtk::simple::GrayscaleGeodesicErodeImageFilter::~GrayscaleGeodesicErodeImageFilter()

Destructor

*/
public ";


%typemap(javaimports) rtk::simple::GrayscaleGrindPeakImageFilter "/**

Remove local maxima not connected to the boundary of the image.


GrayscaleGrindPeakImageFilter removes peaks in a grayscale image. Peaks are local maxima in the
grayscale topography that are not connected to boundaries of the
image. Gray level values adjacent to a peak are extrapolated through
the peak.

This filter is used to smooth over local maxima without affecting the
values of local minima. If you take the difference between the output
of this filter and the original image (and perhaps threshold the
difference above a small value), you'll obtain a map of the local
maxima.

This filter uses the GrayscaleGeodesicDilateImageFilter . It provides its own input as the \"mask\" input to the geodesic
erosion. The \"marker\" image for the geodesic erosion is constructed
such that boundary pixels match the boundary pixels of the input image
and the interior pixels are set to the minimum pixel value in the
input image.

This filter is the dual to the GrayscaleFillholeImageFilter which implements the Fillhole algorithm. Since it is a dual, it is
somewhat superfluous but is provided as a convenience.

Geodesic morphology and the Fillhole algorithm is described in Chapter
6 of Pierre Soille's book \"Morphological Image Analysis: Principles
and Applications\", Second Edition, Springer, 2003.


See:
 GrayscaleGeodesicDilateImageFilter


 MorphologyImageFilter , GrayscaleDilateImageFilter , GrayscaleFunctionDilateImageFilter , BinaryDilateImageFilter

 rtk::simple::GrayscaleGrindPeak for the procedural interface

 itk::GrayscaleGrindPeakImageFilter for the Doxygen on the original ITK class.


C++ includes: srtkGrayscaleGrindPeakImageFilter.h
*/"

%javamethodmodifiers  rtk::simple::GrayscaleGrindPeakImageFilter::Execute "/**
Image rtk::simple::GrayscaleGrindPeakImageFilter::Execute(const Image &image1)

Execute the filter on the input image

*/
public ";

%javamethodmodifiers  rtk::simple::GrayscaleGrindPeakImageFilter::Execute "/**
Image rtk::simple::GrayscaleGrindPeakImageFilter::Execute(const Image &image1, bool fullyConnected)

Execute the filter on the input image with the given parameters

*/
public ";

%javamethodmodifiers  rtk::simple::GrayscaleGrindPeakImageFilter::FullyConnectedOff "/**
Self& rtk::simple::GrayscaleGrindPeakImageFilter::FullyConnectedOff()
*/
public ";

%javamethodmodifiers  rtk::simple::GrayscaleGrindPeakImageFilter::FullyConnectedOn "/**
Self& rtk::simple::GrayscaleGrindPeakImageFilter::FullyConnectedOn()

Set the value of FullyConnected to true or false respectfully.

*/
public ";

%javamethodmodifiers  rtk::simple::GrayscaleGrindPeakImageFilter::GetFullyConnected "/**
bool rtk::simple::GrayscaleGrindPeakImageFilter::GetFullyConnected() const

Set/Get whether the connected components are defined strictly by face
connectivity or by face+edge+vertex connectivity. Default is
FullyConnectedOff. For objects that are 1 pixel wide, use
FullyConnectedOn.

*/
public ";

%javamethodmodifiers  rtk::simple::GrayscaleGrindPeakImageFilter::GetName "/**
std::string rtk::simple::GrayscaleGrindPeakImageFilter::GetName() const

Name of this class

*/
public ";

%javamethodmodifiers  rtk::simple::GrayscaleGrindPeakImageFilter::GrayscaleGrindPeakImageFilter "/**
rtk::simple::GrayscaleGrindPeakImageFilter::GrayscaleGrindPeakImageFilter()

Default Constructor that takes no arguments and initializes default
parameters

*/
public ";

%javamethodmodifiers  rtk::simple::GrayscaleGrindPeakImageFilter::SetFullyConnected "/**
Self& rtk::simple::GrayscaleGrindPeakImageFilter::SetFullyConnected(bool FullyConnected)

Set/Get whether the connected components are defined strictly by face
connectivity or by face+edge+vertex connectivity. Default is
FullyConnectedOff. For objects that are 1 pixel wide, use
FullyConnectedOn.

*/
public ";

%javamethodmodifiers  rtk::simple::GrayscaleGrindPeakImageFilter::ToString "/**
std::string rtk::simple::GrayscaleGrindPeakImageFilter::ToString() const

Print ourselves out

*/
public ";

%javamethodmodifiers  rtk::simple::GrayscaleGrindPeakImageFilter::~GrayscaleGrindPeakImageFilter "/**
rtk::simple::GrayscaleGrindPeakImageFilter::~GrayscaleGrindPeakImageFilter()

Destructor

*/
public ";


%typemap(javaimports) rtk::simple::GrayscaleMorphologicalClosingImageFilter "/**

gray scale dilation of an image


Erode an image using grayscale morphology. Dilation takes the maximum
of all the pixels identified by the structuring element.

The structuring element is assumed to be composed of binary values
(zero or one). Only elements of the structuring element having values
> 0 are candidates for affecting the center pixel.


See:
 MorphologyImageFilter , GrayscaleFunctionErodeImageFilter , BinaryErodeImageFilter

 rtk::simple::GrayscaleMorphologicalClosing for the procedural interface

 itk::GrayscaleMorphologicalClosingImageFilter for the Doxygen on the original ITK class.


C++ includes: srtkGrayscaleMorphologicalClosingImageFilter.h
*/"

%javamethodmodifiers  rtk::simple::GrayscaleMorphologicalClosingImageFilter::Execute "/**
Image rtk::simple::GrayscaleMorphologicalClosingImageFilter::Execute(const Image &image1)

Execute the filter on the input image

*/
public ";

%javamethodmodifiers  rtk::simple::GrayscaleMorphologicalClosingImageFilter::Execute "/**
Image rtk::simple::GrayscaleMorphologicalClosingImageFilter::Execute(const Image &image1, bool safeBorder)

Execute the filter on the input image with the given parameters

*/
public ";

%javamethodmodifiers  rtk::simple::GrayscaleMorphologicalClosingImageFilter::GetKernelRadius "/**
std::vector<uint32_t> rtk::simple::GrayscaleMorphologicalClosingImageFilter::GetKernelRadius() const
*/
public ";

%javamethodmodifiers  rtk::simple::GrayscaleMorphologicalClosingImageFilter::GetKernelType "/**
KernelEnum rtk::simple::GrayscaleMorphologicalClosingImageFilter::GetKernelType() const
*/
public ";

%javamethodmodifiers  rtk::simple::GrayscaleMorphologicalClosingImageFilter::GetName "/**
std::string rtk::simple::GrayscaleMorphologicalClosingImageFilter::GetName() const

Name of this class

*/
public ";

%javamethodmodifiers  rtk::simple::GrayscaleMorphologicalClosingImageFilter::GetSafeBorder "/**
bool rtk::simple::GrayscaleMorphologicalClosingImageFilter::GetSafeBorder() const

A safe border is added to input image to avoid borders effects and
remove it once the closing is done

*/
public ";

%javamethodmodifiers  rtk::simple::GrayscaleMorphologicalClosingImageFilter::GrayscaleMorphologicalClosingImageFilter "/**
rtk::simple::GrayscaleMorphologicalClosingImageFilter::GrayscaleMorphologicalClosingImageFilter()

Default Constructor that takes no arguments and initializes default
parameters

*/
public ";

%javamethodmodifiers  rtk::simple::GrayscaleMorphologicalClosingImageFilter::SafeBorderOff "/**
Self& rtk::simple::GrayscaleMorphologicalClosingImageFilter::SafeBorderOff()
*/
public ";

%javamethodmodifiers  rtk::simple::GrayscaleMorphologicalClosingImageFilter::SafeBorderOn "/**
Self& rtk::simple::GrayscaleMorphologicalClosingImageFilter::SafeBorderOn()

Set the value of SafeBorder to true or false respectfully.

*/
public ";

%javamethodmodifiers  rtk::simple::GrayscaleMorphologicalClosingImageFilter::SetKernelRadius "/**
Self& rtk::simple::GrayscaleMorphologicalClosingImageFilter::SetKernelRadius(uint32_t r)

Kernel radius as a scale for isotropic structures

*/
public ";

%javamethodmodifiers  rtk::simple::GrayscaleMorphologicalClosingImageFilter::SetKernelRadius "/**
Self& rtk::simple::GrayscaleMorphologicalClosingImageFilter::SetKernelRadius(const std::vector< uint32_t > &r)

Set/Get the radius of the kernel structuring element as a vector.

If the dimension of the image is greater then the length of r, then
the radius will be padded. If it is less the r will be truncated.

*/
public ";

%javamethodmodifiers  rtk::simple::GrayscaleMorphologicalClosingImageFilter::SetKernelType "/**
Self& rtk::simple::GrayscaleMorphologicalClosingImageFilter::SetKernelType(KernelEnum t)

Set/Get the kernel or structuring elemenent used for the morphology

*/
public ";

%javamethodmodifiers  rtk::simple::GrayscaleMorphologicalClosingImageFilter::SetKernelType "/**
Self& rtk::simple::GrayscaleMorphologicalClosingImageFilter::SetKernelType(KernelType t)
*/
public ";

%javamethodmodifiers  rtk::simple::GrayscaleMorphologicalClosingImageFilter::SetSafeBorder "/**
Self& rtk::simple::GrayscaleMorphologicalClosingImageFilter::SetSafeBorder(bool SafeBorder)

A safe border is added to input image to avoid borders effects and
remove it once the closing is done

*/
public ";

%javamethodmodifiers  rtk::simple::GrayscaleMorphologicalClosingImageFilter::ToString "/**
std::string rtk::simple::GrayscaleMorphologicalClosingImageFilter::ToString() const

Print ourselves out

*/
public ";

%javamethodmodifiers  rtk::simple::GrayscaleMorphologicalClosingImageFilter::~GrayscaleMorphologicalClosingImageFilter "/**
rtk::simple::GrayscaleMorphologicalClosingImageFilter::~GrayscaleMorphologicalClosingImageFilter()

Destructor

*/
public ";


%typemap(javaimports) rtk::simple::GrayscaleMorphologicalOpeningImageFilter "/**

gray scale dilation of an image


Dilate an image using grayscale morphology. Dilation takes the maximum
of all the pixels identified by the structuring element.

The structuring element is assumed to be composed of binary values
(zero or one). Only elements of the structuring element having values
> 0 are candidates for affecting the center pixel.


See:
 MorphologyImageFilter , GrayscaleFunctionDilateImageFilter , BinaryDilateImageFilter

 rtk::simple::GrayscaleMorphologicalOpening for the procedural interface

 itk::GrayscaleMorphologicalOpeningImageFilter for the Doxygen on the original ITK class.


C++ includes: srtkGrayscaleMorphologicalOpeningImageFilter.h
*/"

%javamethodmodifiers  rtk::simple::GrayscaleMorphologicalOpeningImageFilter::Execute "/**
Image rtk::simple::GrayscaleMorphologicalOpeningImageFilter::Execute(const Image &image1)

Execute the filter on the input image

*/
public ";

%javamethodmodifiers  rtk::simple::GrayscaleMorphologicalOpeningImageFilter::Execute "/**
Image rtk::simple::GrayscaleMorphologicalOpeningImageFilter::Execute(const Image &image1, bool safeBorder)

Execute the filter on the input image with the given parameters

*/
public ";

%javamethodmodifiers  rtk::simple::GrayscaleMorphologicalOpeningImageFilter::GetKernelRadius "/**
std::vector<uint32_t> rtk::simple::GrayscaleMorphologicalOpeningImageFilter::GetKernelRadius() const
*/
public ";

%javamethodmodifiers  rtk::simple::GrayscaleMorphologicalOpeningImageFilter::GetKernelType "/**
KernelEnum rtk::simple::GrayscaleMorphologicalOpeningImageFilter::GetKernelType() const
*/
public ";

%javamethodmodifiers  rtk::simple::GrayscaleMorphologicalOpeningImageFilter::GetName "/**
std::string rtk::simple::GrayscaleMorphologicalOpeningImageFilter::GetName() const

Name of this class

*/
public ";

%javamethodmodifiers  rtk::simple::GrayscaleMorphologicalOpeningImageFilter::GetSafeBorder "/**
bool rtk::simple::GrayscaleMorphologicalOpeningImageFilter::GetSafeBorder() const

A safe border is added to input image to avoid borders effects and
remove it once the closing is done

*/
public ";

%javamethodmodifiers  rtk::simple::GrayscaleMorphologicalOpeningImageFilter::GrayscaleMorphologicalOpeningImageFilter "/**
rtk::simple::GrayscaleMorphologicalOpeningImageFilter::GrayscaleMorphologicalOpeningImageFilter()

Default Constructor that takes no arguments and initializes default
parameters

*/
public ";

%javamethodmodifiers  rtk::simple::GrayscaleMorphologicalOpeningImageFilter::SafeBorderOff "/**
Self& rtk::simple::GrayscaleMorphologicalOpeningImageFilter::SafeBorderOff()
*/
public ";

%javamethodmodifiers  rtk::simple::GrayscaleMorphologicalOpeningImageFilter::SafeBorderOn "/**
Self& rtk::simple::GrayscaleMorphologicalOpeningImageFilter::SafeBorderOn()

Set the value of SafeBorder to true or false respectfully.

*/
public ";

%javamethodmodifiers  rtk::simple::GrayscaleMorphologicalOpeningImageFilter::SetKernelRadius "/**
Self& rtk::simple::GrayscaleMorphologicalOpeningImageFilter::SetKernelRadius(uint32_t r)

Kernel radius as a scale for isotropic structures

*/
public ";

%javamethodmodifiers  rtk::simple::GrayscaleMorphologicalOpeningImageFilter::SetKernelRadius "/**
Self& rtk::simple::GrayscaleMorphologicalOpeningImageFilter::SetKernelRadius(const std::vector< uint32_t > &r)

Set/Get the radius of the kernel structuring element as a vector.

If the dimension of the image is greater then the length of r, then
the radius will be padded. If it is less the r will be truncated.

*/
public ";

%javamethodmodifiers  rtk::simple::GrayscaleMorphologicalOpeningImageFilter::SetKernelType "/**
Self& rtk::simple::GrayscaleMorphologicalOpeningImageFilter::SetKernelType(KernelEnum t)

Set/Get the kernel or structuring elemenent used for the morphology

*/
public ";

%javamethodmodifiers  rtk::simple::GrayscaleMorphologicalOpeningImageFilter::SetKernelType "/**
Self& rtk::simple::GrayscaleMorphologicalOpeningImageFilter::SetKernelType(KernelType t)
*/
public ";

%javamethodmodifiers  rtk::simple::GrayscaleMorphologicalOpeningImageFilter::SetSafeBorder "/**
Self& rtk::simple::GrayscaleMorphologicalOpeningImageFilter::SetSafeBorder(bool SafeBorder)

A safe border is added to input image to avoid borders effects and
remove it once the closing is done

*/
public ";

%javamethodmodifiers  rtk::simple::GrayscaleMorphologicalOpeningImageFilter::ToString "/**
std::string rtk::simple::GrayscaleMorphologicalOpeningImageFilter::ToString() const

Print ourselves out

*/
public ";

%javamethodmodifiers  rtk::simple::GrayscaleMorphologicalOpeningImageFilter::~GrayscaleMorphologicalOpeningImageFilter "/**
rtk::simple::GrayscaleMorphologicalOpeningImageFilter::~GrayscaleMorphologicalOpeningImageFilter()

Destructor

*/
public ";


%typemap(javaimports) rtk::simple::GreaterEqualImageFilter "/**

Implements pixel-wise generic operation of two images, or of an image
and a constant.


This class is parameterized over the types of the two input images and
the type of the output image. It is also parameterized by the
operation to be applied. A Functor style is used.

The constant must be of the same type than the pixel type of the
corresponding image. It is wrapped in a SimpleDataObjectDecorator so it can be updated through the pipeline. The SetConstant() and
GetConstant() methods are provided as shortcuts to set or get the
constant value without manipulating the decorator.


See:
 UnaryFunctorImageFilter TernaryFunctorImageFilter
Wiki Examples:

All Examples

Apply a predefined operation to corresponding pixels in two images

Apply a custom operation to corresponding pixels in two images
See:
 rtk::simple::GreaterEqual for the procedural interface

 itk::BinaryFunctorImageFilter for the Doxygen on the original ITK class.



C++ includes: srtkGreaterEqualImageFilter.h
*/"

%javamethodmodifiers  rtk::simple::GreaterEqualImageFilter::Execute "/**
Image rtk::simple::GreaterEqualImageFilter::Execute(const Image &image1, const Image &image2)

Execute the filter on the input images

*/
public ";

%javamethodmodifiers  rtk::simple::GreaterEqualImageFilter::Execute "/**
Image rtk::simple::GreaterEqualImageFilter::Execute(const Image &image1, const Image &image2, uint8_t backgroundValue,
uint8_t foregroundValue)

Execute the filter on the input images with the given parameters

*/
public ";

%javamethodmodifiers  rtk::simple::GreaterEqualImageFilter::Execute "/**
Image rtk::simple::GreaterEqualImageFilter::Execute(const Image &image1, double constant)

Execute the filter with an image and a constant

*/
public ";

%javamethodmodifiers  rtk::simple::GreaterEqualImageFilter::Execute "/**
Image rtk::simple::GreaterEqualImageFilter::Execute(double constant, const Image &image2)
*/
public ";

%javamethodmodifiers  rtk::simple::GreaterEqualImageFilter::Execute "/**
Image rtk::simple::GreaterEqualImageFilter::Execute(const Image &image1, double constant, uint8_t backgroundValue,
uint8_t foregroundValue)

Execute the filter on an image and a constant with the given
parameters

*/
public ";

%javamethodmodifiers  rtk::simple::GreaterEqualImageFilter::Execute "/**
Image rtk::simple::GreaterEqualImageFilter::Execute(double constant, const Image &image2, uint8_t backgroundValue,
uint8_t foregroundValue)
*/
public ";

%javamethodmodifiers  rtk::simple::GreaterEqualImageFilter::GetBackgroundValue "/**
uint8_t rtk::simple::GreaterEqualImageFilter::GetBackgroundValue() const

Set/Get the value used to mark the false pixels of the operator.

*/
public ";

%javamethodmodifiers  rtk::simple::GreaterEqualImageFilter::GetForegroundValue "/**
uint8_t rtk::simple::GreaterEqualImageFilter::GetForegroundValue() const

Set/Get the value used to mark the true pixels of the operator.

*/
public ";

%javamethodmodifiers  rtk::simple::GreaterEqualImageFilter::GetName "/**
std::string rtk::simple::GreaterEqualImageFilter::GetName() const

Name of this class

*/
public ";

%javamethodmodifiers  rtk::simple::GreaterEqualImageFilter::GreaterEqualImageFilter "/**
rtk::simple::GreaterEqualImageFilter::GreaterEqualImageFilter()

Default Constructor that takes no arguments and initializes default
parameters

*/
public ";

%javamethodmodifiers  rtk::simple::GreaterEqualImageFilter::SetBackgroundValue "/**
Self& rtk::simple::GreaterEqualImageFilter::SetBackgroundValue(uint8_t BackgroundValue)

Set/Get the value used to mark the false pixels of the operator.

*/
public ";

%javamethodmodifiers  rtk::simple::GreaterEqualImageFilter::SetForegroundValue "/**
Self& rtk::simple::GreaterEqualImageFilter::SetForegroundValue(uint8_t ForegroundValue)

Set/Get the value used to mark the true pixels of the operator.

*/
public ";

%javamethodmodifiers  rtk::simple::GreaterEqualImageFilter::ToString "/**
std::string rtk::simple::GreaterEqualImageFilter::ToString() const

Print ourselves out

*/
public ";

%javamethodmodifiers  rtk::simple::GreaterEqualImageFilter::~GreaterEqualImageFilter "/**
rtk::simple::GreaterEqualImageFilter::~GreaterEqualImageFilter()

Destructor

*/
public ";


%typemap(javaimports) rtk::simple::GreaterImageFilter "/**

Implements pixel-wise generic operation of two images, or of an image
and a constant.


This class is parameterized over the types of the two input images and
the type of the output image. It is also parameterized by the
operation to be applied. A Functor style is used.

The constant must be of the same type than the pixel type of the
corresponding image. It is wrapped in a SimpleDataObjectDecorator so it can be updated through the pipeline. The SetConstant() and
GetConstant() methods are provided as shortcuts to set or get the
constant value without manipulating the decorator.


See:
 UnaryFunctorImageFilter TernaryFunctorImageFilter
Wiki Examples:

All Examples

Apply a predefined operation to corresponding pixels in two images

Apply a custom operation to corresponding pixels in two images
See:
 rtk::simple::Greater for the procedural interface

 itk::BinaryFunctorImageFilter for the Doxygen on the original ITK class.



C++ includes: srtkGreaterImageFilter.h
*/"

%javamethodmodifiers  rtk::simple::GreaterImageFilter::Execute "/**
Image rtk::simple::GreaterImageFilter::Execute(const Image &image1, const Image &image2)

Execute the filter on the input images

*/
public ";

%javamethodmodifiers  rtk::simple::GreaterImageFilter::Execute "/**
Image rtk::simple::GreaterImageFilter::Execute(const Image &image1, const Image &image2, uint8_t backgroundValue,
uint8_t foregroundValue)

Execute the filter on the input images with the given parameters

*/
public ";

%javamethodmodifiers  rtk::simple::GreaterImageFilter::Execute "/**
Image rtk::simple::GreaterImageFilter::Execute(const Image &image1, double constant)

Execute the filter with an image and a constant

*/
public ";

%javamethodmodifiers  rtk::simple::GreaterImageFilter::Execute "/**
Image rtk::simple::GreaterImageFilter::Execute(double constant, const Image &image2)
*/
public ";

%javamethodmodifiers  rtk::simple::GreaterImageFilter::Execute "/**
Image rtk::simple::GreaterImageFilter::Execute(const Image &image1, double constant, uint8_t backgroundValue,
uint8_t foregroundValue)

Execute the filter on an image and a constant with the given
parameters

*/
public ";

%javamethodmodifiers  rtk::simple::GreaterImageFilter::Execute "/**
Image rtk::simple::GreaterImageFilter::Execute(double constant, const Image &image2, uint8_t backgroundValue,
uint8_t foregroundValue)
*/
public ";

%javamethodmodifiers  rtk::simple::GreaterImageFilter::GetBackgroundValue "/**
uint8_t rtk::simple::GreaterImageFilter::GetBackgroundValue() const

Set/Get the value used to mark the false pixels of the operator.

*/
public ";

%javamethodmodifiers  rtk::simple::GreaterImageFilter::GetForegroundValue "/**
uint8_t rtk::simple::GreaterImageFilter::GetForegroundValue() const

Set/Get the value used to mark the true pixels of the operator.

*/
public ";

%javamethodmodifiers  rtk::simple::GreaterImageFilter::GetName "/**
std::string rtk::simple::GreaterImageFilter::GetName() const

Name of this class

*/
public ";

%javamethodmodifiers  rtk::simple::GreaterImageFilter::GreaterImageFilter "/**
rtk::simple::GreaterImageFilter::GreaterImageFilter()

Default Constructor that takes no arguments and initializes default
parameters

*/
public ";

%javamethodmodifiers  rtk::simple::GreaterImageFilter::SetBackgroundValue "/**
Self& rtk::simple::GreaterImageFilter::SetBackgroundValue(uint8_t BackgroundValue)

Set/Get the value used to mark the false pixels of the operator.

*/
public ";

%javamethodmodifiers  rtk::simple::GreaterImageFilter::SetForegroundValue "/**
Self& rtk::simple::GreaterImageFilter::SetForegroundValue(uint8_t ForegroundValue)

Set/Get the value used to mark the true pixels of the operator.

*/
public ";

%javamethodmodifiers  rtk::simple::GreaterImageFilter::ToString "/**
std::string rtk::simple::GreaterImageFilter::ToString() const

Print ourselves out

*/
public ";

%javamethodmodifiers  rtk::simple::GreaterImageFilter::~GreaterImageFilter "/**
rtk::simple::GreaterImageFilter::~GreaterImageFilter()

Destructor

*/
public ";


%typemap(javaimports) rtk::simple::GridImageSource "/**

Generate an n-dimensional image of a grid.


GridImageSource generates an image of a grid. From the abstract... \"Certain classes
of images find disparate use amongst members of the ITK community for
such purposes as visualization, simulation, testing, etc. Currently
there exists two derived classes from the ImageSource class used for
generating specific images for various applications, viz.
RandomImageSource and GaussianImageSource . We propose to add to this
set with the class GridImageSource which, obviously enough, produces a
grid image. Such images are useful for visualizing deformation when
used in conjunction with the WarpImageFilter , simulating magnetic
resonance tagging images, or creating optical illusions with which to
amaze your friends.\"

The output image may be of any dimension.


Tustison N., Avants B., Gee J. University of Pennsylvania
 This implementation was taken from the Insight Journal paper: https://hdl.handle.net/1926/475
See:
 rtk::simple::GridImageSource for the procedural interface

 itk::GridImageSource for the Doxygen on the original ITK class.


C++ includes: srtkGridImageSource.h
*/"

%javamethodmodifiers  rtk::simple::GridImageSource::Execute "/**
Image rtk::simple::GridImageSource::Execute()

Execute the filter on the input image

*/
public ";

%javamethodmodifiers  rtk::simple::GridImageSource::Execute "/**
Image rtk::simple::GridImageSource::Execute(PixelIDValueEnum outputPixelType, const std::vector< unsigned int >
&size, const std::vector< double > &sigma, const std::vector< double >
&gridSpacing, const std::vector< double > &gridOffset, double scale,
const std::vector< double > &origin, const std::vector< double >
&spacing, std::vector< double > direction)

Execute the filter on the input image with the given parameters

*/
public ";

%javamethodmodifiers  rtk::simple::GridImageSource::GetDirection "/**
std::vector<double> rtk::simple::GridImageSource::GetDirection() const
*/
public ";

%javamethodmodifiers  rtk::simple::GridImageSource::GetGridOffset "/**
std::vector<double> rtk::simple::GridImageSource::GetGridOffset() const
*/
public ";

%javamethodmodifiers  rtk::simple::GridImageSource::GetGridSpacing "/**
std::vector<double> rtk::simple::GridImageSource::GetGridSpacing() const
*/
public ";

%javamethodmodifiers  rtk::simple::GridImageSource::GetName "/**
std::string rtk::simple::GridImageSource::GetName() const

Name of this class

*/
public ";

%javamethodmodifiers  rtk::simple::GridImageSource::GetOrigin "/**
std::vector<double> rtk::simple::GridImageSource::GetOrigin() const
*/
public ";

%javamethodmodifiers  rtk::simple::GridImageSource::GetOutputPixelType "/**
PixelIDValueEnum rtk::simple::GridImageSource::GetOutputPixelType() const
*/
public ";

%javamethodmodifiers  rtk::simple::GridImageSource::GetScale "/**
double rtk::simple::GridImageSource::GetScale() const
*/
public ";

%javamethodmodifiers  rtk::simple::GridImageSource::GetSigma "/**
std::vector<double> rtk::simple::GridImageSource::GetSigma() const
*/
public ";

%javamethodmodifiers  rtk::simple::GridImageSource::GetSize "/**
std::vector<unsigned int> rtk::simple::GridImageSource::GetSize() const
*/
public ";

%javamethodmodifiers  rtk::simple::GridImageSource::GetSpacing "/**
std::vector<double> rtk::simple::GridImageSource::GetSpacing() const
*/
public ";

%javamethodmodifiers  rtk::simple::GridImageSource::GridImageSource "/**
rtk::simple::GridImageSource::GridImageSource()

Default Constructor that takes no arguments and initializes default
parameters

*/
public ";

%javamethodmodifiers  rtk::simple::GridImageSource::SetDirection "/**
Self& rtk::simple::GridImageSource::SetDirection(std::vector< double > Direction)
*/
public ";

%javamethodmodifiers  rtk::simple::GridImageSource::SetGridOffset "/**
Self& rtk::simple::GridImageSource::SetGridOffset(const std::vector< double > &GridOffset)
*/
public ";

%javamethodmodifiers  rtk::simple::GridImageSource::SetGridSpacing "/**
Self& rtk::simple::GridImageSource::SetGridSpacing(const std::vector< double > &GridSpacing)
*/
public ";

%javamethodmodifiers  rtk::simple::GridImageSource::SetOrigin "/**
Self& rtk::simple::GridImageSource::SetOrigin(const std::vector< double > &Origin)
*/
public ";

%javamethodmodifiers  rtk::simple::GridImageSource::SetOutputPixelType "/**
Self& rtk::simple::GridImageSource::SetOutputPixelType(PixelIDValueEnum OutputPixelType)
*/
public ";

%javamethodmodifiers  rtk::simple::GridImageSource::SetScale "/**
Self& rtk::simple::GridImageSource::SetScale(double Scale)
*/
public ";

%javamethodmodifiers  rtk::simple::GridImageSource::SetSigma "/**
Self& rtk::simple::GridImageSource::SetSigma(const std::vector< double > &Sigma)
*/
public ";

%javamethodmodifiers  rtk::simple::GridImageSource::SetSigma "/**
Self& rtk::simple::GridImageSource::SetSigma(double value)

Set the values of the Sigma vector all to value

*/
public ";

%javamethodmodifiers  rtk::simple::GridImageSource::SetSize "/**
Self& rtk::simple::GridImageSource::SetSize(const std::vector< unsigned int > &Size)
*/
public ";

%javamethodmodifiers  rtk::simple::GridImageSource::SetSpacing "/**
Self& rtk::simple::GridImageSource::SetSpacing(const std::vector< double > &Spacing)
*/
public ";

%javamethodmodifiers  rtk::simple::GridImageSource::ToString "/**
std::string rtk::simple::GridImageSource::ToString() const

Print ourselves out

*/
public ";

%javamethodmodifiers  rtk::simple::GridImageSource::~GridImageSource "/**
rtk::simple::GridImageSource::~GridImageSource()

Destructor

*/
public ";


%typemap(javaimports) rtk::simple::HConcaveImageFilter "/**

Identify local minima whose depth below the baseline is greater than
h.


HConcaveImageFilter extract local minima that are more than h intensity units below the
(local) background. This has the effect of extracting objects that are
darker than the background by at least h intensity units.

This filter uses the HMinimaImageFilter .

Geodesic morphology and the H-Convex algorithm is described in Chapter
6 of Pierre Soille's book \"Morphological Image Analysis: Principles
and Applications\", Second Edition, Springer, 2003.


See:
 GrayscaleGeodesicDilateImageFilter , HMaximaImageFilter ,


 MorphologyImageFilter , GrayscaleDilateImageFilter , GrayscaleFunctionDilateImageFilter , BinaryDilateImageFilter

 rtk::simple::HConcave for the procedural interface

 itk::HConcaveImageFilter for the Doxygen on the original ITK class.


C++ includes: srtkHConcaveImageFilter.h
*/"

%javamethodmodifiers  rtk::simple::HConcaveImageFilter::Execute "/**
Image rtk::simple::HConcaveImageFilter::Execute(const Image &image1)

Execute the filter on the input image

*/
public ";

%javamethodmodifiers  rtk::simple::HConcaveImageFilter::Execute "/**
Image rtk::simple::HConcaveImageFilter::Execute(const Image &image1, double height, bool fullyConnected)

Execute the filter on the input image with the given parameters

*/
public ";

%javamethodmodifiers  rtk::simple::HConcaveImageFilter::FullyConnectedOff "/**
Self& rtk::simple::HConcaveImageFilter::FullyConnectedOff()
*/
public ";

%javamethodmodifiers  rtk::simple::HConcaveImageFilter::FullyConnectedOn "/**
Self& rtk::simple::HConcaveImageFilter::FullyConnectedOn()

Set the value of FullyConnected to true or false respectfully.

*/
public ";

%javamethodmodifiers  rtk::simple::HConcaveImageFilter::GetFullyConnected "/**
bool rtk::simple::HConcaveImageFilter::GetFullyConnected() const

Set/Get whether the connected components are defined strictly by face
connectivity or by face+edge+vertex connectivity. Default is
FullyConnectedOff. For objects that are 1 pixel wide, use
FullyConnectedOn.

*/
public ";

%javamethodmodifiers  rtk::simple::HConcaveImageFilter::GetHeight "/**
double rtk::simple::HConcaveImageFilter::GetHeight() const

Set/Get the height that a local maximum must be above the local
background (local contrast) in order to survive the processing. Local
maxima below this value are replaced with an estimate of the local
background.

*/
public ";

%javamethodmodifiers  rtk::simple::HConcaveImageFilter::GetName "/**
std::string rtk::simple::HConcaveImageFilter::GetName() const

Name of this class

*/
public ";

%javamethodmodifiers  rtk::simple::HConcaveImageFilter::HConcaveImageFilter "/**
rtk::simple::HConcaveImageFilter::HConcaveImageFilter()

Default Constructor that takes no arguments and initializes default
parameters

*/
public ";

%javamethodmodifiers  rtk::simple::HConcaveImageFilter::SetFullyConnected "/**
Self& rtk::simple::HConcaveImageFilter::SetFullyConnected(bool FullyConnected)

Set/Get whether the connected components are defined strictly by face
connectivity or by face+edge+vertex connectivity. Default is
FullyConnectedOff. For objects that are 1 pixel wide, use
FullyConnectedOn.

*/
public ";

%javamethodmodifiers  rtk::simple::HConcaveImageFilter::SetHeight "/**
Self& rtk::simple::HConcaveImageFilter::SetHeight(double Height)

Set/Get the height that a local maximum must be above the local
background (local contrast) in order to survive the processing. Local
maxima below this value are replaced with an estimate of the local
background.

*/
public ";

%javamethodmodifiers  rtk::simple::HConcaveImageFilter::ToString "/**
std::string rtk::simple::HConcaveImageFilter::ToString() const

Print ourselves out

*/
public ";

%javamethodmodifiers  rtk::simple::HConcaveImageFilter::~HConcaveImageFilter "/**
rtk::simple::HConcaveImageFilter::~HConcaveImageFilter()

Destructor

*/
public ";


%typemap(javaimports) rtk::simple::HConvexImageFilter "/**

Identify local maxima whose height above the baseline is greater than
h.


HConvexImageFilter extract local maxima that are more than h intensity units above the
(local) background. This has the effect of extracting objects that are
brighter than background by at least h intensity units.

This filter uses the HMaximaImageFilter .

Geodesic morphology and the H-Convex algorithm is described in Chapter
6 of Pierre Soille's book \"Morphological Image Analysis: Principles
and Applications\", Second Edition, Springer, 2003.


See:
 GrayscaleGeodesicDilateImageFilter , HMinimaImageFilter


 MorphologyImageFilter , GrayscaleDilateImageFilter , GrayscaleFunctionDilateImageFilter , BinaryDilateImageFilter

 rtk::simple::HConvex for the procedural interface

 itk::HConvexImageFilter for the Doxygen on the original ITK class.


C++ includes: srtkHConvexImageFilter.h
*/"

%javamethodmodifiers  rtk::simple::HConvexImageFilter::Execute "/**
Image rtk::simple::HConvexImageFilter::Execute(const Image &image1)

Execute the filter on the input image

*/
public ";

%javamethodmodifiers  rtk::simple::HConvexImageFilter::Execute "/**
Image rtk::simple::HConvexImageFilter::Execute(const Image &image1, double height, bool fullyConnected)

Execute the filter on the input image with the given parameters

*/
public ";

%javamethodmodifiers  rtk::simple::HConvexImageFilter::FullyConnectedOff "/**
Self& rtk::simple::HConvexImageFilter::FullyConnectedOff()
*/
public ";

%javamethodmodifiers  rtk::simple::HConvexImageFilter::FullyConnectedOn "/**
Self& rtk::simple::HConvexImageFilter::FullyConnectedOn()

Set the value of FullyConnected to true or false respectfully.

*/
public ";

%javamethodmodifiers  rtk::simple::HConvexImageFilter::GetFullyConnected "/**
bool rtk::simple::HConvexImageFilter::GetFullyConnected() const

Set/Get whether the connected components are defined strictly by face
connectivity or by face+edge+vertex connectivity. Default is
FullyConnectedOff. For objects that are 1 pixel wide, use
FullyConnectedOn.

*/
public ";

%javamethodmodifiers  rtk::simple::HConvexImageFilter::GetHeight "/**
double rtk::simple::HConvexImageFilter::GetHeight() const

Set/Get the height that a local maximum must be above the local
background (local contrast) in order to survive the processing. Local
maxima below this value are replaced with an estimate of the local
background.

*/
public ";

%javamethodmodifiers  rtk::simple::HConvexImageFilter::GetName "/**
std::string rtk::simple::HConvexImageFilter::GetName() const

Name of this class

*/
public ";

%javamethodmodifiers  rtk::simple::HConvexImageFilter::HConvexImageFilter "/**
rtk::simple::HConvexImageFilter::HConvexImageFilter()

Default Constructor that takes no arguments and initializes default
parameters

*/
public ";

%javamethodmodifiers  rtk::simple::HConvexImageFilter::SetFullyConnected "/**
Self& rtk::simple::HConvexImageFilter::SetFullyConnected(bool FullyConnected)

Set/Get whether the connected components are defined strictly by face
connectivity or by face+edge+vertex connectivity. Default is
FullyConnectedOff. For objects that are 1 pixel wide, use
FullyConnectedOn.

*/
public ";

%javamethodmodifiers  rtk::simple::HConvexImageFilter::SetHeight "/**
Self& rtk::simple::HConvexImageFilter::SetHeight(double Height)

Set/Get the height that a local maximum must be above the local
background (local contrast) in order to survive the processing. Local
maxima below this value are replaced with an estimate of the local
background.

*/
public ";

%javamethodmodifiers  rtk::simple::HConvexImageFilter::ToString "/**
std::string rtk::simple::HConvexImageFilter::ToString() const

Print ourselves out

*/
public ";

%javamethodmodifiers  rtk::simple::HConvexImageFilter::~HConvexImageFilter "/**
rtk::simple::HConvexImageFilter::~HConvexImageFilter()

Destructor

*/
public ";


%typemap(javaimports) rtk::simple::HMaximaImageFilter "/**

Suppress local maxima whose height above the baseline is less than h.


HMaximaImageFilter suppresses local maxima that are less than h intensity units above
the (local) background. This has the effect of smoothing over the
\"high\" parts of the noise in the image without smoothing over large
changes in intensity (region boundaries). See the HMinimaImageFilter to suppress the local minima whose depth is less than h intensity
units below the (local) background.

If the output of HMaximaImageFilter is subtracted from the original image, the signicant \"peaks\" in the
image can be identified. This is what the HConvexImageFilter provides.

This filter uses the ReconstructionByDilationImageFilter . It provides its own input as the \"mask\" input to the geodesic
dilation. The \"marker\" image for the geodesic dilation is the input
image minus the height parameter h.

Geodesic morphology and the H-Maxima algorithm is described in Chapter
6 of Pierre Soille's book \"Morphological Image Analysis: Principles
and Applications\", Second Edition, Springer, 2003.

The height parameter is set using SetHeight.


See:
 ReconstructionByDilationImageFilter , HMinimaImageFilter , HConvexImageFilter


 MorphologyImageFilter , GrayscaleDilateImageFilter , GrayscaleFunctionDilateImageFilter , BinaryDilateImageFilter

 rtk::simple::HMaxima for the procedural interface

 itk::HMaximaImageFilter for the Doxygen on the original ITK class.


C++ includes: srtkHMaximaImageFilter.h
*/"

%javamethodmodifiers  rtk::simple::HMaximaImageFilter::Execute "/**
Image rtk::simple::HMaximaImageFilter::Execute(const Image &image1)

Execute the filter on the input image

*/
public ";

%javamethodmodifiers  rtk::simple::HMaximaImageFilter::Execute "/**
Image rtk::simple::HMaximaImageFilter::Execute(const Image &image1, double height)

Execute the filter on the input image with the given parameters

*/
public ";

%javamethodmodifiers  rtk::simple::HMaximaImageFilter::GetHeight "/**
double rtk::simple::HMaximaImageFilter::GetHeight() const

Set/Get the height that a local maximum must be above the local
background (local contrast) in order to survive the processing. Local
maxima below this value are replaced with an estimate of the local
background.

*/
public ";

%javamethodmodifiers  rtk::simple::HMaximaImageFilter::GetName "/**
std::string rtk::simple::HMaximaImageFilter::GetName() const

Name of this class

*/
public ";

%javamethodmodifiers  rtk::simple::HMaximaImageFilter::HMaximaImageFilter "/**
rtk::simple::HMaximaImageFilter::HMaximaImageFilter()

Default Constructor that takes no arguments and initializes default
parameters

*/
public ";

%javamethodmodifiers  rtk::simple::HMaximaImageFilter::SetHeight "/**
Self& rtk::simple::HMaximaImageFilter::SetHeight(double Height)

Set/Get the height that a local maximum must be above the local
background (local contrast) in order to survive the processing. Local
maxima below this value are replaced with an estimate of the local
background.

*/
public ";

%javamethodmodifiers  rtk::simple::HMaximaImageFilter::ToString "/**
std::string rtk::simple::HMaximaImageFilter::ToString() const

Print ourselves out

*/
public ";

%javamethodmodifiers  rtk::simple::HMaximaImageFilter::~HMaximaImageFilter "/**
rtk::simple::HMaximaImageFilter::~HMaximaImageFilter()

Destructor

*/
public ";


%typemap(javaimports) rtk::simple::HMinimaImageFilter "/**

Suppress local minima whose depth below the baseline is less than h.


HMinimaImageFilter suppresses local minima that are less than h intensity units below
the (local) background. This has the effect of smoothing over the
\"low\" parts of the noise in the image without smoothing over large
changes in intensity (region boundaries). See the HMaximaImageFilter to suppress the local maxima whose height is less than h intensity
units above the (local) background.

If original image is subtracted from the output of HMinimaImageFilter , the signicant \"valleys\" in the image can be identified. This is
what the HConcaveImageFilter provides.

This filter uses the GrayscaleGeodesicErodeImageFilter . It provides its own input as the \"mask\" input to the geodesic
dilation. The \"marker\" image for the geodesic dilation is the input
image plus the height parameter h.

Geodesic morphology and the H-Minima algorithm is described in Chapter
6 of Pierre Soille's book \"Morphological Image Analysis: Principles
and Applications\", Second Edition, Springer, 2003.


See:
 GrayscaleGeodesicDilateImageFilter , HMinimaImageFilter , HConvexImageFilter


 MorphologyImageFilter , GrayscaleDilateImageFilter , GrayscaleFunctionDilateImageFilter , BinaryDilateImageFilter

 rtk::simple::HMinima for the procedural interface

 itk::HMinimaImageFilter for the Doxygen on the original ITK class.


C++ includes: srtkHMinimaImageFilter.h
*/"

%javamethodmodifiers  rtk::simple::HMinimaImageFilter::Execute "/**
Image rtk::simple::HMinimaImageFilter::Execute(const Image &image1)

Execute the filter on the input image

*/
public ";

%javamethodmodifiers  rtk::simple::HMinimaImageFilter::Execute "/**
Image rtk::simple::HMinimaImageFilter::Execute(const Image &image1, double height, bool fullyConnected)

Execute the filter on the input image with the given parameters

*/
public ";

%javamethodmodifiers  rtk::simple::HMinimaImageFilter::FullyConnectedOff "/**
Self& rtk::simple::HMinimaImageFilter::FullyConnectedOff()
*/
public ";

%javamethodmodifiers  rtk::simple::HMinimaImageFilter::FullyConnectedOn "/**
Self& rtk::simple::HMinimaImageFilter::FullyConnectedOn()

Set the value of FullyConnected to true or false respectfully.

*/
public ";

%javamethodmodifiers  rtk::simple::HMinimaImageFilter::GetFullyConnected "/**
bool rtk::simple::HMinimaImageFilter::GetFullyConnected() const

Set/Get whether the connected components are defined strictly by face
connectivity or by face+edge+vertex connectivity. Default is
FullyConnectedOff. For objects that are 1 pixel wide, use
FullyConnectedOn.

*/
public ";

%javamethodmodifiers  rtk::simple::HMinimaImageFilter::GetHeight "/**
double rtk::simple::HMinimaImageFilter::GetHeight() const

Set/Get the height that a local maximum must be above the local
background (local contrast) in order to survive the processing. Local
maxima below this value are replaced with an estimate of the local
background.

*/
public ";

%javamethodmodifiers  rtk::simple::HMinimaImageFilter::GetName "/**
std::string rtk::simple::HMinimaImageFilter::GetName() const

Name of this class

*/
public ";

%javamethodmodifiers  rtk::simple::HMinimaImageFilter::HMinimaImageFilter "/**
rtk::simple::HMinimaImageFilter::HMinimaImageFilter()

Default Constructor that takes no arguments and initializes default
parameters

*/
public ";

%javamethodmodifiers  rtk::simple::HMinimaImageFilter::SetFullyConnected "/**
Self& rtk::simple::HMinimaImageFilter::SetFullyConnected(bool FullyConnected)

Set/Get whether the connected components are defined strictly by face
connectivity or by face+edge+vertex connectivity. Default is
FullyConnectedOff. For objects that are 1 pixel wide, use
FullyConnectedOn.

*/
public ";

%javamethodmodifiers  rtk::simple::HMinimaImageFilter::SetHeight "/**
Self& rtk::simple::HMinimaImageFilter::SetHeight(double Height)

Set/Get the height that a local maximum must be above the local
background (local contrast) in order to survive the processing. Local
maxima below this value are replaced with an estimate of the local
background.

*/
public ";

%javamethodmodifiers  rtk::simple::HMinimaImageFilter::ToString "/**
std::string rtk::simple::HMinimaImageFilter::ToString() const

Print ourselves out

*/
public ";

%javamethodmodifiers  rtk::simple::HMinimaImageFilter::~HMinimaImageFilter "/**
rtk::simple::HMinimaImageFilter::~HMinimaImageFilter()

Destructor

*/
public ";


%typemap(javaimports) rtk::simple::HalfHermitianToRealInverseFFTImageFilter "/**

Base class for specialized complex-to-real inverse Fast Fourier Transform .


This is a base class for the \"inverse\" or \"reverse\" Discrete
Fourier Transform . This is an abstract base class: the actual implementation is
provided by the best child class available on the system when the
object is created via the object factory system.

The input to this filter is assumed to have the same format as the
output of the RealToHalfHermitianForwardFFTImageFilter . That is, the input is assumed to consist of roughly half the full
complex image resulting from a real-to-complex discrete Fourier
transform. This half is expected to be the first half of the image in
the X-dimension. Because this filter assumes that the input stores
only about half of the non-redundant complex pixels, the output is
larger in the X-dimension than it is in the input. To determine the
actual size of the output image, this filter needs additional
information in the form of a flag indicating whether the output image
has an odd size in the X-dimension. Use SetActualXDimensionIsOdd() to set this flag.


See:
 ForwardFFTImageFilter , HalfHermitianToRealInverseFFTImageFilter

 rtk::simple::HalfHermitianToRealInverseFFT for the procedural interface

 itk::HalfHermitianToRealInverseFFTImageFilter for the Doxygen on the original ITK class.


C++ includes: srtkHalfHermitianToRealInverseFFTImageFilter.h
*/"

%javamethodmodifiers  rtk::simple::HalfHermitianToRealInverseFFTImageFilter::ActualXDimensionIsOddOff "/**
Self& rtk::simple::HalfHermitianToRealInverseFFTImageFilter::ActualXDimensionIsOddOff()
*/
public ";

%javamethodmodifiers  rtk::simple::HalfHermitianToRealInverseFFTImageFilter::ActualXDimensionIsOddOn "/**
Self& rtk::simple::HalfHermitianToRealInverseFFTImageFilter::ActualXDimensionIsOddOn()

Set the value of ActualXDimensionIsOdd to true or false respectfully.

*/
public ";

%javamethodmodifiers  rtk::simple::HalfHermitianToRealInverseFFTImageFilter::Execute "/**
Image rtk::simple::HalfHermitianToRealInverseFFTImageFilter::Execute(const Image &image1)

Execute the filter on the input image

*/
public ";

%javamethodmodifiers  rtk::simple::HalfHermitianToRealInverseFFTImageFilter::Execute "/**
Image rtk::simple::HalfHermitianToRealInverseFFTImageFilter::Execute(const Image &image1, bool actualXDimensionIsOdd)

Execute the filter on the input image with the given parameters

*/
public ";

%javamethodmodifiers  rtk::simple::HalfHermitianToRealInverseFFTImageFilter::GetActualXDimensionIsOdd "/**
bool rtk::simple::HalfHermitianToRealInverseFFTImageFilter::GetActualXDimensionIsOdd() const

Was the original truncated dimension size odd?

*/
public ";

%javamethodmodifiers  rtk::simple::HalfHermitianToRealInverseFFTImageFilter::GetName "/**
std::string rtk::simple::HalfHermitianToRealInverseFFTImageFilter::GetName() const

Name of this class

*/
public ";

%javamethodmodifiers  rtk::simple::HalfHermitianToRealInverseFFTImageFilter::HalfHermitianToRealInverseFFTImageFilter "/**
rtk::simple::HalfHermitianToRealInverseFFTImageFilter::HalfHermitianToRealInverseFFTImageFilter()

Default Constructor that takes no arguments and initializes default
parameters

*/
public ";

%javamethodmodifiers  rtk::simple::HalfHermitianToRealInverseFFTImageFilter::SetActualXDimensionIsOdd "/**
Self& rtk::simple::HalfHermitianToRealInverseFFTImageFilter::SetActualXDimensionIsOdd(bool ActualXDimensionIsOdd)

Was the original truncated dimension size odd?

*/
public ";

%javamethodmodifiers  rtk::simple::HalfHermitianToRealInverseFFTImageFilter::ToString "/**
std::string rtk::simple::HalfHermitianToRealInverseFFTImageFilter::ToString() const

Print ourselves out

*/
public ";

%javamethodmodifiers  rtk::simple::HalfHermitianToRealInverseFFTImageFilter::~HalfHermitianToRealInverseFFTImageFilter "/**
rtk::simple::HalfHermitianToRealInverseFFTImageFilter::~HalfHermitianToRealInverseFFTImageFilter()

Destructor

*/
public ";


%typemap(javaimports) rtk::simple::HashImageFilter "/**

Compute the sha1 or md5 hash of an image.



See:
 rtk::simple::Hash for the procedural interface


C++ includes: srtkHashImageFilter.h
*/"

%javamethodmodifiers  rtk::simple::HashImageFilter::Execute "/**
std::string rtk::simple::HashImageFilter::Execute(const Image &)
*/
public ";

%javamethodmodifiers  rtk::simple::HashImageFilter::GetHashFunction "/**
HashFunction rtk::simple::HashImageFilter::GetHashFunction() const
*/
public ";

%javamethodmodifiers  rtk::simple::HashImageFilter::GetName "/**
std::string rtk::simple::HashImageFilter::GetName() const

Name of this class

*/
public ";

%javamethodmodifiers  rtk::simple::HashImageFilter::HashImageFilter "/**
rtk::simple::HashImageFilter::HashImageFilter()
*/
public ";

%javamethodmodifiers  rtk::simple::HashImageFilter::SetHashFunction "/**
Self& rtk::simple::HashImageFilter::SetHashFunction(HashFunction hashFunction)
*/
public ";

%javamethodmodifiers  rtk::simple::HashImageFilter::ToString "/**
std::string rtk::simple::HashImageFilter::ToString() const
*/
public ";


%typemap(javaimports) rtk::simple::HausdorffDistanceImageFilter "/**

Computes the Hausdorff distance between the set of non-zero pixels of
two images.


HausdorffDistanceImageFilter computes the distance between the set non-zero pixels of two images
using the following formula: \\\\[ H(A,B) = \\\\max(h(A,B),h(B,A)) \\\\] where \\\\[ h(A,B) = \\\\max_{a \\\\in A} \\\\min_{b \\\\in B} \\\\| a -
b\\\\| \\\\] is the directed Hausdorff distance and $A$ and $B$ are respectively the set of non-zero pixels in the first and second
input images.

In particular, this filter uses the DirectedHausdorffImageFilter
inside to compute the two directed distances and then select the
largest of the two.

The Hausdorff distance measures the degree of mismatch between two
sets and behaves like a metric over the set of all closed bounded sets
- with properties of identity, symmetry and triangle inequality.

This filter requires the largest possible region of the first image
and the same corresponding region in the second image. It behaves as
filter with two inputs and one output. Thus it can be inserted in a
pipeline with other filters. The filter passes the first input through
unmodified.

This filter is templated over the two input image types. It assume
both images have the same number of dimensions.


See:
 DirectedHausdorffDistanceImageFilter

 itk::HausdorffDistanceImageFilter for the Doxygen on the original ITK class.


C++ includes: srtkHausdorffDistanceImageFilter.h
*/"

%javamethodmodifiers  rtk::simple::HausdorffDistanceImageFilter::Execute "/**
Image rtk::simple::HausdorffDistanceImageFilter::Execute(const Image &image1, const Image &image2)

Execute the filter on the input images

*/
public ";

%javamethodmodifiers  rtk::simple::HausdorffDistanceImageFilter::GetAverageHausdorffDistance "/**
double rtk::simple::HausdorffDistanceImageFilter::GetAverageHausdorffDistance() const

Return the computed Hausdorff distance.

This is a measurement. Its value is updated in the Execute methods, so
the value will only be valid after an execution.

*/
public ";

%javamethodmodifiers  rtk::simple::HausdorffDistanceImageFilter::GetHausdorffDistance "/**
double rtk::simple::HausdorffDistanceImageFilter::GetHausdorffDistance() const

Return the computed Hausdorff distance.

This is a measurement. Its value is updated in the Execute methods, so
the value will only be valid after an execution.

*/
public ";

%javamethodmodifiers  rtk::simple::HausdorffDistanceImageFilter::GetName "/**
std::string rtk::simple::HausdorffDistanceImageFilter::GetName() const

Name of this class

*/
public ";

%javamethodmodifiers  rtk::simple::HausdorffDistanceImageFilter::HausdorffDistanceImageFilter "/**
rtk::simple::HausdorffDistanceImageFilter::HausdorffDistanceImageFilter()

Default Constructor that takes no arguments and initializes default
parameters

*/
public ";

%javamethodmodifiers  rtk::simple::HausdorffDistanceImageFilter::ToString "/**
std::string rtk::simple::HausdorffDistanceImageFilter::ToString() const

Print ourselves out

*/
public ";

%javamethodmodifiers  rtk::simple::HausdorffDistanceImageFilter::~HausdorffDistanceImageFilter "/**
rtk::simple::HausdorffDistanceImageFilter::~HausdorffDistanceImageFilter()

Destructor

*/
public ";


%typemap(javaimports) rtk::simple::HistogramMatchingImageFilter "/**

Normalize the grayscale values between two images by histogram
matching.


HistogramMatchingImageFilter normalizes the grayscale values of a source image based on the
grayscale values of a reference image. This filter uses a histogram
matching technique where the histograms of the two images are matched
only at a specified number of quantile values.

This filter was originally designed to normalize MR images of the same
MR protocol and same body part. The algorithm works best if background
pixels are excluded from both the source and reference histograms. A
simple background exclusion method is to exclude all pixels whose
grayscale values are smaller than the mean grayscale value. ThresholdAtMeanIntensityOn() switches on this simple background exclusion method.

The source image can be set via either SetInput() or SetSourceImage()
. The reference image can be set via SetReferenceImage() .

SetNumberOfHistogramLevels() sets the number of bins used when creating histograms of the source
and reference images. SetNumberOfMatchPoints() governs the number of quantile values to be matched.

This filter assumes that both the source and reference are of the same
type and that the input and output image type have the same number of
dimension and have scalar pixel types.

REFERENCE
Laszlo G. Nyul, Jayaram K. Udupa, and Xuan Zhang, \"New Variants of a
Method of MRI Scale Standardization\", IEEE Transactions on Medical
Imaging, 19(2):143-150, 2000.

See:
 rtk::simple::HistogramMatching for the procedural interface

 itk::HistogramMatchingImageFilter for the Doxygen on the original ITK class.


C++ includes: srtkHistogramMatchingImageFilter.h
*/"

%javamethodmodifiers  rtk::simple::HistogramMatchingImageFilter::Execute "/**
Image rtk::simple::HistogramMatchingImageFilter::Execute(const Image &image1, const Image &image2)

Execute the filter on the input images

*/
public ";

%javamethodmodifiers  rtk::simple::HistogramMatchingImageFilter::Execute "/**
Image rtk::simple::HistogramMatchingImageFilter::Execute(const Image &image1, const Image &image2, uint32_t
numberOfHistogramLevels, uint32_t numberOfMatchPoints, bool
thresholdAtMeanIntensity)

Execute the filter on the input images with the given parameters

*/
public ";

%javamethodmodifiers  rtk::simple::HistogramMatchingImageFilter::GetName "/**
std::string rtk::simple::HistogramMatchingImageFilter::GetName() const

Name of this class

*/
public ";

%javamethodmodifiers  rtk::simple::HistogramMatchingImageFilter::GetNumberOfHistogramLevels "/**
uint32_t rtk::simple::HistogramMatchingImageFilter::GetNumberOfHistogramLevels() const

Set/Get the number of histogram levels used.

*/
public ";

%javamethodmodifiers  rtk::simple::HistogramMatchingImageFilter::GetNumberOfMatchPoints "/**
uint32_t rtk::simple::HistogramMatchingImageFilter::GetNumberOfMatchPoints() const

Set/Get the number of match points used.

*/
public ";

%javamethodmodifiers  rtk::simple::HistogramMatchingImageFilter::GetThresholdAtMeanIntensity "/**
bool rtk::simple::HistogramMatchingImageFilter::GetThresholdAtMeanIntensity() const

Set/Get the threshold at mean intensity flag. If true, only source
(reference) pixels which are greater than the mean source (reference)
intensity is used in the histogram matching. If false, all pixels are
used.

*/
public ";

%javamethodmodifiers  rtk::simple::HistogramMatchingImageFilter::HistogramMatchingImageFilter "/**
rtk::simple::HistogramMatchingImageFilter::HistogramMatchingImageFilter()

Default Constructor that takes no arguments and initializes default
parameters

*/
public ";

%javamethodmodifiers  rtk::simple::HistogramMatchingImageFilter::SetNumberOfHistogramLevels "/**
Self& rtk::simple::HistogramMatchingImageFilter::SetNumberOfHistogramLevels(uint32_t NumberOfHistogramLevels)

Set/Get the number of histogram levels used.

*/
public ";

%javamethodmodifiers  rtk::simple::HistogramMatchingImageFilter::SetNumberOfMatchPoints "/**
Self& rtk::simple::HistogramMatchingImageFilter::SetNumberOfMatchPoints(uint32_t NumberOfMatchPoints)

Set/Get the number of match points used.

*/
public ";

%javamethodmodifiers  rtk::simple::HistogramMatchingImageFilter::SetThresholdAtMeanIntensity "/**
Self& rtk::simple::HistogramMatchingImageFilter::SetThresholdAtMeanIntensity(bool ThresholdAtMeanIntensity)

Set/Get the threshold at mean intensity flag. If true, only source
(reference) pixels which are greater than the mean source (reference)
intensity is used in the histogram matching. If false, all pixels are
used.

*/
public ";

%javamethodmodifiers  rtk::simple::HistogramMatchingImageFilter::ThresholdAtMeanIntensityOff "/**
Self& rtk::simple::HistogramMatchingImageFilter::ThresholdAtMeanIntensityOff()
*/
public ";

%javamethodmodifiers  rtk::simple::HistogramMatchingImageFilter::ThresholdAtMeanIntensityOn "/**
Self& rtk::simple::HistogramMatchingImageFilter::ThresholdAtMeanIntensityOn()

Set the value of ThresholdAtMeanIntensity to true or false
respectfully.

*/
public ";

%javamethodmodifiers  rtk::simple::HistogramMatchingImageFilter::ToString "/**
std::string rtk::simple::HistogramMatchingImageFilter::ToString() const

Print ourselves out

*/
public ";

%javamethodmodifiers  rtk::simple::HistogramMatchingImageFilter::~HistogramMatchingImageFilter "/**
rtk::simple::HistogramMatchingImageFilter::~HistogramMatchingImageFilter()

Destructor

*/
public ";


%typemap(javaimports) rtk::simple::HuangThresholdImageFilter "/**

Threshold an image using the Huang Threshold.


This filter creates a binary thresholded image that separates an image
into foreground and background components. The filter computes the
threshold using the HuangThresholdCalculator and applies that theshold to the input image using the BinaryThresholdImageFilter .


Richard Beare. Department of Medicine, Monash University, Melbourne,
Australia.
 Gaetan Lehmann. Biologie du Developpement et de la Reproduction, INRA
de Jouy-en-Josas, France.

This implementation was taken from the Insight Journal paper: https://hdl.handle.net/10380/3279 or http://www.insight-journal.org/browse/publication/811


See:
 HistogramThresholdImageFilter

 rtk::simple::HuangThreshold for the procedural interface

 itk::HuangThresholdImageFilter for the Doxygen on the original ITK class.


C++ includes: srtkHuangThresholdImageFilter.h
*/"

%javamethodmodifiers  rtk::simple::HuangThresholdImageFilter::Execute "/**
Image rtk::simple::HuangThresholdImageFilter::Execute(const Image &image, const Image &maskImage)

Execute the filter on the input image

*/
public ";

%javamethodmodifiers  rtk::simple::HuangThresholdImageFilter::Execute "/**
Image rtk::simple::HuangThresholdImageFilter::Execute(const Image &image)
*/
public ";

%javamethodmodifiers  rtk::simple::HuangThresholdImageFilter::Execute "/**
Image rtk::simple::HuangThresholdImageFilter::Execute(const Image &image, const Image &maskImage, uint8_t insideValue,
uint8_t outsideValue, uint32_t numberOfHistogramBins, bool maskOutput,
uint8_t maskValue)

Execute the filter on the input image with the given parameters

*/
public ";

%javamethodmodifiers  rtk::simple::HuangThresholdImageFilter::Execute "/**
Image rtk::simple::HuangThresholdImageFilter::Execute(const Image &image, uint8_t insideValue, uint8_t outsideValue,
uint32_t numberOfHistogramBins, bool maskOutput, uint8_t maskValue)
*/
public ";

%javamethodmodifiers  rtk::simple::HuangThresholdImageFilter::GetInsideValue "/**
uint8_t rtk::simple::HuangThresholdImageFilter::GetInsideValue() const

Get the \"inside\" pixel value.

*/
public ";

%javamethodmodifiers  rtk::simple::HuangThresholdImageFilter::GetMaskOutput "/**
bool rtk::simple::HuangThresholdImageFilter::GetMaskOutput() const
*/
public ";

%javamethodmodifiers  rtk::simple::HuangThresholdImageFilter::GetMaskValue "/**
uint8_t rtk::simple::HuangThresholdImageFilter::GetMaskValue() const
*/
public ";

%javamethodmodifiers  rtk::simple::HuangThresholdImageFilter::GetName "/**
std::string rtk::simple::HuangThresholdImageFilter::GetName() const

Name of this class

*/
public ";

%javamethodmodifiers  rtk::simple::HuangThresholdImageFilter::GetNumberOfHistogramBins "/**
uint32_t rtk::simple::HuangThresholdImageFilter::GetNumberOfHistogramBins() const
*/
public ";

%javamethodmodifiers  rtk::simple::HuangThresholdImageFilter::GetOutsideValue "/**
uint8_t rtk::simple::HuangThresholdImageFilter::GetOutsideValue() const

Get the \"outside\" pixel value.

*/
public ";

%javamethodmodifiers  rtk::simple::HuangThresholdImageFilter::GetThreshold "/**
double rtk::simple::HuangThresholdImageFilter::GetThreshold() const

Get the computed threshold.


This is a measurement. Its value is updated in the Execute methods, so
the value will only be valid after an execution.

*/
public ";

%javamethodmodifiers  rtk::simple::HuangThresholdImageFilter::HuangThresholdImageFilter "/**
rtk::simple::HuangThresholdImageFilter::HuangThresholdImageFilter()

Default Constructor that takes no arguments and initializes default
parameters

*/
public ";

%javamethodmodifiers  rtk::simple::HuangThresholdImageFilter::MaskOutputOff "/**
Self& rtk::simple::HuangThresholdImageFilter::MaskOutputOff()
*/
public ";

%javamethodmodifiers  rtk::simple::HuangThresholdImageFilter::MaskOutputOn "/**
Self& rtk::simple::HuangThresholdImageFilter::MaskOutputOn()

Set the value of MaskOutput to true or false respectfully.

*/
public ";

%javamethodmodifiers  rtk::simple::HuangThresholdImageFilter::SetInsideValue "/**
Self& rtk::simple::HuangThresholdImageFilter::SetInsideValue(uint8_t InsideValue)

Set the \"inside\" pixel value. The default value NumericTraits<OutputPixelType>::max()

*/
public ";

%javamethodmodifiers  rtk::simple::HuangThresholdImageFilter::SetMaskOutput "/**
Self& rtk::simple::HuangThresholdImageFilter::SetMaskOutput(bool MaskOutput)

Do you want the output to be masked by the mask used in histogram
construction. Only relevant if masking is in use.

*/
public ";

%javamethodmodifiers  rtk::simple::HuangThresholdImageFilter::SetMaskValue "/**
Self& rtk::simple::HuangThresholdImageFilter::SetMaskValue(uint8_t MaskValue)

The value in the mask image, if used, indicating voxels that should be
included. Default is the max of pixel type, as in the
MaskedImageToHistogramFilter

*/
public ";

%javamethodmodifiers  rtk::simple::HuangThresholdImageFilter::SetNumberOfHistogramBins "/**
Self& rtk::simple::HuangThresholdImageFilter::SetNumberOfHistogramBins(uint32_t NumberOfHistogramBins)

Set/Get the number of histogram bins. Defaults is 128.

*/
public ";

%javamethodmodifiers  rtk::simple::HuangThresholdImageFilter::SetOutsideValue "/**
Self& rtk::simple::HuangThresholdImageFilter::SetOutsideValue(uint8_t OutsideValue)

Set the \"outside\" pixel value. The default value NumericTraits<OutputPixelType>::Zero.

*/
public ";

%javamethodmodifiers  rtk::simple::HuangThresholdImageFilter::ToString "/**
std::string rtk::simple::HuangThresholdImageFilter::ToString() const

Print ourselves out

*/
public ";

%javamethodmodifiers  rtk::simple::HuangThresholdImageFilter::~HuangThresholdImageFilter "/**
rtk::simple::HuangThresholdImageFilter::~HuangThresholdImageFilter()

Destructor

*/
public ";


%typemap(javaimports) rtk::simple::Image "/**

The main Image class for SimpleRTK.

C++ includes: srtkImage.h
*/"

%javamethodmodifiers  rtk::simple::Image::CopyInformation "/**
void rtk::simple::Image::CopyInformation(const Image &srcImage)

Copy common meta-data from an image to this one.


Copies the Origin, Spacing, and Direction from the source image to
this image. The meta-data dictionary is not copied.

It is required for the source Image's dimension and size to match, this image's attributes, otherwise an
exception will be generated.

*/
public ";

%javamethodmodifiers  rtk::simple::Image::EraseMetaData "/**
bool rtk::simple::Image::EraseMetaData(const std::string &key)

Remove an entry from the meta-data dictionary.


Returns true, when the value exists in the dictionary and is removed,
false otherwise.

*/
public ";

%javamethodmodifiers  rtk::simple::Image::GetDepth "/**
unsigned int rtk::simple::Image::GetDepth(void) const
*/
public ";

%javamethodmodifiers  rtk::simple::Image::GetDimension "/**
unsigned int rtk::simple::Image::GetDimension(void) const
*/
public ";

%javamethodmodifiers  rtk::simple::Image::GetHeight "/**
unsigned int rtk::simple::Image::GetHeight(void) const
*/
public ";

%javamethodmodifiers  rtk::simple::Image::GetMetaData "/**
std::string rtk::simple::Image::GetMetaData(const std::string &key) const

Get the value of a meta-data dictionary entry as a string.


If the key is not in the dictionary then an exception is thrown.

string types in the dictionary are returned as their native strings.
Other types are printed to string before returning.

*/
public ";

%javamethodmodifiers  rtk::simple::Image::GetMetaDataKeys "/**
std::vector<std::string> rtk::simple::Image::GetMetaDataKeys(void) const

get a vector of keys in from the meta-data dictionary


Returns a vector of keys to the key/value entries in the image's meta-
data dictionary. Iterate through with these keys to get the values.

*/
public ";

%javamethodmodifiers  rtk::simple::Image::GetNumberOfComponentsPerPixel "/**
unsigned int rtk::simple::Image::GetNumberOfComponentsPerPixel(void) const

Get the number of components for each pixel.


For scalar images this methods returns 1. For vector images the number
of components for each pixel is returned.

*/
public ";

%javamethodmodifiers  rtk::simple::Image::GetPixelID "/**
PixelIDValueEnum rtk::simple::Image::GetPixelID(void) const
*/
public ";

%javamethodmodifiers  rtk::simple::Image::GetPixelIDTypeAsString "/**
std::string rtk::simple::Image::GetPixelIDTypeAsString(void) const
*/
public ";

%javamethodmodifiers  rtk::simple::Image::GetPixelIDValue "/**
PixelIDValueType rtk::simple::Image::GetPixelIDValue(void) const
*/
public ";

%javamethodmodifiers  rtk::simple::Image::GetSize "/**
std::vector< unsigned int > rtk::simple::Image::GetSize(void) const
*/
public ";

%javamethodmodifiers  rtk::simple::Image::GetWidth "/**
unsigned int rtk::simple::Image::GetWidth(void) const
*/
public ";

%javamethodmodifiers  rtk::simple::Image::HasMetaDataKey "/**
bool rtk::simple::Image::HasMetaDataKey(const std::string &key) const

Query the meta-data dictionary for the existence of a key.

*/
public ";

%javamethodmodifiers  rtk::simple::Image::Image "/**
rtk::simple::Image::Image(void)

Default constructor, creates an image of size 0.

*/
public ";

%javamethodmodifiers  rtk::simple::Image::Image "/**
rtk::simple::Image::Image(const Image &img)
*/
public ";

%javamethodmodifiers  rtk::simple::Image::MakeUnique "/**
void rtk::simple::Image::MakeUnique(void)

Performs actually coping if needed to make object unique.


The Image class by default performs lazy coping and assignment. This method
make sure that coping actually happens to the itk::Image pointed to is only pointed to by this object.

*/
public ";

%javamethodmodifiers  rtk::simple::Image::SetMetaData "/**
void rtk::simple::Image::SetMetaData(const std::string &key, const std::string &value)

Set an entry in the meta-data dictionary.


Replaces or creates an entry in the image's meta-data dictionary.

*/
public ";

%javamethodmodifiers  rtk::simple::Image::ToString "/**
std::string rtk::simple::Image::ToString(void) const
*/
public ";

%javamethodmodifiers  rtk::simple::Image::TransformContinuousIndexToPhysicalPoint "/**
std::vector< double > rtk::simple::Image::TransformContinuousIndexToPhysicalPoint(const std::vector< double > &index) const

Transform continuous index to physical point

*/
public ";

%javamethodmodifiers  rtk::simple::Image::TransformIndexToPhysicalPoint "/**
std::vector< double > rtk::simple::Image::TransformIndexToPhysicalPoint(const std::vector< int64_t > &index) const

Transform index to physical point

*/
public ";

%javamethodmodifiers  rtk::simple::Image::TransformPhysicalPointToContinuousIndex "/**
std::vector< double > rtk::simple::Image::TransformPhysicalPointToContinuousIndex(const std::vector< double > &point) const

Transform physical point to continuous index

*/
public ";

%javamethodmodifiers  rtk::simple::Image::TransformPhysicalPointToIndex "/**
std::vector< int64_t > rtk::simple::Image::TransformPhysicalPointToIndex(const std::vector< double > &point) const

Transform physical point to index

*/
public ";

%javamethodmodifiers  rtk::simple::Image::~Image "/**
virtual rtk::simple::Image::~Image()
*/
public ";


%typemap(javaimports) rtk::simple::ImageFileReader "/**

Read a 2D or 3D image and return a smart pointer to a SimpleRTK image.


This reader handles scalar and vector images and returns an image with
the same type as the file on disk.


See:
 rtk::simple::ReadImage for the procedural interface


C++ includes: srtkImageFileReader.h
*/"

%javamethodmodifiers  rtk::simple::ImageFileReader::Execute "/**
Image rtk::simple::ImageFileReader::Execute()
*/
public ";

%javamethodmodifiers  rtk::simple::ImageFileReader::GetFileName "/**
std::string rtk::simple::ImageFileReader::GetFileName() const
*/
public ";

%javamethodmodifiers  rtk::simple::ImageFileReader::GetName "/**
virtual std::string rtk::simple::ImageFileReader::GetName() const

return user readable name fo the filter

*/
public ";

%javamethodmodifiers  rtk::simple::ImageFileReader::ImageFileReader "/**
rtk::simple::ImageFileReader::ImageFileReader()
*/
public ";

%javamethodmodifiers  rtk::simple::ImageFileReader::SetFileName "/**
Self& rtk::simple::ImageFileReader::SetFileName(std::string fn)
*/
public ";

%javamethodmodifiers  rtk::simple::ImageFileReader::ToString "/**
virtual std::string rtk::simple::ImageFileReader::ToString() const

Print ourselves to string

*/
public ";


%typemap(javaimports) rtk::simple::ImageFileWriter "/**

Write out a SimpleRTK image to the specified file location.


This writer tries to write the image out using the image's type to the
location specified in FileName. If writing fails, an ITK exception is
thrown.


See:
 rtk::simple::WriteImage for the procedural interface


C++ includes: srtkImageFileWriter.h
*/"

%javamethodmodifiers  rtk::simple::ImageFileWriter::Execute "/**
Self& rtk::simple::ImageFileWriter::Execute(const Image &)
*/
public ";

%javamethodmodifiers  rtk::simple::ImageFileWriter::Execute "/**
Self& rtk::simple::ImageFileWriter::Execute(const Image &, const std::string &inFileName, bool inUseCompression)
*/
public ";

%javamethodmodifiers  rtk::simple::ImageFileWriter::GetFileName "/**
std::string rtk::simple::ImageFileWriter::GetFileName() const
*/
public ";

%javamethodmodifiers  rtk::simple::ImageFileWriter::GetName "/**
virtual std::string rtk::simple::ImageFileWriter::GetName() const

return user readable name fo the filter

*/
public ";

%javamethodmodifiers  rtk::simple::ImageFileWriter::ImageFileWriter "/**
rtk::simple::ImageFileWriter::ImageFileWriter(void)
*/
public ";

%javamethodmodifiers  rtk::simple::ImageFileWriter::SetFileName "/**
Self& rtk::simple::ImageFileWriter::SetFileName(std::string fileName)
*/
public ";

%javamethodmodifiers  rtk::simple::ImageFileWriter::ToString "/**
virtual std::string rtk::simple::ImageFileWriter::ToString() const

Print ourselves to string

*/
public ";


%typemap(javaimports) rtk::simple::ImageFilter "/**

The base interface for SimpleRTK filters that take one input image.


All SimpleRTK filters which take one input image should inherit from
this class

C++ includes: srtkImageFilter.h
*/"

%javamethodmodifiers  rtk::simple::ImageFilter::ImageFilter "/**
rtk::simple::ImageFilter< N >::ImageFilter()

Default Constructor that takes no arguments and initializes default
parameters

*/
public ";

%javamethodmodifiers  rtk::simple::ImageFilter::~ImageFilter "/**
virtual rtk::simple::ImageFilter< N >::~ImageFilter()=0

Default Destructor

*/
public ";


%typemap(javaimports) rtk::simple::ImageReaderBase "/**

An abract base class for image readers.

C++ includes: srtkImageReaderBase.h
*/"

%javamethodmodifiers  rtk::simple::ImageReaderBase::Execute "/**
virtual Image rtk::simple::ImageReaderBase::Execute()=0
*/
public ";

%javamethodmodifiers  rtk::simple::ImageReaderBase::ImageReaderBase "/**
rtk::simple::ImageReaderBase::ImageReaderBase()
*/
public ";

%javamethodmodifiers  rtk::simple::ImageReaderBase::ToString "/**
virtual std::string rtk::simple::ImageReaderBase::ToString() const
*/
public ";


%typemap(javaimports) rtk::simple::ImageRegistrationMethod "/**

An interface method to the modular ITKv4 registration framework.


This interface method class encapsulates typical registration usage by
incorporating all the necessary elements for performing a simple image
registration between two images. This method also allows for
multistage registration whereby each stage is characterized by
possibly different transforms and different image metrics. For
example, many users will want to perform a linear registration
followed by deformable registration where both stages are performed in
multiple levels. Each level can be characterized by:


the resolution of the virtual domain image (see below)

smoothing of the fixed and moving images
 Multiple stages are handled by linking multiple instantiations of
this class where the output transform is added to the optional
composite transform input.


See:
 itk::ImageRegistrationMethodv4

 itk::ImageToImageMetricv4

 itk::ObjectToObjectOptimizerBaseTemplate


C++ includes: srtkImageRegistrationMethod.h
*/"

%javamethodmodifiers  rtk::simple::ImageRegistrationMethod::Execute "/**
Transform rtk::simple::ImageRegistrationMethod::Execute(const Image &fixed, const Image &moving)

Optimize the configured registration problem.

*/
public ";

%javamethodmodifiers  rtk::simple::ImageRegistrationMethod::GetCurrentLevel "/**
unsigned int rtk::simple::ImageRegistrationMethod::GetCurrentLevel() const
*/
public ";

%javamethodmodifiers  rtk::simple::ImageRegistrationMethod::GetMetricValue "/**
double rtk::simple::ImageRegistrationMethod::GetMetricValue() const
*/
public ";

%javamethodmodifiers  rtk::simple::ImageRegistrationMethod::GetName "/**
std::string rtk::simple::ImageRegistrationMethod::GetName() const

return user readable name for the filter

*/
public ";

%javamethodmodifiers  rtk::simple::ImageRegistrationMethod::GetOptimizerConvergenceValue "/**
double rtk::simple::ImageRegistrationMethod::GetOptimizerConvergenceValue() const
*/
public ";

%javamethodmodifiers  rtk::simple::ImageRegistrationMethod::GetOptimizerIteration "/**
unsigned int rtk::simple::ImageRegistrationMethod::GetOptimizerIteration() const

Active measurements which can be obtained during call backs.

This is a measurement. Its value is updated in the Execute methods, so
the value will only be valid after an execution.

*/
public ";

%javamethodmodifiers  rtk::simple::ImageRegistrationMethod::GetOptimizerLearningRate "/**
double rtk::simple::ImageRegistrationMethod::GetOptimizerLearningRate() const
*/
public ";

%javamethodmodifiers  rtk::simple::ImageRegistrationMethod::GetOptimizerPosition "/**
std::vector<double> rtk::simple::ImageRegistrationMethod::GetOptimizerPosition() const
*/
public ";

%javamethodmodifiers  rtk::simple::ImageRegistrationMethod::GetOptimizerScales "/**
std::vector<double> rtk::simple::ImageRegistrationMethod::GetOptimizerScales() const

Get the OptimizerScales.


If the scales are explicitly set then this method returns those
values. If an estimator is used then this is an active measurement
returning the scales estimated by the estimator and is only available
during execution.

*/
public ";

%javamethodmodifiers  rtk::simple::ImageRegistrationMethod::GetOptimizerStopConditionDescription "/**
std::string rtk::simple::ImageRegistrationMethod::GetOptimizerStopConditionDescription() const

Measurement updated at the end of execution.

*/
public ";

%javamethodmodifiers  rtk::simple::ImageRegistrationMethod::ImageRegistrationMethod "/**
rtk::simple::ImageRegistrationMethod::ImageRegistrationMethod()
*/
public ";

%javamethodmodifiers  rtk::simple::ImageRegistrationMethod::MetricEvaluate "/**
double rtk::simple::ImageRegistrationMethod::MetricEvaluate(const Image &fixed, const Image &moving)

Get the value of the metric given the state of the method.


Passing a fixed and moving image, this method constructs and
configures a metric object to obtain the value. This will take into
consideration the current transforms, metric, interpolator, and image
masks. It does not take into consideration the sampling strategy,
smoothing sigmas, or the shrink factors.

*/
public ";

%javamethodmodifiers  rtk::simple::ImageRegistrationMethod::SetMetricAsANTSNeighborhoodCorrelation "/**
Self& rtk::simple::ImageRegistrationMethod::SetMetricAsANTSNeighborhoodCorrelation(unsigned int radius)

Use normalized cross correlation using a small neighborhood for each
voxel between two images, with speed optimizations for dense
registration.



See:
 itk::ANTSNeighborhoodCorrelationImageToImageMetricv4


*/
public ";

%javamethodmodifiers  rtk::simple::ImageRegistrationMethod::SetMetricAsCorrelation "/**
Self& rtk::simple::ImageRegistrationMethod::SetMetricAsCorrelation()

Use negative normalized cross correlation image metric.



See:
 itk::CorrelationImageToImageMetricv4


*/
public ";

%javamethodmodifiers  rtk::simple::ImageRegistrationMethod::SetMetricAsDemons "/**
Self& rtk::simple::ImageRegistrationMethod::SetMetricAsDemons(double intensityDifferenceThreshold=0.001)

Use demons image metric.



See:
 itk::DemonsImageToImageMetricv4


*/
public ";

%javamethodmodifiers  rtk::simple::ImageRegistrationMethod::SetMetricAsJointHistogramMutualInformation "/**
Self& rtk::simple::ImageRegistrationMethod::SetMetricAsJointHistogramMutualInformation(unsigned int numberOfHistogramBins=20, double
varianceForJointPDFSmoothing=1.5)

Use mutual information between two images.



See:
 itk::JointHistogramMutualInformationImageToImageMetricv4


*/
public ";

%javamethodmodifiers  rtk::simple::ImageRegistrationMethod::SetMetricAsMattesMutualInformation "/**
Self& rtk::simple::ImageRegistrationMethod::SetMetricAsMattesMutualInformation(unsigned int numberOfHistogramBins=50)

Use the mutual information between two images to be registered using
the method of Mattes et al.



See:
 itk::MattesMutualInformationImageToImageMetricv4


*/
public ";

%javamethodmodifiers  rtk::simple::ImageRegistrationMethod::SetMetricAsMeanSquares "/**
Self& rtk::simple::ImageRegistrationMethod::SetMetricAsMeanSquares()

Use negative means squares image metric.



See:
 itk::MeanSquaresImageToImageMetricv4


*/
public ";

%javamethodmodifiers  rtk::simple::ImageRegistrationMethod::SetMetricFixedMask "/**
Self& rtk::simple::ImageRegistrationMethod::SetMetricFixedMask(const Image &binaryMask)

Set an image mask in order to restrict the sampled points for the
metric.


The image is expected to be in the same physical space as the
FixedImage, and if the pixel type is not UInt8 than the image will
base cast.


See:
itk::ImageToImageMetricv4::SetFixedImageMask


*/
public ";

%javamethodmodifiers  rtk::simple::ImageRegistrationMethod::SetMetricMovingMask "/**
Self& rtk::simple::ImageRegistrationMethod::SetMetricMovingMask(const Image &binaryMask)

Set an image mask in order to restrict the sampled points for the
metric in the moving image space.


The image is expected to be in the same physical space as the
MovingImage, and if the pixel type is not UInt8 than the image will
base cast.


See:
itk::ImageToImageMetricv4::SetMovingImageMask


*/
public ";

%javamethodmodifiers  rtk::simple::ImageRegistrationMethod::SetMetricSamplingStrategy "/**
Self& rtk::simple::ImageRegistrationMethod::SetMetricSamplingStrategy(MetricSamplingStrategyType strategy)

Set sampling strategy for sample generation.



See:
itk::ImageRegistrationMethodv4::SetMetricSamplingStrategy


*/
public ";

%javamethodmodifiers  rtk::simple::ImageRegistrationMethod::SetOptimizerAsAmoeba "/**
Self& rtk::simple::ImageRegistrationMethod::SetOptimizerAsAmoeba(double simplexDelta, unsigned int numberOfIterations, double
parametersConvergenceTolerance=1e-8, double
functionConvergenceTolerance=1e-4, bool withRestarts=false)

Set optimizer to Nelder-Mead downhill simplex algorithm.



See:
 itk::AmoebaOptimizerv4


*/
public ";

%javamethodmodifiers  rtk::simple::ImageRegistrationMethod::SetOptimizerAsConjugateGradientLineSearch "/**
Self& rtk::simple::ImageRegistrationMethod::SetOptimizerAsConjugateGradientLineSearch(double learningRate, unsigned int numberOfIterations, double
convergenceMinimumValue=1e-6, unsigned int convergenceWindowSize=10,
double lineSearchLowerLimit=0, double lineSearchUpperLimit=5.0, double
lineSearchEpsilon=0.01, unsigned int lineSearchMaximumIterations=20,
EstimateLearningRateType estimateLearningRate=Once, double
maximumStepSizeInPhysicalUnits=0.0)

Conjugate gradient descent optimizer with a golden section line search
for nonlinear optimization.



See:
 itk::ConjugateGradientLineSearchOptimizerv4Template


*/
public ";

%javamethodmodifiers  rtk::simple::ImageRegistrationMethod::SetOptimizerAsExhaustive "/**
Self& rtk::simple::ImageRegistrationMethod::SetOptimizerAsExhaustive(const std::vector< unsigned int > &numberOfSteps, double
stepLength=1.0)

Set the optimizer to sample the metric at regular steps.


At each iteration the GetOptimizerIteration, can be used to index into
the sampling grid along with the GetCurrentMetricValue.

The resulting transform and value at the end of execution is the best
location.

The OptimizerScales can be used to perform anisotropic sampling.


This optimizer is not suitable for use in conjunction with the
multiple scales.

See:
 itk::ExhaustiveOptimizerv4


*/
public ";

%javamethodmodifiers  rtk::simple::ImageRegistrationMethod::SetOptimizerAsGradientDescent "/**
Self& rtk::simple::ImageRegistrationMethod::SetOptimizerAsGradientDescent(double learningRate, unsigned int numberOfIterations, double
convergenceMinimumValue=1e-6, unsigned int convergenceWindowSize=10,
EstimateLearningRateType estimateLearningRate=Once, double
maximumStepSizeInPhysicalUnits=0.0)

Gradient descent optimizer.



See:
 itk::GradientDescentOptimizerv4Template


*/
public ";

%javamethodmodifiers  rtk::simple::ImageRegistrationMethod::SetOptimizerAsGradientDescentLineSearch "/**
Self& rtk::simple::ImageRegistrationMethod::SetOptimizerAsGradientDescentLineSearch(double learningRate, unsigned int numberOfIterations, double
convergenceMinimumValue=1e-6, unsigned int convergenceWindowSize=10,
double lineSearchLowerLimit=0, double lineSearchUpperLimit=5.0, double
lineSearchEpsilon=0.01, unsigned int lineSearchMaximumIterations=20,
EstimateLearningRateType estimateLearningRate=Once, double
maximumStepSizeInPhysicalUnits=0.0)

Gradient descent optimizer with a golden section line search.



See:
 itk::GradientDescentLineSearchOptimizerv4Template


*/
public ";

%javamethodmodifiers  rtk::simple::ImageRegistrationMethod::SetOptimizerAsLBFGSB "/**
Self& rtk::simple::ImageRegistrationMethod::SetOptimizerAsLBFGSB(double gradientConvergenceTolerance=1e-5, unsigned int
numberOfIterations=500, unsigned int maximumNumberOfCorrections=5,
unsigned int maximumNumberOfFunctionEvaluations=2000, double
costFunctionConvergenceFactor=1e+7, double
lowerBound=std::numeric_limits< double >::min(), double
upperBound=std::numeric_limits< double >::max(), bool trace=false)

Limited memory Broyden Fletcher Goldfarb Shannon minimization with
simple bounds.


The default parameters utilize LBFGSB in unbounded mode.


See:
 itk::LBFGSBOptimizerv4


*/
public ";

%javamethodmodifiers  rtk::simple::ImageRegistrationMethod::SetOptimizerAsPowell "/**
Self& rtk::simple::ImageRegistrationMethod::SetOptimizerAsPowell(unsigned int numberOfIterations=100, unsigned int
maximumLineIterations=100, double stepLength=1, double
stepTolerance=1e-6, double valueTolerance=1e-6)

Powell optimization using Brent line search.



See:
 itk::PowellOptimizerv4


*/
public ";

%javamethodmodifiers  rtk::simple::ImageRegistrationMethod::SetOptimizerAsRegularStepGradientDescent "/**
Self& rtk::simple::ImageRegistrationMethod::SetOptimizerAsRegularStepGradientDescent(double learningRate, double minStep, unsigned int numberOfIterations,
double relaxationFactor=0.5, double gradientMagnitudeTolerance=1e-4,
EstimateLearningRateType estimateLearningRate=Never, double
maximumStepSizeInPhysicalUnits=0.0)

Regular Step Gradient descent optimizer.



See:
 itk::RegularStepGradientDescentOptimizerv4


*/
public ";

%javamethodmodifiers  rtk::simple::ImageRegistrationMethod::SetOptimizerScales "/**
Self& rtk::simple::ImageRegistrationMethod::SetOptimizerScales(const std::vector< double > &scales)

Manually set per parameter weighting for the transform parameters.

*/
public ";

%javamethodmodifiers  rtk::simple::ImageRegistrationMethod::SetOptimizerScalesFromIndexShift "/**
Self& rtk::simple::ImageRegistrationMethod::SetOptimizerScalesFromIndexShift(unsigned int centralRegionRadius=5, double
smallParameterVariation=0.01)

Estimate scales from maximum voxel shift in index space cause by
parameter change.



See:
 itk::RegistrationParameterScalesFromIndexShift


*/
public ";

%javamethodmodifiers  rtk::simple::ImageRegistrationMethod::SetOptimizerScalesFromJacobian "/**
Self& rtk::simple::ImageRegistrationMethod::SetOptimizerScalesFromJacobian(unsigned int centralRegionRadius=5)

Estimate scales from Jacobian norms.


This scales estimator works well with versor based transforms.


See:
 itk::RegistrationParameterScalesFromJacobian


*/
public ";

%javamethodmodifiers  rtk::simple::ImageRegistrationMethod::SetOptimizerScalesFromPhysicalShift "/**
Self& rtk::simple::ImageRegistrationMethod::SetOptimizerScalesFromPhysicalShift(unsigned int centralRegionRadius=5, double
smallParameterVariation=0.01)

Estimating scales of transform parameters a step sizes, from the
maximum voxel shift in physical space caused by a parameter change.



See:
 itk::RegistrationParameterScalesFromPhysicalShift


*/
public ";

%javamethodmodifiers  rtk::simple::ImageRegistrationMethod::SetShrinkFactorsPerLevel "/**
Self& rtk::simple::ImageRegistrationMethod::SetShrinkFactorsPerLevel(const std::vector< unsigned int > &shrinkFactors)

Set the shrink factors for each level where each level has the same
shrink factor for each dimension.



See:
itk::ImageRegistrationMethodv4::SetShrinkFactorsPerLevel


*/
public ";

%javamethodmodifiers  rtk::simple::ImageRegistrationMethod::SetSmoothingSigmasPerLevel "/**
Self& rtk::simple::ImageRegistrationMethod::SetSmoothingSigmasPerLevel(const std::vector< double > &smoothingSigmas)

Set the sigmas of Gaussian used for smoothing at each level.



See:
itk::ImageRegistrationMethodv4::SetSmoothingSigmasPerLevel


*/
public ";

%javamethodmodifiers  rtk::simple::ImageRegistrationMethod::ToString "/**
std::string rtk::simple::ImageRegistrationMethod::ToString() const

Print the information about the object to a string.


If called when the process is being executed ( during a callback ),
the ITK Optimizer and Transform objects will be printed.

*/
public ";

%javamethodmodifiers  rtk::simple::ImageRegistrationMethod::~ImageRegistrationMethod "/**
virtual rtk::simple::ImageRegistrationMethod::~ImageRegistrationMethod()
*/
public ";


%typemap(javaimports) rtk::simple::ImageSeriesReader "/**

Read series of image into a SimpleRTK image.



See:
 rtk::simple::ReadImage for the procedural interface


C++ includes: srtkImageSeriesReader.h
*/"

%javamethodmodifiers  rtk::simple::ImageSeriesReader::Execute "/**
Image rtk::simple::ImageSeriesReader::Execute()
*/
public ";

%javamethodmodifiers  rtk::simple::ImageSeriesReader::GetFileNames "/**
const std::vector<std::string>& rtk::simple::ImageSeriesReader::GetFileNames() const
*/
public ";

%javamethodmodifiers  rtk::simple::ImageSeriesReader::GetName "/**
virtual std::string rtk::simple::ImageSeriesReader::GetName() const

return user readable name fo the filter

*/
public ";

%javamethodmodifiers  rtk::simple::ImageSeriesReader::ImageSeriesReader "/**
rtk::simple::ImageSeriesReader::ImageSeriesReader()
*/
public ";

%javamethodmodifiers  rtk::simple::ImageSeriesReader::SetFileNames "/**
Self& rtk::simple::ImageSeriesReader::SetFileNames(const std::vector< std::string > &fileNames)
*/
public ";

%javamethodmodifiers  rtk::simple::ImageSeriesReader::ToString "/**
virtual std::string rtk::simple::ImageSeriesReader::ToString() const

Print ourselves to string

*/
public ";


%typemap(javaimports) rtk::simple::ImageSeriesWriter "/**

Writer series of image from a SimpleRTK image.



See:
 rtk::simple::WriteImage for the procedural interface


C++ includes: srtkImageSeriesWriter.h
*/"

%javamethodmodifiers  rtk::simple::ImageSeriesWriter::Execute "/**
Self& rtk::simple::ImageSeriesWriter::Execute(const Image &)
*/
public ";

%javamethodmodifiers  rtk::simple::ImageSeriesWriter::Execute "/**
Self& rtk::simple::ImageSeriesWriter::Execute(const Image &image, const std::vector< std::string > &inFileNames,
bool inUseCompression)
*/
public ";

%javamethodmodifiers  rtk::simple::ImageSeriesWriter::GetName "/**
virtual std::string rtk::simple::ImageSeriesWriter::GetName() const

return user readable name fo the filter

*/
public ";

%javamethodmodifiers  rtk::simple::ImageSeriesWriter::ImageSeriesWriter "/**
rtk::simple::ImageSeriesWriter::ImageSeriesWriter()
*/
public ";

%javamethodmodifiers  rtk::simple::ImageSeriesWriter::ToString "/**
virtual std::string rtk::simple::ImageSeriesWriter::ToString() const

Print ourselves to string

*/
public ";


%typemap(javaimports) rtk::simple::ImportImageFilter "/**

Compose a 2D or 3D image and return a smart pointer to a SimpleRTK
image.


This filter is intended to interface SimpleRTK to other image
processing libraries and applications that may have their own
representation of an image class. It creates a SimpleRTK image which
shares the bulk data buffer as what is set. SimpleRTK will not
responsible to delete the buffer afterwards, and it buffer must remain
valid while in use.


See:
 rtk::simple::ImportAsInt8, rtk::simple::ImportAsUInt8, rtk::simple::ImportAsInt16, rtk::simple::ImportAsUInt16, rtk::simple::ImportAsInt32, rtk::simple::ImportAsUInt32, rtk::simple::ImportAsInt64, rtk::simple::ImportAsUInt64, rtk::simple::ImportAsFloat, rtk::simple::ImportAsDouble for the procedural interfaces.


C++ includes: srtkImportImageFilter.h
*/"

%javamethodmodifiers  rtk::simple::ImportImageFilter::Execute "/**
Image rtk::simple::ImportImageFilter::Execute()
*/
public ";

%javamethodmodifiers  rtk::simple::ImportImageFilter::GetDirection "/**
const std::vector< double >& rtk::simple::ImportImageFilter::GetDirection() const
*/
public ";

%javamethodmodifiers  rtk::simple::ImportImageFilter::GetName "/**
virtual std::string rtk::simple::ImportImageFilter::GetName() const

return user readable name fo the filter

*/
public ";

%javamethodmodifiers  rtk::simple::ImportImageFilter::GetOrigin "/**
const std::vector< double >& rtk::simple::ImportImageFilter::GetOrigin() const
*/
public ";

%javamethodmodifiers  rtk::simple::ImportImageFilter::GetSize "/**
const std::vector< unsigned int >& rtk::simple::ImportImageFilter::GetSize() const
*/
public ";

%javamethodmodifiers  rtk::simple::ImportImageFilter::GetSpacing "/**
const std::vector< double >& rtk::simple::ImportImageFilter::GetSpacing() const
*/
public ";

%javamethodmodifiers  rtk::simple::ImportImageFilter::ImportImageFilter "/**
rtk::simple::ImportImageFilter::ImportImageFilter()
*/
public ";

%javamethodmodifiers  rtk::simple::ImportImageFilter::SetBufferAsDouble "/**
Self& rtk::simple::ImportImageFilter::SetBufferAsDouble(double *buffer, unsigned int numberOfComponents=1)
*/
public ";

%javamethodmodifiers  rtk::simple::ImportImageFilter::SetBufferAsFloat "/**
Self& rtk::simple::ImportImageFilter::SetBufferAsFloat(float *buffer, unsigned int numberOfComponents=1)
*/
public ";

%javamethodmodifiers  rtk::simple::ImportImageFilter::SetBufferAsInt16 "/**
Self& rtk::simple::ImportImageFilter::SetBufferAsInt16(int16_t *buffer, unsigned int numberOfComponents=1)
*/
public ";

%javamethodmodifiers  rtk::simple::ImportImageFilter::SetBufferAsInt32 "/**
Self& rtk::simple::ImportImageFilter::SetBufferAsInt32(int32_t *buffer, unsigned int numberOfComponents=1)
*/
public ";

%javamethodmodifiers  rtk::simple::ImportImageFilter::SetBufferAsInt64 "/**
Self& rtk::simple::ImportImageFilter::SetBufferAsInt64(int64_t *buffer, unsigned int numberOfComponents=1)
*/
public ";

%javamethodmodifiers  rtk::simple::ImportImageFilter::SetBufferAsInt8 "/**
Self& rtk::simple::ImportImageFilter::SetBufferAsInt8(int8_t *buffer, unsigned int numberOfComponents=1)
*/
public ";

%javamethodmodifiers  rtk::simple::ImportImageFilter::SetBufferAsUInt16 "/**
Self& rtk::simple::ImportImageFilter::SetBufferAsUInt16(uint16_t *buffer, unsigned int numberOfComponents=1)
*/
public ";

%javamethodmodifiers  rtk::simple::ImportImageFilter::SetBufferAsUInt32 "/**
Self& rtk::simple::ImportImageFilter::SetBufferAsUInt32(uint32_t *buffer, unsigned int numberOfComponents=1)
*/
public ";

%javamethodmodifiers  rtk::simple::ImportImageFilter::SetBufferAsUInt64 "/**
Self& rtk::simple::ImportImageFilter::SetBufferAsUInt64(uint64_t *buffer, unsigned int numberOfComponents=1)
*/
public ";

%javamethodmodifiers  rtk::simple::ImportImageFilter::SetBufferAsUInt8 "/**
Self& rtk::simple::ImportImageFilter::SetBufferAsUInt8(uint8_t *buffer, unsigned int numberOfComponents=1)
*/
public ";

%javamethodmodifiers  rtk::simple::ImportImageFilter::SetDirection "/**
Self& rtk::simple::ImportImageFilter::SetDirection(const std::vector< double > &direction)
*/
public ";

%javamethodmodifiers  rtk::simple::ImportImageFilter::SetOrigin "/**
Self& rtk::simple::ImportImageFilter::SetOrigin(const std::vector< double > &origin)
*/
public ";

%javamethodmodifiers  rtk::simple::ImportImageFilter::SetSize "/**
Self& rtk::simple::ImportImageFilter::SetSize(const std::vector< unsigned int > &size)
*/
public ";

%javamethodmodifiers  rtk::simple::ImportImageFilter::SetSpacing "/**
Self& rtk::simple::ImportImageFilter::SetSpacing(const std::vector< double > &spacing)
*/
public ";

%javamethodmodifiers  rtk::simple::ImportImageFilter::ToString "/**
virtual std::string rtk::simple::ImportImageFilter::ToString() const

Print ourselves to string

*/
public ";


%typemap(javaimports) rtk::simple::IntensityWindowingImageFilter "/**

Applies a linear transformation to the intensity levels of the input Image that are inside a user-defined interval. Values below this interval
are mapped to a constant. Values over the interval are mapped to
another constant.


IntensityWindowingImageFilter applies pixel-wise a linear transformation to the intensity values of
input image pixels. The linear transformation is defined by the user
in terms of the minimum and maximum values that the output image
should have and the lower and upper limits of the intensity window of
the input image. This operation is very common in visualization, and
can also be applied as a convenient preprocessing operation for image
segmentation.

All computations are performed in the precison of the input pixel's
RealType. Before assigning the computed value to the output pixel.

Wiki Examples:

All Examples

IntensityWindowingImageFilter

See:
 RescaleIntensityImageFilter

 rtk::simple::IntensityWindowing for the procedural interface

 itk::IntensityWindowingImageFilter for the Doxygen on the original ITK class.


C++ includes: srtkIntensityWindowingImageFilter.h
*/"

%javamethodmodifiers  rtk::simple::IntensityWindowingImageFilter::Execute "/**
Image rtk::simple::IntensityWindowingImageFilter::Execute(const Image &image1)

Execute the filter on the input image

*/
public ";

%javamethodmodifiers  rtk::simple::IntensityWindowingImageFilter::Execute "/**
Image rtk::simple::IntensityWindowingImageFilter::Execute(const Image &image1, double windowMinimum, double windowMaximum,
double outputMinimum, double outputMaximum)

Execute the filter on the input image with the given parameters

*/
public ";

%javamethodmodifiers  rtk::simple::IntensityWindowingImageFilter::GetName "/**
std::string rtk::simple::IntensityWindowingImageFilter::GetName() const

Name of this class

*/
public ";

%javamethodmodifiers  rtk::simple::IntensityWindowingImageFilter::GetOutputMaximum "/**
double rtk::simple::IntensityWindowingImageFilter::GetOutputMaximum() const

Set/Get the values of the maximum and minimum intensities of the
outputimage

*/
public ";

%javamethodmodifiers  rtk::simple::IntensityWindowingImageFilter::GetOutputMinimum "/**
double rtk::simple::IntensityWindowingImageFilter::GetOutputMinimum() const

Set/Get the values of the maximum and minimum intensities of the
outputimage

*/
public ";

%javamethodmodifiers  rtk::simple::IntensityWindowingImageFilter::GetWindowMaximum "/**
double rtk::simple::IntensityWindowingImageFilter::GetWindowMaximum() const

Set/Get the values of the maximum and minimum intensities of the input
intensity window

*/
public ";

%javamethodmodifiers  rtk::simple::IntensityWindowingImageFilter::GetWindowMinimum "/**
double rtk::simple::IntensityWindowingImageFilter::GetWindowMinimum() const

Set/Get the values of the maximum and minimum intensities of the input
intensity window

*/
public ";

%javamethodmodifiers  rtk::simple::IntensityWindowingImageFilter::IntensityWindowingImageFilter "/**
rtk::simple::IntensityWindowingImageFilter::IntensityWindowingImageFilter()

Default Constructor that takes no arguments and initializes default
parameters

*/
public ";

%javamethodmodifiers  rtk::simple::IntensityWindowingImageFilter::SetOutputMaximum "/**
Self& rtk::simple::IntensityWindowingImageFilter::SetOutputMaximum(double OutputMaximum)

Set/Get the values of the maximum and minimum intensities of the
outputimage

*/
public ";

%javamethodmodifiers  rtk::simple::IntensityWindowingImageFilter::SetOutputMinimum "/**
Self& rtk::simple::IntensityWindowingImageFilter::SetOutputMinimum(double OutputMinimum)

Set/Get the values of the maximum and minimum intensities of the
outputimage

*/
public ";

%javamethodmodifiers  rtk::simple::IntensityWindowingImageFilter::SetWindowMaximum "/**
Self& rtk::simple::IntensityWindowingImageFilter::SetWindowMaximum(double WindowMaximum)

Set/Get the values of the maximum and minimum intensities of the input
intensity window

*/
public ";

%javamethodmodifiers  rtk::simple::IntensityWindowingImageFilter::SetWindowMinimum "/**
Self& rtk::simple::IntensityWindowingImageFilter::SetWindowMinimum(double WindowMinimum)

Set/Get the values of the maximum and minimum intensities of the input
intensity window

*/
public ";

%javamethodmodifiers  rtk::simple::IntensityWindowingImageFilter::ToString "/**
std::string rtk::simple::IntensityWindowingImageFilter::ToString() const

Print ourselves out

*/
public ";

%javamethodmodifiers  rtk::simple::IntensityWindowingImageFilter::~IntensityWindowingImageFilter "/**
rtk::simple::IntensityWindowingImageFilter::~IntensityWindowingImageFilter()

Destructor

*/
public ";


%typemap(javaimports) rtk::simple::IntermodesThresholdImageFilter "/**

Threshold an image using the Intermodes Threshold.


This filter creates a binary thresholded image that separates an image
into foreground and background components. The filter computes the
threshold using the IntermodesThresholdCalculator and applies that theshold to the input image using the BinaryThresholdImageFilter .


Richard Beare. Department of Medicine, Monash University, Melbourne,
Australia.
 Gaetan Lehmann. Biologie du Developpement et de la Reproduction, INRA
de Jouy-en-Josas, France.

This implementation was taken from the Insight Journal paper: https://hdl.handle.net/10380/3279 or http://www.insight-journal.org/browse/publication/811


See:
 HistogramThresholdImageFilter

 rtk::simple::IntermodesThreshold for the procedural interface

 itk::IntermodesThresholdImageFilter for the Doxygen on the original ITK class.


C++ includes: srtkIntermodesThresholdImageFilter.h
*/"

%javamethodmodifiers  rtk::simple::IntermodesThresholdImageFilter::Execute "/**
Image rtk::simple::IntermodesThresholdImageFilter::Execute(const Image &image, const Image &maskImage)

Execute the filter on the input image

*/
public ";

%javamethodmodifiers  rtk::simple::IntermodesThresholdImageFilter::Execute "/**
Image rtk::simple::IntermodesThresholdImageFilter::Execute(const Image &image)
*/
public ";

%javamethodmodifiers  rtk::simple::IntermodesThresholdImageFilter::Execute "/**
Image rtk::simple::IntermodesThresholdImageFilter::Execute(const Image &image, const Image &maskImage, uint8_t insideValue,
uint8_t outsideValue, uint32_t numberOfHistogramBins, bool maskOutput,
uint8_t maskValue)

Execute the filter on the input image with the given parameters

*/
public ";

%javamethodmodifiers  rtk::simple::IntermodesThresholdImageFilter::Execute "/**
Image rtk::simple::IntermodesThresholdImageFilter::Execute(const Image &image, uint8_t insideValue, uint8_t outsideValue,
uint32_t numberOfHistogramBins, bool maskOutput, uint8_t maskValue)
*/
public ";

%javamethodmodifiers  rtk::simple::IntermodesThresholdImageFilter::GetInsideValue "/**
uint8_t rtk::simple::IntermodesThresholdImageFilter::GetInsideValue() const

Get the \"inside\" pixel value.

*/
public ";

%javamethodmodifiers  rtk::simple::IntermodesThresholdImageFilter::GetMaskOutput "/**
bool rtk::simple::IntermodesThresholdImageFilter::GetMaskOutput() const
*/
public ";

%javamethodmodifiers  rtk::simple::IntermodesThresholdImageFilter::GetMaskValue "/**
uint8_t rtk::simple::IntermodesThresholdImageFilter::GetMaskValue() const
*/
public ";

%javamethodmodifiers  rtk::simple::IntermodesThresholdImageFilter::GetName "/**
std::string rtk::simple::IntermodesThresholdImageFilter::GetName() const

Name of this class

*/
public ";

%javamethodmodifiers  rtk::simple::IntermodesThresholdImageFilter::GetNumberOfHistogramBins "/**
uint32_t rtk::simple::IntermodesThresholdImageFilter::GetNumberOfHistogramBins() const
*/
public ";

%javamethodmodifiers  rtk::simple::IntermodesThresholdImageFilter::GetOutsideValue "/**
uint8_t rtk::simple::IntermodesThresholdImageFilter::GetOutsideValue() const

Get the \"outside\" pixel value.

*/
public ";

%javamethodmodifiers  rtk::simple::IntermodesThresholdImageFilter::GetThreshold "/**
double rtk::simple::IntermodesThresholdImageFilter::GetThreshold() const

Get the computed threshold.


This is a measurement. Its value is updated in the Execute methods, so
the value will only be valid after an execution.

*/
public ";

%javamethodmodifiers  rtk::simple::IntermodesThresholdImageFilter::IntermodesThresholdImageFilter "/**
rtk::simple::IntermodesThresholdImageFilter::IntermodesThresholdImageFilter()

Default Constructor that takes no arguments and initializes default
parameters

*/
public ";

%javamethodmodifiers  rtk::simple::IntermodesThresholdImageFilter::MaskOutputOff "/**
Self& rtk::simple::IntermodesThresholdImageFilter::MaskOutputOff()
*/
public ";

%javamethodmodifiers  rtk::simple::IntermodesThresholdImageFilter::MaskOutputOn "/**
Self& rtk::simple::IntermodesThresholdImageFilter::MaskOutputOn()

Set the value of MaskOutput to true or false respectfully.

*/
public ";

%javamethodmodifiers  rtk::simple::IntermodesThresholdImageFilter::SetInsideValue "/**
Self& rtk::simple::IntermodesThresholdImageFilter::SetInsideValue(uint8_t InsideValue)

Set the \"inside\" pixel value.

*/
public ";

%javamethodmodifiers  rtk::simple::IntermodesThresholdImageFilter::SetMaskOutput "/**
Self& rtk::simple::IntermodesThresholdImageFilter::SetMaskOutput(bool MaskOutput)

Do you want the output to be masked by the mask used in histogram
construction. Only relevant if masking is in use.

*/
public ";

%javamethodmodifiers  rtk::simple::IntermodesThresholdImageFilter::SetMaskValue "/**
Self& rtk::simple::IntermodesThresholdImageFilter::SetMaskValue(uint8_t MaskValue)

The value in the mask image, if used, indicating voxels that should be
included. Default is the max of pixel type, as in the
MaskedImageToHistogramFilter

*/
public ";

%javamethodmodifiers  rtk::simple::IntermodesThresholdImageFilter::SetNumberOfHistogramBins "/**
Self& rtk::simple::IntermodesThresholdImageFilter::SetNumberOfHistogramBins(uint32_t NumberOfHistogramBins)

Set/Get the number of histogram bins.

*/
public ";

%javamethodmodifiers  rtk::simple::IntermodesThresholdImageFilter::SetOutsideValue "/**
Self& rtk::simple::IntermodesThresholdImageFilter::SetOutsideValue(uint8_t OutsideValue)

Set the \"outside\" pixel value. The default value NumericTraits<OutputPixelType>::Zero.

*/
public ";

%javamethodmodifiers  rtk::simple::IntermodesThresholdImageFilter::ToString "/**
std::string rtk::simple::IntermodesThresholdImageFilter::ToString() const

Print ourselves out

*/
public ";

%javamethodmodifiers  rtk::simple::IntermodesThresholdImageFilter::~IntermodesThresholdImageFilter "/**
rtk::simple::IntermodesThresholdImageFilter::~IntermodesThresholdImageFilter()

Destructor

*/
public ";


%typemap(javaimports) rtk::simple::InverseDeconvolutionImageFilter "/**

The direct linear inverse deconvolution filter.


The inverse filter is the most straightforward deconvolution method.
Considering that convolution of two images in the spatial domain is
equivalent to multiplying the Fourier transform of the two images, the
inverse filter consists of inverting the multiplication. In other
words, this filter computes the following: \\\\[ hat{F}(\\\\omega) = \\\\begin{cases} G(\\\\omega) / H(\\\\omega)
& \\\\text{if \\\\f$|H(\\\\omega)| \\\\geq \\\\epsilon\\\\f$} \\\\\\\\
0 & \\\\text{otherwise} \\\\end{cases} \\\\] where $\\\\hat{F}(\\\\omega)$ is the Fourier transform of the estimate produced by this filter, $G(\\\\omega)$ is the Fourier transform of the input blurred image, $H(\\\\omega)$ is the Fourier transform of the blurring kernel, and $\\\\epsilon$ is a constant real non-negative threshold (called
KernelZeroMagnitudeThreshold in this filter) that determines when the
magnitude of a complex number is considered zero.


Gaetan Lehmann, Biologie du Developpement et de la Reproduction, INRA
de Jouy-en-Josas, France
 Cory Quammen, The University of North Carolina at Chapel Hill
See:
 rtk::simple::InverseDeconvolution for the procedural interface

 itk::InverseDeconvolutionImageFilter for the Doxygen on the original ITK class.


C++ includes: srtkInverseDeconvolutionImageFilter.h
*/"

%javamethodmodifiers  rtk::simple::InverseDeconvolutionImageFilter::Execute "/**
Image rtk::simple::InverseDeconvolutionImageFilter::Execute(const Image &image1, const Image &image2)

Execute the filter on the input images

*/
public ";

%javamethodmodifiers  rtk::simple::InverseDeconvolutionImageFilter::Execute "/**
Image rtk::simple::InverseDeconvolutionImageFilter::Execute(const Image &image1, const Image &image2, double
kernelZeroMagnitudeThreshold, bool normalize,
InverseDeconvolutionImageFilter::BoundaryConditionType
boundaryCondition,
InverseDeconvolutionImageFilter::OutputRegionModeType
outputRegionMode)

Execute the filter on the input images with the given parameters

*/
public ";

%javamethodmodifiers  rtk::simple::InverseDeconvolutionImageFilter::GetBoundaryCondition "/**
BoundaryConditionType rtk::simple::InverseDeconvolutionImageFilter::GetBoundaryCondition() const
*/
public ";

%javamethodmodifiers  rtk::simple::InverseDeconvolutionImageFilter::GetKernelZeroMagnitudeThreshold "/**
double rtk::simple::InverseDeconvolutionImageFilter::GetKernelZeroMagnitudeThreshold() const

Set/get the threshold value uused to determine whether a frequency of
the Fourier transform of the blurring kernel is considered to be zero.
Default value is 1.0e-4.

*/
public ";

%javamethodmodifiers  rtk::simple::InverseDeconvolutionImageFilter::GetName "/**
std::string rtk::simple::InverseDeconvolutionImageFilter::GetName() const

Name of this class

*/
public ";

%javamethodmodifiers  rtk::simple::InverseDeconvolutionImageFilter::GetNormalize "/**
bool rtk::simple::InverseDeconvolutionImageFilter::GetNormalize() const
*/
public ";

%javamethodmodifiers  rtk::simple::InverseDeconvolutionImageFilter::GetOutputRegionMode "/**
OutputRegionModeType rtk::simple::InverseDeconvolutionImageFilter::GetOutputRegionMode() const
*/
public ";

%javamethodmodifiers  rtk::simple::InverseDeconvolutionImageFilter::InverseDeconvolutionImageFilter "/**
rtk::simple::InverseDeconvolutionImageFilter::InverseDeconvolutionImageFilter()

Default Constructor that takes no arguments and initializes default
parameters

*/
public ";

%javamethodmodifiers  rtk::simple::InverseDeconvolutionImageFilter::NormalizeOff "/**
Self& rtk::simple::InverseDeconvolutionImageFilter::NormalizeOff()
*/
public ";

%javamethodmodifiers  rtk::simple::InverseDeconvolutionImageFilter::NormalizeOn "/**
Self& rtk::simple::InverseDeconvolutionImageFilter::NormalizeOn()

Set the value of Normalize to true or false respectfully.

*/
public ";

%javamethodmodifiers  rtk::simple::InverseDeconvolutionImageFilter::SetBoundaryCondition "/**
Self& rtk::simple::InverseDeconvolutionImageFilter::SetBoundaryCondition(BoundaryConditionType BoundaryCondition)
*/
public ";

%javamethodmodifiers  rtk::simple::InverseDeconvolutionImageFilter::SetKernelZeroMagnitudeThreshold "/**
Self& rtk::simple::InverseDeconvolutionImageFilter::SetKernelZeroMagnitudeThreshold(double KernelZeroMagnitudeThreshold)

Set/get the threshold value uused to determine whether a frequency of
the Fourier transform of the blurring kernel is considered to be zero.
Default value is 1.0e-4.

*/
public ";

%javamethodmodifiers  rtk::simple::InverseDeconvolutionImageFilter::SetNormalize "/**
Self& rtk::simple::InverseDeconvolutionImageFilter::SetNormalize(bool Normalize)

Normalize the output image by the sum of the kernel components

*/
public ";

%javamethodmodifiers  rtk::simple::InverseDeconvolutionImageFilter::SetOutputRegionMode "/**
Self& rtk::simple::InverseDeconvolutionImageFilter::SetOutputRegionMode(OutputRegionModeType OutputRegionMode)
*/
public ";

%javamethodmodifiers  rtk::simple::InverseDeconvolutionImageFilter::ToString "/**
std::string rtk::simple::InverseDeconvolutionImageFilter::ToString() const

Print ourselves out

*/
public ";

%javamethodmodifiers  rtk::simple::InverseDeconvolutionImageFilter::~InverseDeconvolutionImageFilter "/**
rtk::simple::InverseDeconvolutionImageFilter::~InverseDeconvolutionImageFilter()

Destructor

*/
public ";


%typemap(javaimports) rtk::simple::InverseDisplacementFieldImageFilter "/**

Computes the inverse of a displacement field.


InverseDisplacementFieldImageFilter takes a displacement field as input and computes the displacement
field that is its inverse. If the input displacement field was mapping
coordinates from a space A into a space B, the output of this filter
will map coordinates from the space B into the space A.

Given that both the input and output displacement field are
represented as discrete images with pixel type vector, the inverse
will be only an estimation and will probably not correspond to a
perfect inverse. The precision of the inverse can be improved at the
price of increasing the computation time and memory consumption in
this filter.

The method used for computing the inverse displacement field is to
subsample the input field using a regular grid and create Kerned-Base
Spline in which the reference landmarks are the coordinates of the
deformed point and the target landmarks are the negative of the
displacement vectors. The kernel-base spline is then used for
regularly sampling the output space and recover vector values for
every single pixel.

The subsampling factor used for the regular grid of the input field
will determine the number of landmarks in the KernelBased spline and
therefore it will have a dramatic effect on both the precision of
output displacement field and the computational time required for the
filter to complete the estimation. A large subsampling factor will
result in few landmarks in the KernelBased spline, therefore on fast
computation and low precision. A small subsampling factor will result
in a large number of landmarks in the KernelBased spline, therefore a
large memory consumption, long computation time and high precision for
the inverse estimation.

This filter expects both the input and output images to be of pixel
type Vector .
See:
 rtk::simple::InverseDisplacementField for the procedural interface

 itk::InverseDisplacementFieldImageFilter for the Doxygen on the original ITK class.


C++ includes: srtkInverseDisplacementFieldImageFilter.h
*/"

%javamethodmodifiers  rtk::simple::InverseDisplacementFieldImageFilter::Execute "/**
Image rtk::simple::InverseDisplacementFieldImageFilter::Execute(const Image &image1)

Execute the filter on the input image

*/
public ";

%javamethodmodifiers  rtk::simple::InverseDisplacementFieldImageFilter::Execute "/**
Image rtk::simple::InverseDisplacementFieldImageFilter::Execute(const Image &image1, const std::vector< uint32_t > &size, const
std::vector< double > &outputOrigin, const std::vector< double >
&outputSpacing, unsigned int subsamplingFactor)

Execute the filter on the input image with the given parameters

*/
public ";

%javamethodmodifiers  rtk::simple::InverseDisplacementFieldImageFilter::GetName "/**
std::string rtk::simple::InverseDisplacementFieldImageFilter::GetName() const

Name of this class

*/
public ";

%javamethodmodifiers  rtk::simple::InverseDisplacementFieldImageFilter::GetOutputOrigin "/**
std::vector<double> rtk::simple::InverseDisplacementFieldImageFilter::GetOutputOrigin() const

Get the output image origin.

*/
public ";

%javamethodmodifiers  rtk::simple::InverseDisplacementFieldImageFilter::GetOutputSpacing "/**
std::vector<double> rtk::simple::InverseDisplacementFieldImageFilter::GetOutputSpacing() const

Get the output image spacing.

*/
public ";

%javamethodmodifiers  rtk::simple::InverseDisplacementFieldImageFilter::GetSize "/**
std::vector<uint32_t> rtk::simple::InverseDisplacementFieldImageFilter::GetSize() const

Get the size of the output image.

*/
public ";

%javamethodmodifiers  rtk::simple::InverseDisplacementFieldImageFilter::GetSubsamplingFactor "/**
unsigned int rtk::simple::InverseDisplacementFieldImageFilter::GetSubsamplingFactor() const

Set/Get the factor used for subsampling the input displacement field.
A large value in this factor will produce a fast computation of the
inverse field but with low precision. A small value of this factor
will produce a precise computation of the inverse field at the price
of large memory consumption and long computational time.

*/
public ";

%javamethodmodifiers  rtk::simple::InverseDisplacementFieldImageFilter::InverseDisplacementFieldImageFilter "/**
rtk::simple::InverseDisplacementFieldImageFilter::InverseDisplacementFieldImageFilter()

Default Constructor that takes no arguments and initializes default
parameters

*/
public ";

%javamethodmodifiers  rtk::simple::InverseDisplacementFieldImageFilter::SetOutputOrigin "/**
Self& rtk::simple::InverseDisplacementFieldImageFilter::SetOutputOrigin(const std::vector< double > &OutputOrigin)

Set the output image origin.

*/
public ";

%javamethodmodifiers  rtk::simple::InverseDisplacementFieldImageFilter::SetOutputSpacing "/**
Self& rtk::simple::InverseDisplacementFieldImageFilter::SetOutputSpacing(const std::vector< double > &OutputSpacing)

Set the output image spacing.

*/
public ";

%javamethodmodifiers  rtk::simple::InverseDisplacementFieldImageFilter::SetReferenceImage "/**
void rtk::simple::InverseDisplacementFieldImageFilter::SetReferenceImage(const Image &refImage)

This methods sets the output size, origin, and direction to that of
the provided image

*/
public ";

%javamethodmodifiers  rtk::simple::InverseDisplacementFieldImageFilter::SetSize "/**
Self& rtk::simple::InverseDisplacementFieldImageFilter::SetSize(const std::vector< uint32_t > &Size)

Set the size of the output image.

*/
public ";

%javamethodmodifiers  rtk::simple::InverseDisplacementFieldImageFilter::SetSubsamplingFactor "/**
Self& rtk::simple::InverseDisplacementFieldImageFilter::SetSubsamplingFactor(unsigned int SubsamplingFactor)

Set/Get the factor used for subsampling the input displacement field.
A large value in this factor will produce a fast computation of the
inverse field but with low precision. A small value of this factor
will produce a precise computation of the inverse field at the price
of large memory consumption and long computational time.

*/
public ";

%javamethodmodifiers  rtk::simple::InverseDisplacementFieldImageFilter::ToString "/**
std::string rtk::simple::InverseDisplacementFieldImageFilter::ToString() const

Print ourselves out

*/
public ";

%javamethodmodifiers  rtk::simple::InverseDisplacementFieldImageFilter::~InverseDisplacementFieldImageFilter "/**
rtk::simple::InverseDisplacementFieldImageFilter::~InverseDisplacementFieldImageFilter()

Destructor

*/
public ";


%typemap(javaimports) rtk::simple::InverseFFTImageFilter "/**

Base class for inverse Fast Fourier Transform .


This is a base class for the \"inverse\" or \"reverse\" Discrete
Fourier Transform . This is an abstract base class: the actual implementation is
provided by the best child available on the system when the object is
created via the object factory system.

This class transforms a full complex image with Hermitian symmetry
into its real spatial domain representation. If the input does not
have Hermitian symmetry, the imaginary component is discarded.


See:
 ForwardFFTImageFilter , InverseFFTImageFilter

 rtk::simple::InverseFFT for the procedural interface

 itk::InverseFFTImageFilter for the Doxygen on the original ITK class.


C++ includes: srtkInverseFFTImageFilter.h
*/"

%javamethodmodifiers  rtk::simple::InverseFFTImageFilter::Execute "/**
Image rtk::simple::InverseFFTImageFilter::Execute(const Image &image1)

Execute the filter on the input image

*/
public ";

%javamethodmodifiers  rtk::simple::InverseFFTImageFilter::GetName "/**
std::string rtk::simple::InverseFFTImageFilter::GetName() const

Name of this class

*/
public ";

%javamethodmodifiers  rtk::simple::InverseFFTImageFilter::InverseFFTImageFilter "/**
rtk::simple::InverseFFTImageFilter::InverseFFTImageFilter()

Default Constructor that takes no arguments and initializes default
parameters

*/
public ";

%javamethodmodifiers  rtk::simple::InverseFFTImageFilter::ToString "/**
std::string rtk::simple::InverseFFTImageFilter::ToString() const

Print ourselves out

*/
public ";

%javamethodmodifiers  rtk::simple::InverseFFTImageFilter::~InverseFFTImageFilter "/**
rtk::simple::InverseFFTImageFilter::~InverseFFTImageFilter()

Destructor

*/
public ";


%typemap(javaimports) rtk::simple::InvertDisplacementFieldImageFilter "/**

Iteratively estimate the inverse field of a displacement field.



Nick Tustison
 Brian Avants
See:
 rtk::simple::InvertDisplacementField for the procedural interface

 itk::InvertDisplacementFieldImageFilter for the Doxygen on the original ITK class.


C++ includes: srtkInvertDisplacementFieldImageFilter.h
*/"

%javamethodmodifiers  rtk::simple::InvertDisplacementFieldImageFilter::EnforceBoundaryConditionOff "/**
Self& rtk::simple::InvertDisplacementFieldImageFilter::EnforceBoundaryConditionOff()
*/
public ";

%javamethodmodifiers  rtk::simple::InvertDisplacementFieldImageFilter::EnforceBoundaryConditionOn "/**
Self& rtk::simple::InvertDisplacementFieldImageFilter::EnforceBoundaryConditionOn()

Set the value of EnforceBoundaryCondition to true or false
respectfully.

*/
public ";

%javamethodmodifiers  rtk::simple::InvertDisplacementFieldImageFilter::Execute "/**
Image rtk::simple::InvertDisplacementFieldImageFilter::Execute(const Image &image1)

Execute the filter on the input image

*/
public ";

%javamethodmodifiers  rtk::simple::InvertDisplacementFieldImageFilter::Execute "/**
Image rtk::simple::InvertDisplacementFieldImageFilter::Execute(const Image &image1, uint32_t maximumNumberOfIterations, double
maxErrorToleranceThreshold, double meanErrorToleranceThreshold, bool
enforceBoundaryCondition)

Execute the filter on the input image with the given parameters

*/
public ";

%javamethodmodifiers  rtk::simple::InvertDisplacementFieldImageFilter::GetEnforceBoundaryCondition "/**
bool rtk::simple::InvertDisplacementFieldImageFilter::GetEnforceBoundaryCondition() const
*/
public ";

%javamethodmodifiers  rtk::simple::InvertDisplacementFieldImageFilter::GetMaxErrorNorm "/**
double rtk::simple::InvertDisplacementFieldImageFilter::GetMaxErrorNorm() const

This is a measurement. Its value is updated in the Execute methods, so
the value will only be valid after an execution.

*/
public ";

%javamethodmodifiers  rtk::simple::InvertDisplacementFieldImageFilter::GetMaxErrorToleranceThreshold "/**
double rtk::simple::InvertDisplacementFieldImageFilter::GetMaxErrorToleranceThreshold() const
*/
public ";

%javamethodmodifiers  rtk::simple::InvertDisplacementFieldImageFilter::GetMaximumNumberOfIterations "/**
uint32_t rtk::simple::InvertDisplacementFieldImageFilter::GetMaximumNumberOfIterations() const
*/
public ";

%javamethodmodifiers  rtk::simple::InvertDisplacementFieldImageFilter::GetMeanErrorNorm "/**
double rtk::simple::InvertDisplacementFieldImageFilter::GetMeanErrorNorm() const

This is a measurement. Its value is updated in the Execute methods, so
the value will only be valid after an execution.

*/
public ";

%javamethodmodifiers  rtk::simple::InvertDisplacementFieldImageFilter::GetMeanErrorToleranceThreshold "/**
double rtk::simple::InvertDisplacementFieldImageFilter::GetMeanErrorToleranceThreshold() const
*/
public ";

%javamethodmodifiers  rtk::simple::InvertDisplacementFieldImageFilter::GetName "/**
std::string rtk::simple::InvertDisplacementFieldImageFilter::GetName() const

Name of this class

*/
public ";

%javamethodmodifiers  rtk::simple::InvertDisplacementFieldImageFilter::InvertDisplacementFieldImageFilter "/**
rtk::simple::InvertDisplacementFieldImageFilter::InvertDisplacementFieldImageFilter()

Default Constructor that takes no arguments and initializes default
parameters

*/
public ";

%javamethodmodifiers  rtk::simple::InvertDisplacementFieldImageFilter::SetEnforceBoundaryCondition "/**
Self& rtk::simple::InvertDisplacementFieldImageFilter::SetEnforceBoundaryCondition(bool EnforceBoundaryCondition)
*/
public ";

%javamethodmodifiers  rtk::simple::InvertDisplacementFieldImageFilter::SetMaxErrorToleranceThreshold "/**
Self& rtk::simple::InvertDisplacementFieldImageFilter::SetMaxErrorToleranceThreshold(double MaxErrorToleranceThreshold)
*/
public ";

%javamethodmodifiers  rtk::simple::InvertDisplacementFieldImageFilter::SetMaximumNumberOfIterations "/**
Self& rtk::simple::InvertDisplacementFieldImageFilter::SetMaximumNumberOfIterations(uint32_t MaximumNumberOfIterations)
*/
public ";

%javamethodmodifiers  rtk::simple::InvertDisplacementFieldImageFilter::SetMeanErrorToleranceThreshold "/**
Self& rtk::simple::InvertDisplacementFieldImageFilter::SetMeanErrorToleranceThreshold(double MeanErrorToleranceThreshold)
*/
public ";

%javamethodmodifiers  rtk::simple::InvertDisplacementFieldImageFilter::ToString "/**
std::string rtk::simple::InvertDisplacementFieldImageFilter::ToString() const

Print ourselves out

*/
public ";

%javamethodmodifiers  rtk::simple::InvertDisplacementFieldImageFilter::~InvertDisplacementFieldImageFilter "/**
rtk::simple::InvertDisplacementFieldImageFilter::~InvertDisplacementFieldImageFilter()

Destructor

*/
public ";


%typemap(javaimports) rtk::simple::InvertIntensityImageFilter "/**

Invert the intensity of an image.


InvertIntensityImageFilter inverts intensity of pixels by subtracting pixel value to a maximum
value. The maximum value can be set with SetMaximum and defaults the
maximum of input pixel type. This filter can be used to invert, for
example, a binary image, a distance map, etc.


Gaetan Lehmann. Biologie du Developpement et de la Reproduction, INRA
de Jouy-en-Josas, France.

See:
 IntensityWindowingImageFilter ShiftScaleImageFilter
Wiki Examples:

All Examples

Invert an image
See:
 rtk::simple::InvertIntensity for the procedural interface

 itk::InvertIntensityImageFilter for the Doxygen on the original ITK class.



C++ includes: srtkInvertIntensityImageFilter.h
*/"

%javamethodmodifiers  rtk::simple::InvertIntensityImageFilter::Execute "/**
Image rtk::simple::InvertIntensityImageFilter::Execute(const Image &image1)

Execute the filter on the input image

*/
public ";

%javamethodmodifiers  rtk::simple::InvertIntensityImageFilter::Execute "/**
Image rtk::simple::InvertIntensityImageFilter::Execute(const Image &image1, double maximum)

Execute the filter on the input image with the given parameters

*/
public ";

%javamethodmodifiers  rtk::simple::InvertIntensityImageFilter::GetMaximum "/**
double rtk::simple::InvertIntensityImageFilter::GetMaximum() const
*/
public ";

%javamethodmodifiers  rtk::simple::InvertIntensityImageFilter::GetName "/**
std::string rtk::simple::InvertIntensityImageFilter::GetName() const

Name of this class

*/
public ";

%javamethodmodifiers  rtk::simple::InvertIntensityImageFilter::InvertIntensityImageFilter "/**
rtk::simple::InvertIntensityImageFilter::InvertIntensityImageFilter()

Default Constructor that takes no arguments and initializes default
parameters

*/
public ";

%javamethodmodifiers  rtk::simple::InvertIntensityImageFilter::SetMaximum "/**
Self& rtk::simple::InvertIntensityImageFilter::SetMaximum(double Maximum)
*/
public ";

%javamethodmodifiers  rtk::simple::InvertIntensityImageFilter::ToString "/**
std::string rtk::simple::InvertIntensityImageFilter::ToString() const

Print ourselves out

*/
public ";

%javamethodmodifiers  rtk::simple::InvertIntensityImageFilter::~InvertIntensityImageFilter "/**
rtk::simple::InvertIntensityImageFilter::~InvertIntensityImageFilter()

Destructor

*/
public ";


%typemap(javaimports) rtk::simple::IsoContourDistanceImageFilter "/**

Compute an approximate distance from an interpolated isocontour to the
close grid points.


For standard level set algorithms, it is useful to periodically
reinitialize the evolving image to prevent numerical accuracy problems
in computing derivatives. This reinitialization is done by computing a
signed distance map to the current level set. This class provides the
first step in this reinitialization by computing an estimate of the
distance from the interpolated isocontour to the pixels (or voxels)
that are close to it, i.e. for which the isocontour crosses a segment
between them and one of their direct neighbors. This class supports
narrowbanding. If the input narrowband is provided, the algorithm will
only locate the level set within the input narrowband.

Implementation of this class is based on Fast and Accurate
Redistancing for Level Set Methods `Krissian K. and Westin C.F.',
EUROCAST NeuroImaging Workshop Las Palmas Spain, Ninth International
Conference on Computer Aided Systems Theory , pages 48-51, Feb 2003.
See:
 rtk::simple::IsoContourDistance for the procedural interface

 itk::IsoContourDistanceImageFilter for the Doxygen on the original ITK class.


C++ includes: srtkIsoContourDistanceImageFilter.h
*/"

%javamethodmodifiers  rtk::simple::IsoContourDistanceImageFilter::Execute "/**
Image rtk::simple::IsoContourDistanceImageFilter::Execute(const Image &image1)

Execute the filter on the input image

*/
public ";

%javamethodmodifiers  rtk::simple::IsoContourDistanceImageFilter::Execute "/**
Image rtk::simple::IsoContourDistanceImageFilter::Execute(const Image &image1, double levelSetValue, double farValue)

Execute the filter on the input image with the given parameters

*/
public ";

%javamethodmodifiers  rtk::simple::IsoContourDistanceImageFilter::GetFarValue "/**
double rtk::simple::IsoContourDistanceImageFilter::GetFarValue() const

Set/Get the value of the level set to be located. The default value is
0.

*/
public ";

%javamethodmodifiers  rtk::simple::IsoContourDistanceImageFilter::GetLevelSetValue "/**
double rtk::simple::IsoContourDistanceImageFilter::GetLevelSetValue() const

Set/Get the value of the level set to be located. The default value is
0.

*/
public ";

%javamethodmodifiers  rtk::simple::IsoContourDistanceImageFilter::GetName "/**
std::string rtk::simple::IsoContourDistanceImageFilter::GetName() const

Name of this class

*/
public ";

%javamethodmodifiers  rtk::simple::IsoContourDistanceImageFilter::IsoContourDistanceImageFilter "/**
rtk::simple::IsoContourDistanceImageFilter::IsoContourDistanceImageFilter()

Default Constructor that takes no arguments and initializes default
parameters

*/
public ";

%javamethodmodifiers  rtk::simple::IsoContourDistanceImageFilter::SetFarValue "/**
Self& rtk::simple::IsoContourDistanceImageFilter::SetFarValue(double FarValue)

Set/Get the value of the level set to be located. The default value is
0.

*/
public ";

%javamethodmodifiers  rtk::simple::IsoContourDistanceImageFilter::SetLevelSetValue "/**
Self& rtk::simple::IsoContourDistanceImageFilter::SetLevelSetValue(double LevelSetValue)

Set/Get the value of the level set to be located. The default value is
0.

*/
public ";

%javamethodmodifiers  rtk::simple::IsoContourDistanceImageFilter::ToString "/**
std::string rtk::simple::IsoContourDistanceImageFilter::ToString() const

Print ourselves out

*/
public ";

%javamethodmodifiers  rtk::simple::IsoContourDistanceImageFilter::~IsoContourDistanceImageFilter "/**
rtk::simple::IsoContourDistanceImageFilter::~IsoContourDistanceImageFilter()

Destructor

*/
public ";


%typemap(javaimports) rtk::simple::IsoDataThresholdImageFilter "/**

Threshold an image using the IsoData Threshold.


This filter creates a binary thresholded image that separates an image
into foreground and background components. The filter computes the
threshold using the IsoDataThresholdCalculator and applies that theshold to the input image using the BinaryThresholdImageFilter .


Richard Beare. Department of Medicine, Monash University, Melbourne,
Australia.
 Gaetan Lehmann. Biologie du Developpement et de la Reproduction, INRA
de Jouy-en-Josas, France.

This implementation was taken from the Insight Journal paper: https://hdl.handle.net/10380/3279 or http://www.insight-journal.org/browse/publication/811


See:
 HistogramThresholdImageFilter

 rtk::simple::IsoDataThreshold for the procedural interface

 itk::IsoDataThresholdImageFilter for the Doxygen on the original ITK class.


C++ includes: srtkIsoDataThresholdImageFilter.h
*/"

%javamethodmodifiers  rtk::simple::IsoDataThresholdImageFilter::Execute "/**
Image rtk::simple::IsoDataThresholdImageFilter::Execute(const Image &image, const Image &maskImage)

Execute the filter on the input image

*/
public ";

%javamethodmodifiers  rtk::simple::IsoDataThresholdImageFilter::Execute "/**
Image rtk::simple::IsoDataThresholdImageFilter::Execute(const Image &image)
*/
public ";

%javamethodmodifiers  rtk::simple::IsoDataThresholdImageFilter::Execute "/**
Image rtk::simple::IsoDataThresholdImageFilter::Execute(const Image &image, const Image &maskImage, uint8_t insideValue,
uint8_t outsideValue, uint32_t numberOfHistogramBins, bool maskOutput,
uint8_t maskValue)

Execute the filter on the input image with the given parameters

*/
public ";

%javamethodmodifiers  rtk::simple::IsoDataThresholdImageFilter::Execute "/**
Image rtk::simple::IsoDataThresholdImageFilter::Execute(const Image &image, uint8_t insideValue, uint8_t outsideValue,
uint32_t numberOfHistogramBins, bool maskOutput, uint8_t maskValue)
*/
public ";

%javamethodmodifiers  rtk::simple::IsoDataThresholdImageFilter::GetInsideValue "/**
uint8_t rtk::simple::IsoDataThresholdImageFilter::GetInsideValue() const

Get the \"inside\" pixel value.

*/
public ";

%javamethodmodifiers  rtk::simple::IsoDataThresholdImageFilter::GetMaskOutput "/**
bool rtk::simple::IsoDataThresholdImageFilter::GetMaskOutput() const
*/
public ";

%javamethodmodifiers  rtk::simple::IsoDataThresholdImageFilter::GetMaskValue "/**
uint8_t rtk::simple::IsoDataThresholdImageFilter::GetMaskValue() const
*/
public ";

%javamethodmodifiers  rtk::simple::IsoDataThresholdImageFilter::GetName "/**
std::string rtk::simple::IsoDataThresholdImageFilter::GetName() const

Name of this class

*/
public ";

%javamethodmodifiers  rtk::simple::IsoDataThresholdImageFilter::GetNumberOfHistogramBins "/**
uint32_t rtk::simple::IsoDataThresholdImageFilter::GetNumberOfHistogramBins() const
*/
public ";

%javamethodmodifiers  rtk::simple::IsoDataThresholdImageFilter::GetOutsideValue "/**
uint8_t rtk::simple::IsoDataThresholdImageFilter::GetOutsideValue() const

Get the \"outside\" pixel value.

*/
public ";

%javamethodmodifiers  rtk::simple::IsoDataThresholdImageFilter::GetThreshold "/**
double rtk::simple::IsoDataThresholdImageFilter::GetThreshold() const

Get the computed threshold.


This is a measurement. Its value is updated in the Execute methods, so
the value will only be valid after an execution.

*/
public ";

%javamethodmodifiers  rtk::simple::IsoDataThresholdImageFilter::IsoDataThresholdImageFilter "/**
rtk::simple::IsoDataThresholdImageFilter::IsoDataThresholdImageFilter()

Default Constructor that takes no arguments and initializes default
parameters

*/
public ";

%javamethodmodifiers  rtk::simple::IsoDataThresholdImageFilter::MaskOutputOff "/**
Self& rtk::simple::IsoDataThresholdImageFilter::MaskOutputOff()
*/
public ";

%javamethodmodifiers  rtk::simple::IsoDataThresholdImageFilter::MaskOutputOn "/**
Self& rtk::simple::IsoDataThresholdImageFilter::MaskOutputOn()

Set the value of MaskOutput to true or false respectfully.

*/
public ";

%javamethodmodifiers  rtk::simple::IsoDataThresholdImageFilter::SetInsideValue "/**
Self& rtk::simple::IsoDataThresholdImageFilter::SetInsideValue(uint8_t InsideValue)

Set the \"inside\" pixel value.

*/
public ";

%javamethodmodifiers  rtk::simple::IsoDataThresholdImageFilter::SetMaskOutput "/**
Self& rtk::simple::IsoDataThresholdImageFilter::SetMaskOutput(bool MaskOutput)

Do you want the output to be masked by the mask used in histogram
construction. Only relevant if masking is in use.

*/
public ";

%javamethodmodifiers  rtk::simple::IsoDataThresholdImageFilter::SetMaskValue "/**
Self& rtk::simple::IsoDataThresholdImageFilter::SetMaskValue(uint8_t MaskValue)

The value in the mask image, if used, indicating voxels that should be
included. Default is the max of pixel type, as in the
MaskedImageToHistogramFilter

*/
public ";

%javamethodmodifiers  rtk::simple::IsoDataThresholdImageFilter::SetNumberOfHistogramBins "/**
Self& rtk::simple::IsoDataThresholdImageFilter::SetNumberOfHistogramBins(uint32_t NumberOfHistogramBins)

Set/Get the number of histogram bins.

*/
public ";

%javamethodmodifiers  rtk::simple::IsoDataThresholdImageFilter::SetOutsideValue "/**
Self& rtk::simple::IsoDataThresholdImageFilter::SetOutsideValue(uint8_t OutsideValue)

Set the \"outside\" pixel value. The default value NumericTraits<OutputPixelType>::Zero.

*/
public ";

%javamethodmodifiers  rtk::simple::IsoDataThresholdImageFilter::ToString "/**
std::string rtk::simple::IsoDataThresholdImageFilter::ToString() const

Print ourselves out

*/
public ";

%javamethodmodifiers  rtk::simple::IsoDataThresholdImageFilter::~IsoDataThresholdImageFilter "/**
rtk::simple::IsoDataThresholdImageFilter::~IsoDataThresholdImageFilter()

Destructor

*/
public ";


%typemap(javaimports) rtk::simple::IsolatedConnectedImageFilter "/**

Label pixels that are connected to one set of seeds but not another.


IsolatedConnectedImageFilter finds the optimal threshold to separate two regions. It has two
modes, one to separate dark regions surrounded by bright regions by
automatically finding a minimum isolating upper threshold, and another
to separate bright regions surrounded by dark regions by automatically
finding a maximum lower isolating threshold. The mode can be chosen by
setting FindUpperThresholdOn() /Off(). In both cases, the isolating threshold is retrieved with GetIsolatedValue() .

The algorithm labels pixels with ReplaceValue that are connected to
Seeds1 AND NOT connected to Seeds2. When finding the threshold to
separate two dark regions surrounded by bright regions, given a fixed
lower threshold, the filter adjusts the upper threshold until the two
sets of seeds are not connected. The algorithm uses a binary search to
adjust the upper threshold, starting at Upper. The reverse is true for
finding the threshold to separate two bright regions. Lower defaults
to the smallest possible value for the InputImagePixelType, and Upper
defaults to the largest possible value for the InputImagePixelType.

The user can also supply the Lower and Upper values to restrict the
search. However, if the range is too restrictive, it could happen that
no isolating threshold can be found between the user specified Lower
and Upper values. Therefore, unless the user is sure of the bounds to
set, it is recommended that the user set these values to the lowest
and highest intensity values in the image, respectively.

The user can specify more than one seed for both regions to separate.
The algorithm will try find the threshold that ensures that all of the
first seeds are contained in the resulting segmentation and all of the
second seeds are not contained in the segmentation.

It is possible that the algorithm may not be able to find the
isolating threshold because no such threshold exists. The user can
check for this by querying the GetThresholdingFailed() flag.
See:
 rtk::simple::IsolatedConnected for the procedural interface

 itk::IsolatedConnectedImageFilter for the Doxygen on the original ITK class.


C++ includes: srtkIsolatedConnectedImageFilter.h
*/"

%javamethodmodifiers  rtk::simple::IsolatedConnectedImageFilter::Execute "/**
Image rtk::simple::IsolatedConnectedImageFilter::Execute(const Image &image1)

Execute the filter on the input image

*/
public ";

%javamethodmodifiers  rtk::simple::IsolatedConnectedImageFilter::Execute "/**
Image rtk::simple::IsolatedConnectedImageFilter::Execute(const Image &image1, const std::vector< unsigned int > &seed1, const
std::vector< unsigned int > &seed2, double lower, double upper,
uint8_t replaceValue, double isolatedValueTolerance, bool
findUpperThreshold)

Execute the filter on the input image with the given parameters

*/
public ";

%javamethodmodifiers  rtk::simple::IsolatedConnectedImageFilter::FindUpperThresholdOff "/**
Self& rtk::simple::IsolatedConnectedImageFilter::FindUpperThresholdOff()
*/
public ";

%javamethodmodifiers  rtk::simple::IsolatedConnectedImageFilter::FindUpperThresholdOn "/**
Self& rtk::simple::IsolatedConnectedImageFilter::FindUpperThresholdOn()

Set the value of FindUpperThreshold to true or false respectfully.

*/
public ";

%javamethodmodifiers  rtk::simple::IsolatedConnectedImageFilter::GetFindUpperThreshold "/**
bool rtk::simple::IsolatedConnectedImageFilter::GetFindUpperThreshold() const

Set/Get whether to find an upper threshold (separating two dark
regions) or a lower threshold (separating two bright regions).

*/
public ";

%javamethodmodifiers  rtk::simple::IsolatedConnectedImageFilter::GetIsolatedValue "/**
double rtk::simple::IsolatedConnectedImageFilter::GetIsolatedValue() const

Get value that isolates the two seeds.

This is a measurement. Its value is updated in the Execute methods, so
the value will only be valid after an execution.

*/
public ";

%javamethodmodifiers  rtk::simple::IsolatedConnectedImageFilter::GetIsolatedValueTolerance "/**
double rtk::simple::IsolatedConnectedImageFilter::GetIsolatedValueTolerance() const

Set/Get the precision required for the intensity threshold value. The
default is 1.

*/
public ";

%javamethodmodifiers  rtk::simple::IsolatedConnectedImageFilter::GetLower "/**
double rtk::simple::IsolatedConnectedImageFilter::GetLower() const

Set/Get the limit on the lower threshold value. The default is the
NonpositiveMin() for the InputPixelType.

*/
public ";

%javamethodmodifiers  rtk::simple::IsolatedConnectedImageFilter::GetName "/**
std::string rtk::simple::IsolatedConnectedImageFilter::GetName() const

Name of this class

*/
public ";

%javamethodmodifiers  rtk::simple::IsolatedConnectedImageFilter::GetReplaceValue "/**
uint8_t rtk::simple::IsolatedConnectedImageFilter::GetReplaceValue() const

Set/Get value to replace thresholded pixels. Pixels that lie within
the thresholds will be replaced with this value. The default is 1.

*/
public ";

%javamethodmodifiers  rtk::simple::IsolatedConnectedImageFilter::GetSeed1 "/**
std::vector<unsigned int> rtk::simple::IsolatedConnectedImageFilter::GetSeed1() const
*/
public ";

%javamethodmodifiers  rtk::simple::IsolatedConnectedImageFilter::GetSeed2 "/**
std::vector<unsigned int> rtk::simple::IsolatedConnectedImageFilter::GetSeed2() const
*/
public ";

%javamethodmodifiers  rtk::simple::IsolatedConnectedImageFilter::GetThresholdingFailed "/**
bool rtk::simple::IsolatedConnectedImageFilter::GetThresholdingFailed() const

Get the flag that tells whether the algorithm failed to find a
threshold.

This is a measurement. Its value is updated in the Execute methods, so
the value will only be valid after an execution.

*/
public ";

%javamethodmodifiers  rtk::simple::IsolatedConnectedImageFilter::GetUpper "/**
double rtk::simple::IsolatedConnectedImageFilter::GetUpper() const

Set/Get the limit on the upper threshold value. The default is the
max() for the InputPixelType.

*/
public ";

%javamethodmodifiers  rtk::simple::IsolatedConnectedImageFilter::IsolatedConnectedImageFilter "/**
rtk::simple::IsolatedConnectedImageFilter::IsolatedConnectedImageFilter()

Default Constructor that takes no arguments and initializes default
parameters

*/
public ";

%javamethodmodifiers  rtk::simple::IsolatedConnectedImageFilter::SetFindUpperThreshold "/**
Self& rtk::simple::IsolatedConnectedImageFilter::SetFindUpperThreshold(bool FindUpperThreshold)

Set/Get whether to find an upper threshold (separating two dark
regions) or a lower threshold (separating two bright regions).

*/
public ";

%javamethodmodifiers  rtk::simple::IsolatedConnectedImageFilter::SetIsolatedValueTolerance "/**
Self& rtk::simple::IsolatedConnectedImageFilter::SetIsolatedValueTolerance(double IsolatedValueTolerance)

Set/Get the precision required for the intensity threshold value. The
default is 1.

*/
public ";

%javamethodmodifiers  rtk::simple::IsolatedConnectedImageFilter::SetLower "/**
Self& rtk::simple::IsolatedConnectedImageFilter::SetLower(double Lower)

Set/Get the limit on the lower threshold value. The default is the
NonpositiveMin() for the InputPixelType.

*/
public ";

%javamethodmodifiers  rtk::simple::IsolatedConnectedImageFilter::SetReplaceValue "/**
Self& rtk::simple::IsolatedConnectedImageFilter::SetReplaceValue(uint8_t ReplaceValue)

Set/Get value to replace thresholded pixels. Pixels that lie within
the thresholds will be replaced with this value. The default is 1.

*/
public ";

%javamethodmodifiers  rtk::simple::IsolatedConnectedImageFilter::SetSeed1 "/**
Self& rtk::simple::IsolatedConnectedImageFilter::SetSeed1(const std::vector< unsigned int > &Seed1)

DeprecatedSet seed point 1. This seed will be isolated from Seed2 (if
possible). All pixels connected to this seed will be replaced with
ReplaceValue. This method is deprecated, please use AddSeed1() .

*/
public ";

%javamethodmodifiers  rtk::simple::IsolatedConnectedImageFilter::SetSeed2 "/**
Self& rtk::simple::IsolatedConnectedImageFilter::SetSeed2(const std::vector< unsigned int > &Seed2)

DeprecatedSet seed point 2. This seed will be isolated from Seed1 (if
possible). This method is deprecated, please use AddSeed2() .

*/
public ";

%javamethodmodifiers  rtk::simple::IsolatedConnectedImageFilter::SetUpper "/**
Self& rtk::simple::IsolatedConnectedImageFilter::SetUpper(double Upper)

Set/Get the limit on the upper threshold value. The default is the
max() for the InputPixelType.

*/
public ";

%javamethodmodifiers  rtk::simple::IsolatedConnectedImageFilter::ToString "/**
std::string rtk::simple::IsolatedConnectedImageFilter::ToString() const

Print ourselves out

*/
public ";

%javamethodmodifiers  rtk::simple::IsolatedConnectedImageFilter::~IsolatedConnectedImageFilter "/**
rtk::simple::IsolatedConnectedImageFilter::~IsolatedConnectedImageFilter()

Destructor

*/
public ";


%typemap(javaimports) rtk::simple::IsolatedWatershedImageFilter "/**

Isolate watershed basins using two seeds.


IsolatedWatershedImageFilter labels pixels with ReplaceValue1 that are in the same watershed basin
as Seed1 AND NOT the same as Seed2. The filter adjusts the waterlevel
until the two seeds are not in different basins. The user supplies a
Watershed threshold. The algorithm uses a binary search to adjust the
upper waterlevel, starting at UpperValueLimit. UpperValueLimit
defaults to the 1.0.
See:
 rtk::simple::IsolatedWatershed for the procedural interface

 itk::IsolatedWatershedImageFilter for the Doxygen on the original ITK class.


C++ includes: srtkIsolatedWatershedImageFilter.h
*/"

%javamethodmodifiers  rtk::simple::IsolatedWatershedImageFilter::Execute "/**
Image rtk::simple::IsolatedWatershedImageFilter::Execute(const Image &image1)

Execute the filter on the input image

*/
public ";

%javamethodmodifiers  rtk::simple::IsolatedWatershedImageFilter::Execute "/**
Image rtk::simple::IsolatedWatershedImageFilter::Execute(const Image &image1, const std::vector< uint32_t > &seed1, const
std::vector< uint32_t > &seed2, double threshold, double
upperValueLimit, double isolatedValueTolerance, uint8_t replaceValue1,
uint8_t replaceValue2)

Execute the filter on the input image with the given parameters

*/
public ";

%javamethodmodifiers  rtk::simple::IsolatedWatershedImageFilter::GetIsolatedValueTolerance "/**
double rtk::simple::IsolatedWatershedImageFilter::GetIsolatedValueTolerance() const

Set/Get the precision required for the intensity threshold value. The
default is .001.

*/
public ";

%javamethodmodifiers  rtk::simple::IsolatedWatershedImageFilter::GetName "/**
std::string rtk::simple::IsolatedWatershedImageFilter::GetName() const

Name of this class

*/
public ";

%javamethodmodifiers  rtk::simple::IsolatedWatershedImageFilter::GetReplaceValue1 "/**
uint8_t rtk::simple::IsolatedWatershedImageFilter::GetReplaceValue1() const

Set/Get value to replace Seed1(Seed2) pixels, pixels that are within
the basin that contains Seed1(Seed2) this value. The default is 1(0).

*/
public ";

%javamethodmodifiers  rtk::simple::IsolatedWatershedImageFilter::GetReplaceValue2 "/**
uint8_t rtk::simple::IsolatedWatershedImageFilter::GetReplaceValue2() const

Set/Get value to replace Seed1(Seed2) pixels, pixels that are within
the basin that contains Seed1(Seed2) this value. The default is 1(0).

*/
public ";

%javamethodmodifiers  rtk::simple::IsolatedWatershedImageFilter::GetSeed1 "/**
std::vector<uint32_t> rtk::simple::IsolatedWatershedImageFilter::GetSeed1() const

Set seed point 1. This seed will be isolated from Seed2 (if possible).
All pixels connected to this seed will be replaced with ReplaceValue1.

*/
public ";

%javamethodmodifiers  rtk::simple::IsolatedWatershedImageFilter::GetSeed2 "/**
std::vector<uint32_t> rtk::simple::IsolatedWatershedImageFilter::GetSeed2() const

Set seed point 2. This seed will be isolated from Seed1 (if possible).
All pixels connected to this seed will be replaced with ReplaceValue2.

*/
public ";

%javamethodmodifiers  rtk::simple::IsolatedWatershedImageFilter::GetThreshold "/**
double rtk::simple::IsolatedWatershedImageFilter::GetThreshold() const

Set/Get the Watershed threshold. The default is 0.

*/
public ";

%javamethodmodifiers  rtk::simple::IsolatedWatershedImageFilter::GetUpperValueLimit "/**
double rtk::simple::IsolatedWatershedImageFilter::GetUpperValueLimit() const

Set/Get the limit on the upper waterlevel value. The default is 1.0.

*/
public ";

%javamethodmodifiers  rtk::simple::IsolatedWatershedImageFilter::IsolatedWatershedImageFilter "/**
rtk::simple::IsolatedWatershedImageFilter::IsolatedWatershedImageFilter()

Default Constructor that takes no arguments and initializes default
parameters

*/
public ";

%javamethodmodifiers  rtk::simple::IsolatedWatershedImageFilter::SetIsolatedValueTolerance "/**
Self& rtk::simple::IsolatedWatershedImageFilter::SetIsolatedValueTolerance(double IsolatedValueTolerance)

Set/Get the precision required for the intensity threshold value. The
default is .001.

*/
public ";

%javamethodmodifiers  rtk::simple::IsolatedWatershedImageFilter::SetReplaceValue1 "/**
Self& rtk::simple::IsolatedWatershedImageFilter::SetReplaceValue1(uint8_t ReplaceValue1)

Set/Get value to replace Seed1(Seed2) pixels, pixels that are within
the basin that contains Seed1(Seed2) this value. The default is 1(0).

*/
public ";

%javamethodmodifiers  rtk::simple::IsolatedWatershedImageFilter::SetReplaceValue2 "/**
Self& rtk::simple::IsolatedWatershedImageFilter::SetReplaceValue2(uint8_t ReplaceValue2)

Set/Get value to replace Seed1(Seed2) pixels, pixels that are within
the basin that contains Seed1(Seed2) this value. The default is 1(0).

*/
public ";

%javamethodmodifiers  rtk::simple::IsolatedWatershedImageFilter::SetSeed1 "/**
Self& rtk::simple::IsolatedWatershedImageFilter::SetSeed1(const std::vector< uint32_t > &Seed1)

Set seed point 1. This seed will be isolated from Seed2 (if possible).
All pixels connected to this seed will be replaced with ReplaceValue1.

*/
public ";

%javamethodmodifiers  rtk::simple::IsolatedWatershedImageFilter::SetSeed2 "/**
Self& rtk::simple::IsolatedWatershedImageFilter::SetSeed2(const std::vector< uint32_t > &Seed2)

Set seed point 2. This seed will be isolated from Seed1 (if possible).
All pixels connected to this seed will be replaced with ReplaceValue2.

*/
public ";

%javamethodmodifiers  rtk::simple::IsolatedWatershedImageFilter::SetThreshold "/**
Self& rtk::simple::IsolatedWatershedImageFilter::SetThreshold(double Threshold)

Set/Get the Watershed threshold. The default is 0.

*/
public ";

%javamethodmodifiers  rtk::simple::IsolatedWatershedImageFilter::SetUpperValueLimit "/**
Self& rtk::simple::IsolatedWatershedImageFilter::SetUpperValueLimit(double UpperValueLimit)

Set/Get the limit on the upper waterlevel value. The default is 1.0.

*/
public ";

%javamethodmodifiers  rtk::simple::IsolatedWatershedImageFilter::ToString "/**
std::string rtk::simple::IsolatedWatershedImageFilter::ToString() const

Print ourselves out

*/
public ";

%javamethodmodifiers  rtk::simple::IsolatedWatershedImageFilter::~IsolatedWatershedImageFilter "/**
rtk::simple::IsolatedWatershedImageFilter::~IsolatedWatershedImageFilter()

Destructor

*/
public ";


%typemap(javaimports) rtk::simple::JoinSeriesImageFilter "/**

Join N-D images into an (N+1)-D image.


This filter is templated over the input image type and the output
image type. The pixel type of them must be the same and the input
dimension must be less than the output dimension. When the input
images are N-dimensinal, they are joined in order and the size of the
N+1'th dimension of the output is same as the number of the inputs.
The spacing and the origin (where the first input is placed) for the
N+1'th dimension is specified in this filter. The output image
informations for the first N dimensions are taken from the first
input. Note that all the inputs should have the same information.


Hideaki Hiraki
 Contributed in the users list http://public.kitware.com/pipermail/insight-
users/2004-February/006542.html


See:
 rtk::simple::JoinSeries for the procedural interface


C++ includes: srtkJoinSeriesImageFilter.h
*/"

%javamethodmodifiers  rtk::simple::JoinSeriesImageFilter::Execute "/**
Image rtk::simple::JoinSeriesImageFilter::Execute(const std::vector< Image > &images)

Execute the filter on the input images

*/
public ";

%javamethodmodifiers  rtk::simple::JoinSeriesImageFilter::Execute "/**
Image rtk::simple::JoinSeriesImageFilter::Execute(const Image &image1)
*/
public ";

%javamethodmodifiers  rtk::simple::JoinSeriesImageFilter::Execute "/**
Image rtk::simple::JoinSeriesImageFilter::Execute(const Image &image1, const Image &image2)
*/
public ";

%javamethodmodifiers  rtk::simple::JoinSeriesImageFilter::Execute "/**
Image rtk::simple::JoinSeriesImageFilter::Execute(const Image &image1, const Image &image2, const Image &image3)
*/
public ";

%javamethodmodifiers  rtk::simple::JoinSeriesImageFilter::Execute "/**
Image rtk::simple::JoinSeriesImageFilter::Execute(const Image &image1, const Image &image2, const Image &image3, const
Image &image4)
*/
public ";

%javamethodmodifiers  rtk::simple::JoinSeriesImageFilter::Execute "/**
Image rtk::simple::JoinSeriesImageFilter::Execute(const Image &image1, const Image &image2, const Image &image3, const
Image &image4, const Image &image5)
*/
public ";

%javamethodmodifiers  rtk::simple::JoinSeriesImageFilter::Execute "/**
Image rtk::simple::JoinSeriesImageFilter::Execute(const std::vector< Image > &images, double origin, double spacing)

Execute the filter on the input images with the given parameters

*/
public ";

%javamethodmodifiers  rtk::simple::JoinSeriesImageFilter::Execute "/**
Image rtk::simple::JoinSeriesImageFilter::Execute(const Image &image1, double origin, double spacing)
*/
public ";

%javamethodmodifiers  rtk::simple::JoinSeriesImageFilter::Execute "/**
Image rtk::simple::JoinSeriesImageFilter::Execute(const Image &image1, const Image &image2, double origin, double
spacing)
*/
public ";

%javamethodmodifiers  rtk::simple::JoinSeriesImageFilter::Execute "/**
Image rtk::simple::JoinSeriesImageFilter::Execute(const Image &image1, const Image &image2, const Image &image3, double
origin, double spacing)
*/
public ";

%javamethodmodifiers  rtk::simple::JoinSeriesImageFilter::Execute "/**
Image rtk::simple::JoinSeriesImageFilter::Execute(const Image &image1, const Image &image2, const Image &image3, const
Image &image4, double origin, double spacing)
*/
public ";

%javamethodmodifiers  rtk::simple::JoinSeriesImageFilter::Execute "/**
Image rtk::simple::JoinSeriesImageFilter::Execute(const Image &image1, const Image &image2, const Image &image3, const
Image &image4, const Image &image5, double origin, double spacing)
*/
public ";

%javamethodmodifiers  rtk::simple::JoinSeriesImageFilter::GetName "/**
std::string rtk::simple::JoinSeriesImageFilter::GetName() const

Name of this class

*/
public ";

%javamethodmodifiers  rtk::simple::JoinSeriesImageFilter::GetOrigin "/**
double rtk::simple::JoinSeriesImageFilter::GetOrigin() const

Set/Get origin of the new dimension

*/
public ";

%javamethodmodifiers  rtk::simple::JoinSeriesImageFilter::GetSpacing "/**
double rtk::simple::JoinSeriesImageFilter::GetSpacing() const

Set/Get spacing of the new dimension

*/
public ";

%javamethodmodifiers  rtk::simple::JoinSeriesImageFilter::JoinSeriesImageFilter "/**
rtk::simple::JoinSeriesImageFilter::JoinSeriesImageFilter()

Default Constructor that takes no arguments and initializes default
parameters

*/
public ";

%javamethodmodifiers  rtk::simple::JoinSeriesImageFilter::SetOrigin "/**
Self& rtk::simple::JoinSeriesImageFilter::SetOrigin(double Origin)

Set/Get origin of the new dimension

*/
public ";

%javamethodmodifiers  rtk::simple::JoinSeriesImageFilter::SetSpacing "/**
Self& rtk::simple::JoinSeriesImageFilter::SetSpacing(double Spacing)

Set/Get spacing of the new dimension

*/
public ";

%javamethodmodifiers  rtk::simple::JoinSeriesImageFilter::ToString "/**
std::string rtk::simple::JoinSeriesImageFilter::ToString() const

Print ourselves out

*/
public ";

%javamethodmodifiers  rtk::simple::JoinSeriesImageFilter::~JoinSeriesImageFilter "/**
rtk::simple::JoinSeriesImageFilter::~JoinSeriesImageFilter()

Destructor

*/
public ";


%typemap(javaimports) rtk::simple::KittlerIllingworthThresholdImageFilter "/**

Threshold an image using the KittlerIllingworth Threshold.


This filter creates a binary thresholded image that separates an image
into foreground and background components. The filter computes the
threshold using the KittlerIllingworthThresholdCalculator and applies that theshold to the input image using the BinaryThresholdImageFilter .


Richard Beare. Department of Medicine, Monash University, Melbourne,
Australia.
 Gaetan Lehmann. Biologie du Developpement et de la Reproduction, INRA
de Jouy-en-Josas, France.

This implementation was taken from the Insight Journal paper: https://hdl.handle.net/10380/3279 or http://www.insight-journal.org/browse/publication/811


See:
 HistogramThresholdImageFilter

 rtk::simple::KittlerIllingworthThreshold for the procedural interface

 itk::KittlerIllingworthThresholdImageFilter for the Doxygen on the original ITK class.


C++ includes: srtkKittlerIllingworthThresholdImageFilter.h
*/"

%javamethodmodifiers  rtk::simple::KittlerIllingworthThresholdImageFilter::Execute "/**
Image rtk::simple::KittlerIllingworthThresholdImageFilter::Execute(const Image &image, const Image &maskImage)

Execute the filter on the input image

*/
public ";

%javamethodmodifiers  rtk::simple::KittlerIllingworthThresholdImageFilter::Execute "/**
Image rtk::simple::KittlerIllingworthThresholdImageFilter::Execute(const Image &image)
*/
public ";

%javamethodmodifiers  rtk::simple::KittlerIllingworthThresholdImageFilter::Execute "/**
Image rtk::simple::KittlerIllingworthThresholdImageFilter::Execute(const Image &image, const Image &maskImage, uint8_t insideValue,
uint8_t outsideValue, uint32_t numberOfHistogramBins, bool maskOutput,
uint8_t maskValue)

Execute the filter on the input image with the given parameters

*/
public ";

%javamethodmodifiers  rtk::simple::KittlerIllingworthThresholdImageFilter::Execute "/**
Image rtk::simple::KittlerIllingworthThresholdImageFilter::Execute(const Image &image, uint8_t insideValue, uint8_t outsideValue,
uint32_t numberOfHistogramBins, bool maskOutput, uint8_t maskValue)
*/
public ";

%javamethodmodifiers  rtk::simple::KittlerIllingworthThresholdImageFilter::GetInsideValue "/**
uint8_t rtk::simple::KittlerIllingworthThresholdImageFilter::GetInsideValue() const

Get the \"inside\" pixel value.

*/
public ";

%javamethodmodifiers  rtk::simple::KittlerIllingworthThresholdImageFilter::GetMaskOutput "/**
bool rtk::simple::KittlerIllingworthThresholdImageFilter::GetMaskOutput() const
*/
public ";

%javamethodmodifiers  rtk::simple::KittlerIllingworthThresholdImageFilter::GetMaskValue "/**
uint8_t rtk::simple::KittlerIllingworthThresholdImageFilter::GetMaskValue() const
*/
public ";

%javamethodmodifiers  rtk::simple::KittlerIllingworthThresholdImageFilter::GetName "/**
std::string rtk::simple::KittlerIllingworthThresholdImageFilter::GetName() const

Name of this class

*/
public ";

%javamethodmodifiers  rtk::simple::KittlerIllingworthThresholdImageFilter::GetNumberOfHistogramBins "/**
uint32_t rtk::simple::KittlerIllingworthThresholdImageFilter::GetNumberOfHistogramBins() const
*/
public ";

%javamethodmodifiers  rtk::simple::KittlerIllingworthThresholdImageFilter::GetOutsideValue "/**
uint8_t rtk::simple::KittlerIllingworthThresholdImageFilter::GetOutsideValue() const

Get the \"outside\" pixel value.

*/
public ";

%javamethodmodifiers  rtk::simple::KittlerIllingworthThresholdImageFilter::GetThreshold "/**
double rtk::simple::KittlerIllingworthThresholdImageFilter::GetThreshold() const

Get the computed threshold.


This is a measurement. Its value is updated in the Execute methods, so
the value will only be valid after an execution.

*/
public ";

%javamethodmodifiers  rtk::simple::KittlerIllingworthThresholdImageFilter::KittlerIllingworthThresholdImageFilter "/**
rtk::simple::KittlerIllingworthThresholdImageFilter::KittlerIllingworthThresholdImageFilter()

Default Constructor that takes no arguments and initializes default
parameters

*/
public ";

%javamethodmodifiers  rtk::simple::KittlerIllingworthThresholdImageFilter::MaskOutputOff "/**
Self& rtk::simple::KittlerIllingworthThresholdImageFilter::MaskOutputOff()
*/
public ";

%javamethodmodifiers  rtk::simple::KittlerIllingworthThresholdImageFilter::MaskOutputOn "/**
Self& rtk::simple::KittlerIllingworthThresholdImageFilter::MaskOutputOn()

Set the value of MaskOutput to true or false respectfully.

*/
public ";

%javamethodmodifiers  rtk::simple::KittlerIllingworthThresholdImageFilter::SetInsideValue "/**
Self& rtk::simple::KittlerIllingworthThresholdImageFilter::SetInsideValue(uint8_t InsideValue)

Set the \"inside\" pixel value.

*/
public ";

%javamethodmodifiers  rtk::simple::KittlerIllingworthThresholdImageFilter::SetMaskOutput "/**
Self& rtk::simple::KittlerIllingworthThresholdImageFilter::SetMaskOutput(bool MaskOutput)

Do you want the output to be masked by the mask used in histogram
construction. Only relevant if masking is in use.

*/
public ";

%javamethodmodifiers  rtk::simple::KittlerIllingworthThresholdImageFilter::SetMaskValue "/**
Self& rtk::simple::KittlerIllingworthThresholdImageFilter::SetMaskValue(uint8_t MaskValue)

The value in the mask image, if used, indicating voxels that should be
included. Default is the max of pixel type, as in the
MaskedImageToHistogramFilter

*/
public ";

%javamethodmodifiers  rtk::simple::KittlerIllingworthThresholdImageFilter::SetNumberOfHistogramBins "/**
Self& rtk::simple::KittlerIllingworthThresholdImageFilter::SetNumberOfHistogramBins(uint32_t NumberOfHistogramBins)

Set/Get the number of histogram bins.

*/
public ";

%javamethodmodifiers  rtk::simple::KittlerIllingworthThresholdImageFilter::SetOutsideValue "/**
Self& rtk::simple::KittlerIllingworthThresholdImageFilter::SetOutsideValue(uint8_t OutsideValue)

Set the \"outside\" pixel value. The default value NumericTraits<OutputPixelType>::Zero.

*/
public ";

%javamethodmodifiers  rtk::simple::KittlerIllingworthThresholdImageFilter::ToString "/**
std::string rtk::simple::KittlerIllingworthThresholdImageFilter::ToString() const

Print ourselves out

*/
public ";

%javamethodmodifiers  rtk::simple::KittlerIllingworthThresholdImageFilter::~KittlerIllingworthThresholdImageFilter "/**
rtk::simple::KittlerIllingworthThresholdImageFilter::~KittlerIllingworthThresholdImageFilter()

Destructor

*/
public ";


%typemap(javaimports) rtk::simple::LabelContourImageFilter "/**

Labels the pixels on the border of the objects in a labeled image.


LabelContourImageFilter takes a labeled image as input, where the pixels in the objects are
the pixels with a value different of the BackgroundValue. Only the
pixels on the contours of the objects are kept. The pixels not on the
border are changed to BackgroundValue. The labels of the object are
the same in the input and in the output image.

The connectivity can be changed to minimum or maximum connectivity
with SetFullyConnected() . Full connectivity produces thicker contours.

https://hdl.handle.net/1926/1352


Gaetan Lehmann. Biologie du Developpement et de la Reproduction, INRA
de Jouy-en-Josas, France.

See:
 BinaryContourImageFilter
Wiki Examples:

All Examples

Label the contours of connected components
See:
 rtk::simple::LabelContour for the procedural interface

 itk::LabelContourImageFilter for the Doxygen on the original ITK class.



C++ includes: srtkLabelContourImageFilter.h
*/"

%javamethodmodifiers  rtk::simple::LabelContourImageFilter::Execute "/**
Image rtk::simple::LabelContourImageFilter::Execute(const Image &image1)

Execute the filter on the input image

*/
public ";

%javamethodmodifiers  rtk::simple::LabelContourImageFilter::Execute "/**
Image rtk::simple::LabelContourImageFilter::Execute(const Image &image1, bool fullyConnected, double backgroundValue)

Execute the filter on the input image with the given parameters

*/
public ";

%javamethodmodifiers  rtk::simple::LabelContourImageFilter::FullyConnectedOff "/**
Self& rtk::simple::LabelContourImageFilter::FullyConnectedOff()
*/
public ";

%javamethodmodifiers  rtk::simple::LabelContourImageFilter::FullyConnectedOn "/**
Self& rtk::simple::LabelContourImageFilter::FullyConnectedOn()

Set the value of FullyConnected to true or false respectfully.

*/
public ";

%javamethodmodifiers  rtk::simple::LabelContourImageFilter::GetBackgroundValue "/**
double rtk::simple::LabelContourImageFilter::GetBackgroundValue() const

Set/Get the background value used to identify the objects and mark the
pixels not on the border of the objects.

*/
public ";

%javamethodmodifiers  rtk::simple::LabelContourImageFilter::GetFullyConnected "/**
bool rtk::simple::LabelContourImageFilter::GetFullyConnected() const

Set/Get whether the connected components are defined strictly by face
connectivity or by face+edge+vertex connectivity. Default is
FullyConnectedOff.
For objects that are 1 pixel wide, use FullyConnectedOn.


*/
public ";

%javamethodmodifiers  rtk::simple::LabelContourImageFilter::GetName "/**
std::string rtk::simple::LabelContourImageFilter::GetName() const

Name of this class

*/
public ";

%javamethodmodifiers  rtk::simple::LabelContourImageFilter::LabelContourImageFilter "/**
rtk::simple::LabelContourImageFilter::LabelContourImageFilter()

Default Constructor that takes no arguments and initializes default
parameters

*/
public ";

%javamethodmodifiers  rtk::simple::LabelContourImageFilter::SetBackgroundValue "/**
Self& rtk::simple::LabelContourImageFilter::SetBackgroundValue(double BackgroundValue)

Set/Get the background value used to identify the objects and mark the
pixels not on the border of the objects.

*/
public ";

%javamethodmodifiers  rtk::simple::LabelContourImageFilter::SetFullyConnected "/**
Self& rtk::simple::LabelContourImageFilter::SetFullyConnected(bool FullyConnected)

Set/Get whether the connected components are defined strictly by face
connectivity or by face+edge+vertex connectivity. Default is
FullyConnectedOff.
For objects that are 1 pixel wide, use FullyConnectedOn.


*/
public ";

%javamethodmodifiers  rtk::simple::LabelContourImageFilter::ToString "/**
std::string rtk::simple::LabelContourImageFilter::ToString() const

Print ourselves out

*/
public ";

%javamethodmodifiers  rtk::simple::LabelContourImageFilter::~LabelContourImageFilter "/**
rtk::simple::LabelContourImageFilter::~LabelContourImageFilter()

Destructor

*/
public ";


%typemap(javaimports) rtk::simple::LabelImageToLabelMapFilter "/**

convert a labeled image to a label collection image


LabelImageToLabelMapFilter converts a label image to a label collection image. The labels are
the same in the input and the output image.


Gaetan Lehmann. Biologie du Developpement et de la Reproduction, INRA
de Jouy-en-Josas, France.
 This implementation was taken from the Insight Journal paper: https://hdl.handle.net/1926/584 or http://www.insight-journal.org/browse/publication/176


See:
 BinaryImageToLabelMapFilter , LabelMapToLabelImageFilter
Wiki Examples:

All Examples

Convert an itk::Image consisting of labeled regions to a LabelMap
See:
 rtk::simple::LabelImageToLabelMapFilter for the procedural interface

 itk::LabelImageToLabelMapFilter for the Doxygen on the original ITK class.



C++ includes: srtkLabelImageToLabelMapFilter.h
*/"

%javamethodmodifiers  rtk::simple::LabelImageToLabelMapFilter::Execute "/**
Image rtk::simple::LabelImageToLabelMapFilter::Execute(const Image &image1)

Execute the filter on the input image

*/
public ";

%javamethodmodifiers  rtk::simple::LabelImageToLabelMapFilter::Execute "/**
Image rtk::simple::LabelImageToLabelMapFilter::Execute(const Image &image1, double backgroundValue)

Execute the filter on the input image with the given parameters

*/
public ";

%javamethodmodifiers  rtk::simple::LabelImageToLabelMapFilter::GetBackgroundValue "/**
double rtk::simple::LabelImageToLabelMapFilter::GetBackgroundValue() const

Set/Get the value used as \"background\" in the output image. Defaults
to NumericTraits<PixelType>::NonpositiveMin() .

*/
public ";

%javamethodmodifiers  rtk::simple::LabelImageToLabelMapFilter::GetName "/**
std::string rtk::simple::LabelImageToLabelMapFilter::GetName() const

Name of this class

*/
public ";

%javamethodmodifiers  rtk::simple::LabelImageToLabelMapFilter::LabelImageToLabelMapFilter "/**
rtk::simple::LabelImageToLabelMapFilter::LabelImageToLabelMapFilter()

Default Constructor that takes no arguments and initializes default
parameters

*/
public ";

%javamethodmodifiers  rtk::simple::LabelImageToLabelMapFilter::SetBackgroundValue "/**
Self& rtk::simple::LabelImageToLabelMapFilter::SetBackgroundValue(double BackgroundValue)

Set/Get the value used as \"background\" in the output image. Defaults
to NumericTraits<PixelType>::NonpositiveMin() .

*/
public ";

%javamethodmodifiers  rtk::simple::LabelImageToLabelMapFilter::ToString "/**
std::string rtk::simple::LabelImageToLabelMapFilter::ToString() const

Print ourselves out

*/
public ";

%javamethodmodifiers  rtk::simple::LabelImageToLabelMapFilter::~LabelImageToLabelMapFilter "/**
rtk::simple::LabelImageToLabelMapFilter::~LabelImageToLabelMapFilter()

Destructor

*/
public ";


%typemap(javaimports) rtk::simple::LabelIntensityStatisticsImageFilter "/**

a convenient class to convert a label image to a label map and valuate
the statistics attributes at once



Gaetan Lehmann. Biologie du Developpement et de la Reproduction, INRA
de Jouy-en-Josas, France.
 This implementation was taken from the Insight Journal paper: https://hdl.handle.net/1926/584 or http://www.insight-journal.org/browse/publication/176


See:
 StatisticsLabelObject , LabelStatisticsOpeningImageFilter , LabelStatisticsOpeningImageFilter

 itk::LabelImageToStatisticsLabelMapFilter for the Doxygen on the original ITK class.


C++ includes: srtkLabelIntensityStatisticsImageFilter.h
*/"

%javamethodmodifiers  rtk::simple::LabelIntensityStatisticsImageFilter::ComputeFeretDiameterOff "/**
Self& rtk::simple::LabelIntensityStatisticsImageFilter::ComputeFeretDiameterOff()
*/
public ";

%javamethodmodifiers  rtk::simple::LabelIntensityStatisticsImageFilter::ComputeFeretDiameterOn "/**
Self& rtk::simple::LabelIntensityStatisticsImageFilter::ComputeFeretDiameterOn()

Set the value of ComputeFeretDiameter to true or false respectfully.

*/
public ";

%javamethodmodifiers  rtk::simple::LabelIntensityStatisticsImageFilter::ComputePerimeterOff "/**
Self& rtk::simple::LabelIntensityStatisticsImageFilter::ComputePerimeterOff()
*/
public ";

%javamethodmodifiers  rtk::simple::LabelIntensityStatisticsImageFilter::ComputePerimeterOn "/**
Self& rtk::simple::LabelIntensityStatisticsImageFilter::ComputePerimeterOn()

Set the value of ComputePerimeter to true or false respectfully.

*/
public ";

%javamethodmodifiers  rtk::simple::LabelIntensityStatisticsImageFilter::Execute "/**
Image rtk::simple::LabelIntensityStatisticsImageFilter::Execute(const Image &image, const Image &featureImage)

Execute the filter on the input image

*/
public ";

%javamethodmodifiers  rtk::simple::LabelIntensityStatisticsImageFilter::Execute "/**
Image rtk::simple::LabelIntensityStatisticsImageFilter::Execute(const Image &image, const Image &featureImage, double
backgroundValue, bool computeFeretDiameter, bool computePerimeter,
uint32_t numberOfBins)

Execute the filter on the input image with the given parameters

*/
public ";

%javamethodmodifiers  rtk::simple::LabelIntensityStatisticsImageFilter::GetBackgroundValue "/**
double rtk::simple::LabelIntensityStatisticsImageFilter::GetBackgroundValue() const

Set/Get the value used as \"background\" in the output image. Defaults
to NumericTraits<PixelType>::NonpositiveMin() .

*/
public ";

%javamethodmodifiers  rtk::simple::LabelIntensityStatisticsImageFilter::GetBoundingBox "/**
std::vector<unsigned int> rtk::simple::LabelIntensityStatisticsImageFilter::GetBoundingBox(int64_t label) const

This is an active measurement. It may be accessed while the filter is
being executing in command call-backs and can be accessed after
execution.

*/
public ";

%javamethodmodifiers  rtk::simple::LabelIntensityStatisticsImageFilter::GetCenterOfGravity "/**
std::vector<double> rtk::simple::LabelIntensityStatisticsImageFilter::GetCenterOfGravity(int64_t label) const

This is an active measurement. It may be accessed while the filter is
being executing in command call-backs and can be accessed after
execution.

*/
public ";

%javamethodmodifiers  rtk::simple::LabelIntensityStatisticsImageFilter::GetCentroid "/**
std::vector<double> rtk::simple::LabelIntensityStatisticsImageFilter::GetCentroid(int64_t label) const

This is an active measurement. It may be accessed while the filter is
being executing in command call-backs and can be accessed after
execution.

*/
public ";

%javamethodmodifiers  rtk::simple::LabelIntensityStatisticsImageFilter::GetComputeFeretDiameter "/**
bool rtk::simple::LabelIntensityStatisticsImageFilter::GetComputeFeretDiameter() const

Set/Get whether the maximum Feret diameter should be computed or not.
The defaut value is false, because of the high computation time
required.

*/
public ";

%javamethodmodifiers  rtk::simple::LabelIntensityStatisticsImageFilter::GetComputePerimeter "/**
bool rtk::simple::LabelIntensityStatisticsImageFilter::GetComputePerimeter() const

Set/Get whether the perimeter should be computed or not. The defaut
value is false, because of the high computation time required.

*/
public ";

%javamethodmodifiers  rtk::simple::LabelIntensityStatisticsImageFilter::GetElongation "/**
double rtk::simple::LabelIntensityStatisticsImageFilter::GetElongation(int64_t label) const

This is an active measurement. It may be accessed while the filter is
being executing in command call-backs and can be accessed after
execution.

*/
public ";

%javamethodmodifiers  rtk::simple::LabelIntensityStatisticsImageFilter::GetEquivalentEllipsoidDiameter "/**
std::vector<double> rtk::simple::LabelIntensityStatisticsImageFilter::GetEquivalentEllipsoidDiameter(int64_t label) const

This is an active measurement. It may be accessed while the filter is
being executing in command call-backs and can be accessed after
execution.

*/
public ";

%javamethodmodifiers  rtk::simple::LabelIntensityStatisticsImageFilter::GetEquivalentSphericalPerimeter "/**
double rtk::simple::LabelIntensityStatisticsImageFilter::GetEquivalentSphericalPerimeter(int64_t label) const

This is an active measurement. It may be accessed while the filter is
being executing in command call-backs and can be accessed after
execution.

*/
public ";

%javamethodmodifiers  rtk::simple::LabelIntensityStatisticsImageFilter::GetEquivalentSphericalRadius "/**
double rtk::simple::LabelIntensityStatisticsImageFilter::GetEquivalentSphericalRadius(int64_t label) const

This is an active measurement. It may be accessed while the filter is
being executing in command call-backs and can be accessed after
execution.

*/
public ";

%javamethodmodifiers  rtk::simple::LabelIntensityStatisticsImageFilter::GetFeretDiameter "/**
double rtk::simple::LabelIntensityStatisticsImageFilter::GetFeretDiameter(int64_t label) const

This is an active measurement. It may be accessed while the filter is
being executing in command call-backs and can be accessed after
execution.

*/
public ";

%javamethodmodifiers  rtk::simple::LabelIntensityStatisticsImageFilter::GetFlatness "/**
double rtk::simple::LabelIntensityStatisticsImageFilter::GetFlatness(int64_t label) const

This is an active measurement. It may be accessed while the filter is
being executing in command call-backs and can be accessed after
execution.

*/
public ";

%javamethodmodifiers  rtk::simple::LabelIntensityStatisticsImageFilter::GetKurtosis "/**
double rtk::simple::LabelIntensityStatisticsImageFilter::GetKurtosis(int64_t label) const

This is an active measurement. It may be accessed while the filter is
being executing in command call-backs and can be accessed after
execution.

*/
public ";

%javamethodmodifiers  rtk::simple::LabelIntensityStatisticsImageFilter::GetLabels "/**
std::vector<int64_t> rtk::simple::LabelIntensityStatisticsImageFilter::GetLabels() const

This is a measurement. Its value is updated in the Execute methods, so
the value will only be valid after an execution.

*/
public ";

%javamethodmodifiers  rtk::simple::LabelIntensityStatisticsImageFilter::GetMaximum "/**
double rtk::simple::LabelIntensityStatisticsImageFilter::GetMaximum(int64_t label) const

This is an active measurement. It may be accessed while the filter is
being executing in command call-backs and can be accessed after
execution.

*/
public ";

%javamethodmodifiers  rtk::simple::LabelIntensityStatisticsImageFilter::GetMaximumIndex "/**
std::vector<uint32_t> rtk::simple::LabelIntensityStatisticsImageFilter::GetMaximumIndex(int64_t label) const

This is an active measurement. It may be accessed while the filter is
being executing in command call-backs and can be accessed after
execution.

*/
public ";

%javamethodmodifiers  rtk::simple::LabelIntensityStatisticsImageFilter::GetMean "/**
double rtk::simple::LabelIntensityStatisticsImageFilter::GetMean(int64_t label) const

This is an active measurement. It may be accessed while the filter is
being executing in command call-backs and can be accessed after
execution.

*/
public ";

%javamethodmodifiers  rtk::simple::LabelIntensityStatisticsImageFilter::GetMedian "/**
double rtk::simple::LabelIntensityStatisticsImageFilter::GetMedian(int64_t label) const

This is an active measurement. It may be accessed while the filter is
being executing in command call-backs and can be accessed after
execution.

*/
public ";

%javamethodmodifiers  rtk::simple::LabelIntensityStatisticsImageFilter::GetMinimum "/**
double rtk::simple::LabelIntensityStatisticsImageFilter::GetMinimum(int64_t label) const

This is an active measurement. It may be accessed while the filter is
being executing in command call-backs and can be accessed after
execution.

*/
public ";

%javamethodmodifiers  rtk::simple::LabelIntensityStatisticsImageFilter::GetMinimumIndex "/**
std::vector<uint32_t> rtk::simple::LabelIntensityStatisticsImageFilter::GetMinimumIndex(int64_t label) const

This is an active measurement. It may be accessed while the filter is
being executing in command call-backs and can be accessed after
execution.

*/
public ";

%javamethodmodifiers  rtk::simple::LabelIntensityStatisticsImageFilter::GetName "/**
std::string rtk::simple::LabelIntensityStatisticsImageFilter::GetName() const

Name of this class

*/
public ";

%javamethodmodifiers  rtk::simple::LabelIntensityStatisticsImageFilter::GetNumberOfBins "/**
uint32_t rtk::simple::LabelIntensityStatisticsImageFilter::GetNumberOfBins() const

Set/Get the number of bins in the histogram. Note that the histogram
is used to compute the median value, and that this option may have an
effect on the value of the median.

*/
public ";

%javamethodmodifiers  rtk::simple::LabelIntensityStatisticsImageFilter::GetNumberOfLabels "/**
uint64_t rtk::simple::LabelIntensityStatisticsImageFilter::GetNumberOfLabels()

Return the number of labels after execution.

*/
public ";

%javamethodmodifiers  rtk::simple::LabelIntensityStatisticsImageFilter::GetNumberOfPixels "/**
uint64_t rtk::simple::LabelIntensityStatisticsImageFilter::GetNumberOfPixels(int64_t label) const

This is an active measurement. It may be accessed while the filter is
being executing in command call-backs and can be accessed after
execution.

*/
public ";

%javamethodmodifiers  rtk::simple::LabelIntensityStatisticsImageFilter::GetNumberOfPixelsOnBorder "/**
uint64_t rtk::simple::LabelIntensityStatisticsImageFilter::GetNumberOfPixelsOnBorder(int64_t label) const

This is an active measurement. It may be accessed while the filter is
being executing in command call-backs and can be accessed after
execution.

*/
public ";

%javamethodmodifiers  rtk::simple::LabelIntensityStatisticsImageFilter::GetPerimeter "/**
double rtk::simple::LabelIntensityStatisticsImageFilter::GetPerimeter(int64_t label) const

This is an active measurement. It may be accessed while the filter is
being executing in command call-backs and can be accessed after
execution.

*/
public ";

%javamethodmodifiers  rtk::simple::LabelIntensityStatisticsImageFilter::GetPerimeterOnBorder "/**
double rtk::simple::LabelIntensityStatisticsImageFilter::GetPerimeterOnBorder(int64_t label) const

This is an active measurement. It may be accessed while the filter is
being executing in command call-backs and can be accessed after
execution.

*/
public ";

%javamethodmodifiers  rtk::simple::LabelIntensityStatisticsImageFilter::GetPerimeterOnBorderRatio "/**
double rtk::simple::LabelIntensityStatisticsImageFilter::GetPerimeterOnBorderRatio(int64_t label) const

This is an active measurement. It may be accessed while the filter is
being executing in command call-backs and can be accessed after
execution.

*/
public ";

%javamethodmodifiers  rtk::simple::LabelIntensityStatisticsImageFilter::GetPhysicalSize "/**
double rtk::simple::LabelIntensityStatisticsImageFilter::GetPhysicalSize(int64_t label) const

This is an active measurement. It may be accessed while the filter is
being executing in command call-backs and can be accessed after
execution.

*/
public ";

%javamethodmodifiers  rtk::simple::LabelIntensityStatisticsImageFilter::GetPrincipalAxes "/**
std::vector<double> rtk::simple::LabelIntensityStatisticsImageFilter::GetPrincipalAxes(int64_t label) const

This is an active measurement. It may be accessed while the filter is
being executing in command call-backs and can be accessed after
execution.

*/
public ";

%javamethodmodifiers  rtk::simple::LabelIntensityStatisticsImageFilter::GetPrincipalMoments "/**
std::vector<double> rtk::simple::LabelIntensityStatisticsImageFilter::GetPrincipalMoments(int64_t label) const

This is an active measurement. It may be accessed while the filter is
being executing in command call-backs and can be accessed after
execution.

*/
public ";

%javamethodmodifiers  rtk::simple::LabelIntensityStatisticsImageFilter::GetRoundness "/**
double rtk::simple::LabelIntensityStatisticsImageFilter::GetRoundness(int64_t label) const

This is an active measurement. It may be accessed while the filter is
being executing in command call-backs and can be accessed after
execution.

*/
public ";

%javamethodmodifiers  rtk::simple::LabelIntensityStatisticsImageFilter::GetSkewness "/**
double rtk::simple::LabelIntensityStatisticsImageFilter::GetSkewness(int64_t label) const

This is an active measurement. It may be accessed while the filter is
being executing in command call-backs and can be accessed after
execution.

*/
public ";

%javamethodmodifiers  rtk::simple::LabelIntensityStatisticsImageFilter::GetStandardDeviation "/**
double rtk::simple::LabelIntensityStatisticsImageFilter::GetStandardDeviation(int64_t label) const

This is an active measurement. It may be accessed while the filter is
being executing in command call-backs and can be accessed after
execution.

*/
public ";

%javamethodmodifiers  rtk::simple::LabelIntensityStatisticsImageFilter::GetSum "/**
double rtk::simple::LabelIntensityStatisticsImageFilter::GetSum(int64_t label) const

This is an active measurement. It may be accessed while the filter is
being executing in command call-backs and can be accessed after
execution.

*/
public ";

%javamethodmodifiers  rtk::simple::LabelIntensityStatisticsImageFilter::GetVariance "/**
double rtk::simple::LabelIntensityStatisticsImageFilter::GetVariance(int64_t label) const

This is an active measurement. It may be accessed while the filter is
being executing in command call-backs and can be accessed after
execution.

*/
public ";

%javamethodmodifiers  rtk::simple::LabelIntensityStatisticsImageFilter::GetWeightedElongation "/**
double rtk::simple::LabelIntensityStatisticsImageFilter::GetWeightedElongation(int64_t label) const

This is an active measurement. It may be accessed while the filter is
being executing in command call-backs and can be accessed after
execution.

*/
public ";

%javamethodmodifiers  rtk::simple::LabelIntensityStatisticsImageFilter::GetWeightedFlatness "/**
double rtk::simple::LabelIntensityStatisticsImageFilter::GetWeightedFlatness(int64_t label) const

This is an active measurement. It may be accessed while the filter is
being executing in command call-backs and can be accessed after
execution.

*/
public ";

%javamethodmodifiers  rtk::simple::LabelIntensityStatisticsImageFilter::GetWeightedPrincipalAxes "/**
std::vector<double> rtk::simple::LabelIntensityStatisticsImageFilter::GetWeightedPrincipalAxes(int64_t label) const

This is an active measurement. It may be accessed while the filter is
being executing in command call-backs and can be accessed after
execution.

*/
public ";

%javamethodmodifiers  rtk::simple::LabelIntensityStatisticsImageFilter::GetWeightedPrincipalMoments "/**
std::vector<double> rtk::simple::LabelIntensityStatisticsImageFilter::GetWeightedPrincipalMoments(int64_t label) const

This is an active measurement. It may be accessed while the filter is
being executing in command call-backs and can be accessed after
execution.

*/
public ";

%javamethodmodifiers  rtk::simple::LabelIntensityStatisticsImageFilter::HasLabel "/**
double rtk::simple::LabelIntensityStatisticsImageFilter::HasLabel(int64_t label)

Does the specified label exist? Can only be called after a call a call
to Update().

*/
public ";

%javamethodmodifiers  rtk::simple::LabelIntensityStatisticsImageFilter::LabelIntensityStatisticsImageFilter "/**
rtk::simple::LabelIntensityStatisticsImageFilter::LabelIntensityStatisticsImageFilter()

Default Constructor that takes no arguments and initializes default
parameters

*/
public ";

%javamethodmodifiers  rtk::simple::LabelIntensityStatisticsImageFilter::SetBackgroundValue "/**
Self& rtk::simple::LabelIntensityStatisticsImageFilter::SetBackgroundValue(double BackgroundValue)

Set/Get the value used as \"background\" in the output image. Defaults
to NumericTraits<PixelType>::NonpositiveMin() .

*/
public ";

%javamethodmodifiers  rtk::simple::LabelIntensityStatisticsImageFilter::SetComputeFeretDiameter "/**
Self& rtk::simple::LabelIntensityStatisticsImageFilter::SetComputeFeretDiameter(bool ComputeFeretDiameter)

Set/Get whether the maximum Feret diameter should be computed or not.
The defaut value is false, because of the high computation time
required.

*/
public ";

%javamethodmodifiers  rtk::simple::LabelIntensityStatisticsImageFilter::SetComputePerimeter "/**
Self& rtk::simple::LabelIntensityStatisticsImageFilter::SetComputePerimeter(bool ComputePerimeter)

Set/Get whether the perimeter should be computed or not. The defaut
value is false, because of the high computation time required.

*/
public ";

%javamethodmodifiers  rtk::simple::LabelIntensityStatisticsImageFilter::SetNumberOfBins "/**
Self& rtk::simple::LabelIntensityStatisticsImageFilter::SetNumberOfBins(uint32_t NumberOfBins)

Set/Get the number of bins in the histogram. Note that the histogram
is used to compute the median value, and that this option may have an
effect on the value of the median.

*/
public ";

%javamethodmodifiers  rtk::simple::LabelIntensityStatisticsImageFilter::ToString "/**
std::string rtk::simple::LabelIntensityStatisticsImageFilter::ToString() const

Print ourselves out

*/
public ";

%javamethodmodifiers  rtk::simple::LabelIntensityStatisticsImageFilter::~LabelIntensityStatisticsImageFilter "/**
rtk::simple::LabelIntensityStatisticsImageFilter::~LabelIntensityStatisticsImageFilter()

Destructor

*/
public ";


%typemap(javaimports) rtk::simple::LabelMapContourOverlayImageFilter "/**

Apply a colormap to the contours (outlines) of each object in a label
map and superimpose it on top of the feature image.


The feature image is typically the image from which the labeling was
produced. Use the SetInput function to set the LabelMap , and the SetFeatureImage function to set the feature image.

Apply a colormap to a label map and put it on top of the input image.
The set of colors is a good selection of distinct colors. The opacity
of the label map can be defined by the user. A background label
produce a gray pixel with the same intensity than the input one.


Gaetan Lehmann. Biologie du Developpement et de la Reproduction, INRA
de Jouy-en-Josas, France.
 This implementation was taken from the Insight Journal paper: https://hdl.handle.net/1926/584 or http://www.insight-journal.org/browse/publication/176


See:
 LabelMapToBinaryImageFilter , LabelMapToLabelImageFilter , LabelMapOverlayImageFilter
Wiki Examples:

All Examples

Color the boundaries of labeled regions in an image
See:
 rtk::simple::LabelMapContourOverlay for the procedural interface

 itk::LabelMapContourOverlayImageFilter for the Doxygen on the original ITK class.



C++ includes: srtkLabelMapContourOverlayImageFilter.h
*/"

%javamethodmodifiers  rtk::simple::LabelMapContourOverlayImageFilter::Execute "/**
Image rtk::simple::LabelMapContourOverlayImageFilter::Execute(const Image &labelMapImage, const Image &featureImage)

Execute the filter on the input image

*/
public ";

%javamethodmodifiers  rtk::simple::LabelMapContourOverlayImageFilter::Execute "/**
Image rtk::simple::LabelMapContourOverlayImageFilter::Execute(const Image &labelMapImage, const Image &featureImage, double
opacity, const std::vector< unsigned int > &dilationRadius, const
std::vector< unsigned int > &contourThickness, unsigned int
sliceDimension, LabelMapContourOverlayImageFilter::ContourTypeType
contourType, LabelMapContourOverlayImageFilter::PriorityType priority)

Execute the filter on the input image with the given parameters

*/
public ";

%javamethodmodifiers  rtk::simple::LabelMapContourOverlayImageFilter::GetContourThickness "/**
std::vector<unsigned int> rtk::simple::LabelMapContourOverlayImageFilter::GetContourThickness() const

Set/Get the contour thickness - 1 by default.

*/
public ";

%javamethodmodifiers  rtk::simple::LabelMapContourOverlayImageFilter::GetContourType "/**
ContourTypeType rtk::simple::LabelMapContourOverlayImageFilter::GetContourType() const

Set/Get the overlay type - CONTOUR is used by default.

*/
public ";

%javamethodmodifiers  rtk::simple::LabelMapContourOverlayImageFilter::GetDilationRadius "/**
std::vector<unsigned int> rtk::simple::LabelMapContourOverlayImageFilter::GetDilationRadius() const

Set/Get the object dilation radius - 0 by default.

*/
public ";

%javamethodmodifiers  rtk::simple::LabelMapContourOverlayImageFilter::GetName "/**
std::string rtk::simple::LabelMapContourOverlayImageFilter::GetName() const

Name of this class

*/
public ";

%javamethodmodifiers  rtk::simple::LabelMapContourOverlayImageFilter::GetOpacity "/**
double rtk::simple::LabelMapContourOverlayImageFilter::GetOpacity() const

Set/Get the opacity of the colored label image. The value must be
between 0 and 1

*/
public ";

%javamethodmodifiers  rtk::simple::LabelMapContourOverlayImageFilter::GetPriority "/**
PriorityType rtk::simple::LabelMapContourOverlayImageFilter::GetPriority() const

Set/Get the object priority - HIGH_LABEL_ON_TOP by default.

*/
public ";

%javamethodmodifiers  rtk::simple::LabelMapContourOverlayImageFilter::GetSliceDimension "/**
unsigned int rtk::simple::LabelMapContourOverlayImageFilter::GetSliceDimension() const

Set/Get the slice dimension - defaults to image dimension - 1.

*/
public ";

%javamethodmodifiers  rtk::simple::LabelMapContourOverlayImageFilter::LabelMapContourOverlayImageFilter "/**
rtk::simple::LabelMapContourOverlayImageFilter::LabelMapContourOverlayImageFilter()

Default Constructor that takes no arguments and initializes default
parameters

*/
public ";

%javamethodmodifiers  rtk::simple::LabelMapContourOverlayImageFilter::SetContourThickness "/**
Self& rtk::simple::LabelMapContourOverlayImageFilter::SetContourThickness(const std::vector< unsigned int > &ContourThickness)

Set/Get the contour thickness - 1 by default.

*/
public ";

%javamethodmodifiers  rtk::simple::LabelMapContourOverlayImageFilter::SetContourType "/**
Self& rtk::simple::LabelMapContourOverlayImageFilter::SetContourType(ContourTypeType ContourType)

Set/Get the overlay type - CONTOUR is used by default.

*/
public ";

%javamethodmodifiers  rtk::simple::LabelMapContourOverlayImageFilter::SetDilationRadius "/**
Self& rtk::simple::LabelMapContourOverlayImageFilter::SetDilationRadius(const std::vector< unsigned int > &DilationRadius)

Set/Get the object dilation radius - 0 by default.

*/
public ";

%javamethodmodifiers  rtk::simple::LabelMapContourOverlayImageFilter::SetDilationRadius "/**
Self& rtk::simple::LabelMapContourOverlayImageFilter::SetDilationRadius(unsigned int value)

Set the values of the DilationRadius vector all to value

*/
public ";

%javamethodmodifiers  rtk::simple::LabelMapContourOverlayImageFilter::SetOpacity "/**
Self& rtk::simple::LabelMapContourOverlayImageFilter::SetOpacity(double Opacity)

Set/Get the opacity of the colored label image. The value must be
between 0 and 1

*/
public ";

%javamethodmodifiers  rtk::simple::LabelMapContourOverlayImageFilter::SetPriority "/**
Self& rtk::simple::LabelMapContourOverlayImageFilter::SetPriority(PriorityType Priority)

Set/Get the object priority - HIGH_LABEL_ON_TOP by default.

*/
public ";

%javamethodmodifiers  rtk::simple::LabelMapContourOverlayImageFilter::SetSliceDimension "/**
Self& rtk::simple::LabelMapContourOverlayImageFilter::SetSliceDimension(unsigned int SliceDimension)

Set/Get the slice dimension - defaults to image dimension - 1.

*/
public ";

%javamethodmodifiers  rtk::simple::LabelMapContourOverlayImageFilter::ToString "/**
std::string rtk::simple::LabelMapContourOverlayImageFilter::ToString() const

Print ourselves out

*/
public ";

%javamethodmodifiers  rtk::simple::LabelMapContourOverlayImageFilter::~LabelMapContourOverlayImageFilter "/**
rtk::simple::LabelMapContourOverlayImageFilter::~LabelMapContourOverlayImageFilter()

Destructor

*/
public ";


%typemap(javaimports) rtk::simple::LabelMapMaskImageFilter "/**

Mask and image with a LabelMap .


LabelMapMaskImageFilter mask the content of an input image according to the content of the
input LabelMap . The masked pixel of the input image are set to the BackgroundValue. LabelMapMaskImageFilter can keep the input image for one label only, with Negated = false
(the default) or it can mask the input image for a single label, when
Negated equals true. In Both cases, the label is set with SetLabel() .


Gaetan Lehmann. Biologie du Developpement et de la Reproduction, INRA
de Jouy-en-Josas, France.
 This implementation was taken from the Insight Journal paper: https://hdl.handle.net/1926/584 or http://www.insight-journal.org/browse/publication/176


See:
 LabelMapToBinaryImageFilter , LabelMapToLabelImageFilter

 rtk::simple::LabelMapMask for the procedural interface

 itk::LabelMapMaskImageFilter for the Doxygen on the original ITK class.


C++ includes: srtkLabelMapMaskImageFilter.h
*/"

%javamethodmodifiers  rtk::simple::LabelMapMaskImageFilter::CropOff "/**
Self& rtk::simple::LabelMapMaskImageFilter::CropOff()
*/
public ";

%javamethodmodifiers  rtk::simple::LabelMapMaskImageFilter::CropOn "/**
Self& rtk::simple::LabelMapMaskImageFilter::CropOn()

Set the value of Crop to true or false respectfully.

*/
public ";

%javamethodmodifiers  rtk::simple::LabelMapMaskImageFilter::Execute "/**
Image rtk::simple::LabelMapMaskImageFilter::Execute(const Image &labelMapImage, const Image &featureImage)

Execute the filter on the input image

*/
public ";

%javamethodmodifiers  rtk::simple::LabelMapMaskImageFilter::Execute "/**
Image rtk::simple::LabelMapMaskImageFilter::Execute(const Image &labelMapImage, const Image &featureImage, uint64_t
label, double backgroundValue, bool negated, bool crop, const
std::vector< unsigned int > &cropBorder)

Execute the filter on the input image with the given parameters

*/
public ";

%javamethodmodifiers  rtk::simple::LabelMapMaskImageFilter::GetBackgroundValue "/**
double rtk::simple::LabelMapMaskImageFilter::GetBackgroundValue() const

Set/Get the value used as \"background\" in the output image. Defaults
to NumericTraits<PixelType>::ZeroValue() .

*/
public ";

%javamethodmodifiers  rtk::simple::LabelMapMaskImageFilter::GetCrop "/**
bool rtk::simple::LabelMapMaskImageFilter::GetCrop() const

Set/Get whether the image size should be adjusted to the masked image
or not.

*/
public ";

%javamethodmodifiers  rtk::simple::LabelMapMaskImageFilter::GetCropBorder "/**
std::vector<unsigned int> rtk::simple::LabelMapMaskImageFilter::GetCropBorder() const

Set/Get the boder added to the mask before the crop. The default is 0
on all the axes.

*/
public ";

%javamethodmodifiers  rtk::simple::LabelMapMaskImageFilter::GetLabel "/**
uint64_t rtk::simple::LabelMapMaskImageFilter::GetLabel() const

The label to mask or to not mask, depending on the value of the
Negated ivar.

*/
public ";

%javamethodmodifiers  rtk::simple::LabelMapMaskImageFilter::GetName "/**
std::string rtk::simple::LabelMapMaskImageFilter::GetName() const

Name of this class

*/
public ";

%javamethodmodifiers  rtk::simple::LabelMapMaskImageFilter::GetNegated "/**
bool rtk::simple::LabelMapMaskImageFilter::GetNegated() const

Set/Get whether the Label should be masked or not.

*/
public ";

%javamethodmodifiers  rtk::simple::LabelMapMaskImageFilter::LabelMapMaskImageFilter "/**
rtk::simple::LabelMapMaskImageFilter::LabelMapMaskImageFilter()

Default Constructor that takes no arguments and initializes default
parameters

*/
public ";

%javamethodmodifiers  rtk::simple::LabelMapMaskImageFilter::NegatedOff "/**
Self& rtk::simple::LabelMapMaskImageFilter::NegatedOff()
*/
public ";

%javamethodmodifiers  rtk::simple::LabelMapMaskImageFilter::NegatedOn "/**
Self& rtk::simple::LabelMapMaskImageFilter::NegatedOn()

Set the value of Negated to true or false respectfully.

*/
public ";

%javamethodmodifiers  rtk::simple::LabelMapMaskImageFilter::SetBackgroundValue "/**
Self& rtk::simple::LabelMapMaskImageFilter::SetBackgroundValue(double BackgroundValue)

Set/Get the value used as \"background\" in the output image. Defaults
to NumericTraits<PixelType>::ZeroValue() .

*/
public ";

%javamethodmodifiers  rtk::simple::LabelMapMaskImageFilter::SetCrop "/**
Self& rtk::simple::LabelMapMaskImageFilter::SetCrop(bool Crop)

Set/Get whether the image size should be adjusted to the masked image
or not.

*/
public ";

%javamethodmodifiers  rtk::simple::LabelMapMaskImageFilter::SetCropBorder "/**
Self& rtk::simple::LabelMapMaskImageFilter::SetCropBorder(const std::vector< unsigned int > &CropBorder)

Set/Get the boder added to the mask before the crop. The default is 0
on all the axes.

*/
public ";

%javamethodmodifiers  rtk::simple::LabelMapMaskImageFilter::SetCropBorder "/**
Self& rtk::simple::LabelMapMaskImageFilter::SetCropBorder(unsigned int value)

Set the values of the CropBorder vector all to value

*/
public ";

%javamethodmodifiers  rtk::simple::LabelMapMaskImageFilter::SetLabel "/**
Self& rtk::simple::LabelMapMaskImageFilter::SetLabel(uint64_t Label)

The label to mask or to not mask, depending on the value of the
Negated ivar.

*/
public ";

%javamethodmodifiers  rtk::simple::LabelMapMaskImageFilter::SetNegated "/**
Self& rtk::simple::LabelMapMaskImageFilter::SetNegated(bool Negated)

Set/Get whether the Label should be masked or not.

*/
public ";

%javamethodmodifiers  rtk::simple::LabelMapMaskImageFilter::ToString "/**
std::string rtk::simple::LabelMapMaskImageFilter::ToString() const

Print ourselves out

*/
public ";

%javamethodmodifiers  rtk::simple::LabelMapMaskImageFilter::~LabelMapMaskImageFilter "/**
rtk::simple::LabelMapMaskImageFilter::~LabelMapMaskImageFilter()

Destructor

*/
public ";


%typemap(javaimports) rtk::simple::LabelMapOverlayImageFilter "/**

Apply a colormap to a label map and superimpose it on an image.


Apply a colormap to a label map and put it on top of the feature
image. The feature image is typically the image from which the
labeling was produced. Use the SetInput function to set the LabelMap , and the SetFeatureImage function to set the feature image.

The set of colors is a good selection of distinct colors. The opacity
of the label map can be defined by the user. A background label
produce a gray pixel with the same intensity than the input one.


Gaetan Lehmann. Biologie du Developpement et de la Reproduction, INRA
de Jouy-en-Josas, France.
 This implementation was taken from the Insight Journal paper: https://hdl.handle.net/1926/584 or http://www.insight-journal.org/browse/publication/176


See:
 LabelMapToBinaryImageFilter , LabelMapToLabelImageFilter

 rtk::simple::LabelMapOverlay for the procedural interface

 itk::LabelMapOverlayImageFilter for the Doxygen on the original ITK class.


C++ includes: srtkLabelMapOverlayImageFilter.h
*/"

%javamethodmodifiers  rtk::simple::LabelMapOverlayImageFilter::Execute "/**
Image rtk::simple::LabelMapOverlayImageFilter::Execute(const Image &image1, const Image &image2)

Execute the filter on the input images

*/
public ";

%javamethodmodifiers  rtk::simple::LabelMapOverlayImageFilter::Execute "/**
Image rtk::simple::LabelMapOverlayImageFilter::Execute(const Image &image1, const Image &image2, double opacity)

Execute the filter on the input images with the given parameters

*/
public ";

%javamethodmodifiers  rtk::simple::LabelMapOverlayImageFilter::GetName "/**
std::string rtk::simple::LabelMapOverlayImageFilter::GetName() const

Name of this class

*/
public ";

%javamethodmodifiers  rtk::simple::LabelMapOverlayImageFilter::GetOpacity "/**
double rtk::simple::LabelMapOverlayImageFilter::GetOpacity() const

Set/Get the opacity of the colored label image. The value must be
between 0 and 1

*/
public ";

%javamethodmodifiers  rtk::simple::LabelMapOverlayImageFilter::LabelMapOverlayImageFilter "/**
rtk::simple::LabelMapOverlayImageFilter::LabelMapOverlayImageFilter()

Default Constructor that takes no arguments and initializes default
parameters

*/
public ";

%javamethodmodifiers  rtk::simple::LabelMapOverlayImageFilter::SetOpacity "/**
Self& rtk::simple::LabelMapOverlayImageFilter::SetOpacity(double Opacity)

Set/Get the opacity of the colored label image. The value must be
between 0 and 1

*/
public ";

%javamethodmodifiers  rtk::simple::LabelMapOverlayImageFilter::ToString "/**
std::string rtk::simple::LabelMapOverlayImageFilter::ToString() const

Print ourselves out

*/
public ";

%javamethodmodifiers  rtk::simple::LabelMapOverlayImageFilter::~LabelMapOverlayImageFilter "/**
rtk::simple::LabelMapOverlayImageFilter::~LabelMapOverlayImageFilter()

Destructor

*/
public ";


%typemap(javaimports) rtk::simple::LabelMapToBinaryImageFilter "/**

Convert a LabelMap to a binary image.


LabelMapToBinaryImageFilter to a binary image. All the objects in the image are used as
foreground. The background values of the original binary image can be
restored by passing this image to the filter with the
SetBackgroundImage() method.

This implementation was taken from the Insight Journal paper: https://hdl.handle.net/1926/584 or http://www.insight-journal.org/browse/publication/176


Gaetan Lehmann. Biologie du Developpement et de la Reproduction, INRA
de Jouy-en-Josas, France.

See:
 LabelMapToLabelImageFilter , LabelMapMaskImageFilter

 rtk::simple::LabelMapToBinary for the procedural interface

 itk::LabelMapToBinaryImageFilter for the Doxygen on the original ITK class.


C++ includes: srtkLabelMapToBinaryImageFilter.h
*/"

%javamethodmodifiers  rtk::simple::LabelMapToBinaryImageFilter::Execute "/**
Image rtk::simple::LabelMapToBinaryImageFilter::Execute(const Image &image1)

Execute the filter on the input image

*/
public ";

%javamethodmodifiers  rtk::simple::LabelMapToBinaryImageFilter::Execute "/**
Image rtk::simple::LabelMapToBinaryImageFilter::Execute(const Image &image1, double backgroundValue, double foregroundValue)

Execute the filter on the input image with the given parameters

*/
public ";

%javamethodmodifiers  rtk::simple::LabelMapToBinaryImageFilter::GetBackgroundValue "/**
double rtk::simple::LabelMapToBinaryImageFilter::GetBackgroundValue() const

Set/Get the value used as \"background\" in the output image. Defaults
to NumericTraits<PixelType>::NonpositiveMin() .

*/
public ";

%javamethodmodifiers  rtk::simple::LabelMapToBinaryImageFilter::GetForegroundValue "/**
double rtk::simple::LabelMapToBinaryImageFilter::GetForegroundValue() const

Set/Get the value used as \"foreground\" in the output image. Defaults
to NumericTraits<PixelType>::max() .

*/
public ";

%javamethodmodifiers  rtk::simple::LabelMapToBinaryImageFilter::GetName "/**
std::string rtk::simple::LabelMapToBinaryImageFilter::GetName() const

Name of this class

*/
public ";

%javamethodmodifiers  rtk::simple::LabelMapToBinaryImageFilter::LabelMapToBinaryImageFilter "/**
rtk::simple::LabelMapToBinaryImageFilter::LabelMapToBinaryImageFilter()

Default Constructor that takes no arguments and initializes default
parameters

*/
public ";

%javamethodmodifiers  rtk::simple::LabelMapToBinaryImageFilter::SetBackgroundValue "/**
Self& rtk::simple::LabelMapToBinaryImageFilter::SetBackgroundValue(double BackgroundValue)

Set/Get the value used as \"background\" in the output image. Defaults
to NumericTraits<PixelType>::NonpositiveMin() .

*/
public ";

%javamethodmodifiers  rtk::simple::LabelMapToBinaryImageFilter::SetForegroundValue "/**
Self& rtk::simple::LabelMapToBinaryImageFilter::SetForegroundValue(double ForegroundValue)

Set/Get the value used as \"foreground\" in the output image. Defaults
to NumericTraits<PixelType>::max() .

*/
public ";

%javamethodmodifiers  rtk::simple::LabelMapToBinaryImageFilter::ToString "/**
std::string rtk::simple::LabelMapToBinaryImageFilter::ToString() const

Print ourselves out

*/
public ";

%javamethodmodifiers  rtk::simple::LabelMapToBinaryImageFilter::~LabelMapToBinaryImageFilter "/**
rtk::simple::LabelMapToBinaryImageFilter::~LabelMapToBinaryImageFilter()

Destructor

*/
public ";


%typemap(javaimports) rtk::simple::LabelMapToLabelImageFilter "/**

Converts a LabelMap to a labeled image.


LabelMapToBinaryImageFilter to a label image.


Gaetan Lehmann. Biologie du Developpement et de la Reproduction, INRA
de Jouy-en-Josas, France.
 This implementation was taken from the Insight Journal paper: https://hdl.handle.net/1926/584 or http://www.insight-journal.org/browse/publication/176


See:
 LabelMapToBinaryImageFilter , LabelMapMaskImageFilter
Wiki Examples:

All Examples

Convert a LabelMap to a normal image with different values representing each region
See:
 rtk::simple::LabelMapToLabel for the procedural interface

 itk::LabelMapToLabelImageFilter for the Doxygen on the original ITK class.



C++ includes: srtkLabelMapToLabelImageFilter.h
*/"

%javamethodmodifiers  rtk::simple::LabelMapToLabelImageFilter::Execute "/**
Image rtk::simple::LabelMapToLabelImageFilter::Execute(const Image &image1)

Execute the filter on the input image

*/
public ";

%javamethodmodifiers  rtk::simple::LabelMapToLabelImageFilter::GetName "/**
std::string rtk::simple::LabelMapToLabelImageFilter::GetName() const

Name of this class

*/
public ";

%javamethodmodifiers  rtk::simple::LabelMapToLabelImageFilter::LabelMapToLabelImageFilter "/**
rtk::simple::LabelMapToLabelImageFilter::LabelMapToLabelImageFilter()

Default Constructor that takes no arguments and initializes default
parameters

*/
public ";

%javamethodmodifiers  rtk::simple::LabelMapToLabelImageFilter::ToString "/**
std::string rtk::simple::LabelMapToLabelImageFilter::ToString() const

Print ourselves out

*/
public ";

%javamethodmodifiers  rtk::simple::LabelMapToLabelImageFilter::~LabelMapToLabelImageFilter "/**
rtk::simple::LabelMapToLabelImageFilter::~LabelMapToLabelImageFilter()

Destructor

*/
public ";


%typemap(javaimports) rtk::simple::LabelMapToRGBImageFilter "/**

Convert a LabelMap to a colored image.



Gaetan Lehmann. Biologie du Developpement et de la Reproduction, INRA
de Jouy-en-Josas, France.
 This implementation was taken from the Insight Journal paper: https://hdl.handle.net/1926/584 or http://www.insight-journal.org/browse/publication/176


See:
 LabelMapToBinaryImageFilter , LabelMapMaskImageFilter

 rtk::simple::LabelMapToRGB for the procedural interface

 itk::LabelMapToRGBImageFilter for the Doxygen on the original ITK class.


C++ includes: srtkLabelMapToRGBImageFilter.h
*/"

%javamethodmodifiers  rtk::simple::LabelMapToRGBImageFilter::Execute "/**
Image rtk::simple::LabelMapToRGBImageFilter::Execute(const Image &image1)

Execute the filter on the input image

*/
public ";

%javamethodmodifiers  rtk::simple::LabelMapToRGBImageFilter::GetName "/**
std::string rtk::simple::LabelMapToRGBImageFilter::GetName() const

Name of this class

*/
public ";

%javamethodmodifiers  rtk::simple::LabelMapToRGBImageFilter::LabelMapToRGBImageFilter "/**
rtk::simple::LabelMapToRGBImageFilter::LabelMapToRGBImageFilter()

Default Constructor that takes no arguments and initializes default
parameters

*/
public ";

%javamethodmodifiers  rtk::simple::LabelMapToRGBImageFilter::ToString "/**
std::string rtk::simple::LabelMapToRGBImageFilter::ToString() const

Print ourselves out

*/
public ";

%javamethodmodifiers  rtk::simple::LabelMapToRGBImageFilter::~LabelMapToRGBImageFilter "/**
rtk::simple::LabelMapToRGBImageFilter::~LabelMapToRGBImageFilter()

Destructor

*/
public ";


%typemap(javaimports) rtk::simple::LabelOverlapMeasuresImageFilter "/**

Computes overlap measures between the set same set of labels of pixels
of two images. Background is assumed to be 0.


This code was contributed in the Insight Journal paper: \"Introducing
Dice, Jaccard, and Other Label Overlap Measures To ITK\" by Nicholas
J. Tustison, James C. Gee https://hdl.handle.net/10380/3141 http://www.insight-journal.org/browse/publication/707


Nicholas J. Tustison

See:
 LabelOverlapMeasuresImageFilter

 itk::LabelOverlapMeasuresImageFilter for the Doxygen on the original ITK class.


C++ includes: srtkLabelOverlapMeasuresImageFilter.h
*/"

%javamethodmodifiers  rtk::simple::LabelOverlapMeasuresImageFilter::Execute "/**
Image rtk::simple::LabelOverlapMeasuresImageFilter::Execute(const Image &image1, const Image &image2)

Execute the filter on the input images

*/
public ";

%javamethodmodifiers  rtk::simple::LabelOverlapMeasuresImageFilter::GetDiceCoefficient "/**
double rtk::simple::LabelOverlapMeasuresImageFilter::GetDiceCoefficient() const

alternative names

This is a measurement. Its value is updated in the Execute methods, so
the value will only be valid after an execution.

*/
public ";

%javamethodmodifiers  rtk::simple::LabelOverlapMeasuresImageFilter::GetFalseNegativeError "/**
double rtk::simple::LabelOverlapMeasuresImageFilter::GetFalseNegativeError() const

This is a measurement. Its value is updated in the Execute methods, so
the value will only be valid after an execution.

*/
public ";

%javamethodmodifiers  rtk::simple::LabelOverlapMeasuresImageFilter::GetFalsePositiveError "/**
double rtk::simple::LabelOverlapMeasuresImageFilter::GetFalsePositiveError() const

This is a measurement. Its value is updated in the Execute methods, so
the value will only be valid after an execution.

*/
public ";

%javamethodmodifiers  rtk::simple::LabelOverlapMeasuresImageFilter::GetJaccardCoefficient "/**
double rtk::simple::LabelOverlapMeasuresImageFilter::GetJaccardCoefficient() const

alternative names

This is a measurement. Its value is updated in the Execute methods, so
the value will only be valid after an execution.

*/
public ";

%javamethodmodifiers  rtk::simple::LabelOverlapMeasuresImageFilter::GetMeanOverlap "/**
double rtk::simple::LabelOverlapMeasuresImageFilter::GetMeanOverlap() const

This is a measurement. Its value is updated in the Execute methods, so
the value will only be valid after an execution.

*/
public ";

%javamethodmodifiers  rtk::simple::LabelOverlapMeasuresImageFilter::GetName "/**
std::string rtk::simple::LabelOverlapMeasuresImageFilter::GetName() const

Name of this class

*/
public ";

%javamethodmodifiers  rtk::simple::LabelOverlapMeasuresImageFilter::GetUnionOverlap "/**
double rtk::simple::LabelOverlapMeasuresImageFilter::GetUnionOverlap() const

This is a measurement. Its value is updated in the Execute methods, so
the value will only be valid after an execution.

*/
public ";

%javamethodmodifiers  rtk::simple::LabelOverlapMeasuresImageFilter::GetVolumeSimilarity "/**
double rtk::simple::LabelOverlapMeasuresImageFilter::GetVolumeSimilarity() const

This is a measurement. Its value is updated in the Execute methods, so
the value will only be valid after an execution.

*/
public ";

%javamethodmodifiers  rtk::simple::LabelOverlapMeasuresImageFilter::LabelOverlapMeasuresImageFilter "/**
rtk::simple::LabelOverlapMeasuresImageFilter::LabelOverlapMeasuresImageFilter()

Default Constructor that takes no arguments and initializes default
parameters

*/
public ";

%javamethodmodifiers  rtk::simple::LabelOverlapMeasuresImageFilter::ToString "/**
std::string rtk::simple::LabelOverlapMeasuresImageFilter::ToString() const

Print ourselves out

*/
public ";

%javamethodmodifiers  rtk::simple::LabelOverlapMeasuresImageFilter::~LabelOverlapMeasuresImageFilter "/**
rtk::simple::LabelOverlapMeasuresImageFilter::~LabelOverlapMeasuresImageFilter()

Destructor

*/
public ";


%typemap(javaimports) rtk::simple::LabelOverlayImageFilter "/**

Apply a colormap to a label image and put it on top of the input
image.


Apply a colormap to a label image and put it on top of the input
image. The set of colors is a good selection of distinct colors. The
opacity of the label image can be defined by the user. The user can
also choose if the want to use a background and which label value is
the background. A background label produce a gray pixel with the same
intensity than the input one.


Gaetan Lehmann. Biologie du Developpement et de la Reproduction, INRA
de Jouy-en-Josas, France.
 This class was contributed to the Insight Journal https://hdl.handle.net/1926/172


See:
ScalarToRGBPixelFunctor LabelToRGBImageFilter
Wiki Examples:

All Examples

Overlay a LabelMap on an image
See:
 rtk::simple::LabelOverlay for the procedural interface

 itk::LabelOverlayImageFilter for the Doxygen on the original ITK class.



C++ includes: srtkLabelOverlayImageFilter.h
*/"

%javamethodmodifiers  rtk::simple::LabelOverlayImageFilter::Execute "/**
Image rtk::simple::LabelOverlayImageFilter::Execute(const Image &image, const Image &labelImage)

Execute the filter on the input image

*/
public ";

%javamethodmodifiers  rtk::simple::LabelOverlayImageFilter::Execute "/**
Image rtk::simple::LabelOverlayImageFilter::Execute(const Image &image, const Image &labelImage, double opacity, double
backgroundValue)

Execute the filter on the input image with the given parameters

*/
public ";

%javamethodmodifiers  rtk::simple::LabelOverlayImageFilter::GetBackgroundValue "/**
double rtk::simple::LabelOverlayImageFilter::GetBackgroundValue() const

Set/Get the background value

*/
public ";

%javamethodmodifiers  rtk::simple::LabelOverlayImageFilter::GetName "/**
std::string rtk::simple::LabelOverlayImageFilter::GetName() const

Name of this class

*/
public ";

%javamethodmodifiers  rtk::simple::LabelOverlayImageFilter::GetOpacity "/**
double rtk::simple::LabelOverlayImageFilter::GetOpacity() const

Set/Get the opacity of the colored label image. The value must be
between 0 and 1

*/
public ";

%javamethodmodifiers  rtk::simple::LabelOverlayImageFilter::LabelOverlayImageFilter "/**
rtk::simple::LabelOverlayImageFilter::LabelOverlayImageFilter()

Default Constructor that takes no arguments and initializes default
parameters

*/
public ";

%javamethodmodifiers  rtk::simple::LabelOverlayImageFilter::SetBackgroundValue "/**
Self& rtk::simple::LabelOverlayImageFilter::SetBackgroundValue(double BackgroundValue)

Set/Get the background value

*/
public ";

%javamethodmodifiers  rtk::simple::LabelOverlayImageFilter::SetOpacity "/**
Self& rtk::simple::LabelOverlayImageFilter::SetOpacity(double Opacity)

Set/Get the opacity of the colored label image. The value must be
between 0 and 1

*/
public ";

%javamethodmodifiers  rtk::simple::LabelOverlayImageFilter::ToString "/**
std::string rtk::simple::LabelOverlayImageFilter::ToString() const

Print ourselves out

*/
public ";

%javamethodmodifiers  rtk::simple::LabelOverlayImageFilter::~LabelOverlayImageFilter "/**
rtk::simple::LabelOverlayImageFilter::~LabelOverlayImageFilter()

Destructor

*/
public ";


%typemap(javaimports) rtk::simple::LabelShapeStatisticsImageFilter "/**

Converts a label image to a label map and valuates the shape
attributes.


A convenient class that converts a label image to a label map and
valuates the shape attribute at once.

This implementation was taken from the Insight Journal paper:

https://hdl.handle.net/1926/584 or http://www.insight-journal.org/browse/publication/176


Gaetan Lehmann. Biologie du Developpement et de la Reproduction, INRA
de Jouy-en-Josas, France.

See:
 ShapeLabelObject , LabelShapeOpeningImageFilter , LabelStatisticsOpeningImageFilter
Wiki Examples:

All Examples

Convert an itk::Image consisting of labeled regions to a ShapeLabelMap

See:
 itk::LabelImageToShapeLabelMapFilter for the Doxygen on the original ITK class.


C++ includes: srtkLabelShapeStatisticsImageFilter.h
*/"

%javamethodmodifiers  rtk::simple::LabelShapeStatisticsImageFilter::ComputeFeretDiameterOff "/**
Self& rtk::simple::LabelShapeStatisticsImageFilter::ComputeFeretDiameterOff()
*/
public ";

%javamethodmodifiers  rtk::simple::LabelShapeStatisticsImageFilter::ComputeFeretDiameterOn "/**
Self& rtk::simple::LabelShapeStatisticsImageFilter::ComputeFeretDiameterOn()

Set the value of ComputeFeretDiameter to true or false respectfully.

*/
public ";

%javamethodmodifiers  rtk::simple::LabelShapeStatisticsImageFilter::ComputePerimeterOff "/**
Self& rtk::simple::LabelShapeStatisticsImageFilter::ComputePerimeterOff()
*/
public ";

%javamethodmodifiers  rtk::simple::LabelShapeStatisticsImageFilter::ComputePerimeterOn "/**
Self& rtk::simple::LabelShapeStatisticsImageFilter::ComputePerimeterOn()

Set the value of ComputePerimeter to true or false respectfully.

*/
public ";

%javamethodmodifiers  rtk::simple::LabelShapeStatisticsImageFilter::Execute "/**
Image rtk::simple::LabelShapeStatisticsImageFilter::Execute(const Image &image1)

Execute the filter on the input image

*/
public ";

%javamethodmodifiers  rtk::simple::LabelShapeStatisticsImageFilter::Execute "/**
Image rtk::simple::LabelShapeStatisticsImageFilter::Execute(const Image &image1, double backgroundValue, bool
computeFeretDiameter, bool computePerimeter)

Execute the filter on the input image with the given parameters

*/
public ";

%javamethodmodifiers  rtk::simple::LabelShapeStatisticsImageFilter::GetBackgroundValue "/**
double rtk::simple::LabelShapeStatisticsImageFilter::GetBackgroundValue() const

Set/Get the value used as \"background\" in the output image. Defaults
to NumericTraits<PixelType>::NonpositiveMin() .

*/
public ";

%javamethodmodifiers  rtk::simple::LabelShapeStatisticsImageFilter::GetBoundingBox "/**
std::vector<unsigned int> rtk::simple::LabelShapeStatisticsImageFilter::GetBoundingBox(int64_t label) const

This is an active measurement. It may be accessed while the filter is
being executing in command call-backs and can be accessed after
execution.

*/
public ";

%javamethodmodifiers  rtk::simple::LabelShapeStatisticsImageFilter::GetCentroid "/**
std::vector<double> rtk::simple::LabelShapeStatisticsImageFilter::GetCentroid(int64_t label) const

This is an active measurement. It may be accessed while the filter is
being executing in command call-backs and can be accessed after
execution.

*/
public ";

%javamethodmodifiers  rtk::simple::LabelShapeStatisticsImageFilter::GetComputeFeretDiameter "/**
bool rtk::simple::LabelShapeStatisticsImageFilter::GetComputeFeretDiameter() const

Set/Get whether the maximum Feret diameter should be computed or not.
Default value is false, because of the high computation time required.

*/
public ";

%javamethodmodifiers  rtk::simple::LabelShapeStatisticsImageFilter::GetComputePerimeter "/**
bool rtk::simple::LabelShapeStatisticsImageFilter::GetComputePerimeter() const

Set/Get whether the perimeter should be computed or not. Default value
is false, because of the high computation time required.

*/
public ";

%javamethodmodifiers  rtk::simple::LabelShapeStatisticsImageFilter::GetElongation "/**
double rtk::simple::LabelShapeStatisticsImageFilter::GetElongation(int64_t label) const

This is an active measurement. It may be accessed while the filter is
being executing in command call-backs and can be accessed after
execution.

*/
public ";

%javamethodmodifiers  rtk::simple::LabelShapeStatisticsImageFilter::GetEquivalentEllipsoidDiameter "/**
std::vector<double> rtk::simple::LabelShapeStatisticsImageFilter::GetEquivalentEllipsoidDiameter(int64_t label) const

This is an active measurement. It may be accessed while the filter is
being executing in command call-backs and can be accessed after
execution.

*/
public ";

%javamethodmodifiers  rtk::simple::LabelShapeStatisticsImageFilter::GetEquivalentSphericalPerimeter "/**
double rtk::simple::LabelShapeStatisticsImageFilter::GetEquivalentSphericalPerimeter(int64_t label) const

This is an active measurement. It may be accessed while the filter is
being executing in command call-backs and can be accessed after
execution.

*/
public ";

%javamethodmodifiers  rtk::simple::LabelShapeStatisticsImageFilter::GetEquivalentSphericalRadius "/**
double rtk::simple::LabelShapeStatisticsImageFilter::GetEquivalentSphericalRadius(int64_t label) const

This is an active measurement. It may be accessed while the filter is
being executing in command call-backs and can be accessed after
execution.

*/
public ";

%javamethodmodifiers  rtk::simple::LabelShapeStatisticsImageFilter::GetFeretDiameter "/**
double rtk::simple::LabelShapeStatisticsImageFilter::GetFeretDiameter(int64_t label) const

This is an active measurement. It may be accessed while the filter is
being executing in command call-backs and can be accessed after
execution.

*/
public ";

%javamethodmodifiers  rtk::simple::LabelShapeStatisticsImageFilter::GetFlatness "/**
double rtk::simple::LabelShapeStatisticsImageFilter::GetFlatness(int64_t label) const

This is an active measurement. It may be accessed while the filter is
being executing in command call-backs and can be accessed after
execution.

*/
public ";

%javamethodmodifiers  rtk::simple::LabelShapeStatisticsImageFilter::GetLabels "/**
std::vector<int64_t> rtk::simple::LabelShapeStatisticsImageFilter::GetLabels() const

This is a measurement. Its value is updated in the Execute methods, so
the value will only be valid after an execution.

*/
public ";

%javamethodmodifiers  rtk::simple::LabelShapeStatisticsImageFilter::GetName "/**
std::string rtk::simple::LabelShapeStatisticsImageFilter::GetName() const

Name of this class

*/
public ";

%javamethodmodifiers  rtk::simple::LabelShapeStatisticsImageFilter::GetNumberOfLabels "/**
uint64_t rtk::simple::LabelShapeStatisticsImageFilter::GetNumberOfLabels()

Return the number of labels after execution.

*/
public ";

%javamethodmodifiers  rtk::simple::LabelShapeStatisticsImageFilter::GetNumberOfPixels "/**
uint64_t rtk::simple::LabelShapeStatisticsImageFilter::GetNumberOfPixels(int64_t label) const

This is an active measurement. It may be accessed while the filter is
being executing in command call-backs and can be accessed after
execution.

*/
public ";

%javamethodmodifiers  rtk::simple::LabelShapeStatisticsImageFilter::GetNumberOfPixelsOnBorder "/**
uint64_t rtk::simple::LabelShapeStatisticsImageFilter::GetNumberOfPixelsOnBorder(int64_t label) const

This is an active measurement. It may be accessed while the filter is
being executing in command call-backs and can be accessed after
execution.

*/
public ";

%javamethodmodifiers  rtk::simple::LabelShapeStatisticsImageFilter::GetPerimeter "/**
double rtk::simple::LabelShapeStatisticsImageFilter::GetPerimeter(int64_t label) const

This is an active measurement. It may be accessed while the filter is
being executing in command call-backs and can be accessed after
execution.

*/
public ";

%javamethodmodifiers  rtk::simple::LabelShapeStatisticsImageFilter::GetPerimeterOnBorder "/**
double rtk::simple::LabelShapeStatisticsImageFilter::GetPerimeterOnBorder(int64_t label) const

This is an active measurement. It may be accessed while the filter is
being executing in command call-backs and can be accessed after
execution.

*/
public ";

%javamethodmodifiers  rtk::simple::LabelShapeStatisticsImageFilter::GetPerimeterOnBorderRatio "/**
double rtk::simple::LabelShapeStatisticsImageFilter::GetPerimeterOnBorderRatio(int64_t label) const

This is an active measurement. It may be accessed while the filter is
being executing in command call-backs and can be accessed after
execution.

*/
public ";

%javamethodmodifiers  rtk::simple::LabelShapeStatisticsImageFilter::GetPhysicalSize "/**
double rtk::simple::LabelShapeStatisticsImageFilter::GetPhysicalSize(int64_t label) const

This is an active measurement. It may be accessed while the filter is
being executing in command call-backs and can be accessed after
execution.

*/
public ";

%javamethodmodifiers  rtk::simple::LabelShapeStatisticsImageFilter::GetPrincipalAxes "/**
std::vector<double> rtk::simple::LabelShapeStatisticsImageFilter::GetPrincipalAxes(int64_t label) const

This is an active measurement. It may be accessed while the filter is
being executing in command call-backs and can be accessed after
execution.

*/
public ";

%javamethodmodifiers  rtk::simple::LabelShapeStatisticsImageFilter::GetPrincipalMoments "/**
std::vector<double> rtk::simple::LabelShapeStatisticsImageFilter::GetPrincipalMoments(int64_t label) const

This is an active measurement. It may be accessed while the filter is
being executing in command call-backs and can be accessed after
execution.

*/
public ";

%javamethodmodifiers  rtk::simple::LabelShapeStatisticsImageFilter::GetRoundness "/**
double rtk::simple::LabelShapeStatisticsImageFilter::GetRoundness(int64_t label) const

This is an active measurement. It may be accessed while the filter is
being executing in command call-backs and can be accessed after
execution.

*/
public ";

%javamethodmodifiers  rtk::simple::LabelShapeStatisticsImageFilter::HasLabel "/**
double rtk::simple::LabelShapeStatisticsImageFilter::HasLabel(int64_t label)

Does the specified label exist? Can only be called after a call a call
to Update().

*/
public ";

%javamethodmodifiers  rtk::simple::LabelShapeStatisticsImageFilter::LabelShapeStatisticsImageFilter "/**
rtk::simple::LabelShapeStatisticsImageFilter::LabelShapeStatisticsImageFilter()

Default Constructor that takes no arguments and initializes default
parameters

*/
public ";

%javamethodmodifiers  rtk::simple::LabelShapeStatisticsImageFilter::SetBackgroundValue "/**
Self& rtk::simple::LabelShapeStatisticsImageFilter::SetBackgroundValue(double BackgroundValue)

Set/Get the value used as \"background\" in the output image. Defaults
to NumericTraits<PixelType>::NonpositiveMin() .

*/
public ";

%javamethodmodifiers  rtk::simple::LabelShapeStatisticsImageFilter::SetComputeFeretDiameter "/**
Self& rtk::simple::LabelShapeStatisticsImageFilter::SetComputeFeretDiameter(bool ComputeFeretDiameter)

Set/Get whether the maximum Feret diameter should be computed or not.
Default value is false, because of the high computation time required.

*/
public ";

%javamethodmodifiers  rtk::simple::LabelShapeStatisticsImageFilter::SetComputePerimeter "/**
Self& rtk::simple::LabelShapeStatisticsImageFilter::SetComputePerimeter(bool ComputePerimeter)

Set/Get whether the perimeter should be computed or not. Default value
is false, because of the high computation time required.

*/
public ";

%javamethodmodifiers  rtk::simple::LabelShapeStatisticsImageFilter::ToString "/**
std::string rtk::simple::LabelShapeStatisticsImageFilter::ToString() const

Print ourselves out

*/
public ";

%javamethodmodifiers  rtk::simple::LabelShapeStatisticsImageFilter::~LabelShapeStatisticsImageFilter "/**
rtk::simple::LabelShapeStatisticsImageFilter::~LabelShapeStatisticsImageFilter()

Destructor

*/
public ";


%typemap(javaimports) rtk::simple::LabelStatisticsImageFilter "/**

Given an intensity image and a label map, compute min, max, variance
and mean of the pixels associated with each label or segment.


LabelStatisticsImageFilter computes the minimum, maximum, sum, mean, median, variance and sigma
of regions of an intensity image, where the regions are defined via a
label map (a second input). The label image should be integral type.
The filter needs all of its input image. It behaves as a filter with
an input and output. Thus it can be inserted in a pipline with other
filters and the statistics will only be recomputed if a downstream
filter changes.

Optionally, the filter also computes intensity histograms on each
object. If histograms are enabled, a median intensity value can also
be computed, although its accuracy is limited to the bin width of the
histogram. If histograms are not enabled, the median returns zero.

The filter passes its intensity input through unmodified. The filter
is threaded. It computes statistics in each thread then combines them
in its AfterThreadedGenerate method.

Wiki Examples:

All Examples

Get statistical properties of labeled regions in an image

See:
 itk::LabelStatisticsImageFilter for the Doxygen on the original ITK class.


C++ includes: srtkLabelStatisticsImageFilter.h
*/"

%javamethodmodifiers  rtk::simple::LabelStatisticsImageFilter::Execute "/**
Image rtk::simple::LabelStatisticsImageFilter::Execute(const Image &image, const Image &labelImage)

Execute the filter on the input image

*/
public ";

%javamethodmodifiers  rtk::simple::LabelStatisticsImageFilter::Execute "/**
Image rtk::simple::LabelStatisticsImageFilter::Execute(const Image &image, const Image &labelImage, bool useHistograms)

Execute the filter on the input image with the given parameters

*/
public ";

%javamethodmodifiers  rtk::simple::LabelStatisticsImageFilter::GetBoundingBox "/**
std::vector<int> rtk::simple::LabelStatisticsImageFilter::GetBoundingBox(int64_t label) const

Return the computed bounding box for a label.

This is an active measurement. It may be accessed while the filter is
being executing in command call-backs and can be accessed after
execution.

*/
public ";

%javamethodmodifiers  rtk::simple::LabelStatisticsImageFilter::GetCount "/**
uint64_t rtk::simple::LabelStatisticsImageFilter::GetCount(int64_t label) const

Return the number of pixels for a label.

This is an active measurement. It may be accessed while the filter is
being executing in command call-backs and can be accessed after
execution.

*/
public ";

%javamethodmodifiers  rtk::simple::LabelStatisticsImageFilter::GetLabels "/**
std::vector<int64_t> rtk::simple::LabelStatisticsImageFilter::GetLabels() const

This is a measurement. Its value is updated in the Execute methods, so
the value will only be valid after an execution.

*/
public ";

%javamethodmodifiers  rtk::simple::LabelStatisticsImageFilter::GetMaximum "/**
double rtk::simple::LabelStatisticsImageFilter::GetMaximum(int64_t label) const

Return the computed Maximum for a label.

This is an active measurement. It may be accessed while the filter is
being executing in command call-backs and can be accessed after
execution.

*/
public ";

%javamethodmodifiers  rtk::simple::LabelStatisticsImageFilter::GetMean "/**
double rtk::simple::LabelStatisticsImageFilter::GetMean(int64_t label) const

Return the computed Mean for a label.

This is an active measurement. It may be accessed while the filter is
being executing in command call-backs and can be accessed after
execution.

*/
public ";

%javamethodmodifiers  rtk::simple::LabelStatisticsImageFilter::GetMedian "/**
double rtk::simple::LabelStatisticsImageFilter::GetMedian(int64_t label) const

Return the computed Median for a label. Requires histograms to be
enabled!

This is an active measurement. It may be accessed while the filter is
being executing in command call-backs and can be accessed after
execution.

*/
public ";

%javamethodmodifiers  rtk::simple::LabelStatisticsImageFilter::GetMinimum "/**
double rtk::simple::LabelStatisticsImageFilter::GetMinimum(int64_t label) const

Return the computed Minimum for a label.

This is an active measurement. It may be accessed while the filter is
being executing in command call-backs and can be accessed after
execution.

*/
public ";

%javamethodmodifiers  rtk::simple::LabelStatisticsImageFilter::GetName "/**
std::string rtk::simple::LabelStatisticsImageFilter::GetName() const

Name of this class

*/
public ";

%javamethodmodifiers  rtk::simple::LabelStatisticsImageFilter::GetNumberOfLabels "/**
uint64_t rtk::simple::LabelStatisticsImageFilter::GetNumberOfLabels()

Return the number of labels after execution .

*/
public ";

%javamethodmodifiers  rtk::simple::LabelStatisticsImageFilter::GetSigma "/**
double rtk::simple::LabelStatisticsImageFilter::GetSigma(int64_t label) const

Return the computed Standard Deviation for a label.

This is an active measurement. It may be accessed while the filter is
being executing in command call-backs and can be accessed after
execution.

*/
public ";

%javamethodmodifiers  rtk::simple::LabelStatisticsImageFilter::GetSum "/**
double rtk::simple::LabelStatisticsImageFilter::GetSum(int64_t label) const

Return the compute Sum for a label.

This is an active measurement. It may be accessed while the filter is
being executing in command call-backs and can be accessed after
execution.

*/
public ";

%javamethodmodifiers  rtk::simple::LabelStatisticsImageFilter::GetUseHistograms "/**
bool rtk::simple::LabelStatisticsImageFilter::GetUseHistograms() const
*/
public ";

%javamethodmodifiers  rtk::simple::LabelStatisticsImageFilter::GetVariance "/**
double rtk::simple::LabelStatisticsImageFilter::GetVariance(int64_t label) const

Return the computed Variance for a label.

This is an active measurement. It may be accessed while the filter is
being executing in command call-backs and can be accessed after
execution.

*/
public ";

%javamethodmodifiers  rtk::simple::LabelStatisticsImageFilter::HasLabel "/**
double rtk::simple::LabelStatisticsImageFilter::HasLabel(int64_t label)

Does the specified label exist? Can only be called after a call a call
to Update().

*/
public ";

%javamethodmodifiers  rtk::simple::LabelStatisticsImageFilter::LabelStatisticsImageFilter "/**
rtk::simple::LabelStatisticsImageFilter::LabelStatisticsImageFilter()

Default Constructor that takes no arguments and initializes default
parameters

*/
public ";

%javamethodmodifiers  rtk::simple::LabelStatisticsImageFilter::SetUseHistograms "/**
Self& rtk::simple::LabelStatisticsImageFilter::SetUseHistograms(bool UseHistograms)
*/
public ";

%javamethodmodifiers  rtk::simple::LabelStatisticsImageFilter::ToString "/**
std::string rtk::simple::LabelStatisticsImageFilter::ToString() const

Print ourselves out

*/
public ";

%javamethodmodifiers  rtk::simple::LabelStatisticsImageFilter::UseHistogramsOff "/**
Self& rtk::simple::LabelStatisticsImageFilter::UseHistogramsOff()
*/
public ";

%javamethodmodifiers  rtk::simple::LabelStatisticsImageFilter::UseHistogramsOn "/**
Self& rtk::simple::LabelStatisticsImageFilter::UseHistogramsOn()

Set the value of UseHistograms to true or false respectfully.

*/
public ";

%javamethodmodifiers  rtk::simple::LabelStatisticsImageFilter::~LabelStatisticsImageFilter "/**
rtk::simple::LabelStatisticsImageFilter::~LabelStatisticsImageFilter()

Destructor

*/
public ";


%typemap(javaimports) rtk::simple::LabelToRGBImageFilter "/**

Apply a colormap to a label image.


Apply a colormap to a label image. The set of colors is a good
selection of distinct colors. The user can choose to use a background
value. In that case, a gray pixel with the same intensity than the
background label is produced.

This code was contributed in the Insight Journal paper: \"The
watershed transform in ITK - discussion and new developments\" by
Beare R., Lehmann G. https://hdl.handle.net/1926/202 http://www.insight-journal.org/browse/publication/92


Gaetan Lehmann. Biologie du Developpement et de la Reproduction, INRA
de Jouy-en-Josas, France.
 Richard Beare. Department of Medicine, Monash University, Melbourne,
Australia.


See:
ScalarToRGBPixelFunctor LabelOverlayImageFilter

 rtk::simple::LabelToRGB for the procedural interface

 itk::LabelToRGBImageFilter for the Doxygen on the original ITK class.


C++ includes: srtkLabelToRGBImageFilter.h
*/"

%javamethodmodifiers  rtk::simple::LabelToRGBImageFilter::Execute "/**
Image rtk::simple::LabelToRGBImageFilter::Execute(const Image &image1)

Execute the filter on the input image

*/
public ";

%javamethodmodifiers  rtk::simple::LabelToRGBImageFilter::Execute "/**
Image rtk::simple::LabelToRGBImageFilter::Execute(const Image &image1, double backgroundValue)

Execute the filter on the input image with the given parameters

*/
public ";

%javamethodmodifiers  rtk::simple::LabelToRGBImageFilter::GetBackgroundValue "/**
double rtk::simple::LabelToRGBImageFilter::GetBackgroundValue() const

Set/Get the background value

*/
public ";

%javamethodmodifiers  rtk::simple::LabelToRGBImageFilter::GetName "/**
std::string rtk::simple::LabelToRGBImageFilter::GetName() const

Name of this class

*/
public ";

%javamethodmodifiers  rtk::simple::LabelToRGBImageFilter::LabelToRGBImageFilter "/**
rtk::simple::LabelToRGBImageFilter::LabelToRGBImageFilter()

Default Constructor that takes no arguments and initializes default
parameters

*/
public ";

%javamethodmodifiers  rtk::simple::LabelToRGBImageFilter::SetBackgroundValue "/**
Self& rtk::simple::LabelToRGBImageFilter::SetBackgroundValue(double BackgroundValue)

Set/Get the background value

*/
public ";

%javamethodmodifiers  rtk::simple::LabelToRGBImageFilter::ToString "/**
std::string rtk::simple::LabelToRGBImageFilter::ToString() const

Print ourselves out

*/
public ";

%javamethodmodifiers  rtk::simple::LabelToRGBImageFilter::~LabelToRGBImageFilter "/**
rtk::simple::LabelToRGBImageFilter::~LabelToRGBImageFilter()

Destructor

*/
public ";


%typemap(javaimports) rtk::simple::LabelUniqueLabelMapFilter "/**

Make sure that the objects are not overlapping.


AttributeUniqueLabelMapFilter search the overlapping zones in the overlapping objects and keeps
only a single object on all the pixels of the image. The object to
keep is selected according to their label.


Gaetan Lehmann. Biologie du Developpement et de la Reproduction, INRA
de Jouy-en-Josas, France.
 This implementation was taken from the Insight Journal paper: https://hdl.handle.net/1926/584 or http://www.insight-journal.org/browse/publication/176


See:
 AttributeLabelObject

 rtk::simple::LabelUniqueLabelMapFilter for the procedural interface

 itk::LabelUniqueLabelMapFilter for the Doxygen on the original ITK class.


C++ includes: srtkLabelUniqueLabelMapFilter.h
*/"

%javamethodmodifiers  rtk::simple::LabelUniqueLabelMapFilter::Execute "/**
Image rtk::simple::LabelUniqueLabelMapFilter::Execute(const Image &image1)

Execute the filter on the input image

*/
public ";

%javamethodmodifiers  rtk::simple::LabelUniqueLabelMapFilter::Execute "/**
Image rtk::simple::LabelUniqueLabelMapFilter::Execute(const Image &image1, bool reverseOrdering)

Execute the filter on the input image with the given parameters

*/
public ";

%javamethodmodifiers  rtk::simple::LabelUniqueLabelMapFilter::GetName "/**
std::string rtk::simple::LabelUniqueLabelMapFilter::GetName() const

Name of this class

*/
public ";

%javamethodmodifiers  rtk::simple::LabelUniqueLabelMapFilter::GetReverseOrdering "/**
bool rtk::simple::LabelUniqueLabelMapFilter::GetReverseOrdering() const
*/
public ";

%javamethodmodifiers  rtk::simple::LabelUniqueLabelMapFilter::LabelUniqueLabelMapFilter "/**
rtk::simple::LabelUniqueLabelMapFilter::LabelUniqueLabelMapFilter()

Default Constructor that takes no arguments and initializes default
parameters

*/
public ";

%javamethodmodifiers  rtk::simple::LabelUniqueLabelMapFilter::ReverseOrderingOff "/**
Self& rtk::simple::LabelUniqueLabelMapFilter::ReverseOrderingOff()
*/
public ";

%javamethodmodifiers  rtk::simple::LabelUniqueLabelMapFilter::ReverseOrderingOn "/**
Self& rtk::simple::LabelUniqueLabelMapFilter::ReverseOrderingOn()

Set the value of ReverseOrdering to true or false respectfully.

*/
public ";

%javamethodmodifiers  rtk::simple::LabelUniqueLabelMapFilter::SetReverseOrdering "/**
Self& rtk::simple::LabelUniqueLabelMapFilter::SetReverseOrdering(bool ReverseOrdering)
*/
public ";

%javamethodmodifiers  rtk::simple::LabelUniqueLabelMapFilter::ToString "/**
std::string rtk::simple::LabelUniqueLabelMapFilter::ToString() const

Print ourselves out

*/
public ";

%javamethodmodifiers  rtk::simple::LabelUniqueLabelMapFilter::~LabelUniqueLabelMapFilter "/**
rtk::simple::LabelUniqueLabelMapFilter::~LabelUniqueLabelMapFilter()

Destructor

*/
public ";


%typemap(javaimports) rtk::simple::LabelVotingImageFilter "/**

This filter performs pixelwise voting among an arbitrary number of
input images, where each of them represents a segmentation of the same
scene (i.e., image).


Label voting is a simple method of classifier combination applied to
image segmentation. Typically, the accuracy of the combined
segmentation exceeds the accuracy of any of the input segmentations.
Voting is therefore commonly used as a way of boosting segmentation
performance.

The use of label voting for combination of multiple segmentations is
described in

T. Rohlfing and C. R. Maurer, Jr., \"Multi-classifier framework for
atlas-based image segmentation,\" Pattern Recognition Letters, 2005.

INPUTS
All input volumes to this filter must be segmentations of an image,
that is, they must have discrete pixel values where each value
represents a different segmented object.
 Input volumes must all contain the same size RequestedRegions. Not all input images must contain all possible labels, but all label
values must have the same meaning in all images.

OUTPUTS
The voting filter produces a single output volume. Each output pixel
contains the label that occurred most often among the labels assigned
to this pixel in all the input volumes, that is, the label that
received the maximum number of \"votes\" from the input pixels.. If
the maximum number of votes is not unique, i.e., if more than one
label have a maximum number of votes, an \"undecided\" label is
assigned to that output pixel.
 By default, the label used for undecided pixels is the maximum label
value used in the input images plus one. Since it is possible for an
image with 8 bit pixel values to use all 256 possible label values, it
is permissible to combine 8 bit (i.e., byte) images into a 16 bit
(i.e., short) output image.

PARAMETERS
The label used for \"undecided\" labels can be set using
SetLabelForUndecidedPixels. This functionality can be unset by calling
UnsetLabelForUndecidedPixels.

Torsten Rohlfing, SRI International, Neuroscience Program

See:
 rtk::simple::LabelVoting for the procedural interface


C++ includes: srtkLabelVotingImageFilter.h
*/"

%javamethodmodifiers  rtk::simple::LabelVotingImageFilter::Execute "/**
Image rtk::simple::LabelVotingImageFilter::Execute(const std::vector< Image > &images)

Execute the filter on the input images

*/
public ";

%javamethodmodifiers  rtk::simple::LabelVotingImageFilter::Execute "/**
Image rtk::simple::LabelVotingImageFilter::Execute(const Image &image1)
*/
public ";

%javamethodmodifiers  rtk::simple::LabelVotingImageFilter::Execute "/**
Image rtk::simple::LabelVotingImageFilter::Execute(const Image &image1, const Image &image2)
*/
public ";

%javamethodmodifiers  rtk::simple::LabelVotingImageFilter::Execute "/**
Image rtk::simple::LabelVotingImageFilter::Execute(const Image &image1, const Image &image2, const Image &image3)
*/
public ";

%javamethodmodifiers  rtk::simple::LabelVotingImageFilter::Execute "/**
Image rtk::simple::LabelVotingImageFilter::Execute(const Image &image1, const Image &image2, const Image &image3, const
Image &image4)
*/
public ";

%javamethodmodifiers  rtk::simple::LabelVotingImageFilter::Execute "/**
Image rtk::simple::LabelVotingImageFilter::Execute(const Image &image1, const Image &image2, const Image &image3, const
Image &image4, const Image &image5)
*/
public ";

%javamethodmodifiers  rtk::simple::LabelVotingImageFilter::Execute "/**
Image rtk::simple::LabelVotingImageFilter::Execute(const std::vector< Image > &images, uint64_t labelForUndecidedPixels)

Execute the filter on the input images with the given parameters

*/
public ";

%javamethodmodifiers  rtk::simple::LabelVotingImageFilter::Execute "/**
Image rtk::simple::LabelVotingImageFilter::Execute(const Image &image1, uint64_t labelForUndecidedPixels)
*/
public ";

%javamethodmodifiers  rtk::simple::LabelVotingImageFilter::Execute "/**
Image rtk::simple::LabelVotingImageFilter::Execute(const Image &image1, const Image &image2, uint64_t
labelForUndecidedPixels)
*/
public ";

%javamethodmodifiers  rtk::simple::LabelVotingImageFilter::Execute "/**
Image rtk::simple::LabelVotingImageFilter::Execute(const Image &image1, const Image &image2, const Image &image3,
uint64_t labelForUndecidedPixels)
*/
public ";

%javamethodmodifiers  rtk::simple::LabelVotingImageFilter::Execute "/**
Image rtk::simple::LabelVotingImageFilter::Execute(const Image &image1, const Image &image2, const Image &image3, const
Image &image4, uint64_t labelForUndecidedPixels)
*/
public ";

%javamethodmodifiers  rtk::simple::LabelVotingImageFilter::Execute "/**
Image rtk::simple::LabelVotingImageFilter::Execute(const Image &image1, const Image &image2, const Image &image3, const
Image &image4, const Image &image5, uint64_t labelForUndecidedPixels)
*/
public ";

%javamethodmodifiers  rtk::simple::LabelVotingImageFilter::GetLabelForUndecidedPixels "/**
uint64_t rtk::simple::LabelVotingImageFilter::GetLabelForUndecidedPixels() const

Get label value used for undecided pixels. After updating the filter,
this function returns the actual label value used for undecided pixels
in the current output. Note that this value is overwritten when
SetLabelForUndecidedPixels is called and the new value only becomes
effective upon the next filter update.

*/
public ";

%javamethodmodifiers  rtk::simple::LabelVotingImageFilter::GetName "/**
std::string rtk::simple::LabelVotingImageFilter::GetName() const

Name of this class

*/
public ";

%javamethodmodifiers  rtk::simple::LabelVotingImageFilter::LabelVotingImageFilter "/**
rtk::simple::LabelVotingImageFilter::LabelVotingImageFilter()

Default Constructor that takes no arguments and initializes default
parameters

*/
public ";

%javamethodmodifiers  rtk::simple::LabelVotingImageFilter::SetLabelForUndecidedPixels "/**
Self& rtk::simple::LabelVotingImageFilter::SetLabelForUndecidedPixels(uint64_t LabelForUndecidedPixels)

Set label value for undecided pixels.

*/
public ";

%javamethodmodifiers  rtk::simple::LabelVotingImageFilter::ToString "/**
std::string rtk::simple::LabelVotingImageFilter::ToString() const

Print ourselves out

*/
public ";

%javamethodmodifiers  rtk::simple::LabelVotingImageFilter::~LabelVotingImageFilter "/**
rtk::simple::LabelVotingImageFilter::~LabelVotingImageFilter()

Destructor

*/
public ";


%typemap(javaimports) rtk::simple::LandmarkBasedTransformInitializerFilter "/**

This class computes the transform that aligns the fixed and moving
images given a set of pair landmarks. The class is templated over the Transform type as well as fixed image and moving image types. The transform
computed gives the best fit transform that maps the fixed and moving
images in a least squares sense. The indices are taken to correspond,
so point 1 in the first set will get mapped close to point 1 in the
second set, etc.

Currently, the following transforms are supported by the class: VersorRigid3DTransform Rigid2DTransform AffineTransform BSplineTransform

An equal number of fixed and moving landmarks need to be specified
using SetFixedLandmarks() and SetMovingLandmarks() . Any number of landmarks may be specified. In the case of using
Affine or BSpline transforms, each landmark pair can contribute in the
final transform based on its defined weight. Number of weights should
be equal to the number of landmarks and can be specified using SetLandmarkWeight() . By defaults are weights are set to one. Call InitializeTransform()
to initialize the transform.

The class is based in part on Hybrid/vtkLandmarkTransform originally
implemented in python by David G. Gobbi.

The solution is based on Berthold K. P. Horn (1987), \"Closed-form
solution of absolute orientation using unit quaternions,\" http://people.csail.mit.edu/bkph/papers/Absolute_Orientation.pdf

The Affine Transform initializer is based on an algorithm by H Spaeth, and is described in
the Insight Journal Article \"Affine Transformation for Landmark Based
Registration Initializer in ITK\" by Kim E.Y., Johnson H., Williams N.
available at http://midasjournal.com/browse/publication/825

Wiki Examples:

All Examples

Rigidly register one image to another using manually specified
landmarks
See:
 rtk::simple::LandmarkBasedTransformInitializerFilter for the procedural interface

 itk::LandmarkBasedTransformInitializer for the Doxygen on the original ITK class.



C++ includes: srtkLandmarkBasedTransformInitializerFilter.h
*/"

%javamethodmodifiers  rtk::simple::LandmarkBasedTransformInitializerFilter::Execute "/**
Transform rtk::simple::LandmarkBasedTransformInitializerFilter::Execute(const Transform &transform)

Execute the filter on the input image

*/
public ";

%javamethodmodifiers  rtk::simple::LandmarkBasedTransformInitializerFilter::Execute "/**
Transform rtk::simple::LandmarkBasedTransformInitializerFilter::Execute(const Transform &transform, const std::vector< double >
&fixedLandmarks, const std::vector< double > &movingLandmarks, const
std::vector< double > &landmarkWeight, const Image &referenceImage,
unsigned int numberOfControlPoints)

Execute the filter on the input image with the given parameters

*/
public ";

%javamethodmodifiers  rtk::simple::LandmarkBasedTransformInitializerFilter::GetBSplineNumberOfControlPoints "/**
unsigned int rtk::simple::LandmarkBasedTransformInitializerFilter::GetBSplineNumberOfControlPoints() const

Set/Get the number of control points

*/
public ";

%javamethodmodifiers  rtk::simple::LandmarkBasedTransformInitializerFilter::GetFixedLandmarks "/**
std::vector<double> rtk::simple::LandmarkBasedTransformInitializerFilter::GetFixedLandmarks() const
*/
public ";

%javamethodmodifiers  rtk::simple::LandmarkBasedTransformInitializerFilter::GetLandmarkWeight "/**
std::vector<double> rtk::simple::LandmarkBasedTransformInitializerFilter::GetLandmarkWeight() const
*/
public ";

%javamethodmodifiers  rtk::simple::LandmarkBasedTransformInitializerFilter::GetMovingLandmarks "/**
std::vector<double> rtk::simple::LandmarkBasedTransformInitializerFilter::GetMovingLandmarks() const

Get the shrink factors.

*/
public ";

%javamethodmodifiers  rtk::simple::LandmarkBasedTransformInitializerFilter::GetName "/**
std::string rtk::simple::LandmarkBasedTransformInitializerFilter::GetName() const

Name of this class

*/
public ";

%javamethodmodifiers  rtk::simple::LandmarkBasedTransformInitializerFilter::GetReferenceImage "/**
Image rtk::simple::LandmarkBasedTransformInitializerFilter::GetReferenceImage() const
*/
public ";

%javamethodmodifiers  rtk::simple::LandmarkBasedTransformInitializerFilter::LandmarkBasedTransformInitializerFilter "/**
rtk::simple::LandmarkBasedTransformInitializerFilter::LandmarkBasedTransformInitializerFilter()

Default Constructor that takes no arguments and initializes default
parameters

*/
public ";

%javamethodmodifiers  rtk::simple::LandmarkBasedTransformInitializerFilter::SetBSplineNumberOfControlPoints "/**
Self& rtk::simple::LandmarkBasedTransformInitializerFilter::SetBSplineNumberOfControlPoints(unsigned int BSplineNumberOfControlPoints)

Set/Get the number of control points

*/
public ";

%javamethodmodifiers  rtk::simple::LandmarkBasedTransformInitializerFilter::SetFixedLandmarks "/**
Self& rtk::simple::LandmarkBasedTransformInitializerFilter::SetFixedLandmarks(const std::vector< double > &FixedLandmarks)

Set the Fixed landmark point containers

*/
public ";

%javamethodmodifiers  rtk::simple::LandmarkBasedTransformInitializerFilter::SetLandmarkWeight "/**
Self& rtk::simple::LandmarkBasedTransformInitializerFilter::SetLandmarkWeight(const std::vector< double > &LandmarkWeight)

Set the landmark weight point containers Weight includes diagonal
elements of weight matrix

*/
public ";

%javamethodmodifiers  rtk::simple::LandmarkBasedTransformInitializerFilter::SetMovingLandmarks "/**
Self& rtk::simple::LandmarkBasedTransformInitializerFilter::SetMovingLandmarks(const std::vector< double > &MovingLandmarks)

Set the Moving landmark point containers

*/
public ";

%javamethodmodifiers  rtk::simple::LandmarkBasedTransformInitializerFilter::SetReferenceImage "/**
Self& rtk::simple::LandmarkBasedTransformInitializerFilter::SetReferenceImage(const Image &ReferenceImage)

Set the reference image to define the parametric domain for the
BSpline transform

*/
public ";

%javamethodmodifiers  rtk::simple::LandmarkBasedTransformInitializerFilter::ToString "/**
std::string rtk::simple::LandmarkBasedTransformInitializerFilter::ToString() const

Print ourselves out

*/
public ";

%javamethodmodifiers  rtk::simple::LandmarkBasedTransformInitializerFilter::~LandmarkBasedTransformInitializerFilter "/**
rtk::simple::LandmarkBasedTransformInitializerFilter::~LandmarkBasedTransformInitializerFilter()

Destructor

*/
public ";


%typemap(javaimports) rtk::simple::LandweberDeconvolutionImageFilter "/**

Deconvolve an image using the Landweber deconvolution algorithm.


This filter implements the Landweber deconvolution algorthm as defined
in Bertero M and Boccacci P, \"Introduction to Inverse Problems in
Imaging\", 1998. The algorithm assumes that the input image has been
formed by a linear shift-invariant system with a known kernel.

The Landweber algorithm converges to a solution that minimizes the sum
of squared errors $||f \\\\otimes h - g||$ where $f$ is the estimate of the unblurred image, $\\\\otimes$ is the convolution operator, $h$ is the blurring kernel, and $g$ is the blurred input image. As such, it is best suited for images
that have zero-mean Gaussian white noise.

This is the base implementation of the Landweber algorithm. It may
produce results with negative values. For a version of this algorithm
that enforces a positivity constraint on each intermediate solution,
see ProjectedLandweberDeconvolutionImageFilter .

This code was adapted from the Insight Journal contribution:

\"Deconvolution: infrastructure and reference algorithms\" by Gaetan
Lehmann https://hdl.handle.net/10380/3207


Gaetan Lehmann, Biologie du Developpement et de la Reproduction, INRA
de Jouy-en-Josas, France
 Cory Quammen, The University of North Carolina at Chapel Hill


See:
 IterativeDeconvolutionImageFilter


 RichardsonLucyDeconvolutionImageFilter


 ProjectedLandweberDeconvolutionImageFilter

 rtk::simple::LandweberDeconvolution for the procedural interface

 itk::LandweberDeconvolutionImageFilter for the Doxygen on the original ITK class.


C++ includes: srtkLandweberDeconvolutionImageFilter.h
*/"

%javamethodmodifiers  rtk::simple::LandweberDeconvolutionImageFilter::Execute "/**
Image rtk::simple::LandweberDeconvolutionImageFilter::Execute(const Image &image1, const Image &image2)

Execute the filter on the input images

*/
public ";

%javamethodmodifiers  rtk::simple::LandweberDeconvolutionImageFilter::Execute "/**
Image rtk::simple::LandweberDeconvolutionImageFilter::Execute(const Image &image1, const Image &image2, double alpha, int
numberOfIterations, bool normalize,
LandweberDeconvolutionImageFilter::BoundaryConditionType
boundaryCondition,
LandweberDeconvolutionImageFilter::OutputRegionModeType
outputRegionMode)

Execute the filter on the input images with the given parameters

*/
public ";

%javamethodmodifiers  rtk::simple::LandweberDeconvolutionImageFilter::GetAlpha "/**
double rtk::simple::LandweberDeconvolutionImageFilter::GetAlpha() const

Set/get relaxation factor.

*/
public ";

%javamethodmodifiers  rtk::simple::LandweberDeconvolutionImageFilter::GetBoundaryCondition "/**
BoundaryConditionType rtk::simple::LandweberDeconvolutionImageFilter::GetBoundaryCondition() const
*/
public ";

%javamethodmodifiers  rtk::simple::LandweberDeconvolutionImageFilter::GetName "/**
std::string rtk::simple::LandweberDeconvolutionImageFilter::GetName() const

Name of this class

*/
public ";

%javamethodmodifiers  rtk::simple::LandweberDeconvolutionImageFilter::GetNormalize "/**
bool rtk::simple::LandweberDeconvolutionImageFilter::GetNormalize() const
*/
public ";

%javamethodmodifiers  rtk::simple::LandweberDeconvolutionImageFilter::GetNumberOfIterations "/**
int rtk::simple::LandweberDeconvolutionImageFilter::GetNumberOfIterations() const

Get the number of iterations.

*/
public ";

%javamethodmodifiers  rtk::simple::LandweberDeconvolutionImageFilter::GetOutputRegionMode "/**
OutputRegionModeType rtk::simple::LandweberDeconvolutionImageFilter::GetOutputRegionMode() const
*/
public ";

%javamethodmodifiers  rtk::simple::LandweberDeconvolutionImageFilter::LandweberDeconvolutionImageFilter "/**
rtk::simple::LandweberDeconvolutionImageFilter::LandweberDeconvolutionImageFilter()

Default Constructor that takes no arguments and initializes default
parameters

*/
public ";

%javamethodmodifiers  rtk::simple::LandweberDeconvolutionImageFilter::NormalizeOff "/**
Self& rtk::simple::LandweberDeconvolutionImageFilter::NormalizeOff()
*/
public ";

%javamethodmodifiers  rtk::simple::LandweberDeconvolutionImageFilter::NormalizeOn "/**
Self& rtk::simple::LandweberDeconvolutionImageFilter::NormalizeOn()

Set the value of Normalize to true or false respectfully.

*/
public ";

%javamethodmodifiers  rtk::simple::LandweberDeconvolutionImageFilter::SetAlpha "/**
Self& rtk::simple::LandweberDeconvolutionImageFilter::SetAlpha(double Alpha)

Set/get relaxation factor.

*/
public ";

%javamethodmodifiers  rtk::simple::LandweberDeconvolutionImageFilter::SetBoundaryCondition "/**
Self& rtk::simple::LandweberDeconvolutionImageFilter::SetBoundaryCondition(BoundaryConditionType BoundaryCondition)
*/
public ";

%javamethodmodifiers  rtk::simple::LandweberDeconvolutionImageFilter::SetNormalize "/**
Self& rtk::simple::LandweberDeconvolutionImageFilter::SetNormalize(bool Normalize)

Normalize the output image by the sum of the kernel components

*/
public ";

%javamethodmodifiers  rtk::simple::LandweberDeconvolutionImageFilter::SetNumberOfIterations "/**
Self& rtk::simple::LandweberDeconvolutionImageFilter::SetNumberOfIterations(int NumberOfIterations)

Set the number of iterations.

*/
public ";

%javamethodmodifiers  rtk::simple::LandweberDeconvolutionImageFilter::SetOutputRegionMode "/**
Self& rtk::simple::LandweberDeconvolutionImageFilter::SetOutputRegionMode(OutputRegionModeType OutputRegionMode)
*/
public ";

%javamethodmodifiers  rtk::simple::LandweberDeconvolutionImageFilter::ToString "/**
std::string rtk::simple::LandweberDeconvolutionImageFilter::ToString() const

Print ourselves out

*/
public ";

%javamethodmodifiers  rtk::simple::LandweberDeconvolutionImageFilter::~LandweberDeconvolutionImageFilter "/**
rtk::simple::LandweberDeconvolutionImageFilter::~LandweberDeconvolutionImageFilter()

Destructor

*/
public ";


%typemap(javaimports) rtk::simple::LaplacianImageFilter "/**

This filter computes the Laplacian of a scalar-valued image. The
Laplacian is an isotropic measure of the 2nd spatial derivative of an
image. The Laplacian of an image highlights regions of rapid intensity
change and is therefore often used for edge detection. Often, the
Laplacian is applied to an image that has first been smoothed with a
Gaussian filter in order to reduce its sensitivity to noise.


The Laplacian at each pixel location is computed by convolution with
the itk::LaplacianOperator .
Inputs and Outputs
The input to this filter is a scalar-valued itk::Image of arbitrary dimension. The output is a scalar-valued itk::Image .

WARNING:
The pixel type of the input and output images must be of real type
(float or double). ConceptChecking is used here to enforce the input
pixel type. You will get a compilation error if the pixel type of the
input and output images is not float or double.

See:
 Image


 Neighborhood


 NeighborhoodOperator


 NeighborhoodIterator


 LaplacianOperator
Wiki Examples:

All Examples

Compute the Laplacian of an image
See:
 rtk::simple::Laplacian for the procedural interface

 itk::LaplacianImageFilter for the Doxygen on the original ITK class.



C++ includes: srtkLaplacianImageFilter.h
*/"

%javamethodmodifiers  rtk::simple::LaplacianImageFilter::Execute "/**
Image rtk::simple::LaplacianImageFilter::Execute(const Image &image1)

Execute the filter on the input image

*/
public ";

%javamethodmodifiers  rtk::simple::LaplacianImageFilter::Execute "/**
Image rtk::simple::LaplacianImageFilter::Execute(const Image &image1, bool useImageSpacing)

Execute the filter on the input image with the given parameters

*/
public ";

%javamethodmodifiers  rtk::simple::LaplacianImageFilter::GetName "/**
std::string rtk::simple::LaplacianImageFilter::GetName() const

Name of this class

*/
public ";

%javamethodmodifiers  rtk::simple::LaplacianImageFilter::GetUseImageSpacing "/**
bool rtk::simple::LaplacianImageFilter::GetUseImageSpacing() const

Set/Get whether or not the filter will use the spacing of the input
image in its calculations

*/
public ";

%javamethodmodifiers  rtk::simple::LaplacianImageFilter::LaplacianImageFilter "/**
rtk::simple::LaplacianImageFilter::LaplacianImageFilter()

Default Constructor that takes no arguments and initializes default
parameters

*/
public ";

%javamethodmodifiers  rtk::simple::LaplacianImageFilter::SetUseImageSpacing "/**
Self& rtk::simple::LaplacianImageFilter::SetUseImageSpacing(bool UseImageSpacing)

Set/Get whether or not the filter will use the spacing of the input
image in its calculations

*/
public ";

%javamethodmodifiers  rtk::simple::LaplacianImageFilter::ToString "/**
std::string rtk::simple::LaplacianImageFilter::ToString() const

Print ourselves out

*/
public ";

%javamethodmodifiers  rtk::simple::LaplacianImageFilter::UseImageSpacingOff "/**
Self& rtk::simple::LaplacianImageFilter::UseImageSpacingOff()
*/
public ";

%javamethodmodifiers  rtk::simple::LaplacianImageFilter::UseImageSpacingOn "/**
Self& rtk::simple::LaplacianImageFilter::UseImageSpacingOn()

Set the value of UseImageSpacing to true or false respectfully.

*/
public ";

%javamethodmodifiers  rtk::simple::LaplacianImageFilter::~LaplacianImageFilter "/**
rtk::simple::LaplacianImageFilter::~LaplacianImageFilter()

Destructor

*/
public ";


%typemap(javaimports) rtk::simple::LaplacianRecursiveGaussianImageFilter "/**

Computes the Laplacian of Gaussian (LoG) of an image.


Computes the Laplacian of Gaussian (LoG) of an image by convolution
with the second derivative of a Gaussian. This filter is implemented
using the recursive gaussian filters.

Wiki Examples:

All Examples

Compute the Laplacian of Gaussian (LoG) of an image
See:
 rtk::simple::LaplacianRecursiveGaussian for the procedural interface

 itk::LaplacianRecursiveGaussianImageFilter for the Doxygen on the original ITK class.



C++ includes: srtkLaplacianRecursiveGaussianImageFilter.h
*/"

%javamethodmodifiers  rtk::simple::LaplacianRecursiveGaussianImageFilter::Execute "/**
Image rtk::simple::LaplacianRecursiveGaussianImageFilter::Execute(const Image &image1)

Execute the filter on the input image

*/
public ";

%javamethodmodifiers  rtk::simple::LaplacianRecursiveGaussianImageFilter::Execute "/**
Image rtk::simple::LaplacianRecursiveGaussianImageFilter::Execute(const Image &image1, double sigma, bool normalizeAcrossScale)

Execute the filter on the input image with the given parameters

*/
public ";

%javamethodmodifiers  rtk::simple::LaplacianRecursiveGaussianImageFilter::GetName "/**
std::string rtk::simple::LaplacianRecursiveGaussianImageFilter::GetName() const

Name of this class

*/
public ";

%javamethodmodifiers  rtk::simple::LaplacianRecursiveGaussianImageFilter::GetNormalizeAcrossScale "/**
bool rtk::simple::LaplacianRecursiveGaussianImageFilter::GetNormalizeAcrossScale() const

Define which normalization factor will be used for the Gaussian
See:
 RecursiveGaussianImageFilter::SetNormalizeAcrossScale


*/
public ";

%javamethodmodifiers  rtk::simple::LaplacianRecursiveGaussianImageFilter::GetSigma "/**
double rtk::simple::LaplacianRecursiveGaussianImageFilter::GetSigma() const

Set Sigma value. Sigma is measured in the units of image spacing.

*/
public ";

%javamethodmodifiers  rtk::simple::LaplacianRecursiveGaussianImageFilter::LaplacianRecursiveGaussianImageFilter "/**
rtk::simple::LaplacianRecursiveGaussianImageFilter::LaplacianRecursiveGaussianImageFilter()

Default Constructor that takes no arguments and initializes default
parameters

*/
public ";

%javamethodmodifiers  rtk::simple::LaplacianRecursiveGaussianImageFilter::NormalizeAcrossScaleOff "/**
Self& rtk::simple::LaplacianRecursiveGaussianImageFilter::NormalizeAcrossScaleOff()
*/
public ";

%javamethodmodifiers  rtk::simple::LaplacianRecursiveGaussianImageFilter::NormalizeAcrossScaleOn "/**
Self& rtk::simple::LaplacianRecursiveGaussianImageFilter::NormalizeAcrossScaleOn()

Set the value of NormalizeAcrossScale to true or false respectfully.

*/
public ";

%javamethodmodifiers  rtk::simple::LaplacianRecursiveGaussianImageFilter::SetNormalizeAcrossScale "/**
Self& rtk::simple::LaplacianRecursiveGaussianImageFilter::SetNormalizeAcrossScale(bool NormalizeAcrossScale)

Define which normalization factor will be used for the Gaussian
See:
 RecursiveGaussianImageFilter::SetNormalizeAcrossScale


*/
public ";

%javamethodmodifiers  rtk::simple::LaplacianRecursiveGaussianImageFilter::SetSigma "/**
Self& rtk::simple::LaplacianRecursiveGaussianImageFilter::SetSigma(double Sigma)

Set Sigma value. Sigma is measured in the units of image spacing.

*/
public ";

%javamethodmodifiers  rtk::simple::LaplacianRecursiveGaussianImageFilter::ToString "/**
std::string rtk::simple::LaplacianRecursiveGaussianImageFilter::ToString() const

Print ourselves out

*/
public ";

%javamethodmodifiers  rtk::simple::LaplacianRecursiveGaussianImageFilter::~LaplacianRecursiveGaussianImageFilter "/**
rtk::simple::LaplacianRecursiveGaussianImageFilter::~LaplacianRecursiveGaussianImageFilter()

Destructor

*/
public ";


%typemap(javaimports) rtk::simple::LaplacianSegmentationLevelSetImageFilter "/**

Segments structures in images based on a second derivative image
features.


IMPORTANT
The SegmentationLevelSetImageFilter class and the LaplacianSegmentationLevelSetFunction class contain additional information necessary to the full
understanding of how to use this filter.
OVERVIEW
This class is a level set method segmentation filter. It constructs a
speed function which is zero at image edges as detected by a Laplacian
filter. The evolving level set front will therefore tend to lock onto
zero crossings in the image. The level set front moves fastest near
edges.

The Laplacian segmentation filter is intended primarily as a tool for
refining existing segmentations. The initial isosurface (as given in
the seed input image) should ideally be very close to the segmentation
boundary of interest. The idea is that a rough segmentation can be
refined by allowing the isosurface to deform slightly to achieve a
better fit to the edge features of an image. One example of such an
application is to refine the output of a hand segmented image.

Because values in the Laplacian feature image will tend to be low
except near edge features, this filter is not effective for segmenting
large image regions from small seed surfaces.
INPUTS
This filter requires two inputs. The first input is a seed image. This
seed image must contain an isosurface that you want to use as the seed
for your segmentation. It can be a binary, graylevel, or floating
point image. The only requirement is that it contain a closed
isosurface that you will identify as the seed by setting the
IsosurfaceValue parameter of the filter. For a binary image you will
want to set your isosurface value halfway between your on and off
values (i.e. for 0's and 1's, use an isosurface value of 0.5).

The second input is the feature image. This is the image from which
the speed function will be calculated. For most applications, this is
the image that you want to segment. The desired isosurface in your
seed image should lie within the region of your feature image that you
are trying to segment.
 Note that this filter does no preprocessing of the feature image
before thresholding. Because second derivative calculations are highly
sensitive to noise, isotropic or anisotropic smoothing of the feature
image can dramatically improve the results.


See SegmentationLevelSetImageFilter for more information on Inputs.
OUTPUTS
The filter outputs a single, scalar, real-valued image. Positive
*values in the output image are inside the segmentated region and
negative *values in the image are outside of the inside region. The
zero crossings of *the image correspond to the position of the level
set front.

See SparseFieldLevelSetImageFilter and SegmentationLevelSetImageFilter for more information.
PARAMETERS
This filter has no parameters other than those described in SegmentationLevelSetImageFilter .

See:
 SegmentationLevelSetImageFilter


 LaplacianSegmentationLevelSetFunction ,


 SparseFieldLevelSetImageFilter

 rtk::simple::LaplacianSegmentationLevelSet for the procedural interface

 itk::LaplacianSegmentationLevelSetImageFilter for the Doxygen on the original ITK class.


C++ includes: srtkLaplacianSegmentationLevelSetImageFilter.h
*/"

%javamethodmodifiers  rtk::simple::LaplacianSegmentationLevelSetImageFilter::Execute "/**
Image rtk::simple::LaplacianSegmentationLevelSetImageFilter::Execute(const Image &image1, const Image &image2)

Execute the filter on the input images

*/
public ";

%javamethodmodifiers  rtk::simple::LaplacianSegmentationLevelSetImageFilter::Execute "/**
Image rtk::simple::LaplacianSegmentationLevelSetImageFilter::Execute(const Image &image1, const Image &image2, double maximumRMSError,
double propagationScaling, double curvatureScaling, uint32_t
numberOfIterations, bool reverseExpansionDirection)

Execute the filter on the input images with the given parameters

*/
public ";

%javamethodmodifiers  rtk::simple::LaplacianSegmentationLevelSetImageFilter::GetCurvatureScaling "/**
double rtk::simple::LaplacianSegmentationLevelSetImageFilter::GetCurvatureScaling() const
*/
public ";

%javamethodmodifiers  rtk::simple::LaplacianSegmentationLevelSetImageFilter::GetElapsedIterations "/**
uint32_t rtk::simple::LaplacianSegmentationLevelSetImageFilter::GetElapsedIterations() const

Number of iterations run.


This is a measurement. Its value is updated in the Execute methods, so
the value will only be valid after an execution.

*/
public ";

%javamethodmodifiers  rtk::simple::LaplacianSegmentationLevelSetImageFilter::GetMaximumRMSError "/**
double rtk::simple::LaplacianSegmentationLevelSetImageFilter::GetMaximumRMSError() const
*/
public ";

%javamethodmodifiers  rtk::simple::LaplacianSegmentationLevelSetImageFilter::GetName "/**
std::string rtk::simple::LaplacianSegmentationLevelSetImageFilter::GetName() const

Name of this class

*/
public ";

%javamethodmodifiers  rtk::simple::LaplacianSegmentationLevelSetImageFilter::GetNumberOfIterations "/**
uint32_t rtk::simple::LaplacianSegmentationLevelSetImageFilter::GetNumberOfIterations() const
*/
public ";

%javamethodmodifiers  rtk::simple::LaplacianSegmentationLevelSetImageFilter::GetPropagationScaling "/**
double rtk::simple::LaplacianSegmentationLevelSetImageFilter::GetPropagationScaling() const
*/
public ";

%javamethodmodifiers  rtk::simple::LaplacianSegmentationLevelSetImageFilter::GetReverseExpansionDirection "/**
bool rtk::simple::LaplacianSegmentationLevelSetImageFilter::GetReverseExpansionDirection() const
*/
public ";

%javamethodmodifiers  rtk::simple::LaplacianSegmentationLevelSetImageFilter::GetRMSChange "/**
double rtk::simple::LaplacianSegmentationLevelSetImageFilter::GetRMSChange() const

The Root Mean Square of the levelset upon termination.


This is a measurement. Its value is updated in the Execute methods, so
the value will only be valid after an execution.

*/
public ";

%javamethodmodifiers  rtk::simple::LaplacianSegmentationLevelSetImageFilter::LaplacianSegmentationLevelSetImageFilter "/**
rtk::simple::LaplacianSegmentationLevelSetImageFilter::LaplacianSegmentationLevelSetImageFilter()

Default Constructor that takes no arguments and initializes default
parameters

*/
public ";

%javamethodmodifiers  rtk::simple::LaplacianSegmentationLevelSetImageFilter::ReverseExpansionDirectionOff "/**
Self& rtk::simple::LaplacianSegmentationLevelSetImageFilter::ReverseExpansionDirectionOff()
*/
public ";

%javamethodmodifiers  rtk::simple::LaplacianSegmentationLevelSetImageFilter::ReverseExpansionDirectionOn "/**
Self& rtk::simple::LaplacianSegmentationLevelSetImageFilter::ReverseExpansionDirectionOn()

Set the value of ReverseExpansionDirection to true or false
respectfully.

*/
public ";

%javamethodmodifiers  rtk::simple::LaplacianSegmentationLevelSetImageFilter::SetCurvatureScaling "/**
Self& rtk::simple::LaplacianSegmentationLevelSetImageFilter::SetCurvatureScaling(double CurvatureScaling)
*/
public ";

%javamethodmodifiers  rtk::simple::LaplacianSegmentationLevelSetImageFilter::SetMaximumRMSError "/**
Self& rtk::simple::LaplacianSegmentationLevelSetImageFilter::SetMaximumRMSError(double MaximumRMSError)
*/
public ";

%javamethodmodifiers  rtk::simple::LaplacianSegmentationLevelSetImageFilter::SetNumberOfIterations "/**
Self& rtk::simple::LaplacianSegmentationLevelSetImageFilter::SetNumberOfIterations(uint32_t NumberOfIterations)
*/
public ";

%javamethodmodifiers  rtk::simple::LaplacianSegmentationLevelSetImageFilter::SetPropagationScaling "/**
Self& rtk::simple::LaplacianSegmentationLevelSetImageFilter::SetPropagationScaling(double PropagationScaling)
*/
public ";

%javamethodmodifiers  rtk::simple::LaplacianSegmentationLevelSetImageFilter::SetReverseExpansionDirection "/**
Self& rtk::simple::LaplacianSegmentationLevelSetImageFilter::SetReverseExpansionDirection(bool ReverseExpansionDirection)
*/
public ";

%javamethodmodifiers  rtk::simple::LaplacianSegmentationLevelSetImageFilter::ToString "/**
std::string rtk::simple::LaplacianSegmentationLevelSetImageFilter::ToString() const

Print ourselves out

*/
public ";

%javamethodmodifiers  rtk::simple::LaplacianSegmentationLevelSetImageFilter::~LaplacianSegmentationLevelSetImageFilter "/**
rtk::simple::LaplacianSegmentationLevelSetImageFilter::~LaplacianSegmentationLevelSetImageFilter()

Destructor

*/
public ";


%typemap(javaimports) rtk::simple::LaplacianSharpeningImageFilter "/**

This filter sharpens an image using a Laplacian. LaplacianSharpening
highlights regions of rapid intensity change and therefore highlights
or enhances the edges. The result is an image that appears more in
focus.


The LaplacianSharpening at each pixel location is computed by
convolution with the itk::LaplacianOperator .
Inputs and Outputs
The input to this filter is a scalar-valued itk::Image of arbitrary dimension. The output is a scalar-valued itk::Image .

See:
 Image


 Neighborhood


 NeighborhoodOperator


 NeighborhoodIterator


 LaplacianOperator
Wiki Examples:

All Examples

Sharpen an image
See:
 rtk::simple::LaplacianSharpening for the procedural interface

 itk::LaplacianSharpeningImageFilter for the Doxygen on the original ITK class.



C++ includes: srtkLaplacianSharpeningImageFilter.h
*/"

%javamethodmodifiers  rtk::simple::LaplacianSharpeningImageFilter::Execute "/**
Image rtk::simple::LaplacianSharpeningImageFilter::Execute(const Image &image1)

Execute the filter on the input image

*/
public ";

%javamethodmodifiers  rtk::simple::LaplacianSharpeningImageFilter::Execute "/**
Image rtk::simple::LaplacianSharpeningImageFilter::Execute(const Image &image1, bool useImageSpacing)

Execute the filter on the input image with the given parameters

*/
public ";

%javamethodmodifiers  rtk::simple::LaplacianSharpeningImageFilter::GetName "/**
std::string rtk::simple::LaplacianSharpeningImageFilter::GetName() const

Name of this class

*/
public ";

%javamethodmodifiers  rtk::simple::LaplacianSharpeningImageFilter::GetUseImageSpacing "/**
bool rtk::simple::LaplacianSharpeningImageFilter::GetUseImageSpacing() const

Set/Get whether or not the filter will use the spacing of the input
image in its calculations

*/
public ";

%javamethodmodifiers  rtk::simple::LaplacianSharpeningImageFilter::LaplacianSharpeningImageFilter "/**
rtk::simple::LaplacianSharpeningImageFilter::LaplacianSharpeningImageFilter()

Default Constructor that takes no arguments and initializes default
parameters

*/
public ";

%javamethodmodifiers  rtk::simple::LaplacianSharpeningImageFilter::SetUseImageSpacing "/**
Self& rtk::simple::LaplacianSharpeningImageFilter::SetUseImageSpacing(bool UseImageSpacing)

Set/Get whether or not the filter will use the spacing of the input
image in its calculations

*/
public ";

%javamethodmodifiers  rtk::simple::LaplacianSharpeningImageFilter::ToString "/**
std::string rtk::simple::LaplacianSharpeningImageFilter::ToString() const

Print ourselves out

*/
public ";

%javamethodmodifiers  rtk::simple::LaplacianSharpeningImageFilter::UseImageSpacingOff "/**
Self& rtk::simple::LaplacianSharpeningImageFilter::UseImageSpacingOff()
*/
public ";

%javamethodmodifiers  rtk::simple::LaplacianSharpeningImageFilter::UseImageSpacingOn "/**
Self& rtk::simple::LaplacianSharpeningImageFilter::UseImageSpacingOn()

Set the value of UseImageSpacing to true or false respectfully.

*/
public ";

%javamethodmodifiers  rtk::simple::LaplacianSharpeningImageFilter::~LaplacianSharpeningImageFilter "/**
rtk::simple::LaplacianSharpeningImageFilter::~LaplacianSharpeningImageFilter()

Destructor

*/
public ";


%typemap(javaimports) rtk::simple::LessEqualImageFilter "/**

Implements pixel-wise generic operation of two images, or of an image
and a constant.


This class is parameterized over the types of the two input images and
the type of the output image. It is also parameterized by the
operation to be applied. A Functor style is used.

The constant must be of the same type than the pixel type of the
corresponding image. It is wrapped in a SimpleDataObjectDecorator so it can be updated through the pipeline. The SetConstant() and
GetConstant() methods are provided as shortcuts to set or get the
constant value without manipulating the decorator.


See:
 UnaryFunctorImageFilter TernaryFunctorImageFilter
Wiki Examples:

All Examples

Apply a predefined operation to corresponding pixels in two images

Apply a custom operation to corresponding pixels in two images
See:
 rtk::simple::LessEqual for the procedural interface

 itk::BinaryFunctorImageFilter for the Doxygen on the original ITK class.



C++ includes: srtkLessEqualImageFilter.h
*/"

%javamethodmodifiers  rtk::simple::LessEqualImageFilter::Execute "/**
Image rtk::simple::LessEqualImageFilter::Execute(const Image &image1, const Image &image2)

Execute the filter on the input images

*/
public ";

%javamethodmodifiers  rtk::simple::LessEqualImageFilter::Execute "/**
Image rtk::simple::LessEqualImageFilter::Execute(const Image &image1, const Image &image2, uint8_t backgroundValue,
uint8_t foregroundValue)

Execute the filter on the input images with the given parameters

*/
public ";

%javamethodmodifiers  rtk::simple::LessEqualImageFilter::Execute "/**
Image rtk::simple::LessEqualImageFilter::Execute(const Image &image1, double constant)

Execute the filter with an image and a constant

*/
public ";

%javamethodmodifiers  rtk::simple::LessEqualImageFilter::Execute "/**
Image rtk::simple::LessEqualImageFilter::Execute(double constant, const Image &image2)
*/
public ";

%javamethodmodifiers  rtk::simple::LessEqualImageFilter::Execute "/**
Image rtk::simple::LessEqualImageFilter::Execute(const Image &image1, double constant, uint8_t backgroundValue,
uint8_t foregroundValue)

Execute the filter on an image and a constant with the given
parameters

*/
public ";

%javamethodmodifiers  rtk::simple::LessEqualImageFilter::Execute "/**
Image rtk::simple::LessEqualImageFilter::Execute(double constant, const Image &image2, uint8_t backgroundValue,
uint8_t foregroundValue)
*/
public ";

%javamethodmodifiers  rtk::simple::LessEqualImageFilter::GetBackgroundValue "/**
uint8_t rtk::simple::LessEqualImageFilter::GetBackgroundValue() const

Set/Get the value used to mark the false pixels of the operator.

*/
public ";

%javamethodmodifiers  rtk::simple::LessEqualImageFilter::GetForegroundValue "/**
uint8_t rtk::simple::LessEqualImageFilter::GetForegroundValue() const

Set/Get the value used to mark the true pixels of the operator.

*/
public ";

%javamethodmodifiers  rtk::simple::LessEqualImageFilter::GetName "/**
std::string rtk::simple::LessEqualImageFilter::GetName() const

Name of this class

*/
public ";

%javamethodmodifiers  rtk::simple::LessEqualImageFilter::LessEqualImageFilter "/**
rtk::simple::LessEqualImageFilter::LessEqualImageFilter()

Default Constructor that takes no arguments and initializes default
parameters

*/
public ";

%javamethodmodifiers  rtk::simple::LessEqualImageFilter::SetBackgroundValue "/**
Self& rtk::simple::LessEqualImageFilter::SetBackgroundValue(uint8_t BackgroundValue)

Set/Get the value used to mark the false pixels of the operator.

*/
public ";

%javamethodmodifiers  rtk::simple::LessEqualImageFilter::SetForegroundValue "/**
Self& rtk::simple::LessEqualImageFilter::SetForegroundValue(uint8_t ForegroundValue)

Set/Get the value used to mark the true pixels of the operator.

*/
public ";

%javamethodmodifiers  rtk::simple::LessEqualImageFilter::ToString "/**
std::string rtk::simple::LessEqualImageFilter::ToString() const

Print ourselves out

*/
public ";

%javamethodmodifiers  rtk::simple::LessEqualImageFilter::~LessEqualImageFilter "/**
rtk::simple::LessEqualImageFilter::~LessEqualImageFilter()

Destructor

*/
public ";


%typemap(javaimports) rtk::simple::LessImageFilter "/**

Implements pixel-wise generic operation of two images, or of an image
and a constant.


This class is parameterized over the types of the two input images and
the type of the output image. It is also parameterized by the
operation to be applied. A Functor style is used.

The constant must be of the same type than the pixel type of the
corresponding image. It is wrapped in a SimpleDataObjectDecorator so it can be updated through the pipeline. The SetConstant() and
GetConstant() methods are provided as shortcuts to set or get the
constant value without manipulating the decorator.


See:
 UnaryFunctorImageFilter TernaryFunctorImageFilter
Wiki Examples:

All Examples

Apply a predefined operation to corresponding pixels in two images

Apply a custom operation to corresponding pixels in two images
See:
 rtk::simple::Less for the procedural interface

 itk::BinaryFunctorImageFilter for the Doxygen on the original ITK class.



C++ includes: srtkLessImageFilter.h
*/"

%javamethodmodifiers  rtk::simple::LessImageFilter::Execute "/**
Image rtk::simple::LessImageFilter::Execute(const Image &image1, const Image &image2)

Execute the filter on the input images

*/
public ";

%javamethodmodifiers  rtk::simple::LessImageFilter::Execute "/**
Image rtk::simple::LessImageFilter::Execute(const Image &image1, const Image &image2, uint8_t backgroundValue,
uint8_t foregroundValue)

Execute the filter on the input images with the given parameters

*/
public ";

%javamethodmodifiers  rtk::simple::LessImageFilter::Execute "/**
Image rtk::simple::LessImageFilter::Execute(const Image &image1, double constant)

Execute the filter with an image and a constant

*/
public ";

%javamethodmodifiers  rtk::simple::LessImageFilter::Execute "/**
Image rtk::simple::LessImageFilter::Execute(double constant, const Image &image2)
*/
public ";

%javamethodmodifiers  rtk::simple::LessImageFilter::Execute "/**
Image rtk::simple::LessImageFilter::Execute(const Image &image1, double constant, uint8_t backgroundValue,
uint8_t foregroundValue)

Execute the filter on an image and a constant with the given
parameters

*/
public ";

%javamethodmodifiers  rtk::simple::LessImageFilter::Execute "/**
Image rtk::simple::LessImageFilter::Execute(double constant, const Image &image2, uint8_t backgroundValue,
uint8_t foregroundValue)
*/
public ";

%javamethodmodifiers  rtk::simple::LessImageFilter::GetBackgroundValue "/**
uint8_t rtk::simple::LessImageFilter::GetBackgroundValue() const

Set/Get the value used to mark the false pixels of the operator.

*/
public ";

%javamethodmodifiers  rtk::simple::LessImageFilter::GetForegroundValue "/**
uint8_t rtk::simple::LessImageFilter::GetForegroundValue() const

Set/Get the value used to mark the true pixels of the operator.

*/
public ";

%javamethodmodifiers  rtk::simple::LessImageFilter::GetName "/**
std::string rtk::simple::LessImageFilter::GetName() const

Name of this class

*/
public ";

%javamethodmodifiers  rtk::simple::LessImageFilter::LessImageFilter "/**
rtk::simple::LessImageFilter::LessImageFilter()

Default Constructor that takes no arguments and initializes default
parameters

*/
public ";

%javamethodmodifiers  rtk::simple::LessImageFilter::SetBackgroundValue "/**
Self& rtk::simple::LessImageFilter::SetBackgroundValue(uint8_t BackgroundValue)

Set/Get the value used to mark the false pixels of the operator.

*/
public ";

%javamethodmodifiers  rtk::simple::LessImageFilter::SetForegroundValue "/**
Self& rtk::simple::LessImageFilter::SetForegroundValue(uint8_t ForegroundValue)

Set/Get the value used to mark the true pixels of the operator.

*/
public ";

%javamethodmodifiers  rtk::simple::LessImageFilter::ToString "/**
std::string rtk::simple::LessImageFilter::ToString() const

Print ourselves out

*/
public ";

%javamethodmodifiers  rtk::simple::LessImageFilter::~LessImageFilter "/**
rtk::simple::LessImageFilter::~LessImageFilter()

Destructor

*/
public ";


%typemap(javaimports) rtk::simple::LevelSetMotionRegistrationFilter "/**

Deformably register two images using level set motion.


LevelSetMotionFilter implements a deformable registration algorithm
that aligns a fixed and a moving image under level set motion. The
equations of motion are similar to those of the DemonsRegistrationFilter . The main differences are: (1) Gradients of the moving image are
calculated on a smoothed image while intensity difference are measured
on the original images (2) Magnitude of the motion vector is a
function of the differences in intensity between the fixed and moving
pixel. An adaptive timestep is calculated based on the maximum motion
vector over the entire field to ensure stability. The timestep also
implictly converts the motion vector measured in units of intensity to
a vector measured in physical units. Demons, on the other hand,
defines its motion vectors as function of both the intensity
differences and gradient magnitude at each respective pixel. Consider
two separate pixels with the same intensity differences between the
corresponding fixed and moving pixel pairs. In demons, the motion
vector of the pixel over a low gradient region will be larger than the
motion vector of the pixel over a large gradient region. This leads to
an unstable vector field. In the levelset approach, the motion vectors
will be proportional to the gradients, scaled by the maximum gradient
over the entire field. The pixel with at the lower gradient position
will more less than the pixel at the higher gradient position. (3)
Gradients are calculated using minmod finite difference instead of
using central differences.

A deformation field is represented as a image whose pixel type is some
vector type with at least N elements, where N is the dimension of the
fixed image. The vector type must support element access via operator
[]. It is assumed that the vector elements behave like floating point
scalars.

This class is templated over the fixed image type, moving image type
and the deformation field type.

The input fixed and moving images are set via methods SetFixedImage
and SetMovingImage respectively. An initial deformation field maybe
set via SetInitialDisplacementField or SetInput. If no initial field
is set, a zero field is used as the initial condition.

The algorithm has one parameters: the number of iteration to be
performed.

The output deformation field can be obtained via methods GetOutput or
GetDisplacementField.

This class make use of the finite difference solver hierarchy. Update
for each iteration is computed in LevelSetMotionFunction.


WARNING:
This filter assumes that the fixed image type, moving image type and
deformation field type all have the same number of dimensions.
 Ref: B.C. Vemuri, J. Ye, Y. Chen, C.M. Leonard. \" Image registration
via level-set motion: applications to atlas-based segmentation\".
Medical Image Analysis. Vol. 7. pp. 1-20. 2003.


See:
 LevelSetMotionRegistrationFunction


 DemonsRegistrationFilter

 itk::LevelSetMotionRegistrationFilter for the Doxygen on the original ITK class.


C++ includes: srtkLevelSetMotionRegistrationFilter.h
*/"

%javamethodmodifiers  rtk::simple::LevelSetMotionRegistrationFilter::Execute "/**
Image rtk::simple::LevelSetMotionRegistrationFilter::Execute(const Image &fixedImage, const Image &movingImage)

Execute the filter on the input image

*/
public ";

%javamethodmodifiers  rtk::simple::LevelSetMotionRegistrationFilter::Execute "/**
Image rtk::simple::LevelSetMotionRegistrationFilter::Execute(const Image &fixedImage, const Image &movingImage, double
gradientSmoothingStandardDeviations, uint32_t numberOfIterations,
double maximumRMSError, const std::vector< double >
&standardDeviations, bool smoothDisplacementField, const std::vector<
double > &updateFieldStandardDeviations, bool smoothUpdateField,
unsigned int maximumKernelWidth, double maximumError, double alpha,
double intensityDifferenceThreshold, double
gradientMagnitudeThreshold, bool useImageSpacing)

Execute the filter on the input image with the given parameters

*/
public ";

%javamethodmodifiers  rtk::simple::LevelSetMotionRegistrationFilter::GetAlpha "/**
double rtk::simple::LevelSetMotionRegistrationFilter::GetAlpha() const
*/
public ";

%javamethodmodifiers  rtk::simple::LevelSetMotionRegistrationFilter::GetElapsedIterations "/**
uint32_t rtk::simple::LevelSetMotionRegistrationFilter::GetElapsedIterations() const

Number of iterations run.


This is a measurement. Its value is updated in the Execute methods, so
the value will only be valid after an execution.

*/
public ";

%javamethodmodifiers  rtk::simple::LevelSetMotionRegistrationFilter::GetGradientMagnitudeThreshold "/**
double rtk::simple::LevelSetMotionRegistrationFilter::GetGradientMagnitudeThreshold() const
*/
public ";

%javamethodmodifiers  rtk::simple::LevelSetMotionRegistrationFilter::GetGradientSmoothingStandardDeviations "/**
double rtk::simple::LevelSetMotionRegistrationFilter::GetGradientSmoothingStandardDeviations() const
*/
public ";

%javamethodmodifiers  rtk::simple::LevelSetMotionRegistrationFilter::GetIntensityDifferenceThreshold "/**
double rtk::simple::LevelSetMotionRegistrationFilter::GetIntensityDifferenceThreshold() const
*/
public ";

%javamethodmodifiers  rtk::simple::LevelSetMotionRegistrationFilter::GetMaximumError "/**
double rtk::simple::LevelSetMotionRegistrationFilter::GetMaximumError() const

Set/Get the desired maximum error of the Guassian kernel approximate.

*/
public ";

%javamethodmodifiers  rtk::simple::LevelSetMotionRegistrationFilter::GetMaximumKernelWidth "/**
unsigned int rtk::simple::LevelSetMotionRegistrationFilter::GetMaximumKernelWidth() const

Set/Get the desired limits of the Gaussian kernel width.

*/
public ";

%javamethodmodifiers  rtk::simple::LevelSetMotionRegistrationFilter::GetMaximumRMSError "/**
double rtk::simple::LevelSetMotionRegistrationFilter::GetMaximumRMSError() const
*/
public ";

%javamethodmodifiers  rtk::simple::LevelSetMotionRegistrationFilter::GetMetric "/**
double rtk::simple::LevelSetMotionRegistrationFilter::GetMetric() const

Get the metric value. The metric value is the mean square difference
in intensity between the fixed image and transforming moving image
computed over the the overlapping region between the two images. This
is value is only available for the previous iteration and NOT the
current iteration.

This is a measurement. Its value is updated in the Execute methods, so
the value will only be valid after an execution.

*/
public ";

%javamethodmodifiers  rtk::simple::LevelSetMotionRegistrationFilter::GetName "/**
std::string rtk::simple::LevelSetMotionRegistrationFilter::GetName() const

Name of this class

*/
public ";

%javamethodmodifiers  rtk::simple::LevelSetMotionRegistrationFilter::GetNumberOfIterations "/**
uint32_t rtk::simple::LevelSetMotionRegistrationFilter::GetNumberOfIterations() const
*/
public ";

%javamethodmodifiers  rtk::simple::LevelSetMotionRegistrationFilter::GetRMSChange "/**
double rtk::simple::LevelSetMotionRegistrationFilter::GetRMSChange() const

The Root Mean Square of the levelset upon termination.


This is a measurement. Its value is updated in the Execute methods, so
the value will only be valid after an execution.

*/
public ";

%javamethodmodifiers  rtk::simple::LevelSetMotionRegistrationFilter::GetSmoothDisplacementField "/**
bool rtk::simple::LevelSetMotionRegistrationFilter::GetSmoothDisplacementField() const

Set/Get whether the displacement field is smoothed (regularized).
Smoothing the displacement yields a solution elastic in nature. If
SmoothDisplacementField is on, then the displacement field is smoothed
with a Gaussian whose standard deviations are specified with SetStandardDeviations()

*/
public ";

%javamethodmodifiers  rtk::simple::LevelSetMotionRegistrationFilter::GetSmoothUpdateField "/**
bool rtk::simple::LevelSetMotionRegistrationFilter::GetSmoothUpdateField() const

Set/Get whether the update field is smoothed (regularized). Smoothing
the update field yields a solution viscous in nature. If
SmoothUpdateField is on, then the update field is smoothed with a
Gaussian whose standard deviations are specified with SetUpdateFieldStandardDeviations()

*/
public ";

%javamethodmodifiers  rtk::simple::LevelSetMotionRegistrationFilter::GetStandardDeviations "/**
std::vector<double> rtk::simple::LevelSetMotionRegistrationFilter::GetStandardDeviations() const

Set/Get the Gaussian smoothing standard deviations for the
displacement field. The values are set with respect to pixel
coordinates.

*/
public ";

%javamethodmodifiers  rtk::simple::LevelSetMotionRegistrationFilter::GetUpdateFieldStandardDeviations "/**
std::vector<double> rtk::simple::LevelSetMotionRegistrationFilter::GetUpdateFieldStandardDeviations() const

Set the Gaussian smoothing standard deviations for the update field.
The values are set with respect to pixel coordinates.

*/
public ";

%javamethodmodifiers  rtk::simple::LevelSetMotionRegistrationFilter::GetUseImageSpacing "/**
bool rtk::simple::LevelSetMotionRegistrationFilter::GetUseImageSpacing() const
*/
public ";

%javamethodmodifiers  rtk::simple::LevelSetMotionRegistrationFilter::LevelSetMotionRegistrationFilter "/**
rtk::simple::LevelSetMotionRegistrationFilter::LevelSetMotionRegistrationFilter()

Default Constructor that takes no arguments and initializes default
parameters

*/
public ";

%javamethodmodifiers  rtk::simple::LevelSetMotionRegistrationFilter::SetAlpha "/**
Self& rtk::simple::LevelSetMotionRegistrationFilter::SetAlpha(double Alpha)

Set/Get the parameter alpha. Alpha is added to the calculated gradient
magnitude prior to normalizing the gradient to protect against
numerical instability as the gradient magnitude approaches zero. This
should be set as a small fraction of the intensity dynamic range, for
instance 0.04%. Default is the absolute (not percentage) value of 0.1.

*/
public ";

%javamethodmodifiers  rtk::simple::LevelSetMotionRegistrationFilter::SetGradientMagnitudeThreshold "/**
Self& rtk::simple::LevelSetMotionRegistrationFilter::SetGradientMagnitudeThreshold(double GradientMagnitudeThreshold)

Set/Get the threshold below which the gradient magnitude is considered
the zero vector. Default is 1e-9.

*/
public ";

%javamethodmodifiers  rtk::simple::LevelSetMotionRegistrationFilter::SetGradientSmoothingStandardDeviations "/**
Self& rtk::simple::LevelSetMotionRegistrationFilter::SetGradientSmoothingStandardDeviations(double GradientSmoothingStandardDeviations)

Set/Get the standard deviation used for smoothing the moving image
prior to calculating gradients. The standard deviation is measured in
physical units (for instance mm). Note that this smoothing value is
not to be confused with the
PDEDeformableRegistrationFilter::SetStandardDeviations() method. The
method in PDEDeformableRegistrationFilter is for setting the smoothing parameters for regularizing the
deformation field between interations. Those smoothing parameters are
set in pixel units not physical units. Deformation field smoothing is
not done by default in LevelSetMotionRegistration. This smoothing
parameter is to condition the gradient calculation and parameter is
specified in physical units.

*/
public ";

%javamethodmodifiers  rtk::simple::LevelSetMotionRegistrationFilter::SetIntensityDifferenceThreshold "/**
Self& rtk::simple::LevelSetMotionRegistrationFilter::SetIntensityDifferenceThreshold(double IntensityDifferenceThreshold)

Set/Get the threshold below which the absolute difference of intensity
yields a match. When the intensities match between a moving and fixed
image pixel, the update vector (for that iteration) will be the zero
vector. Default is 0.001.

*/
public ";

%javamethodmodifiers  rtk::simple::LevelSetMotionRegistrationFilter::SetMaximumError "/**
Self& rtk::simple::LevelSetMotionRegistrationFilter::SetMaximumError(double MaximumError)

Set/Get the desired maximum error of the Guassian kernel approximate.

*/
public ";

%javamethodmodifiers  rtk::simple::LevelSetMotionRegistrationFilter::SetMaximumKernelWidth "/**
Self& rtk::simple::LevelSetMotionRegistrationFilter::SetMaximumKernelWidth(unsigned int MaximumKernelWidth)

Set/Get the desired limits of the Gaussian kernel width.

*/
public ";

%javamethodmodifiers  rtk::simple::LevelSetMotionRegistrationFilter::SetMaximumRMSError "/**
Self& rtk::simple::LevelSetMotionRegistrationFilter::SetMaximumRMSError(double MaximumRMSError)
*/
public ";

%javamethodmodifiers  rtk::simple::LevelSetMotionRegistrationFilter::SetNumberOfIterations "/**
Self& rtk::simple::LevelSetMotionRegistrationFilter::SetNumberOfIterations(uint32_t NumberOfIterations)
*/
public ";

%javamethodmodifiers  rtk::simple::LevelSetMotionRegistrationFilter::SetSmoothDisplacementField "/**
Self& rtk::simple::LevelSetMotionRegistrationFilter::SetSmoothDisplacementField(bool SmoothDisplacementField)

Set/Get whether the displacement field is smoothed (regularized).
Smoothing the displacement yields a solution elastic in nature. If
SmoothDisplacementField is on, then the displacement field is smoothed
with a Gaussian whose standard deviations are specified with SetStandardDeviations()

*/
public ";

%javamethodmodifiers  rtk::simple::LevelSetMotionRegistrationFilter::SetSmoothUpdateField "/**
Self& rtk::simple::LevelSetMotionRegistrationFilter::SetSmoothUpdateField(bool SmoothUpdateField)

Set/Get whether the update field is smoothed (regularized). Smoothing
the update field yields a solution viscous in nature. If
SmoothUpdateField is on, then the update field is smoothed with a
Gaussian whose standard deviations are specified with SetUpdateFieldStandardDeviations()

*/
public ";

%javamethodmodifiers  rtk::simple::LevelSetMotionRegistrationFilter::SetStandardDeviations "/**
Self& rtk::simple::LevelSetMotionRegistrationFilter::SetStandardDeviations(const std::vector< double > &StandardDeviations)

Set/Get the Gaussian smoothing standard deviations for the
displacement field. The values are set with respect to pixel
coordinates.

*/
public ";

%javamethodmodifiers  rtk::simple::LevelSetMotionRegistrationFilter::SetStandardDeviations "/**
Self& rtk::simple::LevelSetMotionRegistrationFilter::SetStandardDeviations(double value)

Set the values of the StandardDeviations vector all to value

*/
public ";

%javamethodmodifiers  rtk::simple::LevelSetMotionRegistrationFilter::SetUpdateFieldStandardDeviations "/**
Self& rtk::simple::LevelSetMotionRegistrationFilter::SetUpdateFieldStandardDeviations(const std::vector< double > &UpdateFieldStandardDeviations)

Set the Gaussian smoothing standard deviations for the update field.
The values are set with respect to pixel coordinates.

*/
public ";

%javamethodmodifiers  rtk::simple::LevelSetMotionRegistrationFilter::SetUpdateFieldStandardDeviations "/**
Self& rtk::simple::LevelSetMotionRegistrationFilter::SetUpdateFieldStandardDeviations(double value)

Set the values of the UpdateFieldStandardDeviations vector all to
value

*/
public ";

%javamethodmodifiers  rtk::simple::LevelSetMotionRegistrationFilter::SetUseImageSpacing "/**
Self& rtk::simple::LevelSetMotionRegistrationFilter::SetUseImageSpacing(bool UseImageSpacing)
*/
public ";

%javamethodmodifiers  rtk::simple::LevelSetMotionRegistrationFilter::SmoothDisplacementFieldOff "/**
Self& rtk::simple::LevelSetMotionRegistrationFilter::SmoothDisplacementFieldOff()
*/
public ";

%javamethodmodifiers  rtk::simple::LevelSetMotionRegistrationFilter::SmoothDisplacementFieldOn "/**
Self& rtk::simple::LevelSetMotionRegistrationFilter::SmoothDisplacementFieldOn()

Set the value of SmoothDisplacementField to true or false
respectfully.

*/
public ";

%javamethodmodifiers  rtk::simple::LevelSetMotionRegistrationFilter::SmoothUpdateFieldOff "/**
Self& rtk::simple::LevelSetMotionRegistrationFilter::SmoothUpdateFieldOff()
*/
public ";

%javamethodmodifiers  rtk::simple::LevelSetMotionRegistrationFilter::SmoothUpdateFieldOn "/**
Self& rtk::simple::LevelSetMotionRegistrationFilter::SmoothUpdateFieldOn()

Set the value of SmoothUpdateField to true or false respectfully.

*/
public ";

%javamethodmodifiers  rtk::simple::LevelSetMotionRegistrationFilter::ToString "/**
std::string rtk::simple::LevelSetMotionRegistrationFilter::ToString() const

Print ourselves out

*/
public ";

%javamethodmodifiers  rtk::simple::LevelSetMotionRegistrationFilter::UseImageSpacingOff "/**
Self& rtk::simple::LevelSetMotionRegistrationFilter::UseImageSpacingOff()
*/
public ";

%javamethodmodifiers  rtk::simple::LevelSetMotionRegistrationFilter::UseImageSpacingOn "/**
Self& rtk::simple::LevelSetMotionRegistrationFilter::UseImageSpacingOn()

Set the value of UseImageSpacing to true or false respectfully.

*/
public ";

%javamethodmodifiers  rtk::simple::LevelSetMotionRegistrationFilter::~LevelSetMotionRegistrationFilter "/**
rtk::simple::LevelSetMotionRegistrationFilter::~LevelSetMotionRegistrationFilter()

Destructor

*/
public ";


%typemap(javaimports) rtk::simple::LiThresholdImageFilter "/**

Threshold an image using the Li Threshold.


This filter creates a binary thresholded image that separates an image
into foreground and background components. The filter computes the
threshold using the LiThresholdCalculator and applies that theshold to the input image using the BinaryThresholdImageFilter .


Richard Beare. Department of Medicine, Monash University, Melbourne,
Australia.
 Gaetan Lehmann. Biologie du Developpement et de la Reproduction, INRA
de Jouy-en-Josas, France.

This implementation was taken from the Insight Journal paper: https://hdl.handle.net/10380/3279 or http://www.insight-journal.org/browse/publication/811


See:
 HistogramThresholdImageFilter

 rtk::simple::LiThreshold for the procedural interface

 itk::LiThresholdImageFilter for the Doxygen on the original ITK class.


C++ includes: srtkLiThresholdImageFilter.h
*/"

%javamethodmodifiers  rtk::simple::LiThresholdImageFilter::Execute "/**
Image rtk::simple::LiThresholdImageFilter::Execute(const Image &image, const Image &maskImage)

Execute the filter on the input image

*/
public ";

%javamethodmodifiers  rtk::simple::LiThresholdImageFilter::Execute "/**
Image rtk::simple::LiThresholdImageFilter::Execute(const Image &image)
*/
public ";

%javamethodmodifiers  rtk::simple::LiThresholdImageFilter::Execute "/**
Image rtk::simple::LiThresholdImageFilter::Execute(const Image &image, const Image &maskImage, uint8_t insideValue,
uint8_t outsideValue, uint32_t numberOfHistogramBins, bool maskOutput,
uint8_t maskValue)

Execute the filter on the input image with the given parameters

*/
public ";

%javamethodmodifiers  rtk::simple::LiThresholdImageFilter::Execute "/**
Image rtk::simple::LiThresholdImageFilter::Execute(const Image &image, uint8_t insideValue, uint8_t outsideValue,
uint32_t numberOfHistogramBins, bool maskOutput, uint8_t maskValue)
*/
public ";

%javamethodmodifiers  rtk::simple::LiThresholdImageFilter::GetInsideValue "/**
uint8_t rtk::simple::LiThresholdImageFilter::GetInsideValue() const

Get the \"inside\" pixel value.

*/
public ";

%javamethodmodifiers  rtk::simple::LiThresholdImageFilter::GetMaskOutput "/**
bool rtk::simple::LiThresholdImageFilter::GetMaskOutput() const
*/
public ";

%javamethodmodifiers  rtk::simple::LiThresholdImageFilter::GetMaskValue "/**
uint8_t rtk::simple::LiThresholdImageFilter::GetMaskValue() const
*/
public ";

%javamethodmodifiers  rtk::simple::LiThresholdImageFilter::GetName "/**
std::string rtk::simple::LiThresholdImageFilter::GetName() const

Name of this class

*/
public ";

%javamethodmodifiers  rtk::simple::LiThresholdImageFilter::GetNumberOfHistogramBins "/**
uint32_t rtk::simple::LiThresholdImageFilter::GetNumberOfHistogramBins() const
*/
public ";

%javamethodmodifiers  rtk::simple::LiThresholdImageFilter::GetOutsideValue "/**
uint8_t rtk::simple::LiThresholdImageFilter::GetOutsideValue() const

Get the \"outside\" pixel value.

*/
public ";

%javamethodmodifiers  rtk::simple::LiThresholdImageFilter::GetThreshold "/**
double rtk::simple::LiThresholdImageFilter::GetThreshold() const

Get the computed threshold.


This is a measurement. Its value is updated in the Execute methods, so
the value will only be valid after an execution.

*/
public ";

%javamethodmodifiers  rtk::simple::LiThresholdImageFilter::LiThresholdImageFilter "/**
rtk::simple::LiThresholdImageFilter::LiThresholdImageFilter()

Default Constructor that takes no arguments and initializes default
parameters

*/
public ";

%javamethodmodifiers  rtk::simple::LiThresholdImageFilter::MaskOutputOff "/**
Self& rtk::simple::LiThresholdImageFilter::MaskOutputOff()
*/
public ";

%javamethodmodifiers  rtk::simple::LiThresholdImageFilter::MaskOutputOn "/**
Self& rtk::simple::LiThresholdImageFilter::MaskOutputOn()

Set the value of MaskOutput to true or false respectfully.

*/
public ";

%javamethodmodifiers  rtk::simple::LiThresholdImageFilter::SetInsideValue "/**
Self& rtk::simple::LiThresholdImageFilter::SetInsideValue(uint8_t InsideValue)

Set the \"inside\" pixel value.

*/
public ";

%javamethodmodifiers  rtk::simple::LiThresholdImageFilter::SetMaskOutput "/**
Self& rtk::simple::LiThresholdImageFilter::SetMaskOutput(bool MaskOutput)

Do you want the output to be masked by the mask used in histogram
construction. Only relevant if masking is in use.

*/
public ";

%javamethodmodifiers  rtk::simple::LiThresholdImageFilter::SetMaskValue "/**
Self& rtk::simple::LiThresholdImageFilter::SetMaskValue(uint8_t MaskValue)

The value in the mask image, if used, indicating voxels that should be
included. Default is the max of pixel type, as in the
MaskedImageToHistogramFilter

*/
public ";

%javamethodmodifiers  rtk::simple::LiThresholdImageFilter::SetNumberOfHistogramBins "/**
Self& rtk::simple::LiThresholdImageFilter::SetNumberOfHistogramBins(uint32_t NumberOfHistogramBins)

Set/Get the number of histogram bins.

*/
public ";

%javamethodmodifiers  rtk::simple::LiThresholdImageFilter::SetOutsideValue "/**
Self& rtk::simple::LiThresholdImageFilter::SetOutsideValue(uint8_t OutsideValue)

Set the \"outside\" pixel value. The default value NumericTraits<OutputPixelType>::Zero.

*/
public ";

%javamethodmodifiers  rtk::simple::LiThresholdImageFilter::ToString "/**
std::string rtk::simple::LiThresholdImageFilter::ToString() const

Print ourselves out

*/
public ";

%javamethodmodifiers  rtk::simple::LiThresholdImageFilter::~LiThresholdImageFilter "/**
rtk::simple::LiThresholdImageFilter::~LiThresholdImageFilter()

Destructor

*/
public ";


%typemap(javaimports) rtk::simple::Log10ImageFilter "/**

Computes the log10 of each pixel.


The computation is performed using std::log10(x).
See:
 rtk::simple::Log10 for the procedural interface

 itk::Log10ImageFilter for the Doxygen on the original ITK class.


C++ includes: srtkLog10ImageFilter.h
*/"

%javamethodmodifiers  rtk::simple::Log10ImageFilter::Execute "/**
Image rtk::simple::Log10ImageFilter::Execute(const Image &image1)

Execute the filter on the input image

*/
public ";

%javamethodmodifiers  rtk::simple::Log10ImageFilter::GetName "/**
std::string rtk::simple::Log10ImageFilter::GetName() const

Name of this class

*/
public ";

%javamethodmodifiers  rtk::simple::Log10ImageFilter::Log10ImageFilter "/**
rtk::simple::Log10ImageFilter::Log10ImageFilter()

Default Constructor that takes no arguments and initializes default
parameters

*/
public ";

%javamethodmodifiers  rtk::simple::Log10ImageFilter::ToString "/**
std::string rtk::simple::Log10ImageFilter::ToString() const

Print ourselves out

*/
public ";

%javamethodmodifiers  rtk::simple::Log10ImageFilter::~Log10ImageFilter "/**
rtk::simple::Log10ImageFilter::~Log10ImageFilter()

Destructor

*/
public ";


%typemap(javaimports) rtk::simple::LogImageFilter "/**

Computes the log() of each pixel.



See:
 rtk::simple::Log for the procedural interface

 itk::LogImageFilter for the Doxygen on the original ITK class.


C++ includes: srtkLogImageFilter.h
*/"

%javamethodmodifiers  rtk::simple::LogImageFilter::Execute "/**
Image rtk::simple::LogImageFilter::Execute(const Image &image1)

Execute the filter on the input image

*/
public ";

%javamethodmodifiers  rtk::simple::LogImageFilter::GetName "/**
std::string rtk::simple::LogImageFilter::GetName() const

Name of this class

*/
public ";

%javamethodmodifiers  rtk::simple::LogImageFilter::LogImageFilter "/**
rtk::simple::LogImageFilter::LogImageFilter()

Default Constructor that takes no arguments and initializes default
parameters

*/
public ";

%javamethodmodifiers  rtk::simple::LogImageFilter::ToString "/**
std::string rtk::simple::LogImageFilter::ToString() const

Print ourselves out

*/
public ";

%javamethodmodifiers  rtk::simple::LogImageFilter::~LogImageFilter "/**
rtk::simple::LogImageFilter::~LogImageFilter()

Destructor

*/
public ";


%typemap(javaimports) rtk::simple::MagnitudeAndPhaseToComplexImageFilter "/**

Implements pixel-wise conversion of magnitude and phase data into
complex voxels.


This filter is parametrized over the types of the two input images and
the type of the output image.

The filter expect all images to have the same dimension (e.g. all 2D,
or all 3D, or all ND)
See:
 rtk::simple::MagnitudeAndPhaseToComplex for the procedural interface

 itk::MagnitudeAndPhaseToComplexImageFilter for the Doxygen on the original ITK class.


C++ includes: srtkMagnitudeAndPhaseToComplexImageFilter.h
*/"

%javamethodmodifiers  rtk::simple::MagnitudeAndPhaseToComplexImageFilter::Execute "/**
Image rtk::simple::MagnitudeAndPhaseToComplexImageFilter::Execute(const Image &image1, const Image &image2)

Execute the filter on the input images

*/
public ";

%javamethodmodifiers  rtk::simple::MagnitudeAndPhaseToComplexImageFilter::Execute "/**
Image rtk::simple::MagnitudeAndPhaseToComplexImageFilter::Execute(const Image &image1, double constant)

Execute the filter with an image and a constant

*/
public ";

%javamethodmodifiers  rtk::simple::MagnitudeAndPhaseToComplexImageFilter::Execute "/**
Image rtk::simple::MagnitudeAndPhaseToComplexImageFilter::Execute(double constant, const Image &image2)
*/
public ";

%javamethodmodifiers  rtk::simple::MagnitudeAndPhaseToComplexImageFilter::GetName "/**
std::string rtk::simple::MagnitudeAndPhaseToComplexImageFilter::GetName() const

Name of this class

*/
public ";

%javamethodmodifiers  rtk::simple::MagnitudeAndPhaseToComplexImageFilter::MagnitudeAndPhaseToComplexImageFilter "/**
rtk::simple::MagnitudeAndPhaseToComplexImageFilter::MagnitudeAndPhaseToComplexImageFilter()

Default Constructor that takes no arguments and initializes default
parameters

*/
public ";

%javamethodmodifiers  rtk::simple::MagnitudeAndPhaseToComplexImageFilter::ToString "/**
std::string rtk::simple::MagnitudeAndPhaseToComplexImageFilter::ToString() const

Print ourselves out

*/
public ";

%javamethodmodifiers  rtk::simple::MagnitudeAndPhaseToComplexImageFilter::~MagnitudeAndPhaseToComplexImageFilter "/**
rtk::simple::MagnitudeAndPhaseToComplexImageFilter::~MagnitudeAndPhaseToComplexImageFilter()

Destructor

*/
public ";


%typemap(javaimports) rtk::simple::MaskImageFilter "/**

Mask an image with a mask.


This class is templated over the types of the input image type, the
mask image type and the type of the output image. Numeric conversions
(castings) are done by the C++ defaults.

The pixel type of the input 2 image must have a valid definition of
the operator != with zero. This condition is required because
internally this filter will perform the operation


The pixel from the input 1 is cast to the pixel type of the output
image.

Note that the input and the mask images must be of the same size.


WARNING:
Any pixel value other than masking value (0 by default) will not be
masked out.

See:
 MaskNegatedImageFilter
Wiki Examples:

All Examples

Apply a mask to an image
See:
 rtk::simple::Mask for the procedural interface

 itk::MaskImageFilter for the Doxygen on the original ITK class.



C++ includes: srtkMaskImageFilter.h
*/"

%javamethodmodifiers  rtk::simple::MaskImageFilter::Execute "/**
Image rtk::simple::MaskImageFilter::Execute(const Image &image, const Image &maskImage)

Execute the filter on the input image

*/
public ";

%javamethodmodifiers  rtk::simple::MaskImageFilter::Execute "/**
Image rtk::simple::MaskImageFilter::Execute(const Image &image, const Image &maskImage, double outsideValue)

Execute the filter on the input image with the given parameters

*/
public ";

%javamethodmodifiers  rtk::simple::MaskImageFilter::GetName "/**
std::string rtk::simple::MaskImageFilter::GetName() const

Name of this class

*/
public ";

%javamethodmodifiers  rtk::simple::MaskImageFilter::GetOutsideValue "/**
double rtk::simple::MaskImageFilter::GetOutsideValue() const
*/
public ";

%javamethodmodifiers  rtk::simple::MaskImageFilter::MaskImageFilter "/**
rtk::simple::MaskImageFilter::MaskImageFilter()

Default Constructor that takes no arguments and initializes default
parameters

*/
public ";

%javamethodmodifiers  rtk::simple::MaskImageFilter::SetOutsideValue "/**
Self& rtk::simple::MaskImageFilter::SetOutsideValue(double OutsideValue)

Method to explicitly set the outside value of the mask. Defaults to 0

*/
public ";

%javamethodmodifiers  rtk::simple::MaskImageFilter::ToString "/**
std::string rtk::simple::MaskImageFilter::ToString() const

Print ourselves out

*/
public ";

%javamethodmodifiers  rtk::simple::MaskImageFilter::~MaskImageFilter "/**
rtk::simple::MaskImageFilter::~MaskImageFilter()

Destructor

*/
public ";


%typemap(javaimports) rtk::simple::MaskNegatedImageFilter "/**

Mask an image with the negative of a mask.


This class is templated over the types of the input image type, the
mask image type and the type of the output image. Numeric conversions
(castings) are done by the C++ defaults. The pixel type of the input 2
image must have a valid definition of the operator != with zero. This
condition is required because internally this filter will perform the
operation ifpixel_from_mask_image!=0pixel_output_image=output_valueels
epixel_output_image=pixel_input_image The pixel from the input 1 is
cast to the pixel type of the output image. Note that the input and
the mask images must be of the same size.
WARNING:
Any pixel value other than 0 will not be masked out.

See:
 MaskImageFilter
Wiki Examples:

All Examples

Apply the inverse of a mask to an image

See:
 rtk::simple::MaskNegated for the procedural interface

itk::MaskNegatedImageFilter for the Doxygen on the original ITK class.


C++ includes: srtkMaskNegatedImageFilter.h
*/"

%javamethodmodifiers  rtk::simple::MaskNegatedImageFilter::Execute "/**
Image rtk::simple::MaskNegatedImageFilter::Execute(const Image &image, const Image &maskImage)

Execute the filter on the input image

*/
public ";

%javamethodmodifiers  rtk::simple::MaskNegatedImageFilter::GetName "/**
std::string rtk::simple::MaskNegatedImageFilter::GetName() const

Name of this class

*/
public ";

%javamethodmodifiers  rtk::simple::MaskNegatedImageFilter::MaskNegatedImageFilter "/**
rtk::simple::MaskNegatedImageFilter::MaskNegatedImageFilter()

Default Constructor that takes no arguments and initializes default
parameters

*/
public ";

%javamethodmodifiers  rtk::simple::MaskNegatedImageFilter::ToString "/**
std::string rtk::simple::MaskNegatedImageFilter::ToString() const

Print ourselves out

*/
public ";

%javamethodmodifiers  rtk::simple::MaskNegatedImageFilter::~MaskNegatedImageFilter "/**
rtk::simple::MaskNegatedImageFilter::~MaskNegatedImageFilter()

Destructor

*/
public ";


%typemap(javaimports) rtk::simple::MaskedFFTNormalizedCorrelationImageFilter "/**

Calculate masked normalized cross correlation using FFTs.


This filter calculates the masked normalized cross correlation (NCC)
of two images under masks using FFTs instead of spatial correlation.
It is much faster than spatial correlation for reasonably large
structuring elements. This filter is not equivalent to simply masking
the images first and then correlating them; the latter approach yields
incorrect results because the zeros in the images still affect the
metric in the correlation process. This filter implements the masked
NCC correctly so that the masked-out regions are completely ignored.
The fundamental difference is described in detail in the references
below. If the masks are set to images of all ones, the result of this
filter is the same as standard NCC.

Inputs: Two images are required as inputs, fixedImage and movingImage,
and two are optional, fixedMask and movingMask. In the context of
correlation, inputs are often defined as: \"image\" and \"template\".
In this filter, the fixedImage plays the role of the image, and the
movingImage plays the role of the template. However, this filter is
capable of correlating any two images and is not restricted to small
movingImages (templates). In the fixedMask and movingMask, non-zero
positive values indicate locations of useful information in the
corresponding image, whereas zero and negative values indicate
locations that should be masked out (ignored). Internally, the masks
are converted to have values of only 0 and 1. For each optional mask
that is not set, the filter internally creates an image of ones, which
is equivalent to not masking the image. Thus, if both masks are not
set, the result will be equivalent to unmasked NCC. For example, if
only a mask for the fixed image is needed, the movingMask can either
not be set or can be set to an image of ones.

Optional parameters: The RequiredNumberOfOverlappingPixels enables the
user to specify the minimum number of voxels of the two masks that
must overlap; any location in the correlation map that results from
fewer than this number of voxels will be set to zero. Larger values
zero-out pixels on a larger border around the correlation image. Thus,
larger values remove less stable computations but also limit the
capture range. If RequiredNumberOfOverlappingPixels is set to 0, the
default, no zeroing will take place.

The RequiredFractionOfOverlappingPixels enables the user to specify a
fraction of the maximum number of overlapping pixels that need to
overlap; any location in the correlation map that results from fewer
than the product of this fraction and the internally computed maximum
number of overlapping pixels will be set to zero. The value ranges
between 0.0 and 1.0. This is very useful when the user does does not
know beforehand the maximum number of pixels of the masks that will
overlap. For example, when the masks have strange shapes, it is
difficult to predict how the correlation of the masks will interact
and what the maximum overlap will be. It is also useful when the mask
shapes or sizes change because it is relative to the internally
computed maximum of the overlap. Larger values zero-out pixels on a
larger border around the correlation image. Thus, larger values remove
less stable computations but also limit the capture range. Experiments
have shown that a value between 0.1 and 0.6 works well for images with
significant overlap and between 0.05 and 0.1 for images with little
overlap (such as in stitching applications). If
RequiredFractionOfOverlappingPixels is set to 0, the default, no
zeroing will take place.

The user can either specify RequiredNumberOfOverlappingPixels or
RequiredFractionOfOverlappingPixels (or both or none). Internally, the
number of required pixels resulting from both of these methods is
calculated and the one that gives the largest number of pixels is
chosen. Since these both default to 0, if a user only sets one, the
other is ignored.

Image size: fixedImage and movingImage need not be the same size, but
fixedMask must be the same size as fixedImage, and movingMask must be
the same size as movingImage. Furthermore, whereas some algorithms
require that the \"template\" be smaller than the \"image\" because of
errors in the regions where the two are not fully overlapping, this
filter has no such restriction.

Image spacing: Since the computations are done in the pixel domain, all
input images must have the same spacing.

Outputs; The output is an image of RealPixelType that is the masked
NCC of the two images and its values range from -1.0 to 1.0. The size
of this NCC image is, by definition, size(fixedImage) +
size(movingImage) - 1.

Example filter usage:


WARNING:
The pixel type of the output image must be of real type (float or
double). ConceptChecking is used to enforce the output pixel type. You
will get a compilation error if the pixel type of the output image is
not float or double.
 References: 1) D. Padfield. \"Masked object registration in the
Fourier domain.\" Transactions on Image Processing. 2) D. Padfield. \"Masked FFT registration\". In Proc.
Computer Vision and Pattern Recognition, 2010.


: Dirk Padfield, GE Global Research, padfield@research.ge.com

See:
 rtk::simple::MaskedFFTNormalizedCorrelation for the procedural interface

 itk::MaskedFFTNormalizedCorrelationImageFilter for the Doxygen on the original ITK class.


C++ includes: srtkMaskedFFTNormalizedCorrelationImageFilter.h
*/"

%javamethodmodifiers  rtk::simple::MaskedFFTNormalizedCorrelationImageFilter::Execute "/**
Image rtk::simple::MaskedFFTNormalizedCorrelationImageFilter::Execute(const Image &fixedImage, const Image &movingImage, const Image
&fixedImageMask, const Image &movingImageMask)

Execute the filter on the input image

*/
public ";

%javamethodmodifiers  rtk::simple::MaskedFFTNormalizedCorrelationImageFilter::Execute "/**
Image rtk::simple::MaskedFFTNormalizedCorrelationImageFilter::Execute(const Image &fixedImage, const Image &movingImage, const Image
&fixedImageMask, const Image &movingImageMask, uint64_t
requiredNumberOfOverlappingPixels, float
requiredFractionOfOverlappingPixels)

Execute the filter on the input image with the given parameters

*/
public ";

%javamethodmodifiers  rtk::simple::MaskedFFTNormalizedCorrelationImageFilter::GetName "/**
std::string rtk::simple::MaskedFFTNormalizedCorrelationImageFilter::GetName() const

Name of this class

*/
public ";

%javamethodmodifiers  rtk::simple::MaskedFFTNormalizedCorrelationImageFilter::GetRequiredFractionOfOverlappingPixels "/**
float rtk::simple::MaskedFFTNormalizedCorrelationImageFilter::GetRequiredFractionOfOverlappingPixels() const

Set and get the required fraction of overlapping pixels

*/
public ";

%javamethodmodifiers  rtk::simple::MaskedFFTNormalizedCorrelationImageFilter::GetRequiredNumberOfOverlappingPixels "/**
uint64_t rtk::simple::MaskedFFTNormalizedCorrelationImageFilter::GetRequiredNumberOfOverlappingPixels() const

Set and get the required number of overlapping pixels

*/
public ";

%javamethodmodifiers  rtk::simple::MaskedFFTNormalizedCorrelationImageFilter::MaskedFFTNormalizedCorrelationImageFilter "/**
rtk::simple::MaskedFFTNormalizedCorrelationImageFilter::MaskedFFTNormalizedCorrelationImageFilter()

Default Constructor that takes no arguments and initializes default
parameters

*/
public ";

%javamethodmodifiers  rtk::simple::MaskedFFTNormalizedCorrelationImageFilter::SetRequiredFractionOfOverlappingPixels "/**
Self& rtk::simple::MaskedFFTNormalizedCorrelationImageFilter::SetRequiredFractionOfOverlappingPixels(float RequiredFractionOfOverlappingPixels)

Set and get the required fraction of overlapping pixels

*/
public ";

%javamethodmodifiers  rtk::simple::MaskedFFTNormalizedCorrelationImageFilter::SetRequiredNumberOfOverlappingPixels "/**
Self& rtk::simple::MaskedFFTNormalizedCorrelationImageFilter::SetRequiredNumberOfOverlappingPixels(uint64_t RequiredNumberOfOverlappingPixels)

Set and get the required number of overlapping pixels

*/
public ";

%javamethodmodifiers  rtk::simple::MaskedFFTNormalizedCorrelationImageFilter::ToString "/**
std::string rtk::simple::MaskedFFTNormalizedCorrelationImageFilter::ToString() const

Print ourselves out

*/
public ";

%javamethodmodifiers  rtk::simple::MaskedFFTNormalizedCorrelationImageFilter::~MaskedFFTNormalizedCorrelationImageFilter "/**
rtk::simple::MaskedFFTNormalizedCorrelationImageFilter::~MaskedFFTNormalizedCorrelationImageFilter()

Destructor

*/
public ";


%typemap(javaimports) rtk::simple::MaximumEntropyThresholdImageFilter "/**

Threshold an image using the MaximumEntropy Threshold.


This filter creates a binary thresholded image that separates an image
into foreground and background components. The filter computes the
threshold using the MaximumEntropyThresholdCalculator and applies that theshold to the input image using the BinaryThresholdImageFilter .


Richard Beare. Department of Medicine, Monash University, Melbourne,
Australia.
 Gaetan Lehmann. Biologie du Developpement et de la Reproduction, INRA
de Jouy-en-Josas, France.

This implementation was taken from the Insight Journal paper: https://hdl.handle.net/10380/3279 or http://www.insight-journal.org/browse/publication/811


See:
 HistogramThresholdImageFilter

 rtk::simple::MaximumEntropyThreshold for the procedural interface

 itk::MaximumEntropyThresholdImageFilter for the Doxygen on the original ITK class.


C++ includes: srtkMaximumEntropyThresholdImageFilter.h
*/"

%javamethodmodifiers  rtk::simple::MaximumEntropyThresholdImageFilter::Execute "/**
Image rtk::simple::MaximumEntropyThresholdImageFilter::Execute(const Image &image, const Image &maskImage)

Execute the filter on the input image

*/
public ";

%javamethodmodifiers  rtk::simple::MaximumEntropyThresholdImageFilter::Execute "/**
Image rtk::simple::MaximumEntropyThresholdImageFilter::Execute(const Image &image)
*/
public ";

%javamethodmodifiers  rtk::simple::MaximumEntropyThresholdImageFilter::Execute "/**
Image rtk::simple::MaximumEntropyThresholdImageFilter::Execute(const Image &image, const Image &maskImage, uint8_t insideValue,
uint8_t outsideValue, uint32_t numberOfHistogramBins, bool maskOutput,
uint8_t maskValue)

Execute the filter on the input image with the given parameters

*/
public ";

%javamethodmodifiers  rtk::simple::MaximumEntropyThresholdImageFilter::Execute "/**
Image rtk::simple::MaximumEntropyThresholdImageFilter::Execute(const Image &image, uint8_t insideValue, uint8_t outsideValue,
uint32_t numberOfHistogramBins, bool maskOutput, uint8_t maskValue)
*/
public ";

%javamethodmodifiers  rtk::simple::MaximumEntropyThresholdImageFilter::GetInsideValue "/**
uint8_t rtk::simple::MaximumEntropyThresholdImageFilter::GetInsideValue() const

Get the \"inside\" pixel value.

*/
public ";

%javamethodmodifiers  rtk::simple::MaximumEntropyThresholdImageFilter::GetMaskOutput "/**
bool rtk::simple::MaximumEntropyThresholdImageFilter::GetMaskOutput() const
*/
public ";

%javamethodmodifiers  rtk::simple::MaximumEntropyThresholdImageFilter::GetMaskValue "/**
uint8_t rtk::simple::MaximumEntropyThresholdImageFilter::GetMaskValue() const
*/
public ";

%javamethodmodifiers  rtk::simple::MaximumEntropyThresholdImageFilter::GetName "/**
std::string rtk::simple::MaximumEntropyThresholdImageFilter::GetName() const

Name of this class

*/
public ";

%javamethodmodifiers  rtk::simple::MaximumEntropyThresholdImageFilter::GetNumberOfHistogramBins "/**
uint32_t rtk::simple::MaximumEntropyThresholdImageFilter::GetNumberOfHistogramBins() const
*/
public ";

%javamethodmodifiers  rtk::simple::MaximumEntropyThresholdImageFilter::GetOutsideValue "/**
uint8_t rtk::simple::MaximumEntropyThresholdImageFilter::GetOutsideValue() const

Get the \"outside\" pixel value.

*/
public ";

%javamethodmodifiers  rtk::simple::MaximumEntropyThresholdImageFilter::GetThreshold "/**
double rtk::simple::MaximumEntropyThresholdImageFilter::GetThreshold() const

Get the computed threshold.


This is a measurement. Its value is updated in the Execute methods, so
the value will only be valid after an execution.

*/
public ";

%javamethodmodifiers  rtk::simple::MaximumEntropyThresholdImageFilter::MaskOutputOff "/**
Self& rtk::simple::MaximumEntropyThresholdImageFilter::MaskOutputOff()
*/
public ";

%javamethodmodifiers  rtk::simple::MaximumEntropyThresholdImageFilter::MaskOutputOn "/**
Self& rtk::simple::MaximumEntropyThresholdImageFilter::MaskOutputOn()

Set the value of MaskOutput to true or false respectfully.

*/
public ";

%javamethodmodifiers  rtk::simple::MaximumEntropyThresholdImageFilter::MaximumEntropyThresholdImageFilter "/**
rtk::simple::MaximumEntropyThresholdImageFilter::MaximumEntropyThresholdImageFilter()

Default Constructor that takes no arguments and initializes default
parameters

*/
public ";

%javamethodmodifiers  rtk::simple::MaximumEntropyThresholdImageFilter::SetInsideValue "/**
Self& rtk::simple::MaximumEntropyThresholdImageFilter::SetInsideValue(uint8_t InsideValue)

Set the \"inside\" pixel value.

*/
public ";

%javamethodmodifiers  rtk::simple::MaximumEntropyThresholdImageFilter::SetMaskOutput "/**
Self& rtk::simple::MaximumEntropyThresholdImageFilter::SetMaskOutput(bool MaskOutput)

Do you want the output to be masked by the mask used in histogram
construction. Only relevant if masking is in use.

*/
public ";

%javamethodmodifiers  rtk::simple::MaximumEntropyThresholdImageFilter::SetMaskValue "/**
Self& rtk::simple::MaximumEntropyThresholdImageFilter::SetMaskValue(uint8_t MaskValue)

The value in the mask image, if used, indicating voxels that should be
included. Default is the max of pixel type, as in the
MaskedImageToHistogramFilter

*/
public ";

%javamethodmodifiers  rtk::simple::MaximumEntropyThresholdImageFilter::SetNumberOfHistogramBins "/**
Self& rtk::simple::MaximumEntropyThresholdImageFilter::SetNumberOfHistogramBins(uint32_t NumberOfHistogramBins)

Set/Get the number of histogram bins.

*/
public ";

%javamethodmodifiers  rtk::simple::MaximumEntropyThresholdImageFilter::SetOutsideValue "/**
Self& rtk::simple::MaximumEntropyThresholdImageFilter::SetOutsideValue(uint8_t OutsideValue)

Set the \"outside\" pixel value. The default value NumericTraits<OutputPixelType>::Zero.

*/
public ";

%javamethodmodifiers  rtk::simple::MaximumEntropyThresholdImageFilter::ToString "/**
std::string rtk::simple::MaximumEntropyThresholdImageFilter::ToString() const

Print ourselves out

*/
public ";

%javamethodmodifiers  rtk::simple::MaximumEntropyThresholdImageFilter::~MaximumEntropyThresholdImageFilter "/**
rtk::simple::MaximumEntropyThresholdImageFilter::~MaximumEntropyThresholdImageFilter()

Destructor

*/
public ";


%typemap(javaimports) rtk::simple::MaximumImageFilter "/**

Implements a pixel-wise operator Max(a,b) between two images.


The pixel values of the output image are the maximum between the
corresponding pixels of the two input images.

This class is templated over the types of the two input images and the
type of the output image. Numeric conversions (castings) are done by
the C++ defaults.

Wiki Examples:

All Examples

Pixel wise compare two input images and set the output pixel to their
max
See:
 rtk::simple::Maximum for the procedural interface

 itk::MaximumImageFilter for the Doxygen on the original ITK class.



C++ includes: srtkMaximumImageFilter.h
*/"

%javamethodmodifiers  rtk::simple::MaximumImageFilter::Execute "/**
Image rtk::simple::MaximumImageFilter::Execute(const Image &image1, const Image &image2)

Execute the filter on the input images

*/
public ";

%javamethodmodifiers  rtk::simple::MaximumImageFilter::Execute "/**
Image rtk::simple::MaximumImageFilter::Execute(const Image &image1, double constant)

Execute the filter with an image and a constant

*/
public ";

%javamethodmodifiers  rtk::simple::MaximumImageFilter::Execute "/**
Image rtk::simple::MaximumImageFilter::Execute(double constant, const Image &image2)
*/
public ";

%javamethodmodifiers  rtk::simple::MaximumImageFilter::GetName "/**
std::string rtk::simple::MaximumImageFilter::GetName() const

Name of this class

*/
public ";

%javamethodmodifiers  rtk::simple::MaximumImageFilter::MaximumImageFilter "/**
rtk::simple::MaximumImageFilter::MaximumImageFilter()

Default Constructor that takes no arguments and initializes default
parameters

*/
public ";

%javamethodmodifiers  rtk::simple::MaximumImageFilter::ToString "/**
std::string rtk::simple::MaximumImageFilter::ToString() const

Print ourselves out

*/
public ";

%javamethodmodifiers  rtk::simple::MaximumImageFilter::~MaximumImageFilter "/**
rtk::simple::MaximumImageFilter::~MaximumImageFilter()

Destructor

*/
public ";


%typemap(javaimports) rtk::simple::MaximumProjectionImageFilter "/**

Maximum projection.


This class was contributed to the insight journal by Gaetan Lehmann.
The original paper can be found at https://hdl.handle.net/1926/164


Gaetan Lehmann. Biologie du Developpement et de la reproduction, inra
de jouy-en-josas, France.

See:
 ProjectionImageFilter


 MedianProjectionImageFilter


 MeanProjectionImageFilter


 MinimumProjectionImageFilter


 StandardDeviationProjectionImageFilter


 SumProjectionImageFilter


 BinaryProjectionImageFilter

 rtk::simple::MaximumProjection for the procedural interface

 itk::MaximumProjectionImageFilter for the Doxygen on the original ITK class.


C++ includes: srtkMaximumProjectionImageFilter.h
*/"

%javamethodmodifiers  rtk::simple::MaximumProjectionImageFilter::Execute "/**
Image rtk::simple::MaximumProjectionImageFilter::Execute(const Image &image1)

Execute the filter on the input image

*/
public ";

%javamethodmodifiers  rtk::simple::MaximumProjectionImageFilter::Execute "/**
Image rtk::simple::MaximumProjectionImageFilter::Execute(const Image &image1, unsigned int projectionDimension)

Execute the filter on the input image with the given parameters

*/
public ";

%javamethodmodifiers  rtk::simple::MaximumProjectionImageFilter::GetName "/**
std::string rtk::simple::MaximumProjectionImageFilter::GetName() const

Name of this class

*/
public ";

%javamethodmodifiers  rtk::simple::MaximumProjectionImageFilter::GetProjectionDimension "/**
unsigned int rtk::simple::MaximumProjectionImageFilter::GetProjectionDimension() const
*/
public ";

%javamethodmodifiers  rtk::simple::MaximumProjectionImageFilter::MaximumProjectionImageFilter "/**
rtk::simple::MaximumProjectionImageFilter::MaximumProjectionImageFilter()

Default Constructor that takes no arguments and initializes default
parameters

*/
public ";

%javamethodmodifiers  rtk::simple::MaximumProjectionImageFilter::SetProjectionDimension "/**
Self& rtk::simple::MaximumProjectionImageFilter::SetProjectionDimension(unsigned int ProjectionDimension)
*/
public ";

%javamethodmodifiers  rtk::simple::MaximumProjectionImageFilter::ToString "/**
std::string rtk::simple::MaximumProjectionImageFilter::ToString() const

Print ourselves out

*/
public ";

%javamethodmodifiers  rtk::simple::MaximumProjectionImageFilter::~MaximumProjectionImageFilter "/**
rtk::simple::MaximumProjectionImageFilter::~MaximumProjectionImageFilter()

Destructor

*/
public ";


%typemap(javaimports) rtk::simple::MeanImageFilter "/**

Applies an averaging filter to an image.


Computes an image where a given pixel is the mean value of the the
pixels in a neighborhood about the corresponding input pixel.

A mean filter is one of the family of linear filters.


See:
 Image


 Neighborhood


 NeighborhoodOperator


 NeighborhoodIterator
Wiki Examples:

All Examples

Mean filter an image
See:
 rtk::simple::Mean for the procedural interface

 itk::MeanImageFilter for the Doxygen on the original ITK class.



C++ includes: srtkMeanImageFilter.h
*/"

%javamethodmodifiers  rtk::simple::MeanImageFilter::Execute "/**
Image rtk::simple::MeanImageFilter::Execute(const Image &image1)

Execute the filter on the input image

*/
public ";

%javamethodmodifiers  rtk::simple::MeanImageFilter::Execute "/**
Image rtk::simple::MeanImageFilter::Execute(const Image &image1, const std::vector< unsigned int > &radius)

Execute the filter on the input image with the given parameters

*/
public ";

%javamethodmodifiers  rtk::simple::MeanImageFilter::GetName "/**
std::string rtk::simple::MeanImageFilter::GetName() const

Name of this class

*/
public ";

%javamethodmodifiers  rtk::simple::MeanImageFilter::GetRadius "/**
std::vector<unsigned int> rtk::simple::MeanImageFilter::GetRadius() const
*/
public ";

%javamethodmodifiers  rtk::simple::MeanImageFilter::MeanImageFilter "/**
rtk::simple::MeanImageFilter::MeanImageFilter()

Default Constructor that takes no arguments and initializes default
parameters

*/
public ";

%javamethodmodifiers  rtk::simple::MeanImageFilter::SetRadius "/**
Self& rtk::simple::MeanImageFilter::SetRadius(const std::vector< unsigned int > &Radius)
*/
public ";

%javamethodmodifiers  rtk::simple::MeanImageFilter::SetRadius "/**
Self& rtk::simple::MeanImageFilter::SetRadius(unsigned int value)

Set the values of the Radius vector all to value

*/
public ";

%javamethodmodifiers  rtk::simple::MeanImageFilter::ToString "/**
std::string rtk::simple::MeanImageFilter::ToString() const

Print ourselves out

*/
public ";

%javamethodmodifiers  rtk::simple::MeanImageFilter::~MeanImageFilter "/**
rtk::simple::MeanImageFilter::~MeanImageFilter()

Destructor

*/
public ";


%typemap(javaimports) rtk::simple::MeanProjectionImageFilter "/**

Mean projection.


This class was contributed to the Insight Journal by Gaetan Lehmann.
The original paper can be found at https://hdl.handle.net/1926/164


Gaetan Lehmann. Biologie du Developpement et de la Reproduction, INRA
de Jouy-en-Josas, France.

See:
 ProjectionImageFilter


 MedianProjectionImageFilter


 MinimumProjectionImageFilter


 StandardDeviationProjectionImageFilter


 SumProjectionImageFilter


 BinaryProjectionImageFilter


 MaximumProjectionImageFilter

 rtk::simple::MeanProjection for the procedural interface

 itk::MeanProjectionImageFilter for the Doxygen on the original ITK class.


C++ includes: srtkMeanProjectionImageFilter.h
*/"

%javamethodmodifiers  rtk::simple::MeanProjectionImageFilter::Execute "/**
Image rtk::simple::MeanProjectionImageFilter::Execute(const Image &image1)

Execute the filter on the input image

*/
public ";

%javamethodmodifiers  rtk::simple::MeanProjectionImageFilter::Execute "/**
Image rtk::simple::MeanProjectionImageFilter::Execute(const Image &image1, unsigned int projectionDimension)

Execute the filter on the input image with the given parameters

*/
public ";

%javamethodmodifiers  rtk::simple::MeanProjectionImageFilter::GetName "/**
std::string rtk::simple::MeanProjectionImageFilter::GetName() const

Name of this class

*/
public ";

%javamethodmodifiers  rtk::simple::MeanProjectionImageFilter::GetProjectionDimension "/**
unsigned int rtk::simple::MeanProjectionImageFilter::GetProjectionDimension() const
*/
public ";

%javamethodmodifiers  rtk::simple::MeanProjectionImageFilter::MeanProjectionImageFilter "/**
rtk::simple::MeanProjectionImageFilter::MeanProjectionImageFilter()

Default Constructor that takes no arguments and initializes default
parameters

*/
public ";

%javamethodmodifiers  rtk::simple::MeanProjectionImageFilter::SetProjectionDimension "/**
Self& rtk::simple::MeanProjectionImageFilter::SetProjectionDimension(unsigned int ProjectionDimension)
*/
public ";

%javamethodmodifiers  rtk::simple::MeanProjectionImageFilter::ToString "/**
std::string rtk::simple::MeanProjectionImageFilter::ToString() const

Print ourselves out

*/
public ";

%javamethodmodifiers  rtk::simple::MeanProjectionImageFilter::~MeanProjectionImageFilter "/**
rtk::simple::MeanProjectionImageFilter::~MeanProjectionImageFilter()

Destructor

*/
public ";


%typemap(javaimports) rtk::simple::MedianImageFilter "/**

Applies a median filter to an image.


Computes an image where a given pixel is the median value of the the
pixels in a neighborhood about the corresponding input pixel.

A median filter is one of the family of nonlinear filters. It is used
to smooth an image without being biased by outliers or shot noise.

This filter requires that the input pixel type provides an operator<()
(LessThan Comparable).


See:
 Image


 Neighborhood


 NeighborhoodOperator


 NeighborhoodIterator
Wiki Examples:

All Examples

Median filter an image

Median filter an RGB image
See:
 rtk::simple::Median for the procedural interface

 itk::MedianImageFilter for the Doxygen on the original ITK class.



C++ includes: srtkMedianImageFilter.h
*/"

%javamethodmodifiers  rtk::simple::MedianImageFilter::Execute "/**
Image rtk::simple::MedianImageFilter::Execute(const Image &image1)

Execute the filter on the input image

*/
public ";

%javamethodmodifiers  rtk::simple::MedianImageFilter::Execute "/**
Image rtk::simple::MedianImageFilter::Execute(const Image &image1, const std::vector< unsigned int > &radius)

Execute the filter on the input image with the given parameters

*/
public ";

%javamethodmodifiers  rtk::simple::MedianImageFilter::GetName "/**
std::string rtk::simple::MedianImageFilter::GetName() const

Name of this class

*/
public ";

%javamethodmodifiers  rtk::simple::MedianImageFilter::GetRadius "/**
std::vector<unsigned int> rtk::simple::MedianImageFilter::GetRadius() const
*/
public ";

%javamethodmodifiers  rtk::simple::MedianImageFilter::MedianImageFilter "/**
rtk::simple::MedianImageFilter::MedianImageFilter()

Default Constructor that takes no arguments and initializes default
parameters

*/
public ";

%javamethodmodifiers  rtk::simple::MedianImageFilter::SetRadius "/**
Self& rtk::simple::MedianImageFilter::SetRadius(const std::vector< unsigned int > &Radius)
*/
public ";

%javamethodmodifiers  rtk::simple::MedianImageFilter::SetRadius "/**
Self& rtk::simple::MedianImageFilter::SetRadius(unsigned int value)

Set the values of the Radius vector all to value

*/
public ";

%javamethodmodifiers  rtk::simple::MedianImageFilter::ToString "/**
std::string rtk::simple::MedianImageFilter::ToString() const

Print ourselves out

*/
public ";

%javamethodmodifiers  rtk::simple::MedianImageFilter::~MedianImageFilter "/**
rtk::simple::MedianImageFilter::~MedianImageFilter()

Destructor

*/
public ";


%typemap(javaimports) rtk::simple::MedianProjectionImageFilter "/**

Median projection.


This class was contributed to the Insight Journal by Gaetan Lehmann.
The original paper can be found at https://hdl.handle.net/1926/164


Gaetan Lehmann. Biologie du Developpement et de la Reproduction, INRA
de Jouy-en-Josas, France.

See:
 ProjectionImageFilter


 StandardDeviationProjectionImageFilter


 SumProjectionImageFilter


 BinaryProjectionImageFilter


 MaximumProjectionImageFilter


 MinimumProjectionImageFilter


 MeanProjectionImageFilter

 rtk::simple::MedianProjection for the procedural interface

 itk::MedianProjectionImageFilter for the Doxygen on the original ITK class.


C++ includes: srtkMedianProjectionImageFilter.h
*/"

%javamethodmodifiers  rtk::simple::MedianProjectionImageFilter::Execute "/**
Image rtk::simple::MedianProjectionImageFilter::Execute(const Image &image1)

Execute the filter on the input image

*/
public ";

%javamethodmodifiers  rtk::simple::MedianProjectionImageFilter::Execute "/**
Image rtk::simple::MedianProjectionImageFilter::Execute(const Image &image1, unsigned int projectionDimension)

Execute the filter on the input image with the given parameters

*/
public ";

%javamethodmodifiers  rtk::simple::MedianProjectionImageFilter::GetName "/**
std::string rtk::simple::MedianProjectionImageFilter::GetName() const

Name of this class

*/
public ";

%javamethodmodifiers  rtk::simple::MedianProjectionImageFilter::GetProjectionDimension "/**
unsigned int rtk::simple::MedianProjectionImageFilter::GetProjectionDimension() const
*/
public ";

%javamethodmodifiers  rtk::simple::MedianProjectionImageFilter::MedianProjectionImageFilter "/**
rtk::simple::MedianProjectionImageFilter::MedianProjectionImageFilter()

Default Constructor that takes no arguments and initializes default
parameters

*/
public ";

%javamethodmodifiers  rtk::simple::MedianProjectionImageFilter::SetProjectionDimension "/**
Self& rtk::simple::MedianProjectionImageFilter::SetProjectionDimension(unsigned int ProjectionDimension)
*/
public ";

%javamethodmodifiers  rtk::simple::MedianProjectionImageFilter::ToString "/**
std::string rtk::simple::MedianProjectionImageFilter::ToString() const

Print ourselves out

*/
public ";

%javamethodmodifiers  rtk::simple::MedianProjectionImageFilter::~MedianProjectionImageFilter "/**
rtk::simple::MedianProjectionImageFilter::~MedianProjectionImageFilter()

Destructor

*/
public ";


%typemap(javaimports) rtk::simple::MergeLabelMapFilter "/**

Merges several Label Maps.


This filter takes one or more input Label Map and merges them.

SetMethod() can be used to change how the filter manage the labels from the
different label maps. KEEP (0): MergeLabelMapFilter do its best to keep the label unchanged, but if a label is already
used in a previous label map, a new label is assigned. AGGREGATE (1):
If the same label is found several times in the label maps, the label
objects with the same label are merged. PACK (2): MergeLabelMapFilter relabel all the label objects by order of processing. No conflict can
occur. STRICT (3): MergeLabelMapFilter keeps the labels unchanged and raises an exception if the same label
is found in several images.

This implementation was taken from the Insight Journal paper: https://hdl.handle.net/1926/584 or http://www.insight-journal.org/browse/publication/176


Gaetan Lehmann. Biologie du Developpement et de la Reproduction, INRA
de Jouy-en-Josas, France.

See:
 ShapeLabelObject , RelabelComponentImageFilter

 rtk::simple::MergeLabelMapFilter for the procedural interface


C++ includes: srtkMergeLabelMapFilter.h
*/"

%javamethodmodifiers  rtk::simple::MergeLabelMapFilter::Execute "/**
Image rtk::simple::MergeLabelMapFilter::Execute(const std::vector< Image > &images)

Execute the filter on the input images

*/
public ";

%javamethodmodifiers  rtk::simple::MergeLabelMapFilter::Execute "/**
Image rtk::simple::MergeLabelMapFilter::Execute(const Image &image1)
*/
public ";

%javamethodmodifiers  rtk::simple::MergeLabelMapFilter::Execute "/**
Image rtk::simple::MergeLabelMapFilter::Execute(const Image &image1, const Image &image2)
*/
public ";

%javamethodmodifiers  rtk::simple::MergeLabelMapFilter::Execute "/**
Image rtk::simple::MergeLabelMapFilter::Execute(const Image &image1, const Image &image2, const Image &image3)
*/
public ";

%javamethodmodifiers  rtk::simple::MergeLabelMapFilter::Execute "/**
Image rtk::simple::MergeLabelMapFilter::Execute(const Image &image1, const Image &image2, const Image &image3, const
Image &image4)
*/
public ";

%javamethodmodifiers  rtk::simple::MergeLabelMapFilter::Execute "/**
Image rtk::simple::MergeLabelMapFilter::Execute(const Image &image1, const Image &image2, const Image &image3, const
Image &image4, const Image &image5)
*/
public ";

%javamethodmodifiers  rtk::simple::MergeLabelMapFilter::Execute "/**
Image rtk::simple::MergeLabelMapFilter::Execute(const std::vector< Image > &images, MergeLabelMapFilter::MethodType
method)

Execute the filter on the input images with the given parameters

*/
public ";

%javamethodmodifiers  rtk::simple::MergeLabelMapFilter::Execute "/**
Image rtk::simple::MergeLabelMapFilter::Execute(const Image &image1, MergeLabelMapFilter::MethodType method)
*/
public ";

%javamethodmodifiers  rtk::simple::MergeLabelMapFilter::Execute "/**
Image rtk::simple::MergeLabelMapFilter::Execute(const Image &image1, const Image &image2,
MergeLabelMapFilter::MethodType method)
*/
public ";

%javamethodmodifiers  rtk::simple::MergeLabelMapFilter::Execute "/**
Image rtk::simple::MergeLabelMapFilter::Execute(const Image &image1, const Image &image2, const Image &image3,
MergeLabelMapFilter::MethodType method)
*/
public ";

%javamethodmodifiers  rtk::simple::MergeLabelMapFilter::Execute "/**
Image rtk::simple::MergeLabelMapFilter::Execute(const Image &image1, const Image &image2, const Image &image3, const
Image &image4, MergeLabelMapFilter::MethodType method)
*/
public ";

%javamethodmodifiers  rtk::simple::MergeLabelMapFilter::Execute "/**
Image rtk::simple::MergeLabelMapFilter::Execute(const Image &image1, const Image &image2, const Image &image3, const
Image &image4, const Image &image5, MergeLabelMapFilter::MethodType
method)
*/
public ";

%javamethodmodifiers  rtk::simple::MergeLabelMapFilter::GetMethod "/**
MethodType rtk::simple::MergeLabelMapFilter::GetMethod() const

Set/Get the method used to merge the label maps

*/
public ";

%javamethodmodifiers  rtk::simple::MergeLabelMapFilter::GetName "/**
std::string rtk::simple::MergeLabelMapFilter::GetName() const

Name of this class

*/
public ";

%javamethodmodifiers  rtk::simple::MergeLabelMapFilter::MergeLabelMapFilter "/**
rtk::simple::MergeLabelMapFilter::MergeLabelMapFilter()

Default Constructor that takes no arguments and initializes default
parameters

*/
public ";

%javamethodmodifiers  rtk::simple::MergeLabelMapFilter::SetMethod "/**
Self& rtk::simple::MergeLabelMapFilter::SetMethod(MethodType Method)

Set/Get the method used to merge the label maps

*/
public ";

%javamethodmodifiers  rtk::simple::MergeLabelMapFilter::ToString "/**
std::string rtk::simple::MergeLabelMapFilter::ToString() const

Print ourselves out

*/
public ";

%javamethodmodifiers  rtk::simple::MergeLabelMapFilter::~MergeLabelMapFilter "/**
rtk::simple::MergeLabelMapFilter::~MergeLabelMapFilter()

Destructor

*/
public ";


%typemap(javaimports) rtk::simple::MinMaxCurvatureFlowImageFilter "/**

Denoise an image using min/max curvature flow.


MinMaxCurvatureFlowImageFilter implements a curvature driven image denoising algorithm. Iso-
brightness contours in the grayscale input image are viewed as a level
set. The level set is then evolved using a curvature-based speed
function:

\\\\[ I_t = F_{\\\\mbox{minmax}} |\\\\nabla I| \\\\]

where $ F_{\\\\mbox{minmax}} = \\\\max(\\\\kappa,0) $ if $ \\\\mbox{Avg}_{\\\\mbox{stencil}}(x) $ is less than or equal to $ T_{thresold} $ and $ \\\\min(\\\\kappa,0) $ , otherwise. $ \\\\kappa $ is the mean curvature of the iso-brightness contour at point $ x $ .

In min/max curvature flow, movement is turned on or off depending on
the scale of the noise one wants to remove. Switching depends on the
average image value of a region of radius $ R $ around each point. The choice of $ R $ , the stencil radius, governs the scale of the noise to be removed.

The threshold value $ T_{threshold} $ is the average intensity obtained in the direction perpendicular to
the gradient at point $ x $ at the extrema of the local neighborhood.

This filter make use of the multi-threaded finite difference solver
hierarchy. Updates are computed using a MinMaxCurvatureFlowFunction object. A zero flux Neumann boundary condition is used when computing
derivatives near the data boundary.


WARNING:
This filter assumes that the input and output types have the same
dimensions. This filter also requires that the output image pixels are
of a real type. This filter works for any dimensional images, however
for dimensions greater than 3D, an expensive brute-force search is
used to compute the local threshold.
 Reference: \"Level Set Methods and Fast Marching Methods\", J.A.
Sethian, Cambridge Press, Chapter 16, Second edition, 1999.


See:
 MinMaxCurvatureFlowFunction


 CurvatureFlowImageFilter


 BinaryMinMaxCurvatureFlowImageFilter

 rtk::simple::MinMaxCurvatureFlow for the procedural interface

 itk::MinMaxCurvatureFlowImageFilter for the Doxygen on the original ITK class.


C++ includes: srtkMinMaxCurvatureFlowImageFilter.h
*/"

%javamethodmodifiers  rtk::simple::MinMaxCurvatureFlowImageFilter::Execute "/**
Image rtk::simple::MinMaxCurvatureFlowImageFilter::Execute(const Image &image1)

Execute the filter on the input image

*/
public ";

%javamethodmodifiers  rtk::simple::MinMaxCurvatureFlowImageFilter::Execute "/**
Image rtk::simple::MinMaxCurvatureFlowImageFilter::Execute(const Image &image1, double timeStep, uint32_t numberOfIterations,
int stencilRadius)

Execute the filter on the input image with the given parameters

*/
public ";

%javamethodmodifiers  rtk::simple::MinMaxCurvatureFlowImageFilter::GetName "/**
std::string rtk::simple::MinMaxCurvatureFlowImageFilter::GetName() const

Name of this class

*/
public ";

%javamethodmodifiers  rtk::simple::MinMaxCurvatureFlowImageFilter::GetNumberOfIterations "/**
uint32_t rtk::simple::MinMaxCurvatureFlowImageFilter::GetNumberOfIterations() const
*/
public ";

%javamethodmodifiers  rtk::simple::MinMaxCurvatureFlowImageFilter::GetStencilRadius "/**
int rtk::simple::MinMaxCurvatureFlowImageFilter::GetStencilRadius() const

Set/Get the stencil radius.

*/
public ";

%javamethodmodifiers  rtk::simple::MinMaxCurvatureFlowImageFilter::GetTimeStep "/**
double rtk::simple::MinMaxCurvatureFlowImageFilter::GetTimeStep() const
*/
public ";

%javamethodmodifiers  rtk::simple::MinMaxCurvatureFlowImageFilter::MinMaxCurvatureFlowImageFilter "/**
rtk::simple::MinMaxCurvatureFlowImageFilter::MinMaxCurvatureFlowImageFilter()

Default Constructor that takes no arguments and initializes default
parameters

*/
public ";

%javamethodmodifiers  rtk::simple::MinMaxCurvatureFlowImageFilter::SetNumberOfIterations "/**
Self& rtk::simple::MinMaxCurvatureFlowImageFilter::SetNumberOfIterations(uint32_t NumberOfIterations)
*/
public ";

%javamethodmodifiers  rtk::simple::MinMaxCurvatureFlowImageFilter::SetStencilRadius "/**
Self& rtk::simple::MinMaxCurvatureFlowImageFilter::SetStencilRadius(int StencilRadius)

Set/Get the stencil radius.

*/
public ";

%javamethodmodifiers  rtk::simple::MinMaxCurvatureFlowImageFilter::SetTimeStep "/**
Self& rtk::simple::MinMaxCurvatureFlowImageFilter::SetTimeStep(double TimeStep)
*/
public ";

%javamethodmodifiers  rtk::simple::MinMaxCurvatureFlowImageFilter::ToString "/**
std::string rtk::simple::MinMaxCurvatureFlowImageFilter::ToString() const

Print ourselves out

*/
public ";

%javamethodmodifiers  rtk::simple::MinMaxCurvatureFlowImageFilter::~MinMaxCurvatureFlowImageFilter "/**
rtk::simple::MinMaxCurvatureFlowImageFilter::~MinMaxCurvatureFlowImageFilter()

Destructor

*/
public ";


%typemap(javaimports) rtk::simple::MinimumImageFilter "/**

Implements a pixel-wise operator Min(a,b) between two images.


The pixel values of the output image are the minimum between the
corresponding pixels of the two input images.

This class is templated over the types of the two input images and the
type of the output image. Numeric conversions (castings) are done by
the C++ defaults.

Wiki Examples:

All Examples

Pixel wise compare two input images and set the output pixel to their
min
See:
 rtk::simple::Minimum for the procedural interface

 itk::MinimumImageFilter for the Doxygen on the original ITK class.



C++ includes: srtkMinimumImageFilter.h
*/"

%javamethodmodifiers  rtk::simple::MinimumImageFilter::Execute "/**
Image rtk::simple::MinimumImageFilter::Execute(const Image &image1, const Image &image2)

Execute the filter on the input images

*/
public ";

%javamethodmodifiers  rtk::simple::MinimumImageFilter::Execute "/**
Image rtk::simple::MinimumImageFilter::Execute(const Image &image1, double constant)

Execute the filter with an image and a constant

*/
public ";

%javamethodmodifiers  rtk::simple::MinimumImageFilter::Execute "/**
Image rtk::simple::MinimumImageFilter::Execute(double constant, const Image &image2)
*/
public ";

%javamethodmodifiers  rtk::simple::MinimumImageFilter::GetName "/**
std::string rtk::simple::MinimumImageFilter::GetName() const

Name of this class

*/
public ";

%javamethodmodifiers  rtk::simple::MinimumImageFilter::MinimumImageFilter "/**
rtk::simple::MinimumImageFilter::MinimumImageFilter()

Default Constructor that takes no arguments and initializes default
parameters

*/
public ";

%javamethodmodifiers  rtk::simple::MinimumImageFilter::ToString "/**
std::string rtk::simple::MinimumImageFilter::ToString() const

Print ourselves out

*/
public ";

%javamethodmodifiers  rtk::simple::MinimumImageFilter::~MinimumImageFilter "/**
rtk::simple::MinimumImageFilter::~MinimumImageFilter()

Destructor

*/
public ";


%typemap(javaimports) rtk::simple::MinimumMaximumImageFilter "/**

Computes the minimum and the maximum intensity values of an image.


It is templated over input image type only. This filter just copies
the input image through this output to be included within the
pipeline. The implementation uses the StatisticsImageFilter .


See:
 StatisticsImageFilter

 itk::MinimumMaximumImageFilter for the Doxygen on the original ITK class.


C++ includes: srtkMinimumMaximumImageFilter.h
*/"

%javamethodmodifiers  rtk::simple::MinimumMaximumImageFilter::Execute "/**
Image rtk::simple::MinimumMaximumImageFilter::Execute(const Image &image1)

Execute the filter on the input image

*/
public ";

%javamethodmodifiers  rtk::simple::MinimumMaximumImageFilter::GetMaximum "/**
double rtk::simple::MinimumMaximumImageFilter::GetMaximum() const

Return the computed Maximum.

This is a measurement. Its value is updated in the Execute methods, so
the value will only be valid after an execution.

*/
public ";

%javamethodmodifiers  rtk::simple::MinimumMaximumImageFilter::GetMinimum "/**
double rtk::simple::MinimumMaximumImageFilter::GetMinimum() const

Return the computed Minimum.

This is a measurement. Its value is updated in the Execute methods, so
the value will only be valid after an execution.

*/
public ";

%javamethodmodifiers  rtk::simple::MinimumMaximumImageFilter::GetName "/**
std::string rtk::simple::MinimumMaximumImageFilter::GetName() const

Name of this class

*/
public ";

%javamethodmodifiers  rtk::simple::MinimumMaximumImageFilter::MinimumMaximumImageFilter "/**
rtk::simple::MinimumMaximumImageFilter::MinimumMaximumImageFilter()

Default Constructor that takes no arguments and initializes default
parameters

*/
public ";

%javamethodmodifiers  rtk::simple::MinimumMaximumImageFilter::ToString "/**
std::string rtk::simple::MinimumMaximumImageFilter::ToString() const

Print ourselves out

*/
public ";

%javamethodmodifiers  rtk::simple::MinimumMaximumImageFilter::~MinimumMaximumImageFilter "/**
rtk::simple::MinimumMaximumImageFilter::~MinimumMaximumImageFilter()

Destructor

*/
public ";


%typemap(javaimports) rtk::simple::MinimumProjectionImageFilter "/**

Minimum projection.


This class was contributed to the Insight Journal by Gaetan Lehmann.
The original paper can be found at https://hdl.handle.net/1926/164


Gaetan Lehmann. Biologie du Developpement et de la Reproduction, INRA
de Jouy-en-Josas, France.

See:
 ProjectionImageFilter


 StandardDeviationProjectionImageFilter


 SumProjectionImageFilter


 BinaryProjectionImageFilter


 MaximumProjectionImageFilter


 MeanProjectionImageFilter

 rtk::simple::MinimumProjection for the procedural interface

 itk::MinimumProjectionImageFilter for the Doxygen on the original ITK class.


C++ includes: srtkMinimumProjectionImageFilter.h
*/"

%javamethodmodifiers  rtk::simple::MinimumProjectionImageFilter::Execute "/**
Image rtk::simple::MinimumProjectionImageFilter::Execute(const Image &image1)

Execute the filter on the input image

*/
public ";

%javamethodmodifiers  rtk::simple::MinimumProjectionImageFilter::Execute "/**
Image rtk::simple::MinimumProjectionImageFilter::Execute(const Image &image1, unsigned int projectionDimension)

Execute the filter on the input image with the given parameters

*/
public ";

%javamethodmodifiers  rtk::simple::MinimumProjectionImageFilter::GetName "/**
std::string rtk::simple::MinimumProjectionImageFilter::GetName() const

Name of this class

*/
public ";

%javamethodmodifiers  rtk::simple::MinimumProjectionImageFilter::GetProjectionDimension "/**
unsigned int rtk::simple::MinimumProjectionImageFilter::GetProjectionDimension() const
*/
public ";

%javamethodmodifiers  rtk::simple::MinimumProjectionImageFilter::MinimumProjectionImageFilter "/**
rtk::simple::MinimumProjectionImageFilter::MinimumProjectionImageFilter()

Default Constructor that takes no arguments and initializes default
parameters

*/
public ";

%javamethodmodifiers  rtk::simple::MinimumProjectionImageFilter::SetProjectionDimension "/**
Self& rtk::simple::MinimumProjectionImageFilter::SetProjectionDimension(unsigned int ProjectionDimension)
*/
public ";

%javamethodmodifiers  rtk::simple::MinimumProjectionImageFilter::ToString "/**
std::string rtk::simple::MinimumProjectionImageFilter::ToString() const

Print ourselves out

*/
public ";

%javamethodmodifiers  rtk::simple::MinimumProjectionImageFilter::~MinimumProjectionImageFilter "/**
rtk::simple::MinimumProjectionImageFilter::~MinimumProjectionImageFilter()

Destructor

*/
public ";


%typemap(javaimports) rtk::simple::MirrorPadImageFilter "/**

Increase the image size by padding with replicants of the input image
value.


MirrorPadImageFilter changes the image bounds of an image. Any added pixels are filled in
with a mirrored replica of the input image. For instance, if the
output image needs a pixel that istwo pixels to the left of the
LargestPossibleRegionof the input image, the value assigned will be
from the pixeltwo pixels inside the left boundary of the
LargestPossibleRegion. The image bounds of the output must be
specified.

Visual explanation of padding regions.This filter is implemented as a
multithreaded filter. It provides a ThreadedGenerateData() method for
its implementation.


See:
 WrapPadImageFilter , ConstantPadImageFilter
Wiki Examples:

All Examples

Pad an image using mirroring over the boundaries
See:
 rtk::simple::MirrorPad for the procedural interface

 itk::MirrorPadImageFilter for the Doxygen on the original ITK class.



C++ includes: srtkMirrorPadImageFilter.h
*/"

%javamethodmodifiers  rtk::simple::MirrorPadImageFilter::Execute "/**
Image rtk::simple::MirrorPadImageFilter::Execute(const Image &image1)

Execute the filter on the input image

*/
public ";

%javamethodmodifiers  rtk::simple::MirrorPadImageFilter::Execute "/**
Image rtk::simple::MirrorPadImageFilter::Execute(const Image &image1, const std::vector< unsigned int >
&padLowerBound, const std::vector< unsigned int > &padUpperBound)

Execute the filter on the input image with the given parameters

*/
public ";

%javamethodmodifiers  rtk::simple::MirrorPadImageFilter::GetName "/**
std::string rtk::simple::MirrorPadImageFilter::GetName() const

Name of this class

*/
public ";

%javamethodmodifiers  rtk::simple::MirrorPadImageFilter::GetPadLowerBound "/**
std::vector<unsigned int> rtk::simple::MirrorPadImageFilter::GetPadLowerBound() const
*/
public ";

%javamethodmodifiers  rtk::simple::MirrorPadImageFilter::GetPadUpperBound "/**
std::vector<unsigned int> rtk::simple::MirrorPadImageFilter::GetPadUpperBound() const
*/
public ";

%javamethodmodifiers  rtk::simple::MirrorPadImageFilter::MirrorPadImageFilter "/**
rtk::simple::MirrorPadImageFilter::MirrorPadImageFilter()

Default Constructor that takes no arguments and initializes default
parameters

*/
public ";

%javamethodmodifiers  rtk::simple::MirrorPadImageFilter::SetPadLowerBound "/**
Self& rtk::simple::MirrorPadImageFilter::SetPadLowerBound(const std::vector< unsigned int > &PadLowerBound)
*/
public ";

%javamethodmodifiers  rtk::simple::MirrorPadImageFilter::SetPadUpperBound "/**
Self& rtk::simple::MirrorPadImageFilter::SetPadUpperBound(const std::vector< unsigned int > &PadUpperBound)
*/
public ";

%javamethodmodifiers  rtk::simple::MirrorPadImageFilter::ToString "/**
std::string rtk::simple::MirrorPadImageFilter::ToString() const

Print ourselves out

*/
public ";

%javamethodmodifiers  rtk::simple::MirrorPadImageFilter::~MirrorPadImageFilter "/**
rtk::simple::MirrorPadImageFilter::~MirrorPadImageFilter()

Destructor

*/
public ";


%typemap(javaimports) rtk::simple::ModulusImageFilter "/**

Computes the modulus (x % dividend) pixel-wise.


The input pixel type must support the c++ modulus operator (%).

If the dividend is zero, the maximum value will be returned.


Gaetan Lehmann. Biologie du Developpement et de la Reproduction, INRA
de Jouy-en-Josas, France.

See:
 rtk::simple::Modulus for the procedural interface

 itk::ModulusImageFilter for the Doxygen on the original ITK class.


C++ includes: srtkModulusImageFilter.h
*/"

%javamethodmodifiers  rtk::simple::ModulusImageFilter::Execute "/**
Image rtk::simple::ModulusImageFilter::Execute(const Image &image1, const Image &image2)

Execute the filter on the input images

*/
public ";

%javamethodmodifiers  rtk::simple::ModulusImageFilter::Execute "/**
Image rtk::simple::ModulusImageFilter::Execute(const Image &image1, uint32_t constant)

Execute the filter with an image and a constant

*/
public ";

%javamethodmodifiers  rtk::simple::ModulusImageFilter::Execute "/**
Image rtk::simple::ModulusImageFilter::Execute(uint32_t constant, const Image &image2)
*/
public ";

%javamethodmodifiers  rtk::simple::ModulusImageFilter::GetName "/**
std::string rtk::simple::ModulusImageFilter::GetName() const

Name of this class

*/
public ";

%javamethodmodifiers  rtk::simple::ModulusImageFilter::ModulusImageFilter "/**
rtk::simple::ModulusImageFilter::ModulusImageFilter()

Default Constructor that takes no arguments and initializes default
parameters

*/
public ";

%javamethodmodifiers  rtk::simple::ModulusImageFilter::ToString "/**
std::string rtk::simple::ModulusImageFilter::ToString() const

Print ourselves out

*/
public ";

%javamethodmodifiers  rtk::simple::ModulusImageFilter::~ModulusImageFilter "/**
rtk::simple::ModulusImageFilter::~ModulusImageFilter()

Destructor

*/
public ";


%typemap(javaimports) rtk::simple::MomentsThresholdImageFilter "/**

Threshold an image using the Moments Threshold.


This filter creates a binary thresholded image that separates an image
into foreground and background components. The filter computes the
threshold using the MomentsThresholdCalculator and applies that theshold to the input image using the BinaryThresholdImageFilter .


Richard Beare. Department of Medicine, Monash University, Melbourne,
Australia.
 Gaetan Lehmann. Biologie du Developpement et de la Reproduction, INRA
de Jouy-en-Josas, France.

This implementation was taken from the Insight Journal paper: https://hdl.handle.net/10380/3279 or http://www.insight-journal.org/browse/publication/811


See:
 HistogramThresholdImageFilter

 rtk::simple::MomentsThreshold for the procedural interface

 itk::MomentsThresholdImageFilter for the Doxygen on the original ITK class.


C++ includes: srtkMomentsThresholdImageFilter.h
*/"

%javamethodmodifiers  rtk::simple::MomentsThresholdImageFilter::Execute "/**
Image rtk::simple::MomentsThresholdImageFilter::Execute(const Image &image, const Image &maskImage)

Execute the filter on the input image

*/
public ";

%javamethodmodifiers  rtk::simple::MomentsThresholdImageFilter::Execute "/**
Image rtk::simple::MomentsThresholdImageFilter::Execute(const Image &image)
*/
public ";

%javamethodmodifiers  rtk::simple::MomentsThresholdImageFilter::Execute "/**
Image rtk::simple::MomentsThresholdImageFilter::Execute(const Image &image, const Image &maskImage, uint8_t insideValue,
uint8_t outsideValue, uint32_t numberOfHistogramBins, bool maskOutput,
uint8_t maskValue)

Execute the filter on the input image with the given parameters

*/
public ";

%javamethodmodifiers  rtk::simple::MomentsThresholdImageFilter::Execute "/**
Image rtk::simple::MomentsThresholdImageFilter::Execute(const Image &image, uint8_t insideValue, uint8_t outsideValue,
uint32_t numberOfHistogramBins, bool maskOutput, uint8_t maskValue)
*/
public ";

%javamethodmodifiers  rtk::simple::MomentsThresholdImageFilter::GetInsideValue "/**
uint8_t rtk::simple::MomentsThresholdImageFilter::GetInsideValue() const

Get the \"inside\" pixel value.

*/
public ";

%javamethodmodifiers  rtk::simple::MomentsThresholdImageFilter::GetMaskOutput "/**
bool rtk::simple::MomentsThresholdImageFilter::GetMaskOutput() const
*/
public ";

%javamethodmodifiers  rtk::simple::MomentsThresholdImageFilter::GetMaskValue "/**
uint8_t rtk::simple::MomentsThresholdImageFilter::GetMaskValue() const
*/
public ";

%javamethodmodifiers  rtk::simple::MomentsThresholdImageFilter::GetName "/**
std::string rtk::simple::MomentsThresholdImageFilter::GetName() const

Name of this class

*/
public ";

%javamethodmodifiers  rtk::simple::MomentsThresholdImageFilter::GetNumberOfHistogramBins "/**
uint32_t rtk::simple::MomentsThresholdImageFilter::GetNumberOfHistogramBins() const
*/
public ";

%javamethodmodifiers  rtk::simple::MomentsThresholdImageFilter::GetOutsideValue "/**
uint8_t rtk::simple::MomentsThresholdImageFilter::GetOutsideValue() const

Get the \"outside\" pixel value.

*/
public ";

%javamethodmodifiers  rtk::simple::MomentsThresholdImageFilter::GetThreshold "/**
double rtk::simple::MomentsThresholdImageFilter::GetThreshold() const

Get the computed threshold.


This is a measurement. Its value is updated in the Execute methods, so
the value will only be valid after an execution.

*/
public ";

%javamethodmodifiers  rtk::simple::MomentsThresholdImageFilter::MaskOutputOff "/**
Self& rtk::simple::MomentsThresholdImageFilter::MaskOutputOff()
*/
public ";

%javamethodmodifiers  rtk::simple::MomentsThresholdImageFilter::MaskOutputOn "/**
Self& rtk::simple::MomentsThresholdImageFilter::MaskOutputOn()

Set the value of MaskOutput to true or false respectfully.

*/
public ";

%javamethodmodifiers  rtk::simple::MomentsThresholdImageFilter::MomentsThresholdImageFilter "/**
rtk::simple::MomentsThresholdImageFilter::MomentsThresholdImageFilter()

Default Constructor that takes no arguments and initializes default
parameters

*/
public ";

%javamethodmodifiers  rtk::simple::MomentsThresholdImageFilter::SetInsideValue "/**
Self& rtk::simple::MomentsThresholdImageFilter::SetInsideValue(uint8_t InsideValue)

Set the \"inside\" pixel value.

*/
public ";

%javamethodmodifiers  rtk::simple::MomentsThresholdImageFilter::SetMaskOutput "/**
Self& rtk::simple::MomentsThresholdImageFilter::SetMaskOutput(bool MaskOutput)

Do you want the output to be masked by the mask used in histogram
construction. Only relevant if masking is in use.

*/
public ";

%javamethodmodifiers  rtk::simple::MomentsThresholdImageFilter::SetMaskValue "/**
Self& rtk::simple::MomentsThresholdImageFilter::SetMaskValue(uint8_t MaskValue)

The value in the mask image, if used, indicating voxels that should be
included. Default is the max of pixel type, as in the
MaskedImageToHistogramFilter

*/
public ";

%javamethodmodifiers  rtk::simple::MomentsThresholdImageFilter::SetNumberOfHistogramBins "/**
Self& rtk::simple::MomentsThresholdImageFilter::SetNumberOfHistogramBins(uint32_t NumberOfHistogramBins)

Set/Get the number of histogram bins.

*/
public ";

%javamethodmodifiers  rtk::simple::MomentsThresholdImageFilter::SetOutsideValue "/**
Self& rtk::simple::MomentsThresholdImageFilter::SetOutsideValue(uint8_t OutsideValue)

Set the \"outside\" pixel value. The default value NumericTraits<OutputPixelType>::Zero.

*/
public ";

%javamethodmodifiers  rtk::simple::MomentsThresholdImageFilter::ToString "/**
std::string rtk::simple::MomentsThresholdImageFilter::ToString() const

Print ourselves out

*/
public ";

%javamethodmodifiers  rtk::simple::MomentsThresholdImageFilter::~MomentsThresholdImageFilter "/**
rtk::simple::MomentsThresholdImageFilter::~MomentsThresholdImageFilter()

Destructor

*/
public ";


%typemap(javaimports) rtk::simple::MorphologicalGradientImageFilter "/**

gray scale dilation of an image


Dilate an image using grayscale morphology. Dilation takes the maximum
of all the pixels identified by the structuring element.

The structuring element is assumed to be composed of binary values
(zero or one). Only elements of the structuring element having values
> 0 are candidates for affecting the center pixel.


See:
 MorphologyImageFilter , GrayscaleFunctionDilateImageFilter , BinaryDilateImageFilter

 rtk::simple::MorphologicalGradient for the procedural interface

 itk::MorphologicalGradientImageFilter for the Doxygen on the original ITK class.


C++ includes: srtkMorphologicalGradientImageFilter.h
*/"

%javamethodmodifiers  rtk::simple::MorphologicalGradientImageFilter::Execute "/**
Image rtk::simple::MorphologicalGradientImageFilter::Execute(const Image &image1)

Execute the filter on the input image

*/
public ";

%javamethodmodifiers  rtk::simple::MorphologicalGradientImageFilter::GetKernelRadius "/**
std::vector<uint32_t> rtk::simple::MorphologicalGradientImageFilter::GetKernelRadius() const
*/
public ";

%javamethodmodifiers  rtk::simple::MorphologicalGradientImageFilter::GetKernelType "/**
KernelEnum rtk::simple::MorphologicalGradientImageFilter::GetKernelType() const
*/
public ";

%javamethodmodifiers  rtk::simple::MorphologicalGradientImageFilter::GetName "/**
std::string rtk::simple::MorphologicalGradientImageFilter::GetName() const

Name of this class

*/
public ";

%javamethodmodifiers  rtk::simple::MorphologicalGradientImageFilter::MorphologicalGradientImageFilter "/**
rtk::simple::MorphologicalGradientImageFilter::MorphologicalGradientImageFilter()

Default Constructor that takes no arguments and initializes default
parameters

*/
public ";

%javamethodmodifiers  rtk::simple::MorphologicalGradientImageFilter::SetKernelRadius "/**
Self& rtk::simple::MorphologicalGradientImageFilter::SetKernelRadius(uint32_t r)

Kernel radius as a scale for isotropic structures

*/
public ";

%javamethodmodifiers  rtk::simple::MorphologicalGradientImageFilter::SetKernelRadius "/**
Self& rtk::simple::MorphologicalGradientImageFilter::SetKernelRadius(const std::vector< uint32_t > &r)

Set/Get the radius of the kernel structuring element as a vector.

If the dimension of the image is greater then the length of r, then
the radius will be padded. If it is less the r will be truncated.

*/
public ";

%javamethodmodifiers  rtk::simple::MorphologicalGradientImageFilter::SetKernelType "/**
Self& rtk::simple::MorphologicalGradientImageFilter::SetKernelType(KernelEnum t)

Set/Get the kernel or structuring elemenent used for the morphology

*/
public ";

%javamethodmodifiers  rtk::simple::MorphologicalGradientImageFilter::SetKernelType "/**
Self& rtk::simple::MorphologicalGradientImageFilter::SetKernelType(KernelType t)
*/
public ";

%javamethodmodifiers  rtk::simple::MorphologicalGradientImageFilter::ToString "/**
std::string rtk::simple::MorphologicalGradientImageFilter::ToString() const

Print ourselves out

*/
public ";

%javamethodmodifiers  rtk::simple::MorphologicalGradientImageFilter::~MorphologicalGradientImageFilter "/**
rtk::simple::MorphologicalGradientImageFilter::~MorphologicalGradientImageFilter()

Destructor

*/
public ";


%typemap(javaimports) rtk::simple::MorphologicalWatershedFromMarkersImageFilter "/**

Morphological watershed transform from markers.


The watershed transform is a tool for image segmentation that is fast
and flexible and potentially fairly parameter free. It was originally
derived from a geophysical model of rain falling on a terrain and a
variety of more formal definitions have been devised to allow
development of practical algorithms. If an image is considered as a
terrain and divided into catchment basins then the hope is that each
catchment basin would contain an object of interest.

The output is a label image. A label image, sometimes referred to as a
categorical image, has unique values for each region. For example, if
a watershed produces 2 regions, all pixels belonging to one region
would have value A, and all belonging to the other might have value B.
Unassigned pixels, such as watershed lines, might have the background
value (0 by convention).

The simplest way of using the watershed is to preprocess the image we
want to segment so that the boundaries of our objects are bright (e.g
apply an edge detector) and compute the watershed transform of the
edge image. Watershed lines will correspond to the boundaries and our
problem will be solved. This is rarely useful in practice because
there are always more regional minima than there are objects, either
due to noise or natural variations in the object surfaces. Therefore,
while many watershed lines do lie on significant boundaries, there are
many that don't. Various methods can be used to reduce the number of
minima in the image, like thresholding the smallest values, filtering
the minima and/or smoothing the image.

This filter use another approach to avoid the problem of over
segmentation: it let the user provide a marker image which mark the
minima in the input image and give them a label. The minima are
imposed in the input image by the markers. The labels of the output
image are the label of the marker image.

The morphological watershed transform algorithm is described in
Chapter 9.2 of Pierre Soille's book \"Morphological Image Analysis:
Principles and Applications\", Second Edition, Springer, 2003.

This code was contributed in the Insight Journal paper: \"The
watershed transform in ITK - discussion and new developments\" by
Beare R., Lehmann G. https://hdl.handle.net/1926/202 http://www.insight-journal.org/browse/publication/92


Gaetan Lehmann. Biologie du Developpement et de la Reproduction, INRA
de Jouy-en-Josas, France.
 Richard Beare. Department of Medicine, Monash University, Melbourne,
Australia.


See:
 WatershedImageFilter , MorphologicalWatershedImageFilter

 rtk::simple::MorphologicalWatershedFromMarkers for the procedural interface

 itk::MorphologicalWatershedFromMarkersImageFilter for the Doxygen on the original ITK class.


C++ includes: srtkMorphologicalWatershedFromMarkersImageFilter.h
*/"

%javamethodmodifiers  rtk::simple::MorphologicalWatershedFromMarkersImageFilter::Execute "/**
Image rtk::simple::MorphologicalWatershedFromMarkersImageFilter::Execute(const Image &image, const Image &markerImage)

Execute the filter on the input image

*/
public ";

%javamethodmodifiers  rtk::simple::MorphologicalWatershedFromMarkersImageFilter::Execute "/**
Image rtk::simple::MorphologicalWatershedFromMarkersImageFilter::Execute(const Image &image, const Image &markerImage, bool markWatershedLine,
bool fullyConnected)

Execute the filter on the input image with the given parameters

*/
public ";

%javamethodmodifiers  rtk::simple::MorphologicalWatershedFromMarkersImageFilter::FullyConnectedOff "/**
Self& rtk::simple::MorphologicalWatershedFromMarkersImageFilter::FullyConnectedOff()
*/
public ";

%javamethodmodifiers  rtk::simple::MorphologicalWatershedFromMarkersImageFilter::FullyConnectedOn "/**
Self& rtk::simple::MorphologicalWatershedFromMarkersImageFilter::FullyConnectedOn()

Set the value of FullyConnected to true or false respectfully.

*/
public ";

%javamethodmodifiers  rtk::simple::MorphologicalWatershedFromMarkersImageFilter::GetFullyConnected "/**
bool rtk::simple::MorphologicalWatershedFromMarkersImageFilter::GetFullyConnected() const

Set/Get whether the connected components are defined strictly by face
connectivity or by face+edge+vertex connectivity. Default is
FullyConnectedOff. For objects that are 1 pixel wide, use
FullyConnectedOn.

*/
public ";

%javamethodmodifiers  rtk::simple::MorphologicalWatershedFromMarkersImageFilter::GetMarkWatershedLine "/**
bool rtk::simple::MorphologicalWatershedFromMarkersImageFilter::GetMarkWatershedLine() const

Set/Get whether the watershed pixel must be marked or not. Default is
true. Set it to false do not only avoid writing watershed pixels, it
also decrease algorithm complexity.

*/
public ";

%javamethodmodifiers  rtk::simple::MorphologicalWatershedFromMarkersImageFilter::GetName "/**
std::string rtk::simple::MorphologicalWatershedFromMarkersImageFilter::GetName() const

Name of this class

*/
public ";

%javamethodmodifiers  rtk::simple::MorphologicalWatershedFromMarkersImageFilter::MarkWatershedLineOff "/**
Self& rtk::simple::MorphologicalWatershedFromMarkersImageFilter::MarkWatershedLineOff()
*/
public ";

%javamethodmodifiers  rtk::simple::MorphologicalWatershedFromMarkersImageFilter::MarkWatershedLineOn "/**
Self& rtk::simple::MorphologicalWatershedFromMarkersImageFilter::MarkWatershedLineOn()

Set the value of MarkWatershedLine to true or false respectfully.

*/
public ";

%javamethodmodifiers  rtk::simple::MorphologicalWatershedFromMarkersImageFilter::MorphologicalWatershedFromMarkersImageFilter "/**
rtk::simple::MorphologicalWatershedFromMarkersImageFilter::MorphologicalWatershedFromMarkersImageFilter()

Default Constructor that takes no arguments and initializes default
parameters

*/
public ";

%javamethodmodifiers  rtk::simple::MorphologicalWatershedFromMarkersImageFilter::SetFullyConnected "/**
Self& rtk::simple::MorphologicalWatershedFromMarkersImageFilter::SetFullyConnected(bool FullyConnected)

Set/Get whether the connected components are defined strictly by face
connectivity or by face+edge+vertex connectivity. Default is
FullyConnectedOff. For objects that are 1 pixel wide, use
FullyConnectedOn.

*/
public ";

%javamethodmodifiers  rtk::simple::MorphologicalWatershedFromMarkersImageFilter::SetMarkWatershedLine "/**
Self& rtk::simple::MorphologicalWatershedFromMarkersImageFilter::SetMarkWatershedLine(bool MarkWatershedLine)

Set/Get whether the watershed pixel must be marked or not. Default is
true. Set it to false do not only avoid writing watershed pixels, it
also decrease algorithm complexity.

*/
public ";

%javamethodmodifiers  rtk::simple::MorphologicalWatershedFromMarkersImageFilter::ToString "/**
std::string rtk::simple::MorphologicalWatershedFromMarkersImageFilter::ToString() const

Print ourselves out

*/
public ";

%javamethodmodifiers  rtk::simple::MorphologicalWatershedFromMarkersImageFilter::~MorphologicalWatershedFromMarkersImageFilter "/**
rtk::simple::MorphologicalWatershedFromMarkersImageFilter::~MorphologicalWatershedFromMarkersImageFilter()

Destructor

*/
public ";


%typemap(javaimports) rtk::simple::MorphologicalWatershedImageFilter "/**

TODO.


TODO

Watershed pixel are labeled 0. TOutputImage should be an integer type.
Labels of output image are in no particular order. You can reorder the
labels such that object labels are consecutive and sorted based on
object size by passing the output of this filter to a RelabelComponentImageFilter .

The morphological watershed transform algorithm is described in
Chapter 9.2 of Pierre Soille's book \"Morphological Image Analysis:
Principles and Applications\", Second Edition, Springer, 2003.

This code was contributed in the Insight Journal paper: \"The
watershed transform in ITK - discussion and new developments\" by
Beare R., Lehmann G. https://hdl.handle.net/1926/202 http://www.insight-journal.org/browse/publication/92


Gaetan Lehmann. Biologie du Developpement et de la Reproduction, INRA
de Jouy-en-Josas, France.

See:
 WatershedImageFilter , MorphologicalWatershedFromMarkersImageFilter

 rtk::simple::MorphologicalWatershed for the procedural interface

 itk::MorphologicalWatershedImageFilter for the Doxygen on the original ITK class.


C++ includes: srtkMorphologicalWatershedImageFilter.h
*/"

%javamethodmodifiers  rtk::simple::MorphologicalWatershedImageFilter::Execute "/**
Image rtk::simple::MorphologicalWatershedImageFilter::Execute(const Image &image1)

Execute the filter on the input image

*/
public ";

%javamethodmodifiers  rtk::simple::MorphologicalWatershedImageFilter::Execute "/**
Image rtk::simple::MorphologicalWatershedImageFilter::Execute(const Image &image1, double level, bool markWatershedLine, bool
fullyConnected)

Execute the filter on the input image with the given parameters

*/
public ";

%javamethodmodifiers  rtk::simple::MorphologicalWatershedImageFilter::FullyConnectedOff "/**
Self& rtk::simple::MorphologicalWatershedImageFilter::FullyConnectedOff()
*/
public ";

%javamethodmodifiers  rtk::simple::MorphologicalWatershedImageFilter::FullyConnectedOn "/**
Self& rtk::simple::MorphologicalWatershedImageFilter::FullyConnectedOn()

Set the value of FullyConnected to true or false respectfully.

*/
public ";

%javamethodmodifiers  rtk::simple::MorphologicalWatershedImageFilter::GetFullyConnected "/**
bool rtk::simple::MorphologicalWatershedImageFilter::GetFullyConnected() const

Set/Get whether the connected components are defined strictly by face
connectivity or by face+edge+vertex connectivity. Default is
FullyConnectedOff. For objects that are 1 pixel wide, use
FullyConnectedOn.

*/
public ";

%javamethodmodifiers  rtk::simple::MorphologicalWatershedImageFilter::GetLevel "/**
double rtk::simple::MorphologicalWatershedImageFilter::GetLevel() const
*/
public ";

%javamethodmodifiers  rtk::simple::MorphologicalWatershedImageFilter::GetMarkWatershedLine "/**
bool rtk::simple::MorphologicalWatershedImageFilter::GetMarkWatershedLine() const

Set/Get whether the watershed pixel must be marked or not. Default is
true. Set it to false do not only avoid writing watershed pixels, it
also decrease algorithm complexity.

*/
public ";

%javamethodmodifiers  rtk::simple::MorphologicalWatershedImageFilter::GetName "/**
std::string rtk::simple::MorphologicalWatershedImageFilter::GetName() const

Name of this class

*/
public ";

%javamethodmodifiers  rtk::simple::MorphologicalWatershedImageFilter::MarkWatershedLineOff "/**
Self& rtk::simple::MorphologicalWatershedImageFilter::MarkWatershedLineOff()
*/
public ";

%javamethodmodifiers  rtk::simple::MorphologicalWatershedImageFilter::MarkWatershedLineOn "/**
Self& rtk::simple::MorphologicalWatershedImageFilter::MarkWatershedLineOn()

Set the value of MarkWatershedLine to true or false respectfully.

*/
public ";

%javamethodmodifiers  rtk::simple::MorphologicalWatershedImageFilter::MorphologicalWatershedImageFilter "/**
rtk::simple::MorphologicalWatershedImageFilter::MorphologicalWatershedImageFilter()

Default Constructor that takes no arguments and initializes default
parameters

*/
public ";

%javamethodmodifiers  rtk::simple::MorphologicalWatershedImageFilter::SetFullyConnected "/**
Self& rtk::simple::MorphologicalWatershedImageFilter::SetFullyConnected(bool FullyConnected)

Set/Get whether the connected components are defined strictly by face
connectivity or by face+edge+vertex connectivity. Default is
FullyConnectedOff. For objects that are 1 pixel wide, use
FullyConnectedOn.

*/
public ";

%javamethodmodifiers  rtk::simple::MorphologicalWatershedImageFilter::SetLevel "/**
Self& rtk::simple::MorphologicalWatershedImageFilter::SetLevel(double Level)
*/
public ";

%javamethodmodifiers  rtk::simple::MorphologicalWatershedImageFilter::SetMarkWatershedLine "/**
Self& rtk::simple::MorphologicalWatershedImageFilter::SetMarkWatershedLine(bool MarkWatershedLine)

Set/Get whether the watershed pixel must be marked or not. Default is
true. Set it to false do not only avoid writing watershed pixels, it
also decrease algorithm complexity.

*/
public ";

%javamethodmodifiers  rtk::simple::MorphologicalWatershedImageFilter::ToString "/**
std::string rtk::simple::MorphologicalWatershedImageFilter::ToString() const

Print ourselves out

*/
public ";

%javamethodmodifiers  rtk::simple::MorphologicalWatershedImageFilter::~MorphologicalWatershedImageFilter "/**
rtk::simple::MorphologicalWatershedImageFilter::~MorphologicalWatershedImageFilter()

Destructor

*/
public ";


%typemap(javaimports) rtk::simple::MultiLabelSTAPLEImageFilter "/**

This filter performs a pixelwise combination of an arbitrary number of
input images, where each of them represents a segmentation of the same
scene (i.e., image).


The labelings in the images are weighted relative to each other based
on their \"performance\" as estimated by an expectation-maximization
algorithm. In the process, a ground truth segmentation is estimated,
and the estimated performances of the individual segmentations are
relative to this estimated ground truth.

The algorithm is based on the binary STAPLE algorithm by Warfield et
al. as published originally in

S. Warfield, K. Zou, W. Wells, \"Validation of image segmentation and
expert quality with an expectation-maximization algorithm\" in MICCAI
2002: Fifth International Conference on Medical Image Computing and Computer-Assisted Intervention, Springer-Verlag,
Heidelberg, Germany, 2002, pp. 298-306

The multi-label algorithm implemented here is described in detail in

T. Rohlfing, D. B. Russakoff, and C. R. Maurer, Jr., \"Performance-
based classifier combination in atlas-based image segmentation using
expectation-maximization parameter estimation,\" IEEE Transactions on
Medical Imaging, vol. 23, pp. 983-994, Aug. 2004.

INPUTS
All input volumes to this filter must be segmentations of an image,
that is, they must have discrete pixel values where each value
represents a different segmented object.
 Input volumes must all contain the same size RequestedRegions. Not all input images must contain all possible labels, but all label
values must have the same meaning in all images.

The filter can optionally be provided with estimates for the a priori
class probabilities through the SetPriorProbabilities function. If no
estimate is provided, one is automatically generated by analyzing the
relative frequencies of the labels in the input images.

OUTPUTS
The filter produces a single output volume. Each output pixel contains
the label that has the highest probability of being the correct label,
based on the performance models of the individual segmentations. If
the maximum probaility is not unique, i.e., if more than one label
have a maximum probability, then an \"undecided\" label is assigned to
that output pixel.
 By default, the label used for undecided pixels is the maximum label
value used in the input images plus one. Since it is possible for an
image with 8 bit pixel values to use all 256 possible label values, it
is permissible to combine 8 bit (i.e., byte) images into a 16 bit
(i.e., short) output image.

In addition to the combined image, the estimated confusion matrices
for each of the input segmentations can be obtained through the
GetConfusionMatrix member function.

PARAMETERS
The label used for \"undecided\" labels can be set using
SetLabelForUndecidedPixels. This functionality can be unset by calling
UnsetLabelForUndecidedPixels.
 A termination threshold for the EM iteration can be defined by
calling SetTerminationUpdateThreshold. The iteration terminates once
no single parameter of any confusion matrix changes by less than this
threshold. Alternatively, a maximum number of iterations can be
specified by calling SetMaximumNumberOfIterations. The algorithm may
still terminate after a smaller number of iterations if the
termination threshold criterion is satisfied.

EVENTS
This filter invokes IterationEvent() at each iteration of the E-M
algorithm. Setting the AbortGenerateData() flag will cause the
algorithm to halt after the current iteration and produce results just
as if it had converged. The algorithm makes no attempt to report its
progress since the number of iterations needed cannot be known in
advance.

Torsten Rohlfing, SRI International, Neuroscience Program

See:
 rtk::simple::MultiLabelSTAPLE for the procedural interface


C++ includes: srtkMultiLabelSTAPLEImageFilter.h
*/"

%javamethodmodifiers  rtk::simple::MultiLabelSTAPLEImageFilter::Execute "/**
Image rtk::simple::MultiLabelSTAPLEImageFilter::Execute(const std::vector< Image > &images)

Execute the filter on the input images

*/
public ";

%javamethodmodifiers  rtk::simple::MultiLabelSTAPLEImageFilter::Execute "/**
Image rtk::simple::MultiLabelSTAPLEImageFilter::Execute(const Image &image1)
*/
public ";

%javamethodmodifiers  rtk::simple::MultiLabelSTAPLEImageFilter::Execute "/**
Image rtk::simple::MultiLabelSTAPLEImageFilter::Execute(const Image &image1, const Image &image2)
*/
public ";

%javamethodmodifiers  rtk::simple::MultiLabelSTAPLEImageFilter::Execute "/**
Image rtk::simple::MultiLabelSTAPLEImageFilter::Execute(const Image &image1, const Image &image2, const Image &image3)
*/
public ";

%javamethodmodifiers  rtk::simple::MultiLabelSTAPLEImageFilter::Execute "/**
Image rtk::simple::MultiLabelSTAPLEImageFilter::Execute(const Image &image1, const Image &image2, const Image &image3, const
Image &image4)
*/
public ";

%javamethodmodifiers  rtk::simple::MultiLabelSTAPLEImageFilter::Execute "/**
Image rtk::simple::MultiLabelSTAPLEImageFilter::Execute(const Image &image1, const Image &image2, const Image &image3, const
Image &image4, const Image &image5)
*/
public ";

%javamethodmodifiers  rtk::simple::MultiLabelSTAPLEImageFilter::Execute "/**
Image rtk::simple::MultiLabelSTAPLEImageFilter::Execute(const std::vector< Image > &images, uint64_t labelForUndecidedPixels,
float terminationUpdateThreshold, unsigned int
maximumNumberOfIterations, std::vector< float > priorProbabilities)

Execute the filter on the input images with the given parameters

*/
public ";

%javamethodmodifiers  rtk::simple::MultiLabelSTAPLEImageFilter::Execute "/**
Image rtk::simple::MultiLabelSTAPLEImageFilter::Execute(const Image &image1, uint64_t labelForUndecidedPixels, float
terminationUpdateThreshold, unsigned int maximumNumberOfIterations,
std::vector< float > priorProbabilities)
*/
public ";

%javamethodmodifiers  rtk::simple::MultiLabelSTAPLEImageFilter::Execute "/**
Image rtk::simple::MultiLabelSTAPLEImageFilter::Execute(const Image &image1, const Image &image2, uint64_t
labelForUndecidedPixels, float terminationUpdateThreshold, unsigned
int maximumNumberOfIterations, std::vector< float >
priorProbabilities)
*/
public ";

%javamethodmodifiers  rtk::simple::MultiLabelSTAPLEImageFilter::Execute "/**
Image rtk::simple::MultiLabelSTAPLEImageFilter::Execute(const Image &image1, const Image &image2, const Image &image3,
uint64_t labelForUndecidedPixels, float terminationUpdateThreshold,
unsigned int maximumNumberOfIterations, std::vector< float >
priorProbabilities)
*/
public ";

%javamethodmodifiers  rtk::simple::MultiLabelSTAPLEImageFilter::Execute "/**
Image rtk::simple::MultiLabelSTAPLEImageFilter::Execute(const Image &image1, const Image &image2, const Image &image3, const
Image &image4, uint64_t labelForUndecidedPixels, float
terminationUpdateThreshold, unsigned int maximumNumberOfIterations,
std::vector< float > priorProbabilities)
*/
public ";

%javamethodmodifiers  rtk::simple::MultiLabelSTAPLEImageFilter::Execute "/**
Image rtk::simple::MultiLabelSTAPLEImageFilter::Execute(const Image &image1, const Image &image2, const Image &image3, const
Image &image4, const Image &image5, uint64_t labelForUndecidedPixels,
float terminationUpdateThreshold, unsigned int
maximumNumberOfIterations, std::vector< float > priorProbabilities)
*/
public ";

%javamethodmodifiers  rtk::simple::MultiLabelSTAPLEImageFilter::GetConfusionMatrix "/**
std::vector<float> rtk::simple::MultiLabelSTAPLEImageFilter::GetConfusionMatrix(unsigned int input) const

Get confusion matrix for the i-th input segmentation.

This is an active measurement. It may be accessed while the filter is
being executing in command call-backs and can be accessed after
execution.

*/
public ";

%javamethodmodifiers  rtk::simple::MultiLabelSTAPLEImageFilter::GetLabelForUndecidedPixels "/**
uint64_t rtk::simple::MultiLabelSTAPLEImageFilter::GetLabelForUndecidedPixels() const

     Get label value used for undecided pixels.

After updating the filter, this function returns the actual label
value used for undecided pixels in the current output. Note that this
value is overwritten when SetLabelForUndecidedPixels is called and the
new value only becomes effective upon the next filter update.

*/
public ";

%javamethodmodifiers  rtk::simple::MultiLabelSTAPLEImageFilter::GetMaximumNumberOfIterations "/**
unsigned int rtk::simple::MultiLabelSTAPLEImageFilter::GetMaximumNumberOfIterations() const

Set maximum number of iterations.

*/
public ";

%javamethodmodifiers  rtk::simple::MultiLabelSTAPLEImageFilter::GetName "/**
std::string rtk::simple::MultiLabelSTAPLEImageFilter::GetName() const

Name of this class

*/
public ";

%javamethodmodifiers  rtk::simple::MultiLabelSTAPLEImageFilter::GetPriorProbabilities "/**
std::vector<float> rtk::simple::MultiLabelSTAPLEImageFilter::GetPriorProbabilities() const

     Get prior class probabilities.

After updating the filter, this function returns the actual prior
class probabilities. If these were not previously set by a call to
SetPriorProbabilities, then they are estimated from the input
segmentations and the result is available through this function.

*/
public ";

%javamethodmodifiers  rtk::simple::MultiLabelSTAPLEImageFilter::GetTerminationUpdateThreshold "/**
float rtk::simple::MultiLabelSTAPLEImageFilter::GetTerminationUpdateThreshold() const

Set termination threshold based on confusion matrix parameter updates.

*/
public ";

%javamethodmodifiers  rtk::simple::MultiLabelSTAPLEImageFilter::MultiLabelSTAPLEImageFilter "/**
rtk::simple::MultiLabelSTAPLEImageFilter::MultiLabelSTAPLEImageFilter()

Default Constructor that takes no arguments and initializes default
parameters

*/
public ";

%javamethodmodifiers  rtk::simple::MultiLabelSTAPLEImageFilter::SetLabelForUndecidedPixels "/**
Self& rtk::simple::MultiLabelSTAPLEImageFilter::SetLabelForUndecidedPixels(uint64_t LabelForUndecidedPixels)

Set label value for undecided pixels.

*/
public ";

%javamethodmodifiers  rtk::simple::MultiLabelSTAPLEImageFilter::SetMaximumNumberOfIterations "/**
Self& rtk::simple::MultiLabelSTAPLEImageFilter::SetMaximumNumberOfIterations(unsigned int MaximumNumberOfIterations)

Set maximum number of iterations.

*/
public ";

%javamethodmodifiers  rtk::simple::MultiLabelSTAPLEImageFilter::SetPriorProbabilities "/**
Self& rtk::simple::MultiLabelSTAPLEImageFilter::SetPriorProbabilities(std::vector< float > PriorProbabilities)

    Set manual estimates for the a priori class probabilities.The size
of the array must be greater than the value of the largest label. The index into the array corresponds to the label
value in the segmented image for the class.

*/
public ";

%javamethodmodifiers  rtk::simple::MultiLabelSTAPLEImageFilter::SetTerminationUpdateThreshold "/**
Self& rtk::simple::MultiLabelSTAPLEImageFilter::SetTerminationUpdateThreshold(float TerminationUpdateThreshold)

Set termination threshold based on confusion matrix parameter updates.

*/
public ";

%javamethodmodifiers  rtk::simple::MultiLabelSTAPLEImageFilter::ToString "/**
std::string rtk::simple::MultiLabelSTAPLEImageFilter::ToString() const

Print ourselves out

*/
public ";

%javamethodmodifiers  rtk::simple::MultiLabelSTAPLEImageFilter::~MultiLabelSTAPLEImageFilter "/**
rtk::simple::MultiLabelSTAPLEImageFilter::~MultiLabelSTAPLEImageFilter()

Destructor

*/
public ";


%typemap(javaimports) rtk::simple::MultiplyImageFilter "/**

Pixel-wise multiplication of two images.


This class is templated over the types of the two input images and the
type of the output image. Numeric conversions (castings) are done by
the C++ defaults.

Wiki Examples:

All Examples

Multiply two images together

Multiply every pixel in an image by a constant
See:
 rtk::simple::Multiply for the procedural interface

 itk::MultiplyImageFilter for the Doxygen on the original ITK class.



C++ includes: srtkMultiplyImageFilter.h
*/"

%javamethodmodifiers  rtk::simple::MultiplyImageFilter::Execute "/**
Image rtk::simple::MultiplyImageFilter::Execute(const Image &image1, const Image &image2)

Execute the filter on the input images

*/
public ";

%javamethodmodifiers  rtk::simple::MultiplyImageFilter::Execute "/**
Image rtk::simple::MultiplyImageFilter::Execute(const Image &image1, double constant)

Execute the filter with an image and a constant

*/
public ";

%javamethodmodifiers  rtk::simple::MultiplyImageFilter::Execute "/**
Image rtk::simple::MultiplyImageFilter::Execute(double constant, const Image &image2)
*/
public ";

%javamethodmodifiers  rtk::simple::MultiplyImageFilter::GetName "/**
std::string rtk::simple::MultiplyImageFilter::GetName() const

Name of this class

*/
public ";

%javamethodmodifiers  rtk::simple::MultiplyImageFilter::MultiplyImageFilter "/**
rtk::simple::MultiplyImageFilter::MultiplyImageFilter()

Default Constructor that takes no arguments and initializes default
parameters

*/
public ";

%javamethodmodifiers  rtk::simple::MultiplyImageFilter::ToString "/**
std::string rtk::simple::MultiplyImageFilter::ToString() const

Print ourselves out

*/
public ";

%javamethodmodifiers  rtk::simple::MultiplyImageFilter::~MultiplyImageFilter "/**
rtk::simple::MultiplyImageFilter::~MultiplyImageFilter()

Destructor

*/
public ";


%typemap(javaimports) rtk::simple::N4BiasFieldCorrectionImageFilter "/**

Implementation of the N4 bias field correction algorithm.


The nonparametric nonuniform intensity normalization (N3) algorithm,
as introduced by Sled et al. in 1998 is a method for correcting
nonuniformity associated with MR images. The algorithm assumes a
simple parametric model (Gaussian) for the bias field and does not
require tissue class segmentation. In addition, there are only a
couple of parameters to tune with the default values performing quite
well. N3 has been publicly available as a set of perl scripts ( http://www.bic.mni.mcgill.ca/ServicesSoftwareAdvancedImageProcessingTo
ols/HomePage )

The N4 algorithm, encapsulated with this class, is a variation of the
original N3 algorithm with the additional benefits of an improved
B-spline fitting routine which allows for multiple resolutions to be
used during the correction process. We also modify the iterative
update component of algorithm such that the residual bias field is
continually updated

Notes for the user:
Since much of the image manipulation is done in the log space of the
intensities, input images with negative and small values (< 1) can
produce poor results.

The original authors recommend performing the bias field correction on
a downsampled version of the original image.

A binary mask or a weighted image can be supplied. If a binary mask is
specified, those voxels in the input image which correspond to the
voxels in the mask image are used to estimate the bias field. If a
UseMaskLabel value is set to true, only voxels in the MaskImage that
match the MaskLabel will be used; otherwise, all non-zero voxels in
the MaskImage will be masked. If a confidence image is specified, the
input voxels are weighted in the b-spline fitting routine according to
the confidence voxel values.

The filter returns the corrected image. If the bias field is wanted,
one can reconstruct it using the class
itkBSplineControlPointImageFilter. See the IJ article and the test
file for an example.

The 'Z' parameter in Sled's 1998 paper is the square root of the class
variable 'm_WienerFilterNoise'.
 The basic algorithm iterates between sharpening the intensity
histogram of the corrected input image and spatially smoothing those
results with a B-spline scalar field estimate of the bias field.


Nicholas J. Tustison
 Contributed by Nicholas J. Tustison, James C. Gee in the Insight
Journal paper: https://hdl.handle.net/10380/3053

REFERENCE
 J.G. Sled, A.P. Zijdenbos and A.C. Evans. \"A Nonparametric Method
for Automatic Correction of Intensity Nonuniformity in  Data\" IEEE
Transactions on Medical Imaging, Vol 17, No 1. Feb 1998.

N.J. Tustison, B.B. Avants, P.A. Cook, Y. Zheng, A. Egan, P.A.
Yushkevich, and J.C. Gee. \"N4ITK:  Improved N3 Bias Correction\" IEEE
Transactions on Medical Imaging, 29(6):1310-1320, June 2010.
See:
 rtk::simple::N4BiasFieldCorrection for the procedural interface

 itk::N4BiasFieldCorrectionImageFilter for the Doxygen on the original ITK class.


C++ includes: srtkN4BiasFieldCorrectionImageFilter.h
*/"

%javamethodmodifiers  rtk::simple::N4BiasFieldCorrectionImageFilter::Execute "/**
Image rtk::simple::N4BiasFieldCorrectionImageFilter::Execute(const Image &image, const Image &maskImage)

Execute the filter on the input image

*/
public ";

%javamethodmodifiers  rtk::simple::N4BiasFieldCorrectionImageFilter::Execute "/**
Image rtk::simple::N4BiasFieldCorrectionImageFilter::Execute(const Image &image, const Image &maskImage, double
convergenceThreshold, std::vector< uint32_t >
maximumNumberOfIterations, double biasFieldFullWidthAtHalfMaximum,
double wienerFilterNoise, uint32_t numberOfHistogramBins, const
std::vector< uint32_t > &numberOfControlPoints, uint32_t splineOrder)

Execute the filter on the input image with the given parameters

*/
public ";

%javamethodmodifiers  rtk::simple::N4BiasFieldCorrectionImageFilter::GetBiasFieldFullWidthAtHalfMaximum "/**
double rtk::simple::N4BiasFieldCorrectionImageFilter::GetBiasFieldFullWidthAtHalfMaximum() const

Get the full width at half maximum parameter characterizing the width
of the Gaussian deconvolution. Default = 0.15.

*/
public ";

%javamethodmodifiers  rtk::simple::N4BiasFieldCorrectionImageFilter::GetConvergenceThreshold "/**
double rtk::simple::N4BiasFieldCorrectionImageFilter::GetConvergenceThreshold() const

Get the convergence threshold. Convergence is determined by the
coefficient of variation of the difference image between the current
bias field estimate and the previous estimate. If this value is less
than the specified threshold, the algorithm proceeds to the next
fitting level or terminates if it is at the last level.

*/
public ";

%javamethodmodifiers  rtk::simple::N4BiasFieldCorrectionImageFilter::GetMaximumNumberOfIterations "/**
std::vector<uint32_t> rtk::simple::N4BiasFieldCorrectionImageFilter::GetMaximumNumberOfIterations() const

Get the maximum number of iterations specified at each fitting level.
Default = 50.

*/
public ";

%javamethodmodifiers  rtk::simple::N4BiasFieldCorrectionImageFilter::GetName "/**
std::string rtk::simple::N4BiasFieldCorrectionImageFilter::GetName() const

Name of this class

*/
public ";

%javamethodmodifiers  rtk::simple::N4BiasFieldCorrectionImageFilter::GetNumberOfControlPoints "/**
std::vector<uint32_t> rtk::simple::N4BiasFieldCorrectionImageFilter::GetNumberOfControlPoints() const

Get the control point grid size defining the B-spline estimate of the
scalar bias field. In each dimension, the B-spline mesh size is equal
to the number of control points in that dimension minus the spline
order. Default = 4 control points in each dimension for a mesh size of
1 in each dimension.

*/
public ";

%javamethodmodifiers  rtk::simple::N4BiasFieldCorrectionImageFilter::GetNumberOfHistogramBins "/**
uint32_t rtk::simple::N4BiasFieldCorrectionImageFilter::GetNumberOfHistogramBins() const

Get number of bins defining the log input intensity histogram. Default
= 200.

*/
public ";

%javamethodmodifiers  rtk::simple::N4BiasFieldCorrectionImageFilter::GetSplineOrder "/**
uint32_t rtk::simple::N4BiasFieldCorrectionImageFilter::GetSplineOrder() const

Get the spline order defining the bias field estimate. Default = 3.

*/
public ";

%javamethodmodifiers  rtk::simple::N4BiasFieldCorrectionImageFilter::GetWienerFilterNoise "/**
double rtk::simple::N4BiasFieldCorrectionImageFilter::GetWienerFilterNoise() const

Get the noise estimate defining the Wiener filter. Default = 0.01.

*/
public ";

%javamethodmodifiers  rtk::simple::N4BiasFieldCorrectionImageFilter::N4BiasFieldCorrectionImageFilter "/**
rtk::simple::N4BiasFieldCorrectionImageFilter::N4BiasFieldCorrectionImageFilter()

Default Constructor that takes no arguments and initializes default
parameters

*/
public ";

%javamethodmodifiers  rtk::simple::N4BiasFieldCorrectionImageFilter::SetBiasFieldFullWidthAtHalfMaximum "/**
Self& rtk::simple::N4BiasFieldCorrectionImageFilter::SetBiasFieldFullWidthAtHalfMaximum(double BiasFieldFullWidthAtHalfMaximum)

Set the full width at half maximum parameter characterizing the width
of the Gaussian deconvolution. Default = 0.15.

*/
public ";

%javamethodmodifiers  rtk::simple::N4BiasFieldCorrectionImageFilter::SetConvergenceThreshold "/**
Self& rtk::simple::N4BiasFieldCorrectionImageFilter::SetConvergenceThreshold(double ConvergenceThreshold)

Set the convergence threshold. Convergence is determined by the
coefficient of variation of the difference image between the current
bias field estimate and the previous estimate. If this value is less
than the specified threshold, the algorithm proceeds to the next
fitting level or terminates if it is at the last level.

*/
public ";

%javamethodmodifiers  rtk::simple::N4BiasFieldCorrectionImageFilter::SetMaximumNumberOfIterations "/**
Self& rtk::simple::N4BiasFieldCorrectionImageFilter::SetMaximumNumberOfIterations(std::vector< uint32_t > MaximumNumberOfIterations)

Set the maximum number of iterations specified at each fitting level.
Default = 50.

*/
public ";

%javamethodmodifiers  rtk::simple::N4BiasFieldCorrectionImageFilter::SetNumberOfControlPoints "/**
Self& rtk::simple::N4BiasFieldCorrectionImageFilter::SetNumberOfControlPoints(const std::vector< uint32_t > &NumberOfControlPoints)

Set the control point grid size defining the B-spline estimate of the
scalar bias field. In each dimension, the B-spline mesh size is equal
to the number of control points in that dimension minus the spline
order. Default = 4 control points in each dimension for a mesh size of
1 in each dimension.

*/
public ";

%javamethodmodifiers  rtk::simple::N4BiasFieldCorrectionImageFilter::SetNumberOfControlPoints "/**
Self& rtk::simple::N4BiasFieldCorrectionImageFilter::SetNumberOfControlPoints(uint32_t value)

Set the values of the NumberOfControlPoints vector all to value

*/
public ";

%javamethodmodifiers  rtk::simple::N4BiasFieldCorrectionImageFilter::SetNumberOfHistogramBins "/**
Self& rtk::simple::N4BiasFieldCorrectionImageFilter::SetNumberOfHistogramBins(uint32_t NumberOfHistogramBins)

Set number of bins defining the log input intensity histogram. Default
= 200.

*/
public ";

%javamethodmodifiers  rtk::simple::N4BiasFieldCorrectionImageFilter::SetSplineOrder "/**
Self& rtk::simple::N4BiasFieldCorrectionImageFilter::SetSplineOrder(uint32_t SplineOrder)

Set the spline order defining the bias field estimate. Default = 3.

*/
public ";

%javamethodmodifiers  rtk::simple::N4BiasFieldCorrectionImageFilter::SetWienerFilterNoise "/**
Self& rtk::simple::N4BiasFieldCorrectionImageFilter::SetWienerFilterNoise(double WienerFilterNoise)

Set the noise estimate defining the Wiener filter. Default = 0.01.

*/
public ";

%javamethodmodifiers  rtk::simple::N4BiasFieldCorrectionImageFilter::ToString "/**
std::string rtk::simple::N4BiasFieldCorrectionImageFilter::ToString() const

Print ourselves out

*/
public ";

%javamethodmodifiers  rtk::simple::N4BiasFieldCorrectionImageFilter::~N4BiasFieldCorrectionImageFilter "/**
rtk::simple::N4BiasFieldCorrectionImageFilter::~N4BiasFieldCorrectionImageFilter()

Destructor

*/
public ";


%typemap(javaimports) rtk::simple::NaryAddImageFilter "/**

Pixel-wise addition of N images.


This class is templated over the types of the input images and the
type of the output image. Numeric conversions (castings) are done by
the C++ defaults.

The pixel type of the input images must have a valid definition of the
operator+ with each other. This condition is required because
internally this filter will perform the operation


Additionally the type resulting from the sum, will be cast to the
pixel type of the output image.

The total operation over one pixel will be


For example, this filter could be used directly for adding images
whose pixels are vectors of the same dimension, and to store the
resulting vector in an output image of vector pixels.


WARNING:
No numeric overflow checking is performed in this filter.

See:
 rtk::simple::NaryAdd for the procedural interface


C++ includes: srtkNaryAddImageFilter.h
*/"

%javamethodmodifiers  rtk::simple::NaryAddImageFilter::Execute "/**
Image rtk::simple::NaryAddImageFilter::Execute(const std::vector< Image > &images)

Execute the filter on the input images

*/
public ";

%javamethodmodifiers  rtk::simple::NaryAddImageFilter::Execute "/**
Image rtk::simple::NaryAddImageFilter::Execute(const Image &image1)
*/
public ";

%javamethodmodifiers  rtk::simple::NaryAddImageFilter::Execute "/**
Image rtk::simple::NaryAddImageFilter::Execute(const Image &image1, const Image &image2)
*/
public ";

%javamethodmodifiers  rtk::simple::NaryAddImageFilter::Execute "/**
Image rtk::simple::NaryAddImageFilter::Execute(const Image &image1, const Image &image2, const Image &image3)
*/
public ";

%javamethodmodifiers  rtk::simple::NaryAddImageFilter::Execute "/**
Image rtk::simple::NaryAddImageFilter::Execute(const Image &image1, const Image &image2, const Image &image3, const
Image &image4)
*/
public ";

%javamethodmodifiers  rtk::simple::NaryAddImageFilter::Execute "/**
Image rtk::simple::NaryAddImageFilter::Execute(const Image &image1, const Image &image2, const Image &image3, const
Image &image4, const Image &image5)
*/
public ";

%javamethodmodifiers  rtk::simple::NaryAddImageFilter::GetName "/**
std::string rtk::simple::NaryAddImageFilter::GetName() const

Name of this class

*/
public ";

%javamethodmodifiers  rtk::simple::NaryAddImageFilter::NaryAddImageFilter "/**
rtk::simple::NaryAddImageFilter::NaryAddImageFilter()

Default Constructor that takes no arguments and initializes default
parameters

*/
public ";

%javamethodmodifiers  rtk::simple::NaryAddImageFilter::ToString "/**
std::string rtk::simple::NaryAddImageFilter::ToString() const

Print ourselves out

*/
public ";

%javamethodmodifiers  rtk::simple::NaryAddImageFilter::~NaryAddImageFilter "/**
rtk::simple::NaryAddImageFilter::~NaryAddImageFilter()

Destructor

*/
public ";


%typemap(javaimports) rtk::simple::NaryMaximumImageFilter "/**

Computes the pixel-wise maximum of several images.


This class is templated over the types of the input images and the
type of the output image. Numeric conversions (castings) are done by
the C++ defaults.

The pixel type of the output images must have a valid definition of
the operator<. This condition is required because internally this
filter will perform an operation similar to:

 (where current_maximum is also of type OutputPixelType)

for each of the n input images.

For example, this filter could be used directly to find a \"maximum
projection\" of a series of images, often used in preliminary analysis
of time-series data.


Zachary Pincus
 This filter was contributed by Zachary Pincus from the Department of
Biochemistry and Program in Biomedical Informatics at Stanford
University School of Medicine


See:
 rtk::simple::NaryMaximum for the procedural interface


C++ includes: srtkNaryMaximumImageFilter.h
*/"

%javamethodmodifiers  rtk::simple::NaryMaximumImageFilter::Execute "/**
Image rtk::simple::NaryMaximumImageFilter::Execute(const std::vector< Image > &images)

Execute the filter on the input images

*/
public ";

%javamethodmodifiers  rtk::simple::NaryMaximumImageFilter::Execute "/**
Image rtk::simple::NaryMaximumImageFilter::Execute(const Image &image1)
*/
public ";

%javamethodmodifiers  rtk::simple::NaryMaximumImageFilter::Execute "/**
Image rtk::simple::NaryMaximumImageFilter::Execute(const Image &image1, const Image &image2)
*/
public ";

%javamethodmodifiers  rtk::simple::NaryMaximumImageFilter::Execute "/**
Image rtk::simple::NaryMaximumImageFilter::Execute(const Image &image1, const Image &image2, const Image &image3)
*/
public ";

%javamethodmodifiers  rtk::simple::NaryMaximumImageFilter::Execute "/**
Image rtk::simple::NaryMaximumImageFilter::Execute(const Image &image1, const Image &image2, const Image &image3, const
Image &image4)
*/
public ";

%javamethodmodifiers  rtk::simple::NaryMaximumImageFilter::Execute "/**
Image rtk::simple::NaryMaximumImageFilter::Execute(const Image &image1, const Image &image2, const Image &image3, const
Image &image4, const Image &image5)
*/
public ";

%javamethodmodifiers  rtk::simple::NaryMaximumImageFilter::GetName "/**
std::string rtk::simple::NaryMaximumImageFilter::GetName() const

Name of this class

*/
public ";

%javamethodmodifiers  rtk::simple::NaryMaximumImageFilter::NaryMaximumImageFilter "/**
rtk::simple::NaryMaximumImageFilter::NaryMaximumImageFilter()

Default Constructor that takes no arguments and initializes default
parameters

*/
public ";

%javamethodmodifiers  rtk::simple::NaryMaximumImageFilter::ToString "/**
std::string rtk::simple::NaryMaximumImageFilter::ToString() const

Print ourselves out

*/
public ";

%javamethodmodifiers  rtk::simple::NaryMaximumImageFilter::~NaryMaximumImageFilter "/**
rtk::simple::NaryMaximumImageFilter::~NaryMaximumImageFilter()

Destructor

*/
public ";


%typemap(javaimports) rtk::simple::NeighborhoodConnectedImageFilter "/**

Label pixels that are connected to a seed and lie within a
neighborhood.


NeighborhoodConnectedImageFilter labels pixels with ReplaceValue that are connected to an initial Seed
AND whose neighbors all lie within a Lower and Upper threshold range.
See:
 rtk::simple::NeighborhoodConnected for the procedural interface

 itk::NeighborhoodConnectedImageFilter for the Doxygen on the original ITK class.


C++ includes: srtkNeighborhoodConnectedImageFilter.h
*/"

%javamethodmodifiers  rtk::simple::NeighborhoodConnectedImageFilter::AddSeed "/**
Self& rtk::simple::NeighborhoodConnectedImageFilter::AddSeed(const std::vector< unsigned int > &idx)

AddSeed - Add a seed to the end of the list

*/
public ";

%javamethodmodifiers  rtk::simple::NeighborhoodConnectedImageFilter::ClearSeeds "/**
Self& rtk::simple::NeighborhoodConnectedImageFilter::ClearSeeds()

ClearSeeds - Clear out all seeds in the list

*/
public ";

%javamethodmodifiers  rtk::simple::NeighborhoodConnectedImageFilter::Execute "/**
Image rtk::simple::NeighborhoodConnectedImageFilter::Execute(const Image &image1)

Execute the filter on the input image

*/
public ";

%javamethodmodifiers  rtk::simple::NeighborhoodConnectedImageFilter::Execute "/**
Image rtk::simple::NeighborhoodConnectedImageFilter::Execute(const Image &image1, const std::vector< std::vector< unsigned int > >
&seedList, double lower, double upper, const std::vector< unsigned int
> &radius, double replaceValue)

Execute the filter on the input image with the given parameters

*/
public ";

%javamethodmodifiers  rtk::simple::NeighborhoodConnectedImageFilter::GetLower "/**
double rtk::simple::NeighborhoodConnectedImageFilter::GetLower() const

Set/Get the lower threshold. The default is 0.

*/
public ";

%javamethodmodifiers  rtk::simple::NeighborhoodConnectedImageFilter::GetName "/**
std::string rtk::simple::NeighborhoodConnectedImageFilter::GetName() const

Name of this class

*/
public ";

%javamethodmodifiers  rtk::simple::NeighborhoodConnectedImageFilter::GetRadius "/**
std::vector<unsigned int> rtk::simple::NeighborhoodConnectedImageFilter::GetRadius() const

Get the radius of the neighborhood used to compute the median

*/
public ";

%javamethodmodifiers  rtk::simple::NeighborhoodConnectedImageFilter::GetReplaceValue "/**
double rtk::simple::NeighborhoodConnectedImageFilter::GetReplaceValue() const

Set/Get value to replace thresholded pixels. Pixels that lie * within
Lower and Upper (inclusive) will be replaced with this value. The
default is 1.

*/
public ";

%javamethodmodifiers  rtk::simple::NeighborhoodConnectedImageFilter::GetSeedList "/**
std::vector< std::vector<unsigned int> > rtk::simple::NeighborhoodConnectedImageFilter::GetSeedList() const

Get SeedList

*/
public ";

%javamethodmodifiers  rtk::simple::NeighborhoodConnectedImageFilter::GetUpper "/**
double rtk::simple::NeighborhoodConnectedImageFilter::GetUpper() const

Set/Get the upper threshold. The default is the largest possible value
for the InputPixelType.

*/
public ";

%javamethodmodifiers  rtk::simple::NeighborhoodConnectedImageFilter::NeighborhoodConnectedImageFilter "/**
rtk::simple::NeighborhoodConnectedImageFilter::NeighborhoodConnectedImageFilter()

Default Constructor that takes no arguments and initializes default
parameters

*/
public ";

%javamethodmodifiers  rtk::simple::NeighborhoodConnectedImageFilter::SetLower "/**
Self& rtk::simple::NeighborhoodConnectedImageFilter::SetLower(double Lower)

Set/Get the lower threshold. The default is 0.

*/
public ";

%javamethodmodifiers  rtk::simple::NeighborhoodConnectedImageFilter::SetRadius "/**
Self& rtk::simple::NeighborhoodConnectedImageFilter::SetRadius(const std::vector< unsigned int > &Radius)

Set the radius of the neighborhood used for a mask.

*/
public ";

%javamethodmodifiers  rtk::simple::NeighborhoodConnectedImageFilter::SetRadius "/**
Self& rtk::simple::NeighborhoodConnectedImageFilter::SetRadius(unsigned int value)

Set the values of the Radius vector all to value

*/
public ";

%javamethodmodifiers  rtk::simple::NeighborhoodConnectedImageFilter::SetReplaceValue "/**
Self& rtk::simple::NeighborhoodConnectedImageFilter::SetReplaceValue(double ReplaceValue)

Set/Get value to replace thresholded pixels. Pixels that lie * within
Lower and Upper (inclusive) will be replaced with this value. The
default is 1.

*/
public ";

%javamethodmodifiers  rtk::simple::NeighborhoodConnectedImageFilter::SetSeed "/**
Self& rtk::simple::NeighborhoodConnectedImageFilter::SetSeed(const std::vector< unsigned int > &idx)

SetSeed - Set list to a single seed

*/
public ";

%javamethodmodifiers  rtk::simple::NeighborhoodConnectedImageFilter::SetSeedList "/**
Self& rtk::simple::NeighborhoodConnectedImageFilter::SetSeedList(const std::vector< std::vector< unsigned int > > &t)

Set SeedList

*/
public ";

%javamethodmodifiers  rtk::simple::NeighborhoodConnectedImageFilter::SetUpper "/**
Self& rtk::simple::NeighborhoodConnectedImageFilter::SetUpper(double Upper)

Set/Get the upper threshold. The default is the largest possible value
for the InputPixelType.

*/
public ";

%javamethodmodifiers  rtk::simple::NeighborhoodConnectedImageFilter::ToString "/**
std::string rtk::simple::NeighborhoodConnectedImageFilter::ToString() const

Print ourselves out

*/
public ";

%javamethodmodifiers  rtk::simple::NeighborhoodConnectedImageFilter::~NeighborhoodConnectedImageFilter "/**
rtk::simple::NeighborhoodConnectedImageFilter::~NeighborhoodConnectedImageFilter()

Destructor

*/
public ";


%typemap(javaimports) rtk::simple::NoiseImageFilter "/**

Calculate the local noise in an image.


Computes an image where a given pixel is the standard deviation of the
pixels in a neighborhood about the corresponding input pixel. This
serves as an estimate of the local noise (or texture) in an image.
Currently, this noise estimate assume a piecewise constant image. This
filter should be extended to fitting a (hyper) plane to the
neighborhood and calculating the standard deviation of the residuals
to this (hyper) plane.


See:
 Image


 Neighborhood


 NeighborhoodOperator


 NeighborhoodIterator
Wiki Examples:

All Examples

Compute the local noise in an image
See:
 rtk::simple::Noise for the procedural interface

 itk::NoiseImageFilter for the Doxygen on the original ITK class.



C++ includes: srtkNoiseImageFilter.h
*/"

%javamethodmodifiers  rtk::simple::NoiseImageFilter::Execute "/**
Image rtk::simple::NoiseImageFilter::Execute(const Image &image1)

Execute the filter on the input image

*/
public ";

%javamethodmodifiers  rtk::simple::NoiseImageFilter::Execute "/**
Image rtk::simple::NoiseImageFilter::Execute(const Image &image1, const std::vector< unsigned int > &radius)

Execute the filter on the input image with the given parameters

*/
public ";

%javamethodmodifiers  rtk::simple::NoiseImageFilter::GetName "/**
std::string rtk::simple::NoiseImageFilter::GetName() const

Name of this class

*/
public ";

%javamethodmodifiers  rtk::simple::NoiseImageFilter::GetRadius "/**
std::vector<unsigned int> rtk::simple::NoiseImageFilter::GetRadius() const
*/
public ";

%javamethodmodifiers  rtk::simple::NoiseImageFilter::NoiseImageFilter "/**
rtk::simple::NoiseImageFilter::NoiseImageFilter()

Default Constructor that takes no arguments and initializes default
parameters

*/
public ";

%javamethodmodifiers  rtk::simple::NoiseImageFilter::SetRadius "/**
Self& rtk::simple::NoiseImageFilter::SetRadius(const std::vector< unsigned int > &Radius)
*/
public ";

%javamethodmodifiers  rtk::simple::NoiseImageFilter::SetRadius "/**
Self& rtk::simple::NoiseImageFilter::SetRadius(unsigned int value)

Set the values of the Radius vector all to value

*/
public ";

%javamethodmodifiers  rtk::simple::NoiseImageFilter::ToString "/**
std::string rtk::simple::NoiseImageFilter::ToString() const

Print ourselves out

*/
public ";

%javamethodmodifiers  rtk::simple::NoiseImageFilter::~NoiseImageFilter "/**
rtk::simple::NoiseImageFilter::~NoiseImageFilter()

Destructor

*/
public ";


%typemap(javaimports) rtk::simple::NonCopyable "/**

An inheratable class to disable copying of a class.


This class disable the implicit implementations of the assignment and
copy constructor for derived classes. The instantiation of the default
implementation for either method in a derived class will result in a
compile-time error because they are private in this class. However,
this policy is not absolute for derived classes because explicit
implementation of these methods could be implemented.

An advatange this apporach has is the class heiarchy makes it obvious
what the intent is, as compared to other appoaches.

For example you should not be able to copy singleton object, because
there should only be one of them. To utilize this class just derive
from it:

C++ includes: srtkNonCopyable.h
*/"


%typemap(javaimports) rtk::simple::NormalizeImageFilter "/**

Normalize an image by setting its mean to zero and variance to one.


NormalizeImageFilter shifts and scales an image so that the pixels in the image have a
zero mean and unit variance. This filter uses StatisticsImageFilter to compute the mean and variance of the input and then applies ShiftScaleImageFilter to shift and scale the pixels.

NB: since this filter normalizes the data to lie within -1 to 1,
integral types will produce an image that DOES NOT HAVE a unit
variance.


See:
 NormalizeToConstantImageFilter
Wiki Examples:

All Examples

Normalize an image
See:
 rtk::simple::Normalize for the procedural interface

 itk::NormalizeImageFilter for the Doxygen on the original ITK class.



C++ includes: srtkNormalizeImageFilter.h
*/"

%javamethodmodifiers  rtk::simple::NormalizeImageFilter::Execute "/**
Image rtk::simple::NormalizeImageFilter::Execute(const Image &image1)

Execute the filter on the input image

*/
public ";

%javamethodmodifiers  rtk::simple::NormalizeImageFilter::GetName "/**
std::string rtk::simple::NormalizeImageFilter::GetName() const

Name of this class

*/
public ";

%javamethodmodifiers  rtk::simple::NormalizeImageFilter::NormalizeImageFilter "/**
rtk::simple::NormalizeImageFilter::NormalizeImageFilter()

Default Constructor that takes no arguments and initializes default
parameters

*/
public ";

%javamethodmodifiers  rtk::simple::NormalizeImageFilter::ToString "/**
std::string rtk::simple::NormalizeImageFilter::ToString() const

Print ourselves out

*/
public ";

%javamethodmodifiers  rtk::simple::NormalizeImageFilter::~NormalizeImageFilter "/**
rtk::simple::NormalizeImageFilter::~NormalizeImageFilter()

Destructor

*/
public ";


%typemap(javaimports) rtk::simple::NormalizeToConstantImageFilter "/**

Scales image pixel intensities to make the sum of all pixels equal a
user-defined constant.


The default value of the constant is 1. It can be changed with SetConstant() .

This transform is especially useful for normalizing a convolution
kernel.

This code was contributed in the Insight Journal paper: \"FFT based
convolution\" by Lehmann G. https://hdl.handle.net/10380/3154


Gaetan Lehmann. Biologie du Developpement et de la Reproduction, INRA
de Jouy-en-Josas, France.

See:
 NormalizeImageFilter


 StatisticsImageFilter


 DivideImageFilter
Wiki Examples:

All Examples

Scale all pixels so that their sum is a specified constant
See:
 rtk::simple::NormalizeToConstant for the procedural interface

 itk::NormalizeToConstantImageFilter for the Doxygen on the original ITK class.



C++ includes: srtkNormalizeToConstantImageFilter.h
*/"

%javamethodmodifiers  rtk::simple::NormalizeToConstantImageFilter::Execute "/**
Image rtk::simple::NormalizeToConstantImageFilter::Execute(const Image &image1)

Execute the filter on the input image

*/
public ";

%javamethodmodifiers  rtk::simple::NormalizeToConstantImageFilter::Execute "/**
Image rtk::simple::NormalizeToConstantImageFilter::Execute(const Image &image1, double constant)

Execute the filter on the input image with the given parameters

*/
public ";

%javamethodmodifiers  rtk::simple::NormalizeToConstantImageFilter::GetConstant "/**
double rtk::simple::NormalizeToConstantImageFilter::GetConstant() const

Set/get the normalization constant.

*/
public ";

%javamethodmodifiers  rtk::simple::NormalizeToConstantImageFilter::GetName "/**
std::string rtk::simple::NormalizeToConstantImageFilter::GetName() const

Name of this class

*/
public ";

%javamethodmodifiers  rtk::simple::NormalizeToConstantImageFilter::NormalizeToConstantImageFilter "/**
rtk::simple::NormalizeToConstantImageFilter::NormalizeToConstantImageFilter()

Default Constructor that takes no arguments and initializes default
parameters

*/
public ";

%javamethodmodifiers  rtk::simple::NormalizeToConstantImageFilter::SetConstant "/**
Self& rtk::simple::NormalizeToConstantImageFilter::SetConstant(double Constant)

Set/get the normalization constant.

*/
public ";

%javamethodmodifiers  rtk::simple::NormalizeToConstantImageFilter::ToString "/**
std::string rtk::simple::NormalizeToConstantImageFilter::ToString() const

Print ourselves out

*/
public ";

%javamethodmodifiers  rtk::simple::NormalizeToConstantImageFilter::~NormalizeToConstantImageFilter "/**
rtk::simple::NormalizeToConstantImageFilter::~NormalizeToConstantImageFilter()

Destructor

*/
public ";


%typemap(javaimports) rtk::simple::NormalizedCorrelationImageFilter "/**

Computes the normalized correlation of an image and a template.


This filter calculates the normalized correlation between an image and
the template. Normalized correlation is frequently use in feature
detection because it is invariant to local changes in contrast.

The filter can be given a mask. When presented with an input image and
a mask, the normalized correlation is only calculated at those pixels
under the mask.


See:
 Image


 Neighborhood


 NeighborhoodOperator


 NeighborhoodIterator
Wiki Examples:

All Examples

Normalized correlation
See:
 rtk::simple::NormalizedCorrelation for the procedural interface

 itk::NormalizedCorrelationImageFilter for the Doxygen on the original ITK class.



C++ includes: srtkNormalizedCorrelationImageFilter.h
*/"

%javamethodmodifiers  rtk::simple::NormalizedCorrelationImageFilter::Execute "/**
Image rtk::simple::NormalizedCorrelationImageFilter::Execute(const Image &image, const Image &maskImage, const Image
&templateImage)

Execute the filter on the input image

*/
public ";

%javamethodmodifiers  rtk::simple::NormalizedCorrelationImageFilter::GetName "/**
std::string rtk::simple::NormalizedCorrelationImageFilter::GetName() const

Name of this class

*/
public ";

%javamethodmodifiers  rtk::simple::NormalizedCorrelationImageFilter::NormalizedCorrelationImageFilter "/**
rtk::simple::NormalizedCorrelationImageFilter::NormalizedCorrelationImageFilter()

Default Constructor that takes no arguments and initializes default
parameters

*/
public ";

%javamethodmodifiers  rtk::simple::NormalizedCorrelationImageFilter::ToString "/**
std::string rtk::simple::NormalizedCorrelationImageFilter::ToString() const

Print ourselves out

*/
public ";

%javamethodmodifiers  rtk::simple::NormalizedCorrelationImageFilter::~NormalizedCorrelationImageFilter "/**
rtk::simple::NormalizedCorrelationImageFilter::~NormalizedCorrelationImageFilter()

Destructor

*/
public ";


%typemap(javaimports) rtk::simple::NotEqualImageFilter "/**

Implements pixel-wise generic operation of two images, or of an image
and a constant.


This class is parameterized over the types of the two input images and
the type of the output image. It is also parameterized by the
operation to be applied. A Functor style is used.

The constant must be of the same type than the pixel type of the
corresponding image. It is wrapped in a SimpleDataObjectDecorator so it can be updated through the pipeline. The SetConstant() and
GetConstant() methods are provided as shortcuts to set or get the
constant value without manipulating the decorator.


See:
 UnaryFunctorImageFilter TernaryFunctorImageFilter
Wiki Examples:

All Examples

Apply a predefined operation to corresponding pixels in two images

Apply a custom operation to corresponding pixels in two images
See:
 rtk::simple::NotEqual for the procedural interface

 itk::BinaryFunctorImageFilter for the Doxygen on the original ITK class.



C++ includes: srtkNotEqualImageFilter.h
*/"

%javamethodmodifiers  rtk::simple::NotEqualImageFilter::Execute "/**
Image rtk::simple::NotEqualImageFilter::Execute(const Image &image1, const Image &image2)

Execute the filter on the input images

*/
public ";

%javamethodmodifiers  rtk::simple::NotEqualImageFilter::Execute "/**
Image rtk::simple::NotEqualImageFilter::Execute(const Image &image1, const Image &image2, uint8_t backgroundValue,
uint8_t foregroundValue)

Execute the filter on the input images with the given parameters

*/
public ";

%javamethodmodifiers  rtk::simple::NotEqualImageFilter::Execute "/**
Image rtk::simple::NotEqualImageFilter::Execute(const Image &image1, double constant)

Execute the filter with an image and a constant

*/
public ";

%javamethodmodifiers  rtk::simple::NotEqualImageFilter::Execute "/**
Image rtk::simple::NotEqualImageFilter::Execute(double constant, const Image &image2)
*/
public ";

%javamethodmodifiers  rtk::simple::NotEqualImageFilter::Execute "/**
Image rtk::simple::NotEqualImageFilter::Execute(const Image &image1, double constant, uint8_t backgroundValue,
uint8_t foregroundValue)

Execute the filter on an image and a constant with the given
parameters

*/
public ";

%javamethodmodifiers  rtk::simple::NotEqualImageFilter::Execute "/**
Image rtk::simple::NotEqualImageFilter::Execute(double constant, const Image &image2, uint8_t backgroundValue,
uint8_t foregroundValue)
*/
public ";

%javamethodmodifiers  rtk::simple::NotEqualImageFilter::GetBackgroundValue "/**
uint8_t rtk::simple::NotEqualImageFilter::GetBackgroundValue() const

Set/Get the value used to mark the false pixels of the operator.

*/
public ";

%javamethodmodifiers  rtk::simple::NotEqualImageFilter::GetForegroundValue "/**
uint8_t rtk::simple::NotEqualImageFilter::GetForegroundValue() const

Set/Get the value used to mark the true pixels of the operator.

*/
public ";

%javamethodmodifiers  rtk::simple::NotEqualImageFilter::GetName "/**
std::string rtk::simple::NotEqualImageFilter::GetName() const

Name of this class

*/
public ";

%javamethodmodifiers  rtk::simple::NotEqualImageFilter::NotEqualImageFilter "/**
rtk::simple::NotEqualImageFilter::NotEqualImageFilter()

Default Constructor that takes no arguments and initializes default
parameters

*/
public ";

%javamethodmodifiers  rtk::simple::NotEqualImageFilter::SetBackgroundValue "/**
Self& rtk::simple::NotEqualImageFilter::SetBackgroundValue(uint8_t BackgroundValue)

Set/Get the value used to mark the false pixels of the operator.

*/
public ";

%javamethodmodifiers  rtk::simple::NotEqualImageFilter::SetForegroundValue "/**
Self& rtk::simple::NotEqualImageFilter::SetForegroundValue(uint8_t ForegroundValue)

Set/Get the value used to mark the true pixels of the operator.

*/
public ";

%javamethodmodifiers  rtk::simple::NotEqualImageFilter::ToString "/**
std::string rtk::simple::NotEqualImageFilter::ToString() const

Print ourselves out

*/
public ";

%javamethodmodifiers  rtk::simple::NotEqualImageFilter::~NotEqualImageFilter "/**
rtk::simple::NotEqualImageFilter::~NotEqualImageFilter()

Destructor

*/
public ";


%typemap(javaimports) rtk::simple::NotImageFilter "/**

Implements the NOT logical operator pixel-wise on an image.


This class is templated over the types of an input image and the type
of the output image. Numeric conversions (castings) are done by the
C++ defaults.

Since the logical NOT operation is operates only on boolean types, the
input type must be implicitly convertible to bool, which is only
defined in C++ for integer types, the images passed to this filter
must comply with the requirement of using integer pixel type.

The total operation over one pixel will be


Where \"!\" is the unary Logical NOT operator in C++.
See:
 rtk::simple::Not for the procedural interface

 itk::NotImageFilter for the Doxygen on the original ITK class.


C++ includes: srtkNotImageFilter.h
*/"

%javamethodmodifiers  rtk::simple::NotImageFilter::Execute "/**
Image rtk::simple::NotImageFilter::Execute(const Image &image1)

Execute the filter on the input image

*/
public ";

%javamethodmodifiers  rtk::simple::NotImageFilter::GetName "/**
std::string rtk::simple::NotImageFilter::GetName() const

Name of this class

*/
public ";

%javamethodmodifiers  rtk::simple::NotImageFilter::NotImageFilter "/**
rtk::simple::NotImageFilter::NotImageFilter()

Default Constructor that takes no arguments and initializes default
parameters

*/
public ";

%javamethodmodifiers  rtk::simple::NotImageFilter::ToString "/**
std::string rtk::simple::NotImageFilter::ToString() const

Print ourselves out

*/
public ";

%javamethodmodifiers  rtk::simple::NotImageFilter::~NotImageFilter "/**
rtk::simple::NotImageFilter::~NotImageFilter()

Destructor

*/
public ";


%typemap(javaimports) rtk::simple::OpeningByReconstructionImageFilter "/**

Opening by reconstruction of an image.


This filter preserves regions, in the foreground, that can completely
contain the structuring element. At the same time, this filter
eliminates all other regions of foreground pixels. Contrary to the
mophological opening, the opening by reconstruction preserves the
shape of the components that are not removed by erosion. The opening
by reconstruction of an image \"f\" is defined as:

OpeningByReconstruction(f) = DilationByRecontruction(f, Erosion(f)).

Opening by reconstruction not only removes structures destroyed by the
erosion, but also levels down the contrast of the brightest regions.
If PreserveIntensities is on, a subsequent reconstruction by dilation
using a marker image that is the original image for all unaffected
pixels.

Opening by reconstruction is described in Chapter 6.3.9 of Pierre
Soille's book \"Morphological Image Analysis: Principles and
Applications\", Second Edition, Springer, 2003.


Gaetan Lehmann. Biologie du Developpement et de la Reproduction, INRA
de Jouy-en-Josas, France.

See:
 GrayscaleMorphologicalOpeningImageFilter

 rtk::simple::OpeningByReconstruction for the procedural interface

 itk::OpeningByReconstructionImageFilter for the Doxygen on the original ITK class.


C++ includes: srtkOpeningByReconstructionImageFilter.h
*/"

%javamethodmodifiers  rtk::simple::OpeningByReconstructionImageFilter::Execute "/**
Image rtk::simple::OpeningByReconstructionImageFilter::Execute(const Image &image1)

Execute the filter on the input image

*/
public ";

%javamethodmodifiers  rtk::simple::OpeningByReconstructionImageFilter::Execute "/**
Image rtk::simple::OpeningByReconstructionImageFilter::Execute(const Image &image1, bool fullyConnected, bool preserveIntensities)

Execute the filter on the input image with the given parameters

*/
public ";

%javamethodmodifiers  rtk::simple::OpeningByReconstructionImageFilter::FullyConnectedOff "/**
Self& rtk::simple::OpeningByReconstructionImageFilter::FullyConnectedOff()
*/
public ";

%javamethodmodifiers  rtk::simple::OpeningByReconstructionImageFilter::FullyConnectedOn "/**
Self& rtk::simple::OpeningByReconstructionImageFilter::FullyConnectedOn()

Set the value of FullyConnected to true or false respectfully.

*/
public ";

%javamethodmodifiers  rtk::simple::OpeningByReconstructionImageFilter::GetFullyConnected "/**
bool rtk::simple::OpeningByReconstructionImageFilter::GetFullyConnected() const

Set/Get whether the connected components are defined strictly by face
connectivity or by face+edge+vertex connectivity. Default is
FullyConnectedOff. For objects that are 1 pixel wide, use
FullyConnectedOn.

*/
public ";

%javamethodmodifiers  rtk::simple::OpeningByReconstructionImageFilter::GetKernelRadius "/**
std::vector<uint32_t> rtk::simple::OpeningByReconstructionImageFilter::GetKernelRadius() const
*/
public ";

%javamethodmodifiers  rtk::simple::OpeningByReconstructionImageFilter::GetKernelType "/**
KernelEnum rtk::simple::OpeningByReconstructionImageFilter::GetKernelType() const
*/
public ";

%javamethodmodifiers  rtk::simple::OpeningByReconstructionImageFilter::GetName "/**
std::string rtk::simple::OpeningByReconstructionImageFilter::GetName() const

Name of this class

*/
public ";

%javamethodmodifiers  rtk::simple::OpeningByReconstructionImageFilter::GetPreserveIntensities "/**
bool rtk::simple::OpeningByReconstructionImageFilter::GetPreserveIntensities() const

Set/Get whether the original intensities of the image retained for
those pixels unaffected by the opening by reconstrcution. If Off, the
output pixel contrast will be reduced.

*/
public ";

%javamethodmodifiers  rtk::simple::OpeningByReconstructionImageFilter::OpeningByReconstructionImageFilter "/**
rtk::simple::OpeningByReconstructionImageFilter::OpeningByReconstructionImageFilter()

Default Constructor that takes no arguments and initializes default
parameters

*/
public ";

%javamethodmodifiers  rtk::simple::OpeningByReconstructionImageFilter::PreserveIntensitiesOff "/**
Self& rtk::simple::OpeningByReconstructionImageFilter::PreserveIntensitiesOff()
*/
public ";

%javamethodmodifiers  rtk::simple::OpeningByReconstructionImageFilter::PreserveIntensitiesOn "/**
Self& rtk::simple::OpeningByReconstructionImageFilter::PreserveIntensitiesOn()

Set the value of PreserveIntensities to true or false respectfully.

*/
public ";

%javamethodmodifiers  rtk::simple::OpeningByReconstructionImageFilter::SetFullyConnected "/**
Self& rtk::simple::OpeningByReconstructionImageFilter::SetFullyConnected(bool FullyConnected)

Set/Get whether the connected components are defined strictly by face
connectivity or by face+edge+vertex connectivity. Default is
FullyConnectedOff. For objects that are 1 pixel wide, use
FullyConnectedOn.

*/
public ";

%javamethodmodifiers  rtk::simple::OpeningByReconstructionImageFilter::SetKernelRadius "/**
Self& rtk::simple::OpeningByReconstructionImageFilter::SetKernelRadius(uint32_t r)

Kernel radius as a scale for isotropic structures

*/
public ";

%javamethodmodifiers  rtk::simple::OpeningByReconstructionImageFilter::SetKernelRadius "/**
Self& rtk::simple::OpeningByReconstructionImageFilter::SetKernelRadius(const std::vector< uint32_t > &r)

Set/Get the radius of the kernel structuring element as a vector.

If the dimension of the image is greater then the length of r, then
the radius will be padded. If it is less the r will be truncated.

*/
public ";

%javamethodmodifiers  rtk::simple::OpeningByReconstructionImageFilter::SetKernelType "/**
Self& rtk::simple::OpeningByReconstructionImageFilter::SetKernelType(KernelEnum t)

Set/Get the kernel or structuring elemenent used for the morphology

*/
public ";

%javamethodmodifiers  rtk::simple::OpeningByReconstructionImageFilter::SetKernelType "/**
Self& rtk::simple::OpeningByReconstructionImageFilter::SetKernelType(KernelType t)
*/
public ";

%javamethodmodifiers  rtk::simple::OpeningByReconstructionImageFilter::SetPreserveIntensities "/**
Self& rtk::simple::OpeningByReconstructionImageFilter::SetPreserveIntensities(bool PreserveIntensities)

Set/Get whether the original intensities of the image retained for
those pixels unaffected by the opening by reconstrcution. If Off, the
output pixel contrast will be reduced.

*/
public ";

%javamethodmodifiers  rtk::simple::OpeningByReconstructionImageFilter::ToString "/**
std::string rtk::simple::OpeningByReconstructionImageFilter::ToString() const

Print ourselves out

*/
public ";

%javamethodmodifiers  rtk::simple::OpeningByReconstructionImageFilter::~OpeningByReconstructionImageFilter "/**
rtk::simple::OpeningByReconstructionImageFilter::~OpeningByReconstructionImageFilter()

Destructor

*/
public ";


%typemap(javaimports) rtk::simple::OrImageFilter "/**

Implements the OR bitwise operator pixel-wise between two images.


This class is templated over the types of the two input images and the
type of the output image. Numeric conversions (castings) are done by
the C++ defaults.

Since the bitwise OR operation is only defined in C++ for integer
types, the images passed to this filter must comply with the
requirement of using integer pixel type.

The total operation over one pixel will be


Where \"|\" is the boolean OR operator in C++.

Wiki Examples:

All Examples

Binary OR two images
See:
 rtk::simple::Or for the procedural interface

 itk::OrImageFilter for the Doxygen on the original ITK class.



C++ includes: srtkOrImageFilter.h
*/"

%javamethodmodifiers  rtk::simple::OrImageFilter::Execute "/**
Image rtk::simple::OrImageFilter::Execute(const Image &image1, const Image &image2)

Execute the filter on the input images

*/
public ";

%javamethodmodifiers  rtk::simple::OrImageFilter::Execute "/**
Image rtk::simple::OrImageFilter::Execute(const Image &image1, int constant)

Execute the filter with an image and a constant

*/
public ";

%javamethodmodifiers  rtk::simple::OrImageFilter::Execute "/**
Image rtk::simple::OrImageFilter::Execute(int constant, const Image &image2)
*/
public ";

%javamethodmodifiers  rtk::simple::OrImageFilter::GetName "/**
std::string rtk::simple::OrImageFilter::GetName() const

Name of this class

*/
public ";

%javamethodmodifiers  rtk::simple::OrImageFilter::OrImageFilter "/**
rtk::simple::OrImageFilter::OrImageFilter()

Default Constructor that takes no arguments and initializes default
parameters

*/
public ";

%javamethodmodifiers  rtk::simple::OrImageFilter::ToString "/**
std::string rtk::simple::OrImageFilter::ToString() const

Print ourselves out

*/
public ";

%javamethodmodifiers  rtk::simple::OrImageFilter::~OrImageFilter "/**
rtk::simple::OrImageFilter::~OrImageFilter()

Destructor

*/
public ";


%typemap(javaimports) rtk::simple::OtsuMultipleThresholdsImageFilter "/**

Threshold an image using multiple Otsu Thresholds.


This filter creates a labeled image that separates the input image
into various classes. The filter computes the thresholds using the OtsuMultipleThresholdsCalculator and applies those thesholds to the input image using the ThresholdLabelerImageFilter . The NumberOfHistogramBins and NumberOfThresholds can be set for the
Calculator. The LabelOffset can be set for the ThresholdLabelerImageFilter .

This filter also includes an option to use the valley emphasis
algorithm from H.F. Ng, \"Automatic thresholding for defect
detection\", Pattern Recognition Letters, (27): 1644-1649, 2006. The
valley emphasis algorithm is particularly effective when the object to
be thresholded is small. See the following tests for examples:
itkOtsuMultipleThresholdsImageFilterTest3 and
itkOtsuMultipleThresholdsImageFilterTest4 To use this algorithm,
simple call the setter: SetValleyEmphasis(true) It is turned off by
default.


See:
ScalarImageToHistogramGenerator


 OtsuMultipleThresholdsCalculator


 ThresholdLabelerImageFilter

 rtk::simple::OtsuMultipleThresholds for the procedural interface

 itk::OtsuMultipleThresholdsImageFilter for the Doxygen on the original ITK class.


C++ includes: srtkOtsuMultipleThresholdsImageFilter.h
*/"

%javamethodmodifiers  rtk::simple::OtsuMultipleThresholdsImageFilter::Execute "/**
Image rtk::simple::OtsuMultipleThresholdsImageFilter::Execute(const Image &image1)

Execute the filter on the input image

*/
public ";

%javamethodmodifiers  rtk::simple::OtsuMultipleThresholdsImageFilter::Execute "/**
Image rtk::simple::OtsuMultipleThresholdsImageFilter::Execute(const Image &image1, uint8_t numberOfThresholds, uint8_t labelOffset,
uint32_t numberOfHistogramBins, bool valleyEmphasis)

Execute the filter on the input image with the given parameters

*/
public ";

%javamethodmodifiers  rtk::simple::OtsuMultipleThresholdsImageFilter::GetLabelOffset "/**
uint8_t rtk::simple::OtsuMultipleThresholdsImageFilter::GetLabelOffset() const

Set/Get the offset which labels have to start from. Default is 0.

*/
public ";

%javamethodmodifiers  rtk::simple::OtsuMultipleThresholdsImageFilter::GetName "/**
std::string rtk::simple::OtsuMultipleThresholdsImageFilter::GetName() const

Name of this class

*/
public ";

%javamethodmodifiers  rtk::simple::OtsuMultipleThresholdsImageFilter::GetNumberOfHistogramBins "/**
uint32_t rtk::simple::OtsuMultipleThresholdsImageFilter::GetNumberOfHistogramBins() const

Set/Get the number of histogram bins. Default is 128.

*/
public ";

%javamethodmodifiers  rtk::simple::OtsuMultipleThresholdsImageFilter::GetNumberOfThresholds "/**
uint8_t rtk::simple::OtsuMultipleThresholdsImageFilter::GetNumberOfThresholds() const

Set/Get the number of thresholds. Default is 1.

*/
public ";

%javamethodmodifiers  rtk::simple::OtsuMultipleThresholdsImageFilter::GetThresholds "/**
std::vector<double> rtk::simple::OtsuMultipleThresholdsImageFilter::GetThresholds() const

Get the computed threshold.

This is a measurement. Its value is updated in the Execute methods, so
the value will only be valid after an execution.

*/
public ";

%javamethodmodifiers  rtk::simple::OtsuMultipleThresholdsImageFilter::GetValleyEmphasis "/**
bool rtk::simple::OtsuMultipleThresholdsImageFilter::GetValleyEmphasis() const

Set/Get the use of valley emphasis. Default is false.

*/
public ";

%javamethodmodifiers  rtk::simple::OtsuMultipleThresholdsImageFilter::OtsuMultipleThresholdsImageFilter "/**
rtk::simple::OtsuMultipleThresholdsImageFilter::OtsuMultipleThresholdsImageFilter()

Default Constructor that takes no arguments and initializes default
parameters

*/
public ";

%javamethodmodifiers  rtk::simple::OtsuMultipleThresholdsImageFilter::SetLabelOffset "/**
Self& rtk::simple::OtsuMultipleThresholdsImageFilter::SetLabelOffset(uint8_t LabelOffset)

Set/Get the offset which labels have to start from. Default is 0.

*/
public ";

%javamethodmodifiers  rtk::simple::OtsuMultipleThresholdsImageFilter::SetNumberOfHistogramBins "/**
Self& rtk::simple::OtsuMultipleThresholdsImageFilter::SetNumberOfHistogramBins(uint32_t NumberOfHistogramBins)

Set/Get the number of histogram bins. Default is 128.

*/
public ";

%javamethodmodifiers  rtk::simple::OtsuMultipleThresholdsImageFilter::SetNumberOfThresholds "/**
Self& rtk::simple::OtsuMultipleThresholdsImageFilter::SetNumberOfThresholds(uint8_t NumberOfThresholds)

Set/Get the number of thresholds. Default is 1.

*/
public ";

%javamethodmodifiers  rtk::simple::OtsuMultipleThresholdsImageFilter::SetValleyEmphasis "/**
Self& rtk::simple::OtsuMultipleThresholdsImageFilter::SetValleyEmphasis(bool ValleyEmphasis)

Set/Get the use of valley emphasis. Default is false.

*/
public ";

%javamethodmodifiers  rtk::simple::OtsuMultipleThresholdsImageFilter::ToString "/**
std::string rtk::simple::OtsuMultipleThresholdsImageFilter::ToString() const

Print ourselves out

*/
public ";

%javamethodmodifiers  rtk::simple::OtsuMultipleThresholdsImageFilter::ValleyEmphasisOff "/**
Self& rtk::simple::OtsuMultipleThresholdsImageFilter::ValleyEmphasisOff()
*/
public ";

%javamethodmodifiers  rtk::simple::OtsuMultipleThresholdsImageFilter::ValleyEmphasisOn "/**
Self& rtk::simple::OtsuMultipleThresholdsImageFilter::ValleyEmphasisOn()

Set the value of ValleyEmphasis to true or false respectfully.

*/
public ";

%javamethodmodifiers  rtk::simple::OtsuMultipleThresholdsImageFilter::~OtsuMultipleThresholdsImageFilter "/**
rtk::simple::OtsuMultipleThresholdsImageFilter::~OtsuMultipleThresholdsImageFilter()

Destructor

*/
public ";


%typemap(javaimports) rtk::simple::OtsuThresholdImageFilter "/**

Threshold an image using the Otsu Threshold.


This filter creates a binary thresholded image that separates an image
into foreground and background components. The filter computes the
threshold using the OtsuThresholdCalculator and applies that theshold to the input image using the BinaryThresholdImageFilter .


Richard Beare
 Gaetan Lehmann. Biologie du Developpement et de la Reproduction, INRA
de Jouy-en-Josas, France.

This implementation was taken from the Insight Journal paper: https://hdl.handle.net/10380/3279 or http://www.insight-journal.org/browse/publication/811

Wiki Examples:

All Examples

Separate foreground and background using Otsu's method

See:
 HistogramThresholdImageFilter

 rtk::simple::OtsuThreshold for the procedural interface

 itk::OtsuThresholdImageFilter for the Doxygen on the original ITK class.


C++ includes: srtkOtsuThresholdImageFilter.h
*/"

%javamethodmodifiers  rtk::simple::OtsuThresholdImageFilter::Execute "/**
Image rtk::simple::OtsuThresholdImageFilter::Execute(const Image &image, const Image &maskImage)

Execute the filter on the input image

*/
public ";

%javamethodmodifiers  rtk::simple::OtsuThresholdImageFilter::Execute "/**
Image rtk::simple::OtsuThresholdImageFilter::Execute(const Image &image)
*/
public ";

%javamethodmodifiers  rtk::simple::OtsuThresholdImageFilter::Execute "/**
Image rtk::simple::OtsuThresholdImageFilter::Execute(const Image &image, const Image &maskImage, uint8_t insideValue,
uint8_t outsideValue, uint32_t numberOfHistogramBins, bool maskOutput,
uint8_t maskValue)

Execute the filter on the input image with the given parameters

*/
public ";

%javamethodmodifiers  rtk::simple::OtsuThresholdImageFilter::Execute "/**
Image rtk::simple::OtsuThresholdImageFilter::Execute(const Image &image, uint8_t insideValue, uint8_t outsideValue,
uint32_t numberOfHistogramBins, bool maskOutput, uint8_t maskValue)
*/
public ";

%javamethodmodifiers  rtk::simple::OtsuThresholdImageFilter::GetInsideValue "/**
uint8_t rtk::simple::OtsuThresholdImageFilter::GetInsideValue() const

Get the \"inside\" pixel value.

*/
public ";

%javamethodmodifiers  rtk::simple::OtsuThresholdImageFilter::GetMaskOutput "/**
bool rtk::simple::OtsuThresholdImageFilter::GetMaskOutput() const
*/
public ";

%javamethodmodifiers  rtk::simple::OtsuThresholdImageFilter::GetMaskValue "/**
uint8_t rtk::simple::OtsuThresholdImageFilter::GetMaskValue() const
*/
public ";

%javamethodmodifiers  rtk::simple::OtsuThresholdImageFilter::GetName "/**
std::string rtk::simple::OtsuThresholdImageFilter::GetName() const

Name of this class

*/
public ";

%javamethodmodifiers  rtk::simple::OtsuThresholdImageFilter::GetNumberOfHistogramBins "/**
uint32_t rtk::simple::OtsuThresholdImageFilter::GetNumberOfHistogramBins() const
*/
public ";

%javamethodmodifiers  rtk::simple::OtsuThresholdImageFilter::GetOutsideValue "/**
uint8_t rtk::simple::OtsuThresholdImageFilter::GetOutsideValue() const

Get the \"outside\" pixel value.

*/
public ";

%javamethodmodifiers  rtk::simple::OtsuThresholdImageFilter::GetThreshold "/**
double rtk::simple::OtsuThresholdImageFilter::GetThreshold() const

Get the computed threshold.


This is a measurement. Its value is updated in the Execute methods, so
the value will only be valid after an execution.

*/
public ";

%javamethodmodifiers  rtk::simple::OtsuThresholdImageFilter::MaskOutputOff "/**
Self& rtk::simple::OtsuThresholdImageFilter::MaskOutputOff()
*/
public ";

%javamethodmodifiers  rtk::simple::OtsuThresholdImageFilter::MaskOutputOn "/**
Self& rtk::simple::OtsuThresholdImageFilter::MaskOutputOn()

Set the value of MaskOutput to true or false respectfully.

*/
public ";

%javamethodmodifiers  rtk::simple::OtsuThresholdImageFilter::OtsuThresholdImageFilter "/**
rtk::simple::OtsuThresholdImageFilter::OtsuThresholdImageFilter()

Default Constructor that takes no arguments and initializes default
parameters

*/
public ";

%javamethodmodifiers  rtk::simple::OtsuThresholdImageFilter::SetInsideValue "/**
Self& rtk::simple::OtsuThresholdImageFilter::SetInsideValue(uint8_t InsideValue)

Set the \"inside\" pixel value. The default value NumericTraits<OutputPixelType>::max()

*/
public ";

%javamethodmodifiers  rtk::simple::OtsuThresholdImageFilter::SetMaskOutput "/**
Self& rtk::simple::OtsuThresholdImageFilter::SetMaskOutput(bool MaskOutput)

Do you want the output to be masked by the mask used in histogram
construction. Only relevant if masking is in use.

*/
public ";

%javamethodmodifiers  rtk::simple::OtsuThresholdImageFilter::SetMaskValue "/**
Self& rtk::simple::OtsuThresholdImageFilter::SetMaskValue(uint8_t MaskValue)

The value in the mask image, if used, indicating voxels that should be
included. Default is the max of pixel type, as in the
MaskedImageToHistogramFilter

*/
public ";

%javamethodmodifiers  rtk::simple::OtsuThresholdImageFilter::SetNumberOfHistogramBins "/**
Self& rtk::simple::OtsuThresholdImageFilter::SetNumberOfHistogramBins(uint32_t NumberOfHistogramBins)

Set/Get the number of histogram bins. Defaults is 128.

*/
public ";

%javamethodmodifiers  rtk::simple::OtsuThresholdImageFilter::SetOutsideValue "/**
Self& rtk::simple::OtsuThresholdImageFilter::SetOutsideValue(uint8_t OutsideValue)

Set the \"outside\" pixel value. The default value NumericTraits<OutputPixelType>::Zero.

*/
public ";

%javamethodmodifiers  rtk::simple::OtsuThresholdImageFilter::ToString "/**
std::string rtk::simple::OtsuThresholdImageFilter::ToString() const

Print ourselves out

*/
public ";

%javamethodmodifiers  rtk::simple::OtsuThresholdImageFilter::~OtsuThresholdImageFilter "/**
rtk::simple::OtsuThresholdImageFilter::~OtsuThresholdImageFilter()

Destructor

*/
public ";


%typemap(javaimports) rtk::simple::PasteImageFilter "/**

Paste an image into another image.


PasteImageFilter allows you to take a section of one image and paste into another
image. The SetDestinationIndex() method prescribes where in the first input to start pasting data from
the second input. The SetSourceRegion method prescribes the section of
the second image to paste into the first. If the output requested
region does not include the SourceRegion after it has been
repositioned to DestinationIndex, then the output will just be a copy
of the input.

The two inputs and output image will have the same pixel type.

Wiki Examples:

All Examples

Paste a part of one image into another image
See:
 rtk::simple::Paste for the procedural interface

 itk::PasteImageFilter for the Doxygen on the original ITK class.



C++ includes: srtkPasteImageFilter.h
*/"

%javamethodmodifiers  rtk::simple::PasteImageFilter::Execute "/**
Image rtk::simple::PasteImageFilter::Execute(const Image &image1, const Image &image2)

Execute the filter on the input images

*/
public ";

%javamethodmodifiers  rtk::simple::PasteImageFilter::Execute "/**
Image rtk::simple::PasteImageFilter::Execute(const Image &image1, const Image &image2, const std::vector< unsigned
int > &sourceSize, const std::vector< int > &sourceIndex, const
std::vector< int > &destinationIndex)

Execute the filter on the input images with the given parameters

*/
public ";

%javamethodmodifiers  rtk::simple::PasteImageFilter::GetDestinationIndex "/**
std::vector<int> rtk::simple::PasteImageFilter::GetDestinationIndex() const

Set/Get the destination index (where in the first input the second
input will be pasted.

*/
public ";

%javamethodmodifiers  rtk::simple::PasteImageFilter::GetName "/**
std::string rtk::simple::PasteImageFilter::GetName() const

Name of this class

*/
public ";

%javamethodmodifiers  rtk::simple::PasteImageFilter::GetSourceIndex "/**
std::vector<int> rtk::simple::PasteImageFilter::GetSourceIndex() const
*/
public ";

%javamethodmodifiers  rtk::simple::PasteImageFilter::GetSourceSize "/**
std::vector<unsigned int> rtk::simple::PasteImageFilter::GetSourceSize() const
*/
public ";

%javamethodmodifiers  rtk::simple::PasteImageFilter::PasteImageFilter "/**
rtk::simple::PasteImageFilter::PasteImageFilter()

Default Constructor that takes no arguments and initializes default
parameters

*/
public ";

%javamethodmodifiers  rtk::simple::PasteImageFilter::SetDestinationIndex "/**
Self& rtk::simple::PasteImageFilter::SetDestinationIndex(const std::vector< int > &DestinationIndex)

Set/Get the destination index (where in the first input the second
input will be pasted.

*/
public ";

%javamethodmodifiers  rtk::simple::PasteImageFilter::SetSourceIndex "/**
Self& rtk::simple::PasteImageFilter::SetSourceIndex(const std::vector< int > &SourceIndex)
*/
public ";

%javamethodmodifiers  rtk::simple::PasteImageFilter::SetSourceSize "/**
Self& rtk::simple::PasteImageFilter::SetSourceSize(const std::vector< unsigned int > &SourceSize)
*/
public ";

%javamethodmodifiers  rtk::simple::PasteImageFilter::ToString "/**
std::string rtk::simple::PasteImageFilter::ToString() const

Print ourselves out

*/
public ";

%javamethodmodifiers  rtk::simple::PasteImageFilter::~PasteImageFilter "/**
rtk::simple::PasteImageFilter::~PasteImageFilter()

Destructor

*/
public ";


%typemap(javaimports) rtk::simple::PatchBasedDenoisingImageFilter "/**

Derived class implementing a specific patch-based denoising algorithm,
as detailed below.


This class is derived from the base class PatchBasedDenoisingBaseImageFilter ; please refer to the documentation of the base class first. This
class implements a denoising filter that uses iterative non-local, or
semi-local, weighted averaging of image patches for image denoising.
The intensity at each pixel 'p' gets updated as a weighted average of
intensities of a chosen subset of pixels from the image.

This class implements the denoising algorithm using a Gaussian kernel
function for nonparametric density estimation. The class implements a
scheme to automatically estimated the kernel bandwidth parameter
(namely, sigma) using leave-one-out cross validation. It implements
schemes for random sampling of patches non-locally (from the entire
image) as well as semi-locally (from the spatial proximity of the
pixel being denoised at the specific point in time). It implements a
specific scheme for defining patch weights (mask) as described in
Awate and Whitaker 2005 IEEE CVPR and 2006 IEEE TPAMI.


See:
 PatchBasedDenoisingBaseImageFilter

 itk::PatchBasedDenoisingImageFilter for the Doxygen on the original ITK class.


C++ includes: srtkPatchBasedDenoisingImageFilter.h
*/"

%javamethodmodifiers  rtk::simple::PatchBasedDenoisingImageFilter::AlwaysTreatComponentsAsEuclideanOff "/**
Self& rtk::simple::PatchBasedDenoisingImageFilter::AlwaysTreatComponentsAsEuclideanOff()
*/
public ";

%javamethodmodifiers  rtk::simple::PatchBasedDenoisingImageFilter::AlwaysTreatComponentsAsEuclideanOn "/**
Self& rtk::simple::PatchBasedDenoisingImageFilter::AlwaysTreatComponentsAsEuclideanOn()

Set the value of AlwaysTreatComponentsAsEuclidean to true or false
respectfully.

*/
public ";

%javamethodmodifiers  rtk::simple::PatchBasedDenoisingImageFilter::Execute "/**
Image rtk::simple::PatchBasedDenoisingImageFilter::Execute(const Image &image1)

Execute the filter on the input image

*/
public ";

%javamethodmodifiers  rtk::simple::PatchBasedDenoisingImageFilter::Execute "/**
Image rtk::simple::PatchBasedDenoisingImageFilter::Execute(const Image &image1, double kernelBandwidthSigma, uint32_t
patchRadius, uint32_t numberOfIterations, uint32_t
numberOfSamplePatches, double sampleVariance,
PatchBasedDenoisingImageFilter::NoiseModelType noiseModel, double
noiseSigma, double noiseModelFidelityWeight, bool
alwaysTreatComponentsAsEuclidean, bool kernelBandwidthEstimation,
double kernelBandwidthMultiplicationFactor, uint32_t
kernelBandwidthUpdateFrequency, double
kernelBandwidthFractionPixelsForEstimation)

Execute the filter on the input image with the given parameters

*/
public ";

%javamethodmodifiers  rtk::simple::PatchBasedDenoisingImageFilter::GetAlwaysTreatComponentsAsEuclidean "/**
bool rtk::simple::PatchBasedDenoisingImageFilter::GetAlwaysTreatComponentsAsEuclidean() const

Set/Get flag indicating whether all components should always be
treated as if they are in euclidean space regardless of pixel type.
Defaults to false.

*/
public ";

%javamethodmodifiers  rtk::simple::PatchBasedDenoisingImageFilter::GetKernelBandwidthEstimation "/**
bool rtk::simple::PatchBasedDenoisingImageFilter::GetKernelBandwidthEstimation() const

Set/Get flag indicating whether kernel-bandwidth should be estimated
automatically from the image data. Defaults to true.

*/
public ";

%javamethodmodifiers  rtk::simple::PatchBasedDenoisingImageFilter::GetKernelBandwidthFractionPixelsForEstimation "/**
double rtk::simple::PatchBasedDenoisingImageFilter::GetKernelBandwidthFractionPixelsForEstimation() const

Set/Get the fraction of the image to use for kernel bandwidth sigma
estimation. To reduce the computational burden for computing sigma, a
small random fraction of the image pixels can be used.

*/
public ";

%javamethodmodifiers  rtk::simple::PatchBasedDenoisingImageFilter::GetKernelBandwidthMultiplicationFactor "/**
double rtk::simple::PatchBasedDenoisingImageFilter::GetKernelBandwidthMultiplicationFactor() const

Set/Get the kernel bandwidth sigma multiplication factor used to
modify the automatically-estimated kernel bandwidth sigma. At times,
it may be desirable to modify the value of the automatically-estimated
sigma. Typically, this number isn't very far from 1. Note: This is
used only when KernelBandwidthEstimation is True/On.

*/
public ";

%javamethodmodifiers  rtk::simple::PatchBasedDenoisingImageFilter::GetKernelBandwidthSigma "/**
double rtk::simple::PatchBasedDenoisingImageFilter::GetKernelBandwidthSigma() const

Set/Get initial kernel bandwidth estimate. To prevent the class from
automatically modifying this estimate, set KernelBandwidthEstimation
to false in the base class.

*/
public ";

%javamethodmodifiers  rtk::simple::PatchBasedDenoisingImageFilter::GetKernelBandwidthUpdateFrequency "/**
uint32_t rtk::simple::PatchBasedDenoisingImageFilter::GetKernelBandwidthUpdateFrequency() const

Set/Get the update frequency for the kernel bandwidth estimation. An
optimal bandwidth will be re-estimated based on the denoised image
after every 'n' iterations. Must be a positive integer. Defaults to 3,
i.e. bandwidth updated after every 3 denoising iteration.

*/
public ";

%javamethodmodifiers  rtk::simple::PatchBasedDenoisingImageFilter::GetName "/**
std::string rtk::simple::PatchBasedDenoisingImageFilter::GetName() const

Name of this class

*/
public ";

%javamethodmodifiers  rtk::simple::PatchBasedDenoisingImageFilter::GetNoiseModel "/**
NoiseModelType rtk::simple::PatchBasedDenoisingImageFilter::GetNoiseModel() const

Set/Get the noise model type. Defaults to GAUSSIAN. To use the noise
model during denoising, FidelityWeight must be positive.

*/
public ";

%javamethodmodifiers  rtk::simple::PatchBasedDenoisingImageFilter::GetNoiseModelFidelityWeight "/**
double rtk::simple::PatchBasedDenoisingImageFilter::GetNoiseModelFidelityWeight() const

Set/Get the weight on the fidelity term (penalizes deviations from the
noisy data). This option is used when a noise model is specified. This
weight controls the balance between the smoothing and the closeness to
the noisy data.

*/
public ";

%javamethodmodifiers  rtk::simple::PatchBasedDenoisingImageFilter::GetNoiseSigma "/**
double rtk::simple::PatchBasedDenoisingImageFilter::GetNoiseSigma() const
*/
public ";

%javamethodmodifiers  rtk::simple::PatchBasedDenoisingImageFilter::GetNumberOfIterations "/**
uint32_t rtk::simple::PatchBasedDenoisingImageFilter::GetNumberOfIterations() const

Set/Get the number of denoising iterations to perform. Must be a
positive integer. Defaults to 1.

*/
public ";

%javamethodmodifiers  rtk::simple::PatchBasedDenoisingImageFilter::GetNumberOfSamplePatches "/**
uint32_t rtk::simple::PatchBasedDenoisingImageFilter::GetNumberOfSamplePatches() const
*/
public ";

%javamethodmodifiers  rtk::simple::PatchBasedDenoisingImageFilter::GetPatchRadius "/**
uint32_t rtk::simple::PatchBasedDenoisingImageFilter::GetPatchRadius() const

Set/Get the patch radius specified in physical coordinates. Patch
radius is preferably set to an even number. Currently, only isotropic
patches in physical space are allowed; patches can be anisotropic in
voxel space.

*/
public ";

%javamethodmodifiers  rtk::simple::PatchBasedDenoisingImageFilter::GetSampleVariance "/**
double rtk::simple::PatchBasedDenoisingImageFilter::GetSampleVariance() const

Set/Get the variance of the domain where patches are sampled.

*/
public ";

%javamethodmodifiers  rtk::simple::PatchBasedDenoisingImageFilter::KernelBandwidthEstimationOff "/**
Self& rtk::simple::PatchBasedDenoisingImageFilter::KernelBandwidthEstimationOff()
*/
public ";

%javamethodmodifiers  rtk::simple::PatchBasedDenoisingImageFilter::KernelBandwidthEstimationOn "/**
Self& rtk::simple::PatchBasedDenoisingImageFilter::KernelBandwidthEstimationOn()

Set the value of KernelBandwidthEstimation to true or false
respectfully.

*/
public ";

%javamethodmodifiers  rtk::simple::PatchBasedDenoisingImageFilter::PatchBasedDenoisingImageFilter "/**
rtk::simple::PatchBasedDenoisingImageFilter::PatchBasedDenoisingImageFilter()

Default Constructor that takes no arguments and initializes default
parameters

*/
public ";

%javamethodmodifiers  rtk::simple::PatchBasedDenoisingImageFilter::SetAlwaysTreatComponentsAsEuclidean "/**
Self& rtk::simple::PatchBasedDenoisingImageFilter::SetAlwaysTreatComponentsAsEuclidean(bool AlwaysTreatComponentsAsEuclidean)

Set/Get flag indicating whether all components should always be
treated as if they are in euclidean space regardless of pixel type.
Defaults to false.

*/
public ";

%javamethodmodifiers  rtk::simple::PatchBasedDenoisingImageFilter::SetKernelBandwidthEstimation "/**
Self& rtk::simple::PatchBasedDenoisingImageFilter::SetKernelBandwidthEstimation(bool KernelBandwidthEstimation)

Set/Get flag indicating whether kernel-bandwidth should be estimated
automatically from the image data. Defaults to true.

*/
public ";

%javamethodmodifiers  rtk::simple::PatchBasedDenoisingImageFilter::SetKernelBandwidthFractionPixelsForEstimation "/**
Self& rtk::simple::PatchBasedDenoisingImageFilter::SetKernelBandwidthFractionPixelsForEstimation(double KernelBandwidthFractionPixelsForEstimation)

Set/Get the fraction of the image to use for kernel bandwidth sigma
estimation. To reduce the computational burden for computing sigma, a
small random fraction of the image pixels can be used.

*/
public ";

%javamethodmodifiers  rtk::simple::PatchBasedDenoisingImageFilter::SetKernelBandwidthMultiplicationFactor "/**
Self& rtk::simple::PatchBasedDenoisingImageFilter::SetKernelBandwidthMultiplicationFactor(double KernelBandwidthMultiplicationFactor)

Set/Get the kernel bandwidth sigma multiplication factor used to
modify the automatically-estimated kernel bandwidth sigma. At times,
it may be desirable to modify the value of the automatically-estimated
sigma. Typically, this number isn't very far from 1. Note: This is
used only when KernelBandwidthEstimation is True/On.

*/
public ";

%javamethodmodifiers  rtk::simple::PatchBasedDenoisingImageFilter::SetKernelBandwidthSigma "/**
Self& rtk::simple::PatchBasedDenoisingImageFilter::SetKernelBandwidthSigma(double KernelBandwidthSigma)

Set/Get initial kernel bandwidth estimate. To prevent the class from
automatically modifying this estimate, set KernelBandwidthEstimation
to false in the base class.

*/
public ";

%javamethodmodifiers  rtk::simple::PatchBasedDenoisingImageFilter::SetKernelBandwidthUpdateFrequency "/**
Self& rtk::simple::PatchBasedDenoisingImageFilter::SetKernelBandwidthUpdateFrequency(uint32_t KernelBandwidthUpdateFrequency)

Set/Get the update frequency for the kernel bandwidth estimation. An
optimal bandwidth will be re-estimated based on the denoised image
after every 'n' iterations. Must be a positive integer. Defaults to 3,
i.e. bandwidth updated after every 3 denoising iteration.

*/
public ";

%javamethodmodifiers  rtk::simple::PatchBasedDenoisingImageFilter::SetNoiseModel "/**
Self& rtk::simple::PatchBasedDenoisingImageFilter::SetNoiseModel(NoiseModelType NoiseModel)

Set/Get the noise model type. Defaults to GAUSSIAN. To use the noise
model during denoising, FidelityWeight must be positive.

*/
public ";

%javamethodmodifiers  rtk::simple::PatchBasedDenoisingImageFilter::SetNoiseModelFidelityWeight "/**
Self& rtk::simple::PatchBasedDenoisingImageFilter::SetNoiseModelFidelityWeight(double NoiseModelFidelityWeight)

Set/Get the weight on the fidelity term (penalizes deviations from the
noisy data). This option is used when a noise model is specified. This
weight controls the balance between the smoothing and the closeness to
the noisy data.

*/
public ";

%javamethodmodifiers  rtk::simple::PatchBasedDenoisingImageFilter::SetNoiseSigma "/**
Self& rtk::simple::PatchBasedDenoisingImageFilter::SetNoiseSigma(double NoiseSigma)

Set/Get the noise sigma. Used by the noise model where appropriate,
defaults to 5% of the image intensity range

*/
public ";

%javamethodmodifiers  rtk::simple::PatchBasedDenoisingImageFilter::SetNumberOfIterations "/**
Self& rtk::simple::PatchBasedDenoisingImageFilter::SetNumberOfIterations(uint32_t NumberOfIterations)

Set/Get the number of denoising iterations to perform. Must be a
positive integer. Defaults to 1.

*/
public ";

%javamethodmodifiers  rtk::simple::PatchBasedDenoisingImageFilter::SetNumberOfSamplePatches "/**
Self& rtk::simple::PatchBasedDenoisingImageFilter::SetNumberOfSamplePatches(uint32_t NumberOfSamplePatches)

Set/Get the number of patches to sample for each pixel.

*/
public ";

%javamethodmodifiers  rtk::simple::PatchBasedDenoisingImageFilter::SetPatchRadius "/**
Self& rtk::simple::PatchBasedDenoisingImageFilter::SetPatchRadius(uint32_t PatchRadius)

Set/Get the patch radius specified in physical coordinates. Patch
radius is preferably set to an even number. Currently, only isotropic
patches in physical space are allowed; patches can be anisotropic in
voxel space.

*/
public ";

%javamethodmodifiers  rtk::simple::PatchBasedDenoisingImageFilter::SetSampleVariance "/**
Self& rtk::simple::PatchBasedDenoisingImageFilter::SetSampleVariance(double SampleVariance)

Set/Get the variance of the domain where patches are sampled.

*/
public ";

%javamethodmodifiers  rtk::simple::PatchBasedDenoisingImageFilter::ToString "/**
std::string rtk::simple::PatchBasedDenoisingImageFilter::ToString() const

Print ourselves out

*/
public ";

%javamethodmodifiers  rtk::simple::PatchBasedDenoisingImageFilter::~PatchBasedDenoisingImageFilter "/**
rtk::simple::PatchBasedDenoisingImageFilter::~PatchBasedDenoisingImageFilter()

Destructor

*/
public ";


%typemap(javaimports) rtk::simple::PermuteAxesImageFilter "/**

Permutes the image axes according to a user specified order.


PermuateAxesImageFilter permutes the image axes according to a user
specified order. The permutation order is set via method SetOrder(
order ) where the input is an array of ImageDimension number of
unsigned int. The elements of the array must be a rearrangment of the
numbers from 0 to ImageDimension - 1.

The i-th axis of the output image corresponds with the order[i]-th
axis of the input image.

The output meta image information (LargestPossibleRegion, spacing,
origin) is computed by permuting the corresponding input meta
information.

Wiki Examples:

All Examples

Switch the axes of an image
See:
 rtk::simple::PermuteAxes for the procedural interface

 itk::PermuteAxesImageFilter for the Doxygen on the original ITK class.



C++ includes: srtkPermuteAxesImageFilter.h
*/"

%javamethodmodifiers  rtk::simple::PermuteAxesImageFilter::Execute "/**
Image rtk::simple::PermuteAxesImageFilter::Execute(const Image &image1)

Execute the filter on the input image

*/
public ";

%javamethodmodifiers  rtk::simple::PermuteAxesImageFilter::Execute "/**
Image rtk::simple::PermuteAxesImageFilter::Execute(const Image &image1, const std::vector< unsigned int > &order)

Execute the filter on the input image with the given parameters

*/
public ";

%javamethodmodifiers  rtk::simple::PermuteAxesImageFilter::GetName "/**
std::string rtk::simple::PermuteAxesImageFilter::GetName() const

Name of this class

*/
public ";

%javamethodmodifiers  rtk::simple::PermuteAxesImageFilter::GetOrder "/**
std::vector<unsigned int> rtk::simple::PermuteAxesImageFilter::GetOrder() const

Get the permutation order.

*/
public ";

%javamethodmodifiers  rtk::simple::PermuteAxesImageFilter::PermuteAxesImageFilter "/**
rtk::simple::PermuteAxesImageFilter::PermuteAxesImageFilter()

Default Constructor that takes no arguments and initializes default
parameters

*/
public ";

%javamethodmodifiers  rtk::simple::PermuteAxesImageFilter::SetOrder "/**
Self& rtk::simple::PermuteAxesImageFilter::SetOrder(const std::vector< unsigned int > &Order)

Set the permutation order. The elements of order must be a
rearrangement of the numbers from 0 to ImageDimension - 1.

*/
public ";

%javamethodmodifiers  rtk::simple::PermuteAxesImageFilter::ToString "/**
std::string rtk::simple::PermuteAxesImageFilter::ToString() const

Print ourselves out

*/
public ";

%javamethodmodifiers  rtk::simple::PermuteAxesImageFilter::~PermuteAxesImageFilter "/**
rtk::simple::PermuteAxesImageFilter::~PermuteAxesImageFilter()

Destructor

*/
public ";


%typemap(javaimports) rtk::simple::PhysicalPointImageSource "/**

Generate an image of the physical locations of each pixel.


This image source supports image which have a multi-component pixel
equal to the image dimension, and variable length VectorImages. It is
recommented that the component type be a real valued type.
See:
 rtk::simple::PhysicalPointImageSource for the procedural interface

 itk::PhysicalPointImageSource for the Doxygen on the original ITK class.


C++ includes: srtkPhysicalPointImageSource.h
*/"

%javamethodmodifiers  rtk::simple::PhysicalPointImageSource::Execute "/**
Image rtk::simple::PhysicalPointImageSource::Execute()

Execute the filter on the input image

*/
public ";

%javamethodmodifiers  rtk::simple::PhysicalPointImageSource::Execute "/**
Image rtk::simple::PhysicalPointImageSource::Execute(PixelIDValueEnum outputPixelType, const std::vector< unsigned int >
&size, const std::vector< double > &origin, const std::vector< double
> &spacing, std::vector< double > direction)

Execute the filter on the input image with the given parameters

*/
public ";

%javamethodmodifiers  rtk::simple::PhysicalPointImageSource::GetDirection "/**
std::vector<double> rtk::simple::PhysicalPointImageSource::GetDirection() const
*/
public ";

%javamethodmodifiers  rtk::simple::PhysicalPointImageSource::GetName "/**
std::string rtk::simple::PhysicalPointImageSource::GetName() const

Name of this class

*/
public ";

%javamethodmodifiers  rtk::simple::PhysicalPointImageSource::GetOrigin "/**
std::vector<double> rtk::simple::PhysicalPointImageSource::GetOrigin() const
*/
public ";

%javamethodmodifiers  rtk::simple::PhysicalPointImageSource::GetOutputPixelType "/**
PixelIDValueEnum rtk::simple::PhysicalPointImageSource::GetOutputPixelType() const
*/
public ";

%javamethodmodifiers  rtk::simple::PhysicalPointImageSource::GetSize "/**
std::vector<unsigned int> rtk::simple::PhysicalPointImageSource::GetSize() const
*/
public ";

%javamethodmodifiers  rtk::simple::PhysicalPointImageSource::GetSpacing "/**
std::vector<double> rtk::simple::PhysicalPointImageSource::GetSpacing() const
*/
public ";

%javamethodmodifiers  rtk::simple::PhysicalPointImageSource::PhysicalPointImageSource "/**
rtk::simple::PhysicalPointImageSource::PhysicalPointImageSource()

Default Constructor that takes no arguments and initializes default
parameters

*/
public ";

%javamethodmodifiers  rtk::simple::PhysicalPointImageSource::SetDirection "/**
Self& rtk::simple::PhysicalPointImageSource::SetDirection(std::vector< double > Direction)
*/
public ";

%javamethodmodifiers  rtk::simple::PhysicalPointImageSource::SetOrigin "/**
Self& rtk::simple::PhysicalPointImageSource::SetOrigin(const std::vector< double > &Origin)
*/
public ";

%javamethodmodifiers  rtk::simple::PhysicalPointImageSource::SetOutputPixelType "/**
Self& rtk::simple::PhysicalPointImageSource::SetOutputPixelType(PixelIDValueEnum OutputPixelType)
*/
public ";

%javamethodmodifiers  rtk::simple::PhysicalPointImageSource::SetReferenceImage "/**
void rtk::simple::PhysicalPointImageSource::SetReferenceImage(const Image &refImage)

This methods sets the size, origin, spacing and direction to that of
the provided image

*/
public ";

%javamethodmodifiers  rtk::simple::PhysicalPointImageSource::SetSize "/**
Self& rtk::simple::PhysicalPointImageSource::SetSize(const std::vector< unsigned int > &Size)
*/
public ";

%javamethodmodifiers  rtk::simple::PhysicalPointImageSource::SetSpacing "/**
Self& rtk::simple::PhysicalPointImageSource::SetSpacing(const std::vector< double > &Spacing)
*/
public ";

%javamethodmodifiers  rtk::simple::PhysicalPointImageSource::ToString "/**
std::string rtk::simple::PhysicalPointImageSource::ToString() const

Print ourselves out

*/
public ";

%javamethodmodifiers  rtk::simple::PhysicalPointImageSource::~PhysicalPointImageSource "/**
rtk::simple::PhysicalPointImageSource::~PhysicalPointImageSource()

Destructor

*/
public ";


%typemap(javaimports) rtk::simple::PimpleImageBase "/**

Private implementation idiom image base class.


We utilize the private implementation ( or PImple) programming idiom
to modify the behavior of the simple image class based on the
different image types.

This class is designed to utilize the trivial copy, and assgnement
operators

C++ includes: srtkPimpleImageBase.h
*/"

%javamethodmodifiers  rtk::simple::PimpleImageBase::DeepCopy "/**
virtual PimpleImageBase* rtk::simple::PimpleImageBase::DeepCopy(void) const =0
*/
public ";

%javamethodmodifiers  rtk::simple::PimpleImageBase::GetBufferAsDouble "/**
virtual double* rtk::simple::PimpleImageBase::GetBufferAsDouble()=0
*/
public ";

%javamethodmodifiers  rtk::simple::PimpleImageBase::GetBufferAsDouble "/**
virtual const double* rtk::simple::PimpleImageBase::GetBufferAsDouble() const =0
*/
public ";

%javamethodmodifiers  rtk::simple::PimpleImageBase::GetBufferAsFloat "/**
virtual float* rtk::simple::PimpleImageBase::GetBufferAsFloat()=0
*/
public ";

%javamethodmodifiers  rtk::simple::PimpleImageBase::GetBufferAsFloat "/**
virtual const float* rtk::simple::PimpleImageBase::GetBufferAsFloat() const =0
*/
public ";

%javamethodmodifiers  rtk::simple::PimpleImageBase::GetBufferAsInt16 "/**
virtual int16_t* rtk::simple::PimpleImageBase::GetBufferAsInt16()=0
*/
public ";

%javamethodmodifiers  rtk::simple::PimpleImageBase::GetBufferAsInt16 "/**
virtual const int16_t* rtk::simple::PimpleImageBase::GetBufferAsInt16() const =0
*/
public ";

%javamethodmodifiers  rtk::simple::PimpleImageBase::GetBufferAsInt32 "/**
virtual int32_t* rtk::simple::PimpleImageBase::GetBufferAsInt32()=0
*/
public ";

%javamethodmodifiers  rtk::simple::PimpleImageBase::GetBufferAsInt32 "/**
virtual const int32_t* rtk::simple::PimpleImageBase::GetBufferAsInt32() const =0
*/
public ";

%javamethodmodifiers  rtk::simple::PimpleImageBase::GetBufferAsInt64 "/**
virtual int64_t* rtk::simple::PimpleImageBase::GetBufferAsInt64()=0
*/
public ";

%javamethodmodifiers  rtk::simple::PimpleImageBase::GetBufferAsInt64 "/**
virtual const int64_t* rtk::simple::PimpleImageBase::GetBufferAsInt64() const =0
*/
public ";

%javamethodmodifiers  rtk::simple::PimpleImageBase::GetBufferAsInt8 "/**
virtual int8_t* rtk::simple::PimpleImageBase::GetBufferAsInt8()=0
*/
public ";

%javamethodmodifiers  rtk::simple::PimpleImageBase::GetBufferAsInt8 "/**
virtual const int8_t* rtk::simple::PimpleImageBase::GetBufferAsInt8() const =0
*/
public ";

%javamethodmodifiers  rtk::simple::PimpleImageBase::GetBufferAsUInt16 "/**
virtual uint16_t* rtk::simple::PimpleImageBase::GetBufferAsUInt16()=0
*/
public ";

%javamethodmodifiers  rtk::simple::PimpleImageBase::GetBufferAsUInt16 "/**
virtual const uint16_t* rtk::simple::PimpleImageBase::GetBufferAsUInt16() const =0
*/
public ";

%javamethodmodifiers  rtk::simple::PimpleImageBase::GetBufferAsUInt32 "/**
virtual uint32_t* rtk::simple::PimpleImageBase::GetBufferAsUInt32()=0
*/
public ";

%javamethodmodifiers  rtk::simple::PimpleImageBase::GetBufferAsUInt32 "/**
virtual const uint32_t* rtk::simple::PimpleImageBase::GetBufferAsUInt32() const =0
*/
public ";

%javamethodmodifiers  rtk::simple::PimpleImageBase::GetBufferAsUInt64 "/**
virtual uint64_t* rtk::simple::PimpleImageBase::GetBufferAsUInt64()=0
*/
public ";

%javamethodmodifiers  rtk::simple::PimpleImageBase::GetBufferAsUInt64 "/**
virtual const uint64_t* rtk::simple::PimpleImageBase::GetBufferAsUInt64() const =0
*/
public ";

%javamethodmodifiers  rtk::simple::PimpleImageBase::GetBufferAsUInt8 "/**
virtual uint8_t* rtk::simple::PimpleImageBase::GetBufferAsUInt8()=0
*/
public ";

%javamethodmodifiers  rtk::simple::PimpleImageBase::GetBufferAsUInt8 "/**
virtual const uint8_t* rtk::simple::PimpleImageBase::GetBufferAsUInt8() const =0
*/
public ";

%javamethodmodifiers  rtk::simple::PimpleImageBase::GetDataBase "/**
virtual itk::DataObject* rtk::simple::PimpleImageBase::GetDataBase(void)=0
*/
public ";

%javamethodmodifiers  rtk::simple::PimpleImageBase::GetDataBase "/**
virtual const itk::DataObject* rtk::simple::PimpleImageBase::GetDataBase(void) const =0
*/
public ";

%javamethodmodifiers  rtk::simple::PimpleImageBase::GetDepth "/**
virtual unsigned int rtk::simple::PimpleImageBase::GetDepth(void) const
*/
public ";

%javamethodmodifiers  rtk::simple::PimpleImageBase::GetDimension "/**
virtual unsigned int rtk::simple::PimpleImageBase::GetDimension(void) const =0
*/
public ";

%javamethodmodifiers  rtk::simple::PimpleImageBase::GetDirection "/**
virtual std::vector< double > rtk::simple::PimpleImageBase::GetDirection(void) const =0
*/
public ";

%javamethodmodifiers  rtk::simple::PimpleImageBase::GetHeight "/**
virtual unsigned int rtk::simple::PimpleImageBase::GetHeight(void) const
*/
public ";

%javamethodmodifiers  rtk::simple::PimpleImageBase::GetNumberOfComponentsPerPixel "/**
virtual unsigned int rtk::simple::PimpleImageBase::GetNumberOfComponentsPerPixel(void) const =0
*/
public ";

%javamethodmodifiers  rtk::simple::PimpleImageBase::GetOrigin "/**
virtual std::vector<double> rtk::simple::PimpleImageBase::GetOrigin(void) const =0
*/
public ";

%javamethodmodifiers  rtk::simple::PimpleImageBase::GetPixelAsComplexFloat32 "/**
virtual std::complex<float> rtk::simple::PimpleImageBase::GetPixelAsComplexFloat32(const std::vector< uint32_t > &idx) const =0
*/
public ";

%javamethodmodifiers  rtk::simple::PimpleImageBase::GetPixelAsComplexFloat64 "/**
virtual std::complex<double> rtk::simple::PimpleImageBase::GetPixelAsComplexFloat64(const std::vector< uint32_t > &idx) const =0
*/
public ";

%javamethodmodifiers  rtk::simple::PimpleImageBase::GetPixelAsDouble "/**
virtual double rtk::simple::PimpleImageBase::GetPixelAsDouble(const std::vector< uint32_t > &idx) const =0
*/
public ";

%javamethodmodifiers  rtk::simple::PimpleImageBase::GetPixelAsFloat "/**
virtual float rtk::simple::PimpleImageBase::GetPixelAsFloat(const std::vector< uint32_t > &idx) const =0
*/
public ";

%javamethodmodifiers  rtk::simple::PimpleImageBase::GetPixelAsInt16 "/**
virtual int16_t rtk::simple::PimpleImageBase::GetPixelAsInt16(const std::vector< uint32_t > &idx) const =0
*/
public ";

%javamethodmodifiers  rtk::simple::PimpleImageBase::GetPixelAsInt32 "/**
virtual int32_t rtk::simple::PimpleImageBase::GetPixelAsInt32(const std::vector< uint32_t > &idx) const =0
*/
public ";

%javamethodmodifiers  rtk::simple::PimpleImageBase::GetPixelAsInt64 "/**
virtual int64_t rtk::simple::PimpleImageBase::GetPixelAsInt64(const std::vector< uint32_t > &idx) const =0
*/
public ";

%javamethodmodifiers  rtk::simple::PimpleImageBase::GetPixelAsInt8 "/**
virtual int8_t rtk::simple::PimpleImageBase::GetPixelAsInt8(const std::vector< uint32_t > &idx) const =0
*/
public ";

%javamethodmodifiers  rtk::simple::PimpleImageBase::GetPixelAsUInt16 "/**
virtual uint16_t rtk::simple::PimpleImageBase::GetPixelAsUInt16(const std::vector< uint32_t > &idx) const =0
*/
public ";

%javamethodmodifiers  rtk::simple::PimpleImageBase::GetPixelAsUInt32 "/**
virtual uint32_t rtk::simple::PimpleImageBase::GetPixelAsUInt32(const std::vector< uint32_t > &idx) const =0
*/
public ";

%javamethodmodifiers  rtk::simple::PimpleImageBase::GetPixelAsUInt64 "/**
virtual uint64_t rtk::simple::PimpleImageBase::GetPixelAsUInt64(const std::vector< uint32_t > &idx) const =0
*/
public ";

%javamethodmodifiers  rtk::simple::PimpleImageBase::GetPixelAsUInt8 "/**
virtual uint8_t rtk::simple::PimpleImageBase::GetPixelAsUInt8(const std::vector< uint32_t > &idx) const =0
*/
public ";

%javamethodmodifiers  rtk::simple::PimpleImageBase::GetPixelAsVectorFloat32 "/**
virtual std::vector<float> rtk::simple::PimpleImageBase::GetPixelAsVectorFloat32(const std::vector< uint32_t > &idx) const =0
*/
public ";

%javamethodmodifiers  rtk::simple::PimpleImageBase::GetPixelAsVectorFloat64 "/**
virtual std::vector<double> rtk::simple::PimpleImageBase::GetPixelAsVectorFloat64(const std::vector< uint32_t > &idx) const =0
*/
public ";

%javamethodmodifiers  rtk::simple::PimpleImageBase::GetPixelAsVectorInt16 "/**
virtual std::vector<int16_t> rtk::simple::PimpleImageBase::GetPixelAsVectorInt16(const std::vector< uint32_t > &idx) const =0
*/
public ";

%javamethodmodifiers  rtk::simple::PimpleImageBase::GetPixelAsVectorInt32 "/**
virtual std::vector<int32_t> rtk::simple::PimpleImageBase::GetPixelAsVectorInt32(const std::vector< uint32_t > &idx) const =0
*/
public ";

%javamethodmodifiers  rtk::simple::PimpleImageBase::GetPixelAsVectorInt64 "/**
virtual std::vector<int64_t> rtk::simple::PimpleImageBase::GetPixelAsVectorInt64(const std::vector< uint32_t > &idx) const =0
*/
public ";

%javamethodmodifiers  rtk::simple::PimpleImageBase::GetPixelAsVectorInt8 "/**
virtual std::vector<int8_t> rtk::simple::PimpleImageBase::GetPixelAsVectorInt8(const std::vector< uint32_t > &idx) const =0
*/
public ";

%javamethodmodifiers  rtk::simple::PimpleImageBase::GetPixelAsVectorUInt16 "/**
virtual std::vector<uint16_t> rtk::simple::PimpleImageBase::GetPixelAsVectorUInt16(const std::vector< uint32_t > &idx) const =0
*/
public ";

%javamethodmodifiers  rtk::simple::PimpleImageBase::GetPixelAsVectorUInt32 "/**
virtual std::vector<uint32_t> rtk::simple::PimpleImageBase::GetPixelAsVectorUInt32(const std::vector< uint32_t > &idx) const =0
*/
public ";

%javamethodmodifiers  rtk::simple::PimpleImageBase::GetPixelAsVectorUInt64 "/**
virtual std::vector<uint64_t> rtk::simple::PimpleImageBase::GetPixelAsVectorUInt64(const std::vector< uint32_t > &idx) const =0
*/
public ";

%javamethodmodifiers  rtk::simple::PimpleImageBase::GetPixelAsVectorUInt8 "/**
virtual std::vector<uint8_t> rtk::simple::PimpleImageBase::GetPixelAsVectorUInt8(const std::vector< uint32_t > &idx) const =0
*/
public ";

%javamethodmodifiers  rtk::simple::PimpleImageBase::GetPixelID "/**
virtual PixelIDValueEnum rtk::simple::PimpleImageBase::GetPixelID(void) const =0
*/
public ";

%javamethodmodifiers  rtk::simple::PimpleImageBase::GetReferenceCountOfImage "/**
virtual int rtk::simple::PimpleImageBase::GetReferenceCountOfImage() const =0
*/
public ";

%javamethodmodifiers  rtk::simple::PimpleImageBase::GetSize "/**
virtual std::vector< unsigned int > rtk::simple::PimpleImageBase::GetSize(void) const =0
*/
public ";

%javamethodmodifiers  rtk::simple::PimpleImageBase::GetSize "/**
virtual unsigned int rtk::simple::PimpleImageBase::GetSize(unsigned int dimension) const =0
*/
public ";

%javamethodmodifiers  rtk::simple::PimpleImageBase::GetSpacing "/**
virtual std::vector<double> rtk::simple::PimpleImageBase::GetSpacing(void) const =0
*/
public ";

%javamethodmodifiers  rtk::simple::PimpleImageBase::GetWidth "/**
virtual unsigned int rtk::simple::PimpleImageBase::GetWidth(void) const
*/
public ";

%javamethodmodifiers  rtk::simple::PimpleImageBase::SetDirection "/**
virtual void rtk::simple::PimpleImageBase::SetDirection(const std::vector< double > &direction)=0
*/
public ";

%javamethodmodifiers  rtk::simple::PimpleImageBase::SetOrigin "/**
virtual void rtk::simple::PimpleImageBase::SetOrigin(const std::vector< double > &orgn)=0
*/
public ";

%javamethodmodifiers  rtk::simple::PimpleImageBase::SetPixelAsComplexFloat32 "/**
virtual void rtk::simple::PimpleImageBase::SetPixelAsComplexFloat32(const std::vector< uint32_t > &idx, const std::complex< float > v)=0
*/
public ";

%javamethodmodifiers  rtk::simple::PimpleImageBase::SetPixelAsComplexFloat64 "/**
virtual void rtk::simple::PimpleImageBase::SetPixelAsComplexFloat64(const std::vector< uint32_t > &idx, const std::complex< double > v)=0
*/
public ";

%javamethodmodifiers  rtk::simple::PimpleImageBase::SetPixelAsDouble "/**
virtual void rtk::simple::PimpleImageBase::SetPixelAsDouble(const std::vector< uint32_t > &idx, double v)=0
*/
public ";

%javamethodmodifiers  rtk::simple::PimpleImageBase::SetPixelAsFloat "/**
virtual void rtk::simple::PimpleImageBase::SetPixelAsFloat(const std::vector< uint32_t > &idx, float v)=0
*/
public ";

%javamethodmodifiers  rtk::simple::PimpleImageBase::SetPixelAsInt16 "/**
virtual void rtk::simple::PimpleImageBase::SetPixelAsInt16(const std::vector< uint32_t > &idx, int16_t v)=0
*/
public ";

%javamethodmodifiers  rtk::simple::PimpleImageBase::SetPixelAsInt32 "/**
virtual void rtk::simple::PimpleImageBase::SetPixelAsInt32(const std::vector< uint32_t > &idx, int32_t v)=0
*/
public ";

%javamethodmodifiers  rtk::simple::PimpleImageBase::SetPixelAsInt64 "/**
virtual void rtk::simple::PimpleImageBase::SetPixelAsInt64(const std::vector< uint32_t > &idx, int64_t v)=0
*/
public ";

%javamethodmodifiers  rtk::simple::PimpleImageBase::SetPixelAsInt8 "/**
virtual void rtk::simple::PimpleImageBase::SetPixelAsInt8(const std::vector< uint32_t > &idx, int8_t v)=0
*/
public ";

%javamethodmodifiers  rtk::simple::PimpleImageBase::SetPixelAsUInt16 "/**
virtual void rtk::simple::PimpleImageBase::SetPixelAsUInt16(const std::vector< uint32_t > &idx, uint16_t v)=0
*/
public ";

%javamethodmodifiers  rtk::simple::PimpleImageBase::SetPixelAsUInt32 "/**
virtual void rtk::simple::PimpleImageBase::SetPixelAsUInt32(const std::vector< uint32_t > &idx, uint32_t v)=0
*/
public ";

%javamethodmodifiers  rtk::simple::PimpleImageBase::SetPixelAsUInt64 "/**
virtual void rtk::simple::PimpleImageBase::SetPixelAsUInt64(const std::vector< uint32_t > &idx, uint64_t v)=0
*/
public ";

%javamethodmodifiers  rtk::simple::PimpleImageBase::SetPixelAsUInt8 "/**
virtual void rtk::simple::PimpleImageBase::SetPixelAsUInt8(const std::vector< uint32_t > &idx, uint8_t v)=0
*/
public ";

%javamethodmodifiers  rtk::simple::PimpleImageBase::SetPixelAsVectorFloat32 "/**
virtual void rtk::simple::PimpleImageBase::SetPixelAsVectorFloat32(const std::vector< uint32_t > &idx, const std::vector< float > &v)=0
*/
public ";

%javamethodmodifiers  rtk::simple::PimpleImageBase::SetPixelAsVectorFloat64 "/**
virtual void rtk::simple::PimpleImageBase::SetPixelAsVectorFloat64(const std::vector< uint32_t > &idx, const std::vector< double > &v)=0
*/
public ";

%javamethodmodifiers  rtk::simple::PimpleImageBase::SetPixelAsVectorInt16 "/**
virtual void rtk::simple::PimpleImageBase::SetPixelAsVectorInt16(const std::vector< uint32_t > &idx, const std::vector< int16_t >
&v)=0
*/
public ";

%javamethodmodifiers  rtk::simple::PimpleImageBase::SetPixelAsVectorInt32 "/**
virtual void rtk::simple::PimpleImageBase::SetPixelAsVectorInt32(const std::vector< uint32_t > &idx, const std::vector< int32_t >
&v)=0
*/
public ";

%javamethodmodifiers  rtk::simple::PimpleImageBase::SetPixelAsVectorInt64 "/**
virtual void rtk::simple::PimpleImageBase::SetPixelAsVectorInt64(const std::vector< uint32_t > &idx, const std::vector< int64_t >
&v)=0
*/
public ";

%javamethodmodifiers  rtk::simple::PimpleImageBase::SetPixelAsVectorInt8 "/**
virtual void rtk::simple::PimpleImageBase::SetPixelAsVectorInt8(const std::vector< uint32_t > &idx, const std::vector< int8_t > &v)=0
*/
public ";

%javamethodmodifiers  rtk::simple::PimpleImageBase::SetPixelAsVectorUInt16 "/**
virtual void rtk::simple::PimpleImageBase::SetPixelAsVectorUInt16(const std::vector< uint32_t > &idx, const std::vector< uint16_t >
&v)=0
*/
public ";

%javamethodmodifiers  rtk::simple::PimpleImageBase::SetPixelAsVectorUInt32 "/**
virtual void rtk::simple::PimpleImageBase::SetPixelAsVectorUInt32(const std::vector< uint32_t > &idx, const std::vector< uint32_t >
&v)=0
*/
public ";

%javamethodmodifiers  rtk::simple::PimpleImageBase::SetPixelAsVectorUInt64 "/**
virtual void rtk::simple::PimpleImageBase::SetPixelAsVectorUInt64(const std::vector< uint32_t > &idx, const std::vector< uint64_t >
&v)=0
*/
public ";

%javamethodmodifiers  rtk::simple::PimpleImageBase::SetPixelAsVectorUInt8 "/**
virtual void rtk::simple::PimpleImageBase::SetPixelAsVectorUInt8(const std::vector< uint32_t > &idx, const std::vector< uint8_t >
&v)=0
*/
public ";

%javamethodmodifiers  rtk::simple::PimpleImageBase::SetSpacing "/**
virtual void rtk::simple::PimpleImageBase::SetSpacing(const std::vector< double > &spc)=0
*/
public ";

%javamethodmodifiers  rtk::simple::PimpleImageBase::ShallowCopy "/**
virtual PimpleImageBase* rtk::simple::PimpleImageBase::ShallowCopy(void) const =0
*/
public ";

%javamethodmodifiers  rtk::simple::PimpleImageBase::ToString "/**
virtual std::string rtk::simple::PimpleImageBase::ToString() const =0
*/
public ";

%javamethodmodifiers  rtk::simple::PimpleImageBase::TransformContinuousIndexToPhysicalPoint "/**
virtual std::vector<double> rtk::simple::PimpleImageBase::TransformContinuousIndexToPhysicalPoint(const std::vector< double > &idx) const =0
*/
public ";

%javamethodmodifiers  rtk::simple::PimpleImageBase::TransformIndexToPhysicalPoint "/**
virtual std::vector<double> rtk::simple::PimpleImageBase::TransformIndexToPhysicalPoint(const std::vector< int64_t > &idx) const =0
*/
public ";

%javamethodmodifiers  rtk::simple::PimpleImageBase::TransformPhysicalPointToContinuousIndex "/**
virtual std::vector<double> rtk::simple::PimpleImageBase::TransformPhysicalPointToContinuousIndex(const std::vector< double > &pt) const =0
*/
public ";

%javamethodmodifiers  rtk::simple::PimpleImageBase::TransformPhysicalPointToIndex "/**
virtual std::vector<int64_t> rtk::simple::PimpleImageBase::TransformPhysicalPointToIndex(const std::vector< double > &pt) const =0
*/
public ";

%javamethodmodifiers  rtk::simple::PimpleImageBase::~PimpleImageBase "/**
virtual rtk::simple::PimpleImageBase::~PimpleImageBase(void)
*/
public ";


%typemap(javaimports) rtk::simple::PowImageFilter "/**

Computes the powers of 2 images.


This class is templated over the types of the two input images and the
type of the output image. Numeric conversions (castings) are done by
the C++ defaults.

The output of the pow function will be cast to the pixel type of the
output image.

The total operation over one pixel will be

The pow function can be applied to two images with the following:

Additionally, this filter can be used to raise every pixel of an image
to a power of a constant by using
See:
 rtk::simple::Pow for the procedural interface

 itk::PowImageFilter for the Doxygen on the original ITK class.


C++ includes: srtkPowImageFilter.h
*/"

%javamethodmodifiers  rtk::simple::PowImageFilter::Execute "/**
Image rtk::simple::PowImageFilter::Execute(const Image &image1, const Image &image2)

Execute the filter on the input images

*/
public ";

%javamethodmodifiers  rtk::simple::PowImageFilter::Execute "/**
Image rtk::simple::PowImageFilter::Execute(const Image &image1, double constant)

Execute the filter with an image and a constant

*/
public ";

%javamethodmodifiers  rtk::simple::PowImageFilter::Execute "/**
Image rtk::simple::PowImageFilter::Execute(double constant, const Image &image2)
*/
public ";

%javamethodmodifiers  rtk::simple::PowImageFilter::GetName "/**
std::string rtk::simple::PowImageFilter::GetName() const

Name of this class

*/
public ";

%javamethodmodifiers  rtk::simple::PowImageFilter::PowImageFilter "/**
rtk::simple::PowImageFilter::PowImageFilter()

Default Constructor that takes no arguments and initializes default
parameters

*/
public ";

%javamethodmodifiers  rtk::simple::PowImageFilter::ToString "/**
std::string rtk::simple::PowImageFilter::ToString() const

Print ourselves out

*/
public ";

%javamethodmodifiers  rtk::simple::PowImageFilter::~PowImageFilter "/**
rtk::simple::PowImageFilter::~PowImageFilter()

Destructor

*/
public ";


%typemap(javaimports) rtk::simple::ProcessObject "/**

Base class for SimpleRTK classes based on ProcessObject.

C++ includes: srtkProcessObject.h
*/"

%javamethodmodifiers  rtk::simple::ProcessObject::Abort "/**
virtual void rtk::simple::ProcessObject::Abort()

Sets an abort flag on the active process.

Requests the current active process to abort. Additional, progress or
iteration event may occur. If aborted then, an AbortEvent should
occur. The Progress should be set to 1.0 after aborting.

The expected behavior is that not exception should be throw out of
this processes Execute method. Additionally, the results returned are
valid but undefined content. The content may be only partially
updated, uninitialized or the a of size zero.

If there is no active process the method has no effect.

*/
public ";

%javamethodmodifiers  rtk::simple::ProcessObject::AddCommand "/**
virtual int rtk::simple::ProcessObject::AddCommand(rtk::simple::EventEnum event, rtk::simple::Command &cmd)

Add a Command Object to observer the event.


The Command object's Execute method will be invoked when the internal ITK Object has the event. These events only occur during this ProcessObject's Execute method when the ITK filter is running. The command occurs
in the same thread as this objects Execute methods was called in.

An internal reference is made between the Command and this ProcessObject which enable automatic removal of the command when deleted. This
enables both object to exist as stack based object and be
automatically cleaned up.

Unless specified otherwise, it's safe to get any value during
execution. \"Measurements\" will have valid values only after the
Execute method has returned. \"Active Measurements\" will have valid
values during events, and access the underlying ITK object.

Deleting a command this object has during a command call-back will
produce undefined behavior.

For more information see the page Commands and Events for SimpleRTK.


The return value is reserved for latter usage.


*/
public ";

%javamethodmodifiers  rtk::simple::ProcessObject::GetName "/**
virtual std::string rtk::simple::ProcessObject::GetName() const =0

return user readable name for the filter

*/
public ";

%javamethodmodifiers  rtk::simple::ProcessObject::GetProgress "/**
virtual float rtk::simple::ProcessObject::GetProgress() const

An Active Measurement of the progress of execution.


Get the execution progress of the current process object. The progress
is a floating number in [0,1] with 0 meaning no progress and 1 meaning
the filter has completed execution (or aborted).

This is an Active Measurement so it can be accessed during Events
during the execution.

*/
public ";

%javamethodmodifiers  rtk::simple::ProcessObject::HasCommand "/**
virtual bool rtk::simple::ProcessObject::HasCommand(rtk::simple::EventEnum event) const

Query of this object has any registered commands for event.

*/
public ";

%javamethodmodifiers  rtk::simple::ProcessObject::ProcessObject "/**
rtk::simple::ProcessObject::ProcessObject()

Default Constructor that takes no arguments and initializes default
parameters

*/
public ";

%javamethodmodifiers  rtk::simple::ProcessObject::RemoveAllCommands "/**
virtual void rtk::simple::ProcessObject::RemoveAllCommands()

Remove all registered commands.


Calling when this object is invoking anther command will produce
undefined behavior.

*/
public ";

%javamethodmodifiers  rtk::simple::ProcessObject::ToString "/**
virtual std::string rtk::simple::ProcessObject::ToString() const
*/
public ";

%javamethodmodifiers  rtk::simple::ProcessObject::~ProcessObject "/**
virtual rtk::simple::ProcessObject::~ProcessObject()

Default Destructor

*/
public ";


%typemap(javaimports) rtk::simple::ProjectedLandweberDeconvolutionImageFilter "/**

Deconvolve an image using the projected Landweber deconvolution
algorithm.


This filter performs the same calculation per iteration as the LandweberDeconvolutionImageFilter . However, at each iteration, negative pixels in the intermediate
result are projected (set) to zero. This is useful if the solution is
assumed to always be non-negative, which is the case when dealing with
images formed by counting photons, for example.

This code was adapted from the Insight Journal contribution:

\"Deconvolution: infrastructure and reference algorithms\" by Gaetan
Lehmann https://hdl.handle.net/10380/3207


Gaetan Lehmann, Biologie du Developpement et de la Reproduction, INRA
de Jouy-en-Josas, France
 Cory Quammen, The University of North Carolina at Chapel Hill


See:
 IterativeDeconvolutionImageFilter


 RichardsonLucyDeconvolutionImageFilter


 LandweberDeconvolutionImageFilter

 rtk::simple::ProjectedLandweberDeconvolution for the procedural interface

 itk::ProjectedLandweberDeconvolutionImageFilter for the Doxygen on the original ITK class.


C++ includes: srtkProjectedLandweberDeconvolutionImageFilter.h
*/"

%javamethodmodifiers  rtk::simple::ProjectedLandweberDeconvolutionImageFilter::Execute "/**
Image rtk::simple::ProjectedLandweberDeconvolutionImageFilter::Execute(const Image &image1, const Image &image2)

Execute the filter on the input images

*/
public ";

%javamethodmodifiers  rtk::simple::ProjectedLandweberDeconvolutionImageFilter::Execute "/**
Image rtk::simple::ProjectedLandweberDeconvolutionImageFilter::Execute(const Image &image1, const Image &image2, double alpha, int
numberOfIterations, bool normalize,
ProjectedLandweberDeconvolutionImageFilter::BoundaryConditionType
boundaryCondition,
ProjectedLandweberDeconvolutionImageFilter::OutputRegionModeType
outputRegionMode)

Execute the filter on the input images with the given parameters

*/
public ";

%javamethodmodifiers  rtk::simple::ProjectedLandweberDeconvolutionImageFilter::GetAlpha "/**
double rtk::simple::ProjectedLandweberDeconvolutionImageFilter::GetAlpha() const

Get the relaxation factor.

*/
public ";

%javamethodmodifiers  rtk::simple::ProjectedLandweberDeconvolutionImageFilter::GetBoundaryCondition "/**
BoundaryConditionType rtk::simple::ProjectedLandweberDeconvolutionImageFilter::GetBoundaryCondition() const
*/
public ";

%javamethodmodifiers  rtk::simple::ProjectedLandweberDeconvolutionImageFilter::GetName "/**
std::string rtk::simple::ProjectedLandweberDeconvolutionImageFilter::GetName() const

Name of this class

*/
public ";

%javamethodmodifiers  rtk::simple::ProjectedLandweberDeconvolutionImageFilter::GetNormalize "/**
bool rtk::simple::ProjectedLandweberDeconvolutionImageFilter::GetNormalize() const
*/
public ";

%javamethodmodifiers  rtk::simple::ProjectedLandweberDeconvolutionImageFilter::GetNumberOfIterations "/**
int rtk::simple::ProjectedLandweberDeconvolutionImageFilter::GetNumberOfIterations() const

Get the number of iterations.

*/
public ";

%javamethodmodifiers  rtk::simple::ProjectedLandweberDeconvolutionImageFilter::GetOutputRegionMode "/**
OutputRegionModeType rtk::simple::ProjectedLandweberDeconvolutionImageFilter::GetOutputRegionMode() const
*/
public ";

%javamethodmodifiers  rtk::simple::ProjectedLandweberDeconvolutionImageFilter::NormalizeOff "/**
Self& rtk::simple::ProjectedLandweberDeconvolutionImageFilter::NormalizeOff()
*/
public ";

%javamethodmodifiers  rtk::simple::ProjectedLandweberDeconvolutionImageFilter::NormalizeOn "/**
Self& rtk::simple::ProjectedLandweberDeconvolutionImageFilter::NormalizeOn()

Set the value of Normalize to true or false respectfully.

*/
public ";

%javamethodmodifiers  rtk::simple::ProjectedLandweberDeconvolutionImageFilter::ProjectedLandweberDeconvolutionImageFilter "/**
rtk::simple::ProjectedLandweberDeconvolutionImageFilter::ProjectedLandweberDeconvolutionImageFilter()

Default Constructor that takes no arguments and initializes default
parameters

*/
public ";

%javamethodmodifiers  rtk::simple::ProjectedLandweberDeconvolutionImageFilter::SetAlpha "/**
Self& rtk::simple::ProjectedLandweberDeconvolutionImageFilter::SetAlpha(double Alpha)

Set the relaxation factor.

*/
public ";

%javamethodmodifiers  rtk::simple::ProjectedLandweberDeconvolutionImageFilter::SetBoundaryCondition "/**
Self& rtk::simple::ProjectedLandweberDeconvolutionImageFilter::SetBoundaryCondition(BoundaryConditionType BoundaryCondition)
*/
public ";

%javamethodmodifiers  rtk::simple::ProjectedLandweberDeconvolutionImageFilter::SetNormalize "/**
Self& rtk::simple::ProjectedLandweberDeconvolutionImageFilter::SetNormalize(bool Normalize)

Normalize the output image by the sum of the kernel components

*/
public ";

%javamethodmodifiers  rtk::simple::ProjectedLandweberDeconvolutionImageFilter::SetNumberOfIterations "/**
Self& rtk::simple::ProjectedLandweberDeconvolutionImageFilter::SetNumberOfIterations(int NumberOfIterations)

Set the number of iterations.

*/
public ";

%javamethodmodifiers  rtk::simple::ProjectedLandweberDeconvolutionImageFilter::SetOutputRegionMode "/**
Self& rtk::simple::ProjectedLandweberDeconvolutionImageFilter::SetOutputRegionMode(OutputRegionModeType OutputRegionMode)
*/
public ";

%javamethodmodifiers  rtk::simple::ProjectedLandweberDeconvolutionImageFilter::ToString "/**
std::string rtk::simple::ProjectedLandweberDeconvolutionImageFilter::ToString() const

Print ourselves out

*/
public ";

%javamethodmodifiers  rtk::simple::ProjectedLandweberDeconvolutionImageFilter::~ProjectedLandweberDeconvolutionImageFilter "/**
rtk::simple::ProjectedLandweberDeconvolutionImageFilter::~ProjectedLandweberDeconvolutionImageFilter()

Destructor

*/
public ";


%typemap(javaimports) rtk::simple::RankImageFilter "/**

Rank filter of a greyscale image.


Nonlinear filter in which each output pixel is a user defined rank of
input pixels in a user defined neighborhood. The default rank is 0.5
(median). The boundary conditions are different to the standard
itkMedianImageFilter. In this filter the neighborhood is cropped at
the boundary, and is therefore smaller.

This filter uses a recursive implementation - essentially the one by
Huang 1979, I believe, to compute the rank, and is therefore usually a
lot faster than the direct implementation. The extensions to Huang are
support for arbitrary pixel types (using c++ maps) and arbitrary
neighborhoods. I presume that these are not new ideas.

This filter is based on the sliding window code from the
consolidatedMorphology package on InsightJournal.

The structuring element is assumed to be composed of binary values
(zero or one). Only elements of the structuring element having values
> 0 are candidates for affecting the center pixel.

This code was contributed in the Insight Journal paper: \"Efficient
implementation of kernel filtering\" by Beare R., Lehmann G https://hdl.handle.net/1926/555 http://www.insight-journal.org/browse/publication/160


Richard Beare

See:
 rtk::simple::Rank for the procedural interface

 itk::RankImageFilter for the Doxygen on the original ITK class.


C++ includes: srtkRankImageFilter.h
*/"

%javamethodmodifiers  rtk::simple::RankImageFilter::Execute "/**
Image rtk::simple::RankImageFilter::Execute(const Image &image1)

Execute the filter on the input image

*/
public ";

%javamethodmodifiers  rtk::simple::RankImageFilter::Execute "/**
Image rtk::simple::RankImageFilter::Execute(const Image &image1, double rank, const std::vector< unsigned int >
&radius)

Execute the filter on the input image with the given parameters

*/
public ";

%javamethodmodifiers  rtk::simple::RankImageFilter::GetName "/**
std::string rtk::simple::RankImageFilter::GetName() const

Name of this class

*/
public ";

%javamethodmodifiers  rtk::simple::RankImageFilter::GetRadius "/**
std::vector<unsigned int> rtk::simple::RankImageFilter::GetRadius() const
*/
public ";

%javamethodmodifiers  rtk::simple::RankImageFilter::GetRank "/**
double rtk::simple::RankImageFilter::GetRank() const
*/
public ";

%javamethodmodifiers  rtk::simple::RankImageFilter::RankImageFilter "/**
rtk::simple::RankImageFilter::RankImageFilter()

Default Constructor that takes no arguments and initializes default
parameters

*/
public ";

%javamethodmodifiers  rtk::simple::RankImageFilter::SetRadius "/**
Self& rtk::simple::RankImageFilter::SetRadius(const std::vector< unsigned int > &Radius)
*/
public ";

%javamethodmodifiers  rtk::simple::RankImageFilter::SetRadius "/**
Self& rtk::simple::RankImageFilter::SetRadius(unsigned int value)

Set the values of the Radius vector all to value

*/
public ";

%javamethodmodifiers  rtk::simple::RankImageFilter::SetRank "/**
Self& rtk::simple::RankImageFilter::SetRank(double Rank)
*/
public ";

%javamethodmodifiers  rtk::simple::RankImageFilter::ToString "/**
std::string rtk::simple::RankImageFilter::ToString() const

Print ourselves out

*/
public ";

%javamethodmodifiers  rtk::simple::RankImageFilter::~RankImageFilter "/**
rtk::simple::RankImageFilter::~RankImageFilter()

Destructor

*/
public ";


%typemap(javaimports) rtk::simple::RealAndImaginaryToComplexImageFilter "/**

ComposeImageFilter combine several scalar images into a multicomponent image.


ComposeImageFilter combine several scalar images into an itk::Image of vector pixel ( itk::Vector , itk::RGBPixel , ...), of std::complex pixel, or in an itk::VectorImage .

Inputs and Usage
 All input images are expected to have the same template parameters
and have the same size and origin.

See:
 VectorImage


 VectorIndexSelectionCastImageFilter
Wiki Examples:

All Examples

Create a vector image from a collection of scalar images

Compose a vector image (with 3 components) from three scalar images

Convert a real image and an imaginary image to a complex image
See:
 rtk::simple::RealAndImaginaryToComplex for the procedural interface

 itk::ComposeImageFilter for the Doxygen on the original ITK class.



C++ includes: srtkRealAndImaginaryToComplexImageFilter.h
*/"

%javamethodmodifiers  rtk::simple::RealAndImaginaryToComplexImageFilter::Execute "/**
Image rtk::simple::RealAndImaginaryToComplexImageFilter::Execute(const Image &image1, const Image &image2)

Execute the filter on the input images

*/
public ";

%javamethodmodifiers  rtk::simple::RealAndImaginaryToComplexImageFilter::GetName "/**
std::string rtk::simple::RealAndImaginaryToComplexImageFilter::GetName() const

Name of this class

*/
public ";

%javamethodmodifiers  rtk::simple::RealAndImaginaryToComplexImageFilter::RealAndImaginaryToComplexImageFilter "/**
rtk::simple::RealAndImaginaryToComplexImageFilter::RealAndImaginaryToComplexImageFilter()

Default Constructor that takes no arguments and initializes default
parameters

*/
public ";

%javamethodmodifiers  rtk::simple::RealAndImaginaryToComplexImageFilter::ToString "/**
std::string rtk::simple::RealAndImaginaryToComplexImageFilter::ToString() const

Print ourselves out

*/
public ";

%javamethodmodifiers  rtk::simple::RealAndImaginaryToComplexImageFilter::~RealAndImaginaryToComplexImageFilter "/**
rtk::simple::RealAndImaginaryToComplexImageFilter::~RealAndImaginaryToComplexImageFilter()

Destructor

*/
public ";


%typemap(javaimports) rtk::simple::RealToHalfHermitianForwardFFTImageFilter "/**

Base class for specialized real-to-complex forward Fast Fourier Transform .


This is a base class for the \"forward\" or \"direct\" discrete
Fourier Transform . This is an abstract base class: the actual implementation is
provided by the best child class available on the system when the
object is created via the object factory system.

This class transforms a real input image into its complex Fourier
transform. The Fourier transform of a real input image has Hermitian
symmetry: $ f(\\\\mathbf{x}) = f^*(-\\\\mathbf{x}) $ . That is, when the result of the transform is split in half along
the X-dimension, the values in the second half of the transform are
the complex conjugates of values in the first half reflected about the
center of the image in each dimension. This filter takes advantage of
the Hermitian symmetry property and reduces the size of the output in
the first dimension to N/2+1, where N is the size of the input image
in that dimension and the division by 2 is rounded down.


See:
 HalfHermitianToRealInverseFFTImageFilter


 ForwardFFTImageFilter

 rtk::simple::RealToHalfHermitianForwardFFT for the procedural interface

 itk::RealToHalfHermitianForwardFFTImageFilter for the Doxygen on the original ITK class.


C++ includes: srtkRealToHalfHermitianForwardFFTImageFilter.h
*/"

%javamethodmodifiers  rtk::simple::RealToHalfHermitianForwardFFTImageFilter::Execute "/**
Image rtk::simple::RealToHalfHermitianForwardFFTImageFilter::Execute(const Image &image1)

Execute the filter on the input image

*/
public ";

%javamethodmodifiers  rtk::simple::RealToHalfHermitianForwardFFTImageFilter::GetName "/**
std::string rtk::simple::RealToHalfHermitianForwardFFTImageFilter::GetName() const

Name of this class

*/
public ";

%javamethodmodifiers  rtk::simple::RealToHalfHermitianForwardFFTImageFilter::RealToHalfHermitianForwardFFTImageFilter "/**
rtk::simple::RealToHalfHermitianForwardFFTImageFilter::RealToHalfHermitianForwardFFTImageFilter()

Default Constructor that takes no arguments and initializes default
parameters

*/
public ";

%javamethodmodifiers  rtk::simple::RealToHalfHermitianForwardFFTImageFilter::ToString "/**
std::string rtk::simple::RealToHalfHermitianForwardFFTImageFilter::ToString() const

Print ourselves out

*/
public ";

%javamethodmodifiers  rtk::simple::RealToHalfHermitianForwardFFTImageFilter::~RealToHalfHermitianForwardFFTImageFilter "/**
rtk::simple::RealToHalfHermitianForwardFFTImageFilter::~RealToHalfHermitianForwardFFTImageFilter()

Destructor

*/
public ";


%typemap(javaimports) rtk::simple::ReconstructionByDilationImageFilter "/**

grayscale reconstruction by dilation of an image


Reconstruction by dilation operates on a \"marker\" image and a
\"mask\" image, and is defined as the dilation of the marker image
with respect to the mask image iterated until stability.

The marker image must be less than or equal to the mask image (on a
pixel by pixel basis).

Geodesic morphology is described in Chapter 6.2 of Pierre Soille's
book \"Morphological Image Analysis: Principles and Applications\",
Second Edition, Springer, 2003.

Algorithm implemented in this filter is based on algorithm described
by Kevin Robinson and Paul F. Whelan in \"Efficient Morphological
Reconstruction: A Downhill Filter\", Pattern Recognition Letters,
Volume 25, Issue 15, November 2004, Pages 1759-1767.

The algorithm, a description of the transform and some applications
can be found in \"Morphological Grayscale Reconstruction in Image
Analysis:    Applications and Efficient Algorithms\", Luc Vincent,
IEEE Transactions on image processing, Vol. 2, April 1993.


Richard Beare. Department of Medicine, Monash University, Melbourne,
Australia.

See:
 MorphologyImageFilter , GrayscaleDilateImageFilter , GrayscaleFunctionDilateImageFilter , BinaryDilateImageFilter , ReconstructionByErosionImageFilter , OpeningByReconstructionImageFilter , ClosingByReconstructionImageFilter , ReconstructionImageFilter

 rtk::simple::ReconstructionByDilation for the procedural interface

 itk::ReconstructionByDilationImageFilter for the Doxygen on the original ITK class.


C++ includes: srtkReconstructionByDilationImageFilter.h
*/"

%javamethodmodifiers  rtk::simple::ReconstructionByDilationImageFilter::Execute "/**
Image rtk::simple::ReconstructionByDilationImageFilter::Execute(const Image &image1, const Image &image2)

Execute the filter on the input images

*/
public ";

%javamethodmodifiers  rtk::simple::ReconstructionByDilationImageFilter::Execute "/**
Image rtk::simple::ReconstructionByDilationImageFilter::Execute(const Image &image1, const Image &image2, bool fullyConnected, bool
useInternalCopy)

Execute the filter on the input images with the given parameters

*/
public ";

%javamethodmodifiers  rtk::simple::ReconstructionByDilationImageFilter::FullyConnectedOff "/**
Self& rtk::simple::ReconstructionByDilationImageFilter::FullyConnectedOff()
*/
public ";

%javamethodmodifiers  rtk::simple::ReconstructionByDilationImageFilter::FullyConnectedOn "/**
Self& rtk::simple::ReconstructionByDilationImageFilter::FullyConnectedOn()

Set the value of FullyConnected to true or false respectfully.

*/
public ";

%javamethodmodifiers  rtk::simple::ReconstructionByDilationImageFilter::GetFullyConnected "/**
bool rtk::simple::ReconstructionByDilationImageFilter::GetFullyConnected() const
*/
public ";

%javamethodmodifiers  rtk::simple::ReconstructionByDilationImageFilter::GetName "/**
std::string rtk::simple::ReconstructionByDilationImageFilter::GetName() const

Name of this class

*/
public ";

%javamethodmodifiers  rtk::simple::ReconstructionByDilationImageFilter::GetUseInternalCopy "/**
bool rtk::simple::ReconstructionByDilationImageFilter::GetUseInternalCopy() const
*/
public ";

%javamethodmodifiers  rtk::simple::ReconstructionByDilationImageFilter::ReconstructionByDilationImageFilter "/**
rtk::simple::ReconstructionByDilationImageFilter::ReconstructionByDilationImageFilter()

Default Constructor that takes no arguments and initializes default
parameters

*/
public ";

%javamethodmodifiers  rtk::simple::ReconstructionByDilationImageFilter::SetFullyConnected "/**
Self& rtk::simple::ReconstructionByDilationImageFilter::SetFullyConnected(bool FullyConnected)
*/
public ";

%javamethodmodifiers  rtk::simple::ReconstructionByDilationImageFilter::SetUseInternalCopy "/**
Self& rtk::simple::ReconstructionByDilationImageFilter::SetUseInternalCopy(bool UseInternalCopy)
*/
public ";

%javamethodmodifiers  rtk::simple::ReconstructionByDilationImageFilter::ToString "/**
std::string rtk::simple::ReconstructionByDilationImageFilter::ToString() const

Print ourselves out

*/
public ";

%javamethodmodifiers  rtk::simple::ReconstructionByDilationImageFilter::UseInternalCopyOff "/**
Self& rtk::simple::ReconstructionByDilationImageFilter::UseInternalCopyOff()
*/
public ";

%javamethodmodifiers  rtk::simple::ReconstructionByDilationImageFilter::UseInternalCopyOn "/**
Self& rtk::simple::ReconstructionByDilationImageFilter::UseInternalCopyOn()

Set the value of UseInternalCopy to true or false respectfully.

*/
public ";

%javamethodmodifiers  rtk::simple::ReconstructionByDilationImageFilter::~ReconstructionByDilationImageFilter "/**
rtk::simple::ReconstructionByDilationImageFilter::~ReconstructionByDilationImageFilter()

Destructor

*/
public ";


%typemap(javaimports) rtk::simple::ReconstructionByErosionImageFilter "/**

grayscale reconstruction by erosion of an image


Reconstruction by erosion operates on a \"marker\" image and a
\"mask\" image, and is defined as the erosion of the marker image with
respect to the mask image iterated until stability.

The marker image must be less than or equal to the mask image (on a
pixel by pixel basis).

Geodesic morphology is described in Chapter 6.2 of Pierre Soille's
book \"Morphological Image Analysis: Principles and Applications\",
Second Edition, Springer, 2003.

Algorithm implemented in this filter is based on algorithm described
by Kevin Robinson and Paul F. Whelan in \"Efficient Morphological
Reconstruction: A Downhill Filter\", Pattern Recognition Letters,
Volume 25, Issue 15, November 2004, Pages 1759-1767.

The algorithm, a description of the transform and some applications
can be found in \"Morphological Grayscale Reconstruction in Image
Analysis:    Applications and Efficient Algorithms\", Luc Vincent,
IEEE Transactions on image processing, Vol. 2, April 1993.


Richard Beare. Department of Medicine, Monash University, Melbourne,
Australia.

See:
 MorphologyImageFilter , GrayscaleDilateImageFilter , GrayscaleFunctionDilateImageFilter , BinaryDilateImageFilter , ReconstructionByErosionImageFilter , OpeningByReconstructionImageFilter , ClosingByReconstructionImageFilter , ReconstructionImageFilter

 rtk::simple::ReconstructionByErosion for the procedural interface

 itk::ReconstructionByErosionImageFilter for the Doxygen on the original ITK class.


C++ includes: srtkReconstructionByErosionImageFilter.h
*/"

%javamethodmodifiers  rtk::simple::ReconstructionByErosionImageFilter::Execute "/**
Image rtk::simple::ReconstructionByErosionImageFilter::Execute(const Image &image1, const Image &image2)

Execute the filter on the input images

*/
public ";

%javamethodmodifiers  rtk::simple::ReconstructionByErosionImageFilter::Execute "/**
Image rtk::simple::ReconstructionByErosionImageFilter::Execute(const Image &image1, const Image &image2, bool fullyConnected, bool
useInternalCopy)

Execute the filter on the input images with the given parameters

*/
public ";

%javamethodmodifiers  rtk::simple::ReconstructionByErosionImageFilter::FullyConnectedOff "/**
Self& rtk::simple::ReconstructionByErosionImageFilter::FullyConnectedOff()
*/
public ";

%javamethodmodifiers  rtk::simple::ReconstructionByErosionImageFilter::FullyConnectedOn "/**
Self& rtk::simple::ReconstructionByErosionImageFilter::FullyConnectedOn()

Set the value of FullyConnected to true or false respectfully.

*/
public ";

%javamethodmodifiers  rtk::simple::ReconstructionByErosionImageFilter::GetFullyConnected "/**
bool rtk::simple::ReconstructionByErosionImageFilter::GetFullyConnected() const
*/
public ";

%javamethodmodifiers  rtk::simple::ReconstructionByErosionImageFilter::GetName "/**
std::string rtk::simple::ReconstructionByErosionImageFilter::GetName() const

Name of this class

*/
public ";

%javamethodmodifiers  rtk::simple::ReconstructionByErosionImageFilter::GetUseInternalCopy "/**
bool rtk::simple::ReconstructionByErosionImageFilter::GetUseInternalCopy() const
*/
public ";

%javamethodmodifiers  rtk::simple::ReconstructionByErosionImageFilter::ReconstructionByErosionImageFilter "/**
rtk::simple::ReconstructionByErosionImageFilter::ReconstructionByErosionImageFilter()

Default Constructor that takes no arguments and initializes default
parameters

*/
public ";

%javamethodmodifiers  rtk::simple::ReconstructionByErosionImageFilter::SetFullyConnected "/**
Self& rtk::simple::ReconstructionByErosionImageFilter::SetFullyConnected(bool FullyConnected)
*/
public ";

%javamethodmodifiers  rtk::simple::ReconstructionByErosionImageFilter::SetUseInternalCopy "/**
Self& rtk::simple::ReconstructionByErosionImageFilter::SetUseInternalCopy(bool UseInternalCopy)
*/
public ";

%javamethodmodifiers  rtk::simple::ReconstructionByErosionImageFilter::ToString "/**
std::string rtk::simple::ReconstructionByErosionImageFilter::ToString() const

Print ourselves out

*/
public ";

%javamethodmodifiers  rtk::simple::ReconstructionByErosionImageFilter::UseInternalCopyOff "/**
Self& rtk::simple::ReconstructionByErosionImageFilter::UseInternalCopyOff()
*/
public ";

%javamethodmodifiers  rtk::simple::ReconstructionByErosionImageFilter::UseInternalCopyOn "/**
Self& rtk::simple::ReconstructionByErosionImageFilter::UseInternalCopyOn()

Set the value of UseInternalCopy to true or false respectfully.

*/
public ";

%javamethodmodifiers  rtk::simple::ReconstructionByErosionImageFilter::~ReconstructionByErosionImageFilter "/**
rtk::simple::ReconstructionByErosionImageFilter::~ReconstructionByErosionImageFilter()

Destructor

*/
public ";


%typemap(javaimports) rtk::simple::RecursiveGaussianImageFilter "/**

Base class for computing IIR convolution with an approximation of a
Gaussian kernel.


\\\\[ \\\\frac{ 1 }{ \\\\sigma \\\\sqrt{ 2 \\\\pi } } \\\\exp{
\\\\left( - \\\\frac{x^2}{ 2 \\\\sigma^2 } \\\\right) } \\\\]

RecursiveGaussianImageFilter is the base class for recursive filters that approximate convolution
with the Gaussian kernel. This class implements the recursive
filtering method proposed by R.Deriche in IEEE-PAMI Vol.12, No.1,
January 1990, pp 78-87, \"Fast Algorithms for Low-Level Vision\"

Details of the implementation are described in the technical report: R.
Deriche, \"Recursively Implementing The Gaussian and Its
Derivatives\", INRIA, 1993, ftp://ftp.inria.fr/INRIA/tech-reports/RR/RR-1893.ps.gz

Further improvements of the algorithm are described in: G. Farneback &
C.-F. Westin, \"On Implementation of Recursive Gaussian Filters\", so
far unpublished.

As compared to itk::DiscreteGaussianImageFilter , this filter tends to be faster for large kernels, and it can take
the derivative of the blurred image in one step. Also, note that we
have itk::RecursiveGaussianImageFilter::SetSigma() , but itk::DiscreteGaussianImageFilter::SetVariance() .


See:
 DiscreteGaussianImageFilter
Wiki Examples:

All Examples

Find higher derivatives of an image
See:
 rtk::simple::RecursiveGaussian for the procedural interface

 itk::RecursiveGaussianImageFilter for the Doxygen on the original ITK class.



C++ includes: srtkRecursiveGaussianImageFilter.h
*/"

%javamethodmodifiers  rtk::simple::RecursiveGaussianImageFilter::Execute "/**
Image rtk::simple::RecursiveGaussianImageFilter::Execute(const Image &image1)

Execute the filter on the input image

*/
public ";

%javamethodmodifiers  rtk::simple::RecursiveGaussianImageFilter::Execute "/**
Image rtk::simple::RecursiveGaussianImageFilter::Execute(const Image &image1, double sigma, bool normalizeAcrossScale,
RecursiveGaussianImageFilter::OrderType order, unsigned int direction)

Execute the filter on the input image with the given parameters

*/
public ";

%javamethodmodifiers  rtk::simple::RecursiveGaussianImageFilter::GetDirection "/**
unsigned int rtk::simple::RecursiveGaussianImageFilter::GetDirection() const
*/
public ";

%javamethodmodifiers  rtk::simple::RecursiveGaussianImageFilter::GetName "/**
std::string rtk::simple::RecursiveGaussianImageFilter::GetName() const

Name of this class

*/
public ";

%javamethodmodifiers  rtk::simple::RecursiveGaussianImageFilter::GetNormalizeAcrossScale "/**
bool rtk::simple::RecursiveGaussianImageFilter::GetNormalizeAcrossScale() const
*/
public ";

%javamethodmodifiers  rtk::simple::RecursiveGaussianImageFilter::GetOrder "/**
OrderType rtk::simple::RecursiveGaussianImageFilter::GetOrder() const

     Set/Get the Order of the Gaussian to convolve with.
ZeroOrder is equivalent to convolving with a Gaussian. This is the
default.

FirstOrder is equivalent to convolving with the first derivative of a
Gaussian.

SecondOrder is equivalent to convolving with the second derivative of
a Gaussian.


*/
public ";

%javamethodmodifiers  rtk::simple::RecursiveGaussianImageFilter::GetSigma "/**
double rtk::simple::RecursiveGaussianImageFilter::GetSigma() const

Set/Get the Sigma, measured in world coordinates, of the Gaussian
kernel. The default is 1.0. An exception will be generated if the
Sigma value is less than or equal to zero.

*/
public ";

%javamethodmodifiers  rtk::simple::RecursiveGaussianImageFilter::NormalizeAcrossScaleOff "/**
Self& rtk::simple::RecursiveGaussianImageFilter::NormalizeAcrossScaleOff()
*/
public ";

%javamethodmodifiers  rtk::simple::RecursiveGaussianImageFilter::NormalizeAcrossScaleOn "/**
Self& rtk::simple::RecursiveGaussianImageFilter::NormalizeAcrossScaleOn()

Set the value of NormalizeAcrossScale to true or false respectfully.

*/
public ";

%javamethodmodifiers  rtk::simple::RecursiveGaussianImageFilter::RecursiveGaussianImageFilter "/**
rtk::simple::RecursiveGaussianImageFilter::RecursiveGaussianImageFilter()

Default Constructor that takes no arguments and initializes default
parameters

*/
public ";

%javamethodmodifiers  rtk::simple::RecursiveGaussianImageFilter::SetDirection "/**
Self& rtk::simple::RecursiveGaussianImageFilter::SetDirection(unsigned int Direction)
*/
public ";

%javamethodmodifiers  rtk::simple::RecursiveGaussianImageFilter::SetNormalizeAcrossScale "/**
Self& rtk::simple::RecursiveGaussianImageFilter::SetNormalizeAcrossScale(bool NormalizeAcrossScale)

     Set/Get the flag for normalizing the gaussian over scale-space.

This flag enables the analysis of the differential shape of features
independent of their size ( both pixels and physical size ). Following
the notation of Tony Lindeberg:

Let \\\\[ L(x; t) = g(x; t) \\\\ast f(x) \\\\] be the scale-space representation of image \\\\[ f(x) \\\\] where \\\\[ g(x; t) = \\\\frac{1}{ \\\\sqrt{ 2 \\\\pi t} } \\\\exp{
\\\\left( -\\\\frac{x^2}{ 2 t } \\\\right) } \\\\] is the Gaussian function and \\\\[\\\\ast\\\\] denotes convolution. This is a change from above with \\\\[ t = \\\\sigma^2 \\\\] .

Then the normalized derivative operator for normalized coordinates
across scale is:

\\\\[ \\\\partial_\\\\xi = \\\\sqrt{t} \\\\partial_x \\\\]

The resulting scaling factor is \\\\[ \\\\sigma^N \\\\] where N is the order of the derivative.

When this flag is ON the filter will be normalized in such a way that
the values of derivatives are not biased by the size of the object.
That is to say the maximum value a feature reaches across scale is
independent of the scale of the object.

For analyzing an image across scale-space you want to enable this
flag. It is disabled by default.


Not all scale space axioms are satisfied by this filter, some are only
approximated. Particularly, at fine scales ( say less than 1 pixel )
other methods such as a discrete Gaussian kernel should be considered.


*/
public ";

%javamethodmodifiers  rtk::simple::RecursiveGaussianImageFilter::SetOrder "/**
Self& rtk::simple::RecursiveGaussianImageFilter::SetOrder(OrderType Order)

     Set/Get the Order of the Gaussian to convolve with.
ZeroOrder is equivalent to convolving with a Gaussian. This is the
default.

FirstOrder is equivalent to convolving with the first derivative of a
Gaussian.

SecondOrder is equivalent to convolving with the second derivative of
a Gaussian.


*/
public ";

%javamethodmodifiers  rtk::simple::RecursiveGaussianImageFilter::SetSigma "/**
Self& rtk::simple::RecursiveGaussianImageFilter::SetSigma(double Sigma)

Set/Get the Sigma, measured in world coordinates, of the Gaussian
kernel. The default is 1.0. An exception will be generated if the
Sigma value is less than or equal to zero.

*/
public ";

%javamethodmodifiers  rtk::simple::RecursiveGaussianImageFilter::ToString "/**
std::string rtk::simple::RecursiveGaussianImageFilter::ToString() const

Print ourselves out

*/
public ";

%javamethodmodifiers  rtk::simple::RecursiveGaussianImageFilter::~RecursiveGaussianImageFilter "/**
rtk::simple::RecursiveGaussianImageFilter::~RecursiveGaussianImageFilter()

Destructor

*/
public ";


%typemap(javaimports) rtk::simple::RegionOfInterestImageFilter "/**

Extract a region of interest from the input image.


This filter produces an output image of the same dimension as the
input image. The user specifies the region of the input image that
will be contained in the output image. The origin coordinates of the
output images will be computed in such a way that if mapped to
physical space, the output image will overlay the input image with
perfect registration. In other words, a registration process between
the output image and the input image will return an identity
transform.

If you are interested in changing the dimension of the image, you may
want to consider the ExtractImageFilter . For example for extracting a 2D image from a slice of a 3D image.

The region to extract is set using the method SetRegionOfInterest.


See:
 ExtractImageFilter
Wiki Examples:

All Examples

Extract a portion of an image (region of interest)
See:
 rtk::simple::RegionOfInterest for the procedural interface

 itk::RegionOfInterestImageFilter for the Doxygen on the original ITK class.



C++ includes: srtkRegionOfInterestImageFilter.h
*/"

%javamethodmodifiers  rtk::simple::RegionOfInterestImageFilter::Execute "/**
Image rtk::simple::RegionOfInterestImageFilter::Execute(const Image &image1)

Execute the filter on the input image

*/
public ";

%javamethodmodifiers  rtk::simple::RegionOfInterestImageFilter::Execute "/**
Image rtk::simple::RegionOfInterestImageFilter::Execute(const Image &image1, const std::vector< unsigned int > &size, const
std::vector< int > &index)

Execute the filter on the input image with the given parameters

*/
public ";

%javamethodmodifiers  rtk::simple::RegionOfInterestImageFilter::GetIndex "/**
std::vector<int> rtk::simple::RegionOfInterestImageFilter::GetIndex() const
*/
public ";

%javamethodmodifiers  rtk::simple::RegionOfInterestImageFilter::GetName "/**
std::string rtk::simple::RegionOfInterestImageFilter::GetName() const

Name of this class

*/
public ";

%javamethodmodifiers  rtk::simple::RegionOfInterestImageFilter::GetSize "/**
std::vector<unsigned int> rtk::simple::RegionOfInterestImageFilter::GetSize() const
*/
public ";

%javamethodmodifiers  rtk::simple::RegionOfInterestImageFilter::RegionOfInterestImageFilter "/**
rtk::simple::RegionOfInterestImageFilter::RegionOfInterestImageFilter()

Default Constructor that takes no arguments and initializes default
parameters

*/
public ";

%javamethodmodifiers  rtk::simple::RegionOfInterestImageFilter::SetIndex "/**
Self& rtk::simple::RegionOfInterestImageFilter::SetIndex(const std::vector< int > &Index)

odo the internal setting of the method need work!!!

*/
public ";

%javamethodmodifiers  rtk::simple::RegionOfInterestImageFilter::SetSize "/**
Self& rtk::simple::RegionOfInterestImageFilter::SetSize(const std::vector< unsigned int > &Size)
*/
public ";

%javamethodmodifiers  rtk::simple::RegionOfInterestImageFilter::ToString "/**
std::string rtk::simple::RegionOfInterestImageFilter::ToString() const

Print ourselves out

*/
public ";

%javamethodmodifiers  rtk::simple::RegionOfInterestImageFilter::~RegionOfInterestImageFilter "/**
rtk::simple::RegionOfInterestImageFilter::~RegionOfInterestImageFilter()

Destructor

*/
public ";


%typemap(javaimports) rtk::simple::RegionalMaximaImageFilter "/**

Produce a binary image where foreground is the regional maxima of the
input image.


Regional maxima are flat zones surrounded by pixels of lower value.

If the input image is constant, the entire image can be considered as
a maxima or not. The desired behavior can be selected with the SetFlatIsMaxima() method.


Gaetan Lehmann
 This class was contributed to the Insight Journal by author Gaetan
Lehmann. Biologie du Developpement et de la Reproduction, INRA de
Jouy-en-Josas, France. The paper can be found at https://hdl.handle.net/1926/153


See:
 ValuedRegionalMaximaImageFilter


 HConvexImageFilter


 RegionalMinimaImageFilter
Wiki Examples:

All Examples

RegionalMaximaImageFilter
See:
 rtk::simple::RegionalMaxima for the procedural interface

 itk::RegionalMaximaImageFilter for the Doxygen on the original ITK class.



C++ includes: srtkRegionalMaximaImageFilter.h
*/"

%javamethodmodifiers  rtk::simple::RegionalMaximaImageFilter::Execute "/**
Image rtk::simple::RegionalMaximaImageFilter::Execute(const Image &image1)

Execute the filter on the input image

*/
public ";

%javamethodmodifiers  rtk::simple::RegionalMaximaImageFilter::Execute "/**
Image rtk::simple::RegionalMaximaImageFilter::Execute(const Image &image1, double backgroundValue, double foregroundValue,
bool fullyConnected, bool flatIsMaxima)

Execute the filter on the input image with the given parameters

*/
public ";

%javamethodmodifiers  rtk::simple::RegionalMaximaImageFilter::FlatIsMaximaOff "/**
Self& rtk::simple::RegionalMaximaImageFilter::FlatIsMaximaOff()
*/
public ";

%javamethodmodifiers  rtk::simple::RegionalMaximaImageFilter::FlatIsMaximaOn "/**
Self& rtk::simple::RegionalMaximaImageFilter::FlatIsMaximaOn()

Set the value of FlatIsMaxima to true or false respectfully.

*/
public ";

%javamethodmodifiers  rtk::simple::RegionalMaximaImageFilter::FullyConnectedOff "/**
Self& rtk::simple::RegionalMaximaImageFilter::FullyConnectedOff()
*/
public ";

%javamethodmodifiers  rtk::simple::RegionalMaximaImageFilter::FullyConnectedOn "/**
Self& rtk::simple::RegionalMaximaImageFilter::FullyConnectedOn()

Set the value of FullyConnected to true or false respectfully.

*/
public ";

%javamethodmodifiers  rtk::simple::RegionalMaximaImageFilter::GetBackgroundValue "/**
double rtk::simple::RegionalMaximaImageFilter::GetBackgroundValue() const

Set/Get the value used as \"background\" in the output image. Defaults
to NumericTraits<PixelType>::NonpositiveMin() .

*/
public ";

%javamethodmodifiers  rtk::simple::RegionalMaximaImageFilter::GetFlatIsMaxima "/**
bool rtk::simple::RegionalMaximaImageFilter::GetFlatIsMaxima() const

Set/Get wether a flat image must be considered as a maxima or not.
Defaults to true.

*/
public ";

%javamethodmodifiers  rtk::simple::RegionalMaximaImageFilter::GetForegroundValue "/**
double rtk::simple::RegionalMaximaImageFilter::GetForegroundValue() const

Set/Get the value in the output image to consider as \"foreground\".
Defaults to maximum value of PixelType.

*/
public ";

%javamethodmodifiers  rtk::simple::RegionalMaximaImageFilter::GetFullyConnected "/**
bool rtk::simple::RegionalMaximaImageFilter::GetFullyConnected() const

Set/Get whether the connected components are defined strictly by face
connectivity or by face+edge+vertex connectivity. Default is
FullyConnectedOff. For objects that are 1 pixel wide, use
FullyConnectedOn.

*/
public ";

%javamethodmodifiers  rtk::simple::RegionalMaximaImageFilter::GetName "/**
std::string rtk::simple::RegionalMaximaImageFilter::GetName() const

Name of this class

*/
public ";

%javamethodmodifiers  rtk::simple::RegionalMaximaImageFilter::RegionalMaximaImageFilter "/**
rtk::simple::RegionalMaximaImageFilter::RegionalMaximaImageFilter()

Default Constructor that takes no arguments and initializes default
parameters

*/
public ";

%javamethodmodifiers  rtk::simple::RegionalMaximaImageFilter::SetBackgroundValue "/**
Self& rtk::simple::RegionalMaximaImageFilter::SetBackgroundValue(double BackgroundValue)

Set/Get the value used as \"background\" in the output image. Defaults
to NumericTraits<PixelType>::NonpositiveMin() .

*/
public ";

%javamethodmodifiers  rtk::simple::RegionalMaximaImageFilter::SetFlatIsMaxima "/**
Self& rtk::simple::RegionalMaximaImageFilter::SetFlatIsMaxima(bool FlatIsMaxima)

Set/Get wether a flat image must be considered as a maxima or not.
Defaults to true.

*/
public ";

%javamethodmodifiers  rtk::simple::RegionalMaximaImageFilter::SetForegroundValue "/**
Self& rtk::simple::RegionalMaximaImageFilter::SetForegroundValue(double ForegroundValue)

Set/Get the value in the output image to consider as \"foreground\".
Defaults to maximum value of PixelType.

*/
public ";

%javamethodmodifiers  rtk::simple::RegionalMaximaImageFilter::SetFullyConnected "/**
Self& rtk::simple::RegionalMaximaImageFilter::SetFullyConnected(bool FullyConnected)

Set/Get whether the connected components are defined strictly by face
connectivity or by face+edge+vertex connectivity. Default is
FullyConnectedOff. For objects that are 1 pixel wide, use
FullyConnectedOn.

*/
public ";

%javamethodmodifiers  rtk::simple::RegionalMaximaImageFilter::ToString "/**
std::string rtk::simple::RegionalMaximaImageFilter::ToString() const

Print ourselves out

*/
public ";

%javamethodmodifiers  rtk::simple::RegionalMaximaImageFilter::~RegionalMaximaImageFilter "/**
rtk::simple::RegionalMaximaImageFilter::~RegionalMaximaImageFilter()

Destructor

*/
public ";


%typemap(javaimports) rtk::simple::RegionalMinimaImageFilter "/**

Produce a binary image where foreground is the regional minima of the
input image.


Regional minima are flat zones surrounded by pixels of greater value.

If the input image is constant, the entire image can be considered as
a minima or not. The SetFlatIsMinima() method let the user choose which behavior to use.

This class was contribtued to the Insight Journal by
Gaetan Lehmann. Biologie du Developpement et de la Reproduction, INRA
de Jouy-en-Josas, France. https://hdl.handle.net/1926/153
RegionalMaximaImageFilter MathematicalMorphologyImageFilters


See:
 ValuedRegionalMinimaImageFilter


 HConcaveImageFilter
Wiki Examples:

All Examples

RegionalMinimaImageFilter
See:
 rtk::simple::RegionalMinima for the procedural interface

 itk::RegionalMinimaImageFilter for the Doxygen on the original ITK class.



C++ includes: srtkRegionalMinimaImageFilter.h
*/"

%javamethodmodifiers  rtk::simple::RegionalMinimaImageFilter::Execute "/**
Image rtk::simple::RegionalMinimaImageFilter::Execute(const Image &image1)

Execute the filter on the input image

*/
public ";

%javamethodmodifiers  rtk::simple::RegionalMinimaImageFilter::Execute "/**
Image rtk::simple::RegionalMinimaImageFilter::Execute(const Image &image1, double backgroundValue, double foregroundValue,
bool fullyConnected, bool flatIsMinima)

Execute the filter on the input image with the given parameters

*/
public ";

%javamethodmodifiers  rtk::simple::RegionalMinimaImageFilter::FlatIsMinimaOff "/**
Self& rtk::simple::RegionalMinimaImageFilter::FlatIsMinimaOff()
*/
public ";

%javamethodmodifiers  rtk::simple::RegionalMinimaImageFilter::FlatIsMinimaOn "/**
Self& rtk::simple::RegionalMinimaImageFilter::FlatIsMinimaOn()

Set the value of FlatIsMinima to true or false respectfully.

*/
public ";

%javamethodmodifiers  rtk::simple::RegionalMinimaImageFilter::FullyConnectedOff "/**
Self& rtk::simple::RegionalMinimaImageFilter::FullyConnectedOff()
*/
public ";

%javamethodmodifiers  rtk::simple::RegionalMinimaImageFilter::FullyConnectedOn "/**
Self& rtk::simple::RegionalMinimaImageFilter::FullyConnectedOn()

Set the value of FullyConnected to true or false respectfully.

*/
public ";

%javamethodmodifiers  rtk::simple::RegionalMinimaImageFilter::GetBackgroundValue "/**
double rtk::simple::RegionalMinimaImageFilter::GetBackgroundValue() const

Set/Get the value used as \"background\" in the output image. Defaults
to NumericTraits<PixelType>::NonpositiveMin() .

*/
public ";

%javamethodmodifiers  rtk::simple::RegionalMinimaImageFilter::GetFlatIsMinima "/**
bool rtk::simple::RegionalMinimaImageFilter::GetFlatIsMinima() const

Set/Get wether a flat image must be considered as a minima or not.
Defaults to true.

*/
public ";

%javamethodmodifiers  rtk::simple::RegionalMinimaImageFilter::GetForegroundValue "/**
double rtk::simple::RegionalMinimaImageFilter::GetForegroundValue() const

Set/Get the value in the output image to consider as \"foreground\".
Defaults to maximum value of PixelType.

*/
public ";

%javamethodmodifiers  rtk::simple::RegionalMinimaImageFilter::GetFullyConnected "/**
bool rtk::simple::RegionalMinimaImageFilter::GetFullyConnected() const

Set/Get whether the connected components are defined strictly by face
connectivity or by face+edge+vertex connectivity. Default is
FullyConnectedOff. For objects that are 1 pixel wide, use
FullyConnectedOn.

*/
public ";

%javamethodmodifiers  rtk::simple::RegionalMinimaImageFilter::GetName "/**
std::string rtk::simple::RegionalMinimaImageFilter::GetName() const

Name of this class

*/
public ";

%javamethodmodifiers  rtk::simple::RegionalMinimaImageFilter::RegionalMinimaImageFilter "/**
rtk::simple::RegionalMinimaImageFilter::RegionalMinimaImageFilter()

Default Constructor that takes no arguments and initializes default
parameters

*/
public ";

%javamethodmodifiers  rtk::simple::RegionalMinimaImageFilter::SetBackgroundValue "/**
Self& rtk::simple::RegionalMinimaImageFilter::SetBackgroundValue(double BackgroundValue)

Set/Get the value used as \"background\" in the output image. Defaults
to NumericTraits<PixelType>::NonpositiveMin() .

*/
public ";

%javamethodmodifiers  rtk::simple::RegionalMinimaImageFilter::SetFlatIsMinima "/**
Self& rtk::simple::RegionalMinimaImageFilter::SetFlatIsMinima(bool FlatIsMinima)

Set/Get wether a flat image must be considered as a minima or not.
Defaults to true.

*/
public ";

%javamethodmodifiers  rtk::simple::RegionalMinimaImageFilter::SetForegroundValue "/**
Self& rtk::simple::RegionalMinimaImageFilter::SetForegroundValue(double ForegroundValue)

Set/Get the value in the output image to consider as \"foreground\".
Defaults to maximum value of PixelType.

*/
public ";

%javamethodmodifiers  rtk::simple::RegionalMinimaImageFilter::SetFullyConnected "/**
Self& rtk::simple::RegionalMinimaImageFilter::SetFullyConnected(bool FullyConnected)

Set/Get whether the connected components are defined strictly by face
connectivity or by face+edge+vertex connectivity. Default is
FullyConnectedOff. For objects that are 1 pixel wide, use
FullyConnectedOn.

*/
public ";

%javamethodmodifiers  rtk::simple::RegionalMinimaImageFilter::ToString "/**
std::string rtk::simple::RegionalMinimaImageFilter::ToString() const

Print ourselves out

*/
public ";

%javamethodmodifiers  rtk::simple::RegionalMinimaImageFilter::~RegionalMinimaImageFilter "/**
rtk::simple::RegionalMinimaImageFilter::~RegionalMinimaImageFilter()

Destructor

*/
public ";


%typemap(javaimports) rtk::simple::RelabelComponentImageFilter "/**

Relabel the components in an image such that consecutive labels are
used.


RelabelComponentImageFilter remaps the labels associated with the objects in an image (as from
the output of ConnectedComponentImageFilter ) such that the label numbers are consecutive with no gaps between
the label numbers used. By default, the relabeling will also sort the
labels based on the size of the object: the largest object will have
label #1, the second largest will have label #2, etc. If two labels
have the same size their initial order is kept. The sorting by size
can be disabled using SetSortByObjectSize.

Label #0 is assumed to be the background and is left unaltered by the
relabeling.

RelabelComponentImageFilter is typically used on the output of the ConnectedComponentImageFilter for those applications that want to extract the largest object or the
\"k\" largest objects. Any particular object can be extracted from the
relabeled output using a BinaryThresholdImageFilter . A group of objects can be extracted from the relabled output using
a ThresholdImageFilter .

Once all the objects are relabeled, the application can query the
number of objects and the size of each object. Object sizes are returned in a vector. The size of the background is not
calculated. So the size of object #1 is GetSizeOfObjectsInPixels()
[0], the size of object #2 is GetSizeOfObjectsInPixels() [1], etc.

If user sets a minimum object size, all objects with fewer pixels than
the minimum will be discarded, so that the number of objects reported
will be only those remaining. The GetOriginalNumberOfObjects method
can be called to find out how many objects were present before the
small ones were discarded.

RelabelComponentImageFilter can be run as an \"in place\" filter, where it will overwrite its
output. The default is run out of place (or generate a separate
output). \"In place\" operation can be controlled via methods in the
superclass, InPlaceImageFilter::InPlaceOn() and
InPlaceImageFilter::InPlaceOff() .


See:
 ConnectedComponentImageFilter , BinaryThresholdImageFilter , ThresholdImageFilter
Wiki Examples:

All Examples

Assign contiguous labels to connected regions of an image
See:
 rtk::simple::RelabelComponent for the procedural interface

 itk::RelabelComponentImageFilter for the Doxygen on the original ITK class.



C++ includes: srtkRelabelComponentImageFilter.h
*/"

%javamethodmodifiers  rtk::simple::RelabelComponentImageFilter::Execute "/**
Image rtk::simple::RelabelComponentImageFilter::Execute(const Image &image1)

Execute the filter on the input image

*/
public ";

%javamethodmodifiers  rtk::simple::RelabelComponentImageFilter::Execute "/**
Image rtk::simple::RelabelComponentImageFilter::Execute(const Image &image1, uint64_t minimumObjectSize)

Execute the filter on the input image with the given parameters

*/
public ";

%javamethodmodifiers  rtk::simple::RelabelComponentImageFilter::GetMinimumObjectSize "/**
uint64_t rtk::simple::RelabelComponentImageFilter::GetMinimumObjectSize() const

Get the caller-defined minimum size of an object in pixels. If the
caller has not set the minimum, 0 will be returned, which is to be
interpreted as meaning that no minimum exists, and all objects in the
original label map will be passed through to the output.

*/
public ";

%javamethodmodifiers  rtk::simple::RelabelComponentImageFilter::GetName "/**
std::string rtk::simple::RelabelComponentImageFilter::GetName() const

Name of this class

*/
public ";

%javamethodmodifiers  rtk::simple::RelabelComponentImageFilter::RelabelComponentImageFilter "/**
rtk::simple::RelabelComponentImageFilter::RelabelComponentImageFilter()

Default Constructor that takes no arguments and initializes default
parameters

*/
public ";

%javamethodmodifiers  rtk::simple::RelabelComponentImageFilter::SetMinimumObjectSize "/**
Self& rtk::simple::RelabelComponentImageFilter::SetMinimumObjectSize(uint64_t MinimumObjectSize)

Set the minimum size in pixels for an object. All objects smaller than
this size will be discarded and will not appear in the output label
map. NumberOfObjects will count only the objects whose pixel counts
are greater than or equal to the minimum size. Call
GetOriginalNumberOfObjects to find out how many objects were present
in the original label map.

*/
public ";

%javamethodmodifiers  rtk::simple::RelabelComponentImageFilter::ToString "/**
std::string rtk::simple::RelabelComponentImageFilter::ToString() const

Print ourselves out

*/
public ";

%javamethodmodifiers  rtk::simple::RelabelComponentImageFilter::~RelabelComponentImageFilter "/**
rtk::simple::RelabelComponentImageFilter::~RelabelComponentImageFilter()

Destructor

*/
public ";


%typemap(javaimports) rtk::simple::RelabelLabelMapFilter "/**

This filter relabels the LabelObjects; the new labels are arranged
consecutively with consideration for the background value.


This filter takes the LabelObjects from the input and reassigns them
to the output by calling the PushLabelObject method, which by default,
attempts to reorganize the labels consecutively. The user can assign
an arbitrary value to the background; the filter will assign the
labels consecutively by skipping the background value.

This implementation was taken from the Insight Journal paper: https://hdl.handle.net/1926/584 or http://www.insight-journal.org/browse/publication/176
Gaetan Lehmann. Biologie du Developpement et de la Reproduction, INRA
de Jouy-en-Josas, France.

See:
 ShapeLabelObject , RelabelComponentImageFilter

 rtk::simple::RelabelLabelMapFilter for the procedural interface

 itk::RelabelLabelMapFilter for the Doxygen on the original ITK class.


C++ includes: srtkRelabelLabelMapFilter.h
*/"

%javamethodmodifiers  rtk::simple::RelabelLabelMapFilter::Execute "/**
Image rtk::simple::RelabelLabelMapFilter::Execute(const Image &image1)

Execute the filter on the input image

*/
public ";

%javamethodmodifiers  rtk::simple::RelabelLabelMapFilter::Execute "/**
Image rtk::simple::RelabelLabelMapFilter::Execute(const Image &image1, bool reverseOrdering)

Execute the filter on the input image with the given parameters

*/
public ";

%javamethodmodifiers  rtk::simple::RelabelLabelMapFilter::GetName "/**
std::string rtk::simple::RelabelLabelMapFilter::GetName() const

Name of this class

*/
public ";

%javamethodmodifiers  rtk::simple::RelabelLabelMapFilter::GetReverseOrdering "/**
bool rtk::simple::RelabelLabelMapFilter::GetReverseOrdering() const
*/
public ";

%javamethodmodifiers  rtk::simple::RelabelLabelMapFilter::RelabelLabelMapFilter "/**
rtk::simple::RelabelLabelMapFilter::RelabelLabelMapFilter()

Default Constructor that takes no arguments and initializes default
parameters

*/
public ";

%javamethodmodifiers  rtk::simple::RelabelLabelMapFilter::ReverseOrderingOff "/**
Self& rtk::simple::RelabelLabelMapFilter::ReverseOrderingOff()
*/
public ";

%javamethodmodifiers  rtk::simple::RelabelLabelMapFilter::ReverseOrderingOn "/**
Self& rtk::simple::RelabelLabelMapFilter::ReverseOrderingOn()

Set the value of ReverseOrdering to true or false respectfully.

*/
public ";

%javamethodmodifiers  rtk::simple::RelabelLabelMapFilter::SetReverseOrdering "/**
Self& rtk::simple::RelabelLabelMapFilter::SetReverseOrdering(bool ReverseOrdering)
*/
public ";

%javamethodmodifiers  rtk::simple::RelabelLabelMapFilter::ToString "/**
std::string rtk::simple::RelabelLabelMapFilter::ToString() const

Print ourselves out

*/
public ";

%javamethodmodifiers  rtk::simple::RelabelLabelMapFilter::~RelabelLabelMapFilter "/**
rtk::simple::RelabelLabelMapFilter::~RelabelLabelMapFilter()

Destructor

*/
public ";


%typemap(javaimports) rtk::simple::RenyiEntropyThresholdImageFilter "/**

Threshold an image using the RenyiEntropy Threshold.


This filter creates a binary thresholded image that separates an image
into foreground and background components. The filter computes the
threshold using the RenyiEntropyThresholdCalculator and applies that theshold to the input image using the BinaryThresholdImageFilter .


Richard Beare. Department of Medicine, Monash University, Melbourne,
Australia.
 Gaetan Lehmann. Biologie du Developpement et de la Reproduction, INRA
de Jouy-en-Josas, France.

This implementation was taken from the Insight Journal paper: https://hdl.handle.net/10380/3279 or http://www.insight-journal.org/browse/publication/811


See:
 HistogramThresholdImageFilter

 rtk::simple::RenyiEntropyThreshold for the procedural interface

 itk::RenyiEntropyThresholdImageFilter for the Doxygen on the original ITK class.


C++ includes: srtkRenyiEntropyThresholdImageFilter.h
*/"

%javamethodmodifiers  rtk::simple::RenyiEntropyThresholdImageFilter::Execute "/**
Image rtk::simple::RenyiEntropyThresholdImageFilter::Execute(const Image &image, const Image &maskImage)

Execute the filter on the input image

*/
public ";

%javamethodmodifiers  rtk::simple::RenyiEntropyThresholdImageFilter::Execute "/**
Image rtk::simple::RenyiEntropyThresholdImageFilter::Execute(const Image &image)
*/
public ";

%javamethodmodifiers  rtk::simple::RenyiEntropyThresholdImageFilter::Execute "/**
Image rtk::simple::RenyiEntropyThresholdImageFilter::Execute(const Image &image, const Image &maskImage, uint8_t insideValue,
uint8_t outsideValue, uint32_t numberOfHistogramBins, bool maskOutput,
uint8_t maskValue)

Execute the filter on the input image with the given parameters

*/
public ";

%javamethodmodifiers  rtk::simple::RenyiEntropyThresholdImageFilter::Execute "/**
Image rtk::simple::RenyiEntropyThresholdImageFilter::Execute(const Image &image, uint8_t insideValue, uint8_t outsideValue,
uint32_t numberOfHistogramBins, bool maskOutput, uint8_t maskValue)
*/
public ";

%javamethodmodifiers  rtk::simple::RenyiEntropyThresholdImageFilter::GetInsideValue "/**
uint8_t rtk::simple::RenyiEntropyThresholdImageFilter::GetInsideValue() const

Get the \"inside\" pixel value.

*/
public ";

%javamethodmodifiers  rtk::simple::RenyiEntropyThresholdImageFilter::GetMaskOutput "/**
bool rtk::simple::RenyiEntropyThresholdImageFilter::GetMaskOutput() const
*/
public ";

%javamethodmodifiers  rtk::simple::RenyiEntropyThresholdImageFilter::GetMaskValue "/**
uint8_t rtk::simple::RenyiEntropyThresholdImageFilter::GetMaskValue() const
*/
public ";

%javamethodmodifiers  rtk::simple::RenyiEntropyThresholdImageFilter::GetName "/**
std::string rtk::simple::RenyiEntropyThresholdImageFilter::GetName() const

Name of this class

*/
public ";

%javamethodmodifiers  rtk::simple::RenyiEntropyThresholdImageFilter::GetNumberOfHistogramBins "/**
uint32_t rtk::simple::RenyiEntropyThresholdImageFilter::GetNumberOfHistogramBins() const
*/
public ";

%javamethodmodifiers  rtk::simple::RenyiEntropyThresholdImageFilter::GetOutsideValue "/**
uint8_t rtk::simple::RenyiEntropyThresholdImageFilter::GetOutsideValue() const

Get the \"outside\" pixel value.

*/
public ";

%javamethodmodifiers  rtk::simple::RenyiEntropyThresholdImageFilter::GetThreshold "/**
double rtk::simple::RenyiEntropyThresholdImageFilter::GetThreshold() const

Get the computed threshold.


This is a measurement. Its value is updated in the Execute methods, so
the value will only be valid after an execution.

*/
public ";

%javamethodmodifiers  rtk::simple::RenyiEntropyThresholdImageFilter::MaskOutputOff "/**
Self& rtk::simple::RenyiEntropyThresholdImageFilter::MaskOutputOff()
*/
public ";

%javamethodmodifiers  rtk::simple::RenyiEntropyThresholdImageFilter::MaskOutputOn "/**
Self& rtk::simple::RenyiEntropyThresholdImageFilter::MaskOutputOn()

Set the value of MaskOutput to true or false respectfully.

*/
public ";

%javamethodmodifiers  rtk::simple::RenyiEntropyThresholdImageFilter::RenyiEntropyThresholdImageFilter "/**
rtk::simple::RenyiEntropyThresholdImageFilter::RenyiEntropyThresholdImageFilter()

Default Constructor that takes no arguments and initializes default
parameters

*/
public ";

%javamethodmodifiers  rtk::simple::RenyiEntropyThresholdImageFilter::SetInsideValue "/**
Self& rtk::simple::RenyiEntropyThresholdImageFilter::SetInsideValue(uint8_t InsideValue)

Set the \"inside\" pixel value.

*/
public ";

%javamethodmodifiers  rtk::simple::RenyiEntropyThresholdImageFilter::SetMaskOutput "/**
Self& rtk::simple::RenyiEntropyThresholdImageFilter::SetMaskOutput(bool MaskOutput)

Do you want the output to be masked by the mask used in histogram
construction. Only relevant if masking is in use.

*/
public ";

%javamethodmodifiers  rtk::simple::RenyiEntropyThresholdImageFilter::SetMaskValue "/**
Self& rtk::simple::RenyiEntropyThresholdImageFilter::SetMaskValue(uint8_t MaskValue)

The value in the mask image, if used, indicating voxels that should be
included. Default is the max of pixel type, as in the
MaskedImageToHistogramFilter

*/
public ";

%javamethodmodifiers  rtk::simple::RenyiEntropyThresholdImageFilter::SetNumberOfHistogramBins "/**
Self& rtk::simple::RenyiEntropyThresholdImageFilter::SetNumberOfHistogramBins(uint32_t NumberOfHistogramBins)

Set/Get the number of histogram bins.

*/
public ";

%javamethodmodifiers  rtk::simple::RenyiEntropyThresholdImageFilter::SetOutsideValue "/**
Self& rtk::simple::RenyiEntropyThresholdImageFilter::SetOutsideValue(uint8_t OutsideValue)

Set the \"outside\" pixel value. The default value NumericTraits<OutputPixelType>::Zero.

*/
public ";

%javamethodmodifiers  rtk::simple::RenyiEntropyThresholdImageFilter::ToString "/**
std::string rtk::simple::RenyiEntropyThresholdImageFilter::ToString() const

Print ourselves out

*/
public ";

%javamethodmodifiers  rtk::simple::RenyiEntropyThresholdImageFilter::~RenyiEntropyThresholdImageFilter "/**
rtk::simple::RenyiEntropyThresholdImageFilter::~RenyiEntropyThresholdImageFilter()

Destructor

*/
public ";


%typemap(javaimports) rtk::simple::ResampleImageFilter "/**

Resample an image via a coordinate transform.


ResampleImageFilter resamples an existing image through some coordinate transform,
interpolating via some image function. The class is templated over the
types of the input and output images.

Note that the choice of interpolator function can be important. This
function is set via SetInterpolator() . The default is LinearInterpolateImageFunction <InputImageType, TInterpolatorPrecisionType>, which is reasonable for
ordinary medical images. However, some synthetic images have pixels
drawn from a finite prescribed set. An example would be a mask
indicating the segmentation of a brain into a small number of tissue
types. For such an image, one does not want to interpolate between
different pixel values, and so NearestNeighborInterpolateImageFunction < InputImageType, TCoordRep > would be a better choice.

If an sample is taken from outside the image domain, the default
behavior is to use a default pixel value. If different behavior is
desired, an extrapolator function can be set with SetExtrapolator() .

Output information (spacing, size and direction) for the output image
should be set. This information has the normal defaults of unit
spacing, zero origin and identity direction. Optionally, the output
information can be obtained from a reference image. If the reference
image is provided and UseReferenceImage is On, then the spacing,
origin and direction of the reference image will be used.

Since this filter produces an image which is a different size than its
input, it needs to override several of the methods defined in ProcessObject in order to properly manage the pipeline execution model. In
particular, this filter overrides
ProcessObject::GenerateInputRequestedRegion() and
ProcessObject::GenerateOutputInformation() .

This filter is implemented as a multithreaded filter. It provides a
ThreadedGenerateData() method for its implementation.
WARNING:
For multithreading, the TransformPoint method of the user-designated
coordinate transform must be threadsafe.
Wiki Examples:

All Examples

Translate an image

Upsampling an image

Resample (stretch or compress) an image

See:
 itk::ResampleImageFilter for the Doxygen on the original ITK class.


C++ includes: srtkResampleImageFilter.h
*/"

%javamethodmodifiers  rtk::simple::ResampleImageFilter::Execute "/**
Image rtk::simple::ResampleImageFilter::Execute(const Image &image1)

Execute the filter on the input image

*/
public ";

%javamethodmodifiers  rtk::simple::ResampleImageFilter::Execute "/**
Image rtk::simple::ResampleImageFilter::Execute(const Image &image1, const std::vector< uint32_t > &size, Transform
transform, InterpolatorEnum interpolator, const std::vector< double >
&outputOrigin, const std::vector< double > &outputSpacing,
std::vector< double > outputDirection, double defaultPixelValue,
PixelIDValueEnum outputPixelType)

Execute the filter on the input image with the given parameters

*/
public ";

%javamethodmodifiers  rtk::simple::ResampleImageFilter::GetDefaultPixelValue "/**
double rtk::simple::ResampleImageFilter::GetDefaultPixelValue() const

Get/Set the pixel value when a transformed pixel is outside of the
image. The default default pixel value is 0.

*/
public ";

%javamethodmodifiers  rtk::simple::ResampleImageFilter::GetInterpolator "/**
InterpolatorEnum rtk::simple::ResampleImageFilter::GetInterpolator() const

Get/Set the interpolator function. The default is LinearInterpolateImageFunction <InputImageType, TInterpolatorPrecisionType>. Some other options are NearestNeighborInterpolateImageFunction (useful for binary masks and other images with a small number of
possible pixel values), and BSplineInterpolateImageFunction (which provides a higher order of interpolation).

*/
public ";

%javamethodmodifiers  rtk::simple::ResampleImageFilter::GetName "/**
std::string rtk::simple::ResampleImageFilter::GetName() const

Name of this class

*/
public ";

%javamethodmodifiers  rtk::simple::ResampleImageFilter::GetOutputDirection "/**
std::vector<double> rtk::simple::ResampleImageFilter::GetOutputDirection() const

Set the output direciton cosine matrix.

*/
public ";

%javamethodmodifiers  rtk::simple::ResampleImageFilter::GetOutputOrigin "/**
std::vector<double> rtk::simple::ResampleImageFilter::GetOutputOrigin() const

Get the output image origin.

*/
public ";

%javamethodmodifiers  rtk::simple::ResampleImageFilter::GetOutputPixelType "/**
PixelIDValueEnum rtk::simple::ResampleImageFilter::GetOutputPixelType() const

Get the ouput pixel type.

*/
public ";

%javamethodmodifiers  rtk::simple::ResampleImageFilter::GetOutputSpacing "/**
std::vector<double> rtk::simple::ResampleImageFilter::GetOutputSpacing() const

Get the output image spacing.

*/
public ";

%javamethodmodifiers  rtk::simple::ResampleImageFilter::GetSize "/**
std::vector<uint32_t> rtk::simple::ResampleImageFilter::GetSize() const

Get/Set the size of the output image.

*/
public ";

%javamethodmodifiers  rtk::simple::ResampleImageFilter::GetTransform "/**
Transform rtk::simple::ResampleImageFilter::GetTransform() const

Get/Set the coordinate transformation. Set the coordinate transform to
use for resampling. Note that this must be in physical coordinates and
it is the output-to-input transform, NOT the input-to-output transform
that you might naively expect. By default the filter uses an Identity
transform. You must provide a different transform here, before
attempting to run the filter, if you do not want to use the default
Identity transform.

*/
public ";

%javamethodmodifiers  rtk::simple::ResampleImageFilter::ResampleImageFilter "/**
rtk::simple::ResampleImageFilter::ResampleImageFilter()

Default Constructor that takes no arguments and initializes default
parameters

*/
public ";

%javamethodmodifiers  rtk::simple::ResampleImageFilter::SetDefaultPixelValue "/**
Self& rtk::simple::ResampleImageFilter::SetDefaultPixelValue(double DefaultPixelValue)

Get/Set the pixel value when a transformed pixel is outside of the
image. The default default pixel value is 0.

*/
public ";

%javamethodmodifiers  rtk::simple::ResampleImageFilter::SetInterpolator "/**
Self& rtk::simple::ResampleImageFilter::SetInterpolator(InterpolatorEnum Interpolator)

Get/Set the interpolator function. The default is LinearInterpolateImageFunction <InputImageType, TInterpolatorPrecisionType>. Some other options are NearestNeighborInterpolateImageFunction (useful for binary masks and other images with a small number of
possible pixel values), and BSplineInterpolateImageFunction (which provides a higher order of interpolation).

*/
public ";

%javamethodmodifiers  rtk::simple::ResampleImageFilter::SetOutputDirection "/**
Self& rtk::simple::ResampleImageFilter::SetOutputDirection(std::vector< double > OutputDirection)

Set the output direciton cosine matrix.

*/
public ";

%javamethodmodifiers  rtk::simple::ResampleImageFilter::SetOutputOrigin "/**
Self& rtk::simple::ResampleImageFilter::SetOutputOrigin(const std::vector< double > &OutputOrigin)

Set the output image origin.

*/
public ";

%javamethodmodifiers  rtk::simple::ResampleImageFilter::SetOutputPixelType "/**
Self& rtk::simple::ResampleImageFilter::SetOutputPixelType(PixelIDValueEnum OutputPixelType)

Set the output pixel type, if srtkUnknown then the input type is used.

*/
public ";

%javamethodmodifiers  rtk::simple::ResampleImageFilter::SetOutputSpacing "/**
Self& rtk::simple::ResampleImageFilter::SetOutputSpacing(const std::vector< double > &OutputSpacing)

Set the output image spacing.

*/
public ";

%javamethodmodifiers  rtk::simple::ResampleImageFilter::SetReferenceImage "/**
void rtk::simple::ResampleImageFilter::SetReferenceImage(const Image &refImage)

This methods sets the output size, origin, spacing and direction to
that of the provided image

*/
public ";

%javamethodmodifiers  rtk::simple::ResampleImageFilter::SetSize "/**
Self& rtk::simple::ResampleImageFilter::SetSize(const std::vector< uint32_t > &Size)

Get/Set the size of the output image.

*/
public ";

%javamethodmodifiers  rtk::simple::ResampleImageFilter::SetTransform "/**
Self& rtk::simple::ResampleImageFilter::SetTransform(Transform Transform)

Get/Set the coordinate transformation. Set the coordinate transform to
use for resampling. Note that this must be in physical coordinates and
it is the output-to-input transform, NOT the input-to-output transform
that you might naively expect. By default the filter uses an Identity
transform. You must provide a different transform here, before
attempting to run the filter, if you do not want to use the default
Identity transform.

*/
public ";

%javamethodmodifiers  rtk::simple::ResampleImageFilter::ToString "/**
std::string rtk::simple::ResampleImageFilter::ToString() const

Print ourselves out

*/
public ";

%javamethodmodifiers  rtk::simple::ResampleImageFilter::~ResampleImageFilter "/**
rtk::simple::ResampleImageFilter::~ResampleImageFilter()

Destructor

*/
public ";


%typemap(javaimports) rtk::simple::RescaleIntensityImageFilter "/**

Applies a linear transformation to the intensity levels of the input Image .


RescaleIntensityImageFilter applies pixel-wise a linear transformation to the intensity values of
input image pixels. The linear transformation is defined by the user
in terms of the minimum and maximum values that the output image
should have.

The following equation gives the mapping of the intensity values


\\\\[ outputPixel = ( inputPixel - inputMin) \\\\cdot
\\\\frac{(outputMax - outputMin )}{(inputMax - inputMin)} + outputMin
\\\\]
 All computations are performed in the precison of the input pixel's
RealType. Before assigning the computed value to the output pixel.

NOTE: In this filter the minimum and maximum values of the input image
are computed internally using the MinimumMaximumImageCalculator . Users are not supposed to set those values in this filter. If you
need a filter where you can set the minimum and maximum values of the
input, please use the IntensityWindowingImageFilter . If you want a filter that can use a user-defined linear
transformation for the intensity, then please use the ShiftScaleImageFilter .


See:
 IntensityWindowingImageFilter
Wiki Examples:

All Examples

Rescale the intensity values of an image to a specified range
See:
 rtk::simple::RescaleIntensity for the procedural interface

 itk::RescaleIntensityImageFilter for the Doxygen on the original ITK class.



C++ includes: srtkRescaleIntensityImageFilter.h
*/"

%javamethodmodifiers  rtk::simple::RescaleIntensityImageFilter::Execute "/**
Image rtk::simple::RescaleIntensityImageFilter::Execute(const Image &image1)

Execute the filter on the input image

*/
public ";

%javamethodmodifiers  rtk::simple::RescaleIntensityImageFilter::Execute "/**
Image rtk::simple::RescaleIntensityImageFilter::Execute(const Image &image1, double outputMinimum, double outputMaximum)

Execute the filter on the input image with the given parameters

*/
public ";

%javamethodmodifiers  rtk::simple::RescaleIntensityImageFilter::GetName "/**
std::string rtk::simple::RescaleIntensityImageFilter::GetName() const

Name of this class

*/
public ";

%javamethodmodifiers  rtk::simple::RescaleIntensityImageFilter::GetOutputMaximum "/**
double rtk::simple::RescaleIntensityImageFilter::GetOutputMaximum() const
*/
public ";

%javamethodmodifiers  rtk::simple::RescaleIntensityImageFilter::GetOutputMinimum "/**
double rtk::simple::RescaleIntensityImageFilter::GetOutputMinimum() const
*/
public ";

%javamethodmodifiers  rtk::simple::RescaleIntensityImageFilter::RescaleIntensityImageFilter "/**
rtk::simple::RescaleIntensityImageFilter::RescaleIntensityImageFilter()

Default Constructor that takes no arguments and initializes default
parameters

*/
public ";

%javamethodmodifiers  rtk::simple::RescaleIntensityImageFilter::SetOutputMaximum "/**
Self& rtk::simple::RescaleIntensityImageFilter::SetOutputMaximum(double OutputMaximum)
*/
public ";

%javamethodmodifiers  rtk::simple::RescaleIntensityImageFilter::SetOutputMinimum "/**
Self& rtk::simple::RescaleIntensityImageFilter::SetOutputMinimum(double OutputMinimum)
*/
public ";

%javamethodmodifiers  rtk::simple::RescaleIntensityImageFilter::ToString "/**
std::string rtk::simple::RescaleIntensityImageFilter::ToString() const

Print ourselves out

*/
public ";

%javamethodmodifiers  rtk::simple::RescaleIntensityImageFilter::~RescaleIntensityImageFilter "/**
rtk::simple::RescaleIntensityImageFilter::~RescaleIntensityImageFilter()

Destructor

*/
public ";


%typemap(javaimports) rtk::simple::RichardsonLucyDeconvolutionImageFilter "/**

Deconvolve an image using the Richardson-Lucy deconvolution algorithm.


This filter implements the Richardson-Lucy deconvolution algorithm as
defined in Bertero M and Boccacci P, \"Introduction to Inverse
Problems in Imaging\", 1998. The algorithm assumes that the input
image has been formed by a linear shift-invariant system with a known
kernel.

The Richardson-Lucy algorithm assumes that noise in the image follows
a Poisson distribution and that the distribution for each pixel is
independent of the other pixels.

This code was adapted from the Insight Journal contribution:

\"Deconvolution: infrastructure and reference algorithms\" by Gaetan
Lehmann https://hdl.handle.net/10380/3207


Gaetan Lehmann, Biologie du Developpement et de la Reproduction, INRA
de Jouy-en-Josas, France
 Cory Quammen, The University of North Carolina at Chapel Hill


See:
 IterativeDeconvolutionImageFilter


 LandweberDeconvolutionImageFilter


 ProjectedLandweberDeconvolutionImageFilter

 rtk::simple::RichardsonLucyDeconvolution for the procedural interface

 itk::RichardsonLucyDeconvolutionImageFilter for the Doxygen on the original ITK class.


C++ includes: srtkRichardsonLucyDeconvolutionImageFilter.h
*/"

%javamethodmodifiers  rtk::simple::RichardsonLucyDeconvolutionImageFilter::Execute "/**
Image rtk::simple::RichardsonLucyDeconvolutionImageFilter::Execute(const Image &image1, const Image &image2)

Execute the filter on the input images

*/
public ";

%javamethodmodifiers  rtk::simple::RichardsonLucyDeconvolutionImageFilter::Execute "/**
Image rtk::simple::RichardsonLucyDeconvolutionImageFilter::Execute(const Image &image1, const Image &image2, int numberOfIterations,
bool normalize,
RichardsonLucyDeconvolutionImageFilter::BoundaryConditionType
boundaryCondition,
RichardsonLucyDeconvolutionImageFilter::OutputRegionModeType
outputRegionMode)

Execute the filter on the input images with the given parameters

*/
public ";

%javamethodmodifiers  rtk::simple::RichardsonLucyDeconvolutionImageFilter::GetBoundaryCondition "/**
BoundaryConditionType rtk::simple::RichardsonLucyDeconvolutionImageFilter::GetBoundaryCondition() const
*/
public ";

%javamethodmodifiers  rtk::simple::RichardsonLucyDeconvolutionImageFilter::GetName "/**
std::string rtk::simple::RichardsonLucyDeconvolutionImageFilter::GetName() const

Name of this class

*/
public ";

%javamethodmodifiers  rtk::simple::RichardsonLucyDeconvolutionImageFilter::GetNormalize "/**
bool rtk::simple::RichardsonLucyDeconvolutionImageFilter::GetNormalize() const
*/
public ";

%javamethodmodifiers  rtk::simple::RichardsonLucyDeconvolutionImageFilter::GetNumberOfIterations "/**
int rtk::simple::RichardsonLucyDeconvolutionImageFilter::GetNumberOfIterations() const

Get the number of iterations.

*/
public ";

%javamethodmodifiers  rtk::simple::RichardsonLucyDeconvolutionImageFilter::GetOutputRegionMode "/**
OutputRegionModeType rtk::simple::RichardsonLucyDeconvolutionImageFilter::GetOutputRegionMode() const
*/
public ";

%javamethodmodifiers  rtk::simple::RichardsonLucyDeconvolutionImageFilter::NormalizeOff "/**
Self& rtk::simple::RichardsonLucyDeconvolutionImageFilter::NormalizeOff()
*/
public ";

%javamethodmodifiers  rtk::simple::RichardsonLucyDeconvolutionImageFilter::NormalizeOn "/**
Self& rtk::simple::RichardsonLucyDeconvolutionImageFilter::NormalizeOn()

Set the value of Normalize to true or false respectfully.

*/
public ";

%javamethodmodifiers  rtk::simple::RichardsonLucyDeconvolutionImageFilter::RichardsonLucyDeconvolutionImageFilter "/**
rtk::simple::RichardsonLucyDeconvolutionImageFilter::RichardsonLucyDeconvolutionImageFilter()

Default Constructor that takes no arguments and initializes default
parameters

*/
public ";

%javamethodmodifiers  rtk::simple::RichardsonLucyDeconvolutionImageFilter::SetBoundaryCondition "/**
Self& rtk::simple::RichardsonLucyDeconvolutionImageFilter::SetBoundaryCondition(BoundaryConditionType BoundaryCondition)
*/
public ";

%javamethodmodifiers  rtk::simple::RichardsonLucyDeconvolutionImageFilter::SetNormalize "/**
Self& rtk::simple::RichardsonLucyDeconvolutionImageFilter::SetNormalize(bool Normalize)

Normalize the output image by the sum of the kernel components

*/
public ";

%javamethodmodifiers  rtk::simple::RichardsonLucyDeconvolutionImageFilter::SetNumberOfIterations "/**
Self& rtk::simple::RichardsonLucyDeconvolutionImageFilter::SetNumberOfIterations(int NumberOfIterations)

Set the number of iterations.

*/
public ";

%javamethodmodifiers  rtk::simple::RichardsonLucyDeconvolutionImageFilter::SetOutputRegionMode "/**
Self& rtk::simple::RichardsonLucyDeconvolutionImageFilter::SetOutputRegionMode(OutputRegionModeType OutputRegionMode)
*/
public ";

%javamethodmodifiers  rtk::simple::RichardsonLucyDeconvolutionImageFilter::ToString "/**
std::string rtk::simple::RichardsonLucyDeconvolutionImageFilter::ToString() const

Print ourselves out

*/
public ";

%javamethodmodifiers  rtk::simple::RichardsonLucyDeconvolutionImageFilter::~RichardsonLucyDeconvolutionImageFilter "/**
rtk::simple::RichardsonLucyDeconvolutionImageFilter::~RichardsonLucyDeconvolutionImageFilter()

Destructor

*/
public ";


%typemap(javaimports) rtk::simple::STAPLEImageFilter "/**

The STAPLE filter implements the Simultaneous Truth and Performance
Level Estimation algorithm for generating ground truth volumes from a
set of binary expert segmentations.


The STAPLE algorithm treats segmentation as a pixelwise
classification, which leads to an averaging scheme that accounts for
systematic biases in the behavior of experts in order to generate a
fuzzy ground truth volume and simultaneous accuracy assessment of each
expert. The ground truth volumes produced by this filter are floating
point volumes of values between zero and one that indicate probability
of each pixel being in the object targeted by the segmentation.

The STAPLE algorithm is described in

S. Warfield, K. Zou, W. Wells, \"Validation of image segmentation and
expert quality with an expectation-maximization algorithm\" in MICCAI
2002: Fifth International Conference on Medical Image Computing and Computer-Assisted Intervention, Springer-Verlag,
Heidelberg, Germany, 2002, pp. 298-306

INPUTS
Input volumes to the STAPLE filter must be binary segmentations of an
image, that is, there must be a single foreground value that
represents positively classified pixels (pixels that are considered to
belong inside the segmentation). Any number of background pixel values
may be present in the input images. You can, for example, input
volumes with many different labels as long as the structure you are
interested in creating ground truth for is consistently labeled among
all input volumes. Pixel type of the input volumes does not matter.
Specify the label value for positively classified pixels using
SetForegroundValue. All other labels will be considered to be
negatively classified pixels (background).
 Input volumes must all contain the same size RequestedRegions.

OUTPUTS
The STAPLE filter produces a single output volume with a range of
floating point values from zero to one. IT IS VERY IMPORTANT TO
INSTANTIATE THIS FILTER WITH A FLOATING POINT OUTPUT TYPE (floats or
doubles). You may threshold the output above some probability
threshold if you wish to produce a binary ground truth.
PARAMETERS
The STAPLE algorithm requires a number of inputs. You may specify any
number of input volumes using the SetInput(i, p_i) method, where i
ranges from zero to N-1, N is the total number of input segmentations,
and p_i is the SmartPointer to the i-th segmentation.
 The SetConfidenceWeight parameter is a modifier for the prior
probability that any pixel would be classified as inside the target
object. This implementation of the STAPLE algorithm automatically
calculates prior positive classification probability as the average
fraction of the image volume filled by the target object in each input
segmentation. The ConfidenceWeight parameter allows for scaling the of
this default prior probability: if g_t is the prior probability that a
pixel would be classified inside the target object, then g_t is set to
g_t * ConfidenceWeight before iterating on the solution. In general
ConfidenceWeight should be left to the default of 1.0.

You must provide a foreground value using SetForegroundValue that the
STAPLE algorithm will use to identify positively classified pixels in
the the input images. All other values in the image will be treated as
background values. For example, if your input segmentations consist of
1's everywhere inside the segmented region, then use
SetForegroundValue(1).

The STAPLE algorithm is an iterative E-M algorithm and will converge
on a solution after some number of iterations that cannot be known a
priori. After updating the filter, the total elapsed iterations taken
to converge on the solution can be queried through GetElapsedIterations() . You may also specify a MaximumNumberOfIterations, after which the
algorithm will stop iterating regardless of whether or not it has
converged. This implementation of the STAPLE algorithm will find the
solution to within seven digits of precision unless it is stopped
early.

Once updated, the Sensitivity (true positive fraction, q) and
Specificity (true negative fraction, q) for each expert input volume
can be queried using GetSensitivity(i) and GetSpecificity(i), where i
is the i-th input volume.

REQUIRED PARAMETERS
The only required parameters for this filter are the ForegroundValue
and the input volumes. All other parameters may be safely left to
their default values. Please see the paper cited above for more
information on the STAPLE algorithm and its parameters. A proper
understanding of the algorithm is important for interpreting the
results that it produces.
EVENTS
This filter invokes IterationEvent() at each iteration of the E-M
algorithm. Setting the AbortGenerateData() flag will cause the
algorithm to halt after the current iteration and produce results just
as if it had converged. The algorithm makes no attempt to report its
progress since the number of iterations needed cannot be known in
advance.

See:
 rtk::simple::STAPLE for the procedural interface


C++ includes: srtkSTAPLEImageFilter.h
*/"

%javamethodmodifiers  rtk::simple::STAPLEImageFilter::Execute "/**
Image rtk::simple::STAPLEImageFilter::Execute(const std::vector< Image > &images)

Execute the filter on the input images

*/
public ";

%javamethodmodifiers  rtk::simple::STAPLEImageFilter::Execute "/**
Image rtk::simple::STAPLEImageFilter::Execute(const Image &image1)
*/
public ";

%javamethodmodifiers  rtk::simple::STAPLEImageFilter::Execute "/**
Image rtk::simple::STAPLEImageFilter::Execute(const Image &image1, const Image &image2)
*/
public ";

%javamethodmodifiers  rtk::simple::STAPLEImageFilter::Execute "/**
Image rtk::simple::STAPLEImageFilter::Execute(const Image &image1, const Image &image2, const Image &image3)
*/
public ";

%javamethodmodifiers  rtk::simple::STAPLEImageFilter::Execute "/**
Image rtk::simple::STAPLEImageFilter::Execute(const Image &image1, const Image &image2, const Image &image3, const
Image &image4)
*/
public ";

%javamethodmodifiers  rtk::simple::STAPLEImageFilter::Execute "/**
Image rtk::simple::STAPLEImageFilter::Execute(const Image &image1, const Image &image2, const Image &image3, const
Image &image4, const Image &image5)
*/
public ";

%javamethodmodifiers  rtk::simple::STAPLEImageFilter::Execute "/**
Image rtk::simple::STAPLEImageFilter::Execute(const std::vector< Image > &images, double confidenceWeight, double
foregroundValue, unsigned int maximumIterations)

Execute the filter on the input images with the given parameters

*/
public ";

%javamethodmodifiers  rtk::simple::STAPLEImageFilter::Execute "/**
Image rtk::simple::STAPLEImageFilter::Execute(const Image &image1, double confidenceWeight, double foregroundValue,
unsigned int maximumIterations)
*/
public ";

%javamethodmodifiers  rtk::simple::STAPLEImageFilter::Execute "/**
Image rtk::simple::STAPLEImageFilter::Execute(const Image &image1, const Image &image2, double confidenceWeight,
double foregroundValue, unsigned int maximumIterations)
*/
public ";

%javamethodmodifiers  rtk::simple::STAPLEImageFilter::Execute "/**
Image rtk::simple::STAPLEImageFilter::Execute(const Image &image1, const Image &image2, const Image &image3, double
confidenceWeight, double foregroundValue, unsigned int
maximumIterations)
*/
public ";

%javamethodmodifiers  rtk::simple::STAPLEImageFilter::Execute "/**
Image rtk::simple::STAPLEImageFilter::Execute(const Image &image1, const Image &image2, const Image &image3, const
Image &image4, double confidenceWeight, double foregroundValue,
unsigned int maximumIterations)
*/
public ";

%javamethodmodifiers  rtk::simple::STAPLEImageFilter::Execute "/**
Image rtk::simple::STAPLEImageFilter::Execute(const Image &image1, const Image &image2, const Image &image3, const
Image &image4, const Image &image5, double confidenceWeight, double
foregroundValue, unsigned int maximumIterations)
*/
public ";

%javamethodmodifiers  rtk::simple::STAPLEImageFilter::GetConfidenceWeight "/**
double rtk::simple::STAPLEImageFilter::GetConfidenceWeight() const

Scales the estimated prior probability that a pixel will be inside the
targeted object of segmentation. The default prior probability g_t is
calculated automatically as the average fraction of positively
classified pixels to the total size of the volume (across all input
volumes). ConfidenceWeight will scale this default value as g_t = g_t
* ConfidenceWeight. In general, ConfidenceWeight should be left to the
default of 1.0.

*/
public ";

%javamethodmodifiers  rtk::simple::STAPLEImageFilter::GetElapsedIterations "/**
uint32_t rtk::simple::STAPLEImageFilter::GetElapsedIterations() const

Get the number of elapsed iterations of the iterative E-M algorithm.

This is a measurement. Its value is updated in the Execute methods, so
the value will only be valid after an execution.

*/
public ";

%javamethodmodifiers  rtk::simple::STAPLEImageFilter::GetForegroundValue "/**
double rtk::simple::STAPLEImageFilter::GetForegroundValue() const

Set get the binary ON value of the input image.

*/
public ";

%javamethodmodifiers  rtk::simple::STAPLEImageFilter::GetMaximumIterations "/**
unsigned int rtk::simple::STAPLEImageFilter::GetMaximumIterations() const

Set/Get the maximum number of iterations after which the STAPLE
algorithm will be considered to have converged. In general this SHOULD
NOT be set and the algorithm should be allowed to converge on its own.

*/
public ";

%javamethodmodifiers  rtk::simple::STAPLEImageFilter::GetName "/**
std::string rtk::simple::STAPLEImageFilter::GetName() const

Name of this class

*/
public ";

%javamethodmodifiers  rtk::simple::STAPLEImageFilter::GetSensitivity "/**
std::vector<double> rtk::simple::STAPLEImageFilter::GetSensitivity() const

After the filter is updated, this method returns a std::vector<double>
of all Sensitivity (true positive fraction, p) values for the expert
input volumes.

This is a measurement. Its value is updated in the Execute methods, so
the value will only be valid after an execution.

*/
public ";

%javamethodmodifiers  rtk::simple::STAPLEImageFilter::GetSpecificity "/**
std::vector<double> rtk::simple::STAPLEImageFilter::GetSpecificity() const

After the filter is updated, this method returns the Specificity (true
negative fraction, q) value for the i-th expert input volume.


This is a measurement. Its value is updated in the Execute methods, so
the value will only be valid after an execution.

*/
public ";

%javamethodmodifiers  rtk::simple::STAPLEImageFilter::SetConfidenceWeight "/**
Self& rtk::simple::STAPLEImageFilter::SetConfidenceWeight(double ConfidenceWeight)

Scales the estimated prior probability that a pixel will be inside the
targeted object of segmentation. The default prior probability g_t is
calculated automatically as the average fraction of positively
classified pixels to the total size of the volume (across all input
volumes). ConfidenceWeight will scale this default value as g_t = g_t
* ConfidenceWeight. In general, ConfidenceWeight should be left to the
default of 1.0.

*/
public ";

%javamethodmodifiers  rtk::simple::STAPLEImageFilter::SetForegroundValue "/**
Self& rtk::simple::STAPLEImageFilter::SetForegroundValue(double ForegroundValue)

Set get the binary ON value of the input image.

*/
public ";

%javamethodmodifiers  rtk::simple::STAPLEImageFilter::SetMaximumIterations "/**
Self& rtk::simple::STAPLEImageFilter::SetMaximumIterations(unsigned int MaximumIterations)

Set/Get the maximum number of iterations after which the STAPLE
algorithm will be considered to have converged. In general this SHOULD
NOT be set and the algorithm should be allowed to converge on its own.

*/
public ";

%javamethodmodifiers  rtk::simple::STAPLEImageFilter::STAPLEImageFilter "/**
rtk::simple::STAPLEImageFilter::STAPLEImageFilter()

Default Constructor that takes no arguments and initializes default
parameters

*/
public ";

%javamethodmodifiers  rtk::simple::STAPLEImageFilter::ToString "/**
std::string rtk::simple::STAPLEImageFilter::ToString() const

Print ourselves out

*/
public ";

%javamethodmodifiers  rtk::simple::STAPLEImageFilter::~STAPLEImageFilter "/**
rtk::simple::STAPLEImageFilter::~STAPLEImageFilter()

Destructor

*/
public ";


%typemap(javaimports) rtk::simple::SaltAndPepperNoiseImageFilter "/**

Alter an image with fixed value impulse noise, often called salt and
pepper noise.


Pixel alteration occurs at a user defined probability. Salt and pepper
pixel are equally distributed.


Gaetan Lehmann
 This code was contributed in the Insight Journal paper \"Noise
Simulation\". https://hdl.handle.net/10380/3158
See:
 rtk::simple::SaltAndPepperNoise for the procedural interface

 itk::SaltAndPepperNoiseImageFilter for the Doxygen on the original ITK class.


C++ includes: srtkSaltAndPepperNoiseImageFilter.h
*/"

%javamethodmodifiers  rtk::simple::SaltAndPepperNoiseImageFilter::Execute "/**
Image rtk::simple::SaltAndPepperNoiseImageFilter::Execute(const Image &image1)

Execute the filter on the input image

*/
public ";

%javamethodmodifiers  rtk::simple::SaltAndPepperNoiseImageFilter::Execute "/**
Image rtk::simple::SaltAndPepperNoiseImageFilter::Execute(const Image &image1, double probability, uint32_t seed)

Execute the filter on the input image with the given parameters

*/
public ";

%javamethodmodifiers  rtk::simple::SaltAndPepperNoiseImageFilter::GetName "/**
std::string rtk::simple::SaltAndPepperNoiseImageFilter::GetName() const

Name of this class

*/
public ";

%javamethodmodifiers  rtk::simple::SaltAndPepperNoiseImageFilter::GetProbability "/**
double rtk::simple::SaltAndPepperNoiseImageFilter::GetProbability() const
*/
public ";

%javamethodmodifiers  rtk::simple::SaltAndPepperNoiseImageFilter::GetSeed "/**
uint32_t rtk::simple::SaltAndPepperNoiseImageFilter::GetSeed() const
*/
public ";

%javamethodmodifiers  rtk::simple::SaltAndPepperNoiseImageFilter::SaltAndPepperNoiseImageFilter "/**
rtk::simple::SaltAndPepperNoiseImageFilter::SaltAndPepperNoiseImageFilter()

Default Constructor that takes no arguments and initializes default
parameters

*/
public ";

%javamethodmodifiers  rtk::simple::SaltAndPepperNoiseImageFilter::SetProbability "/**
Self& rtk::simple::SaltAndPepperNoiseImageFilter::SetProbability(double Probability)
*/
public ";

%javamethodmodifiers  rtk::simple::SaltAndPepperNoiseImageFilter::SetSeed "/**
Self& rtk::simple::SaltAndPepperNoiseImageFilter::SetSeed(uint32_t Seed)
*/
public ";

%javamethodmodifiers  rtk::simple::SaltAndPepperNoiseImageFilter::ToString "/**
std::string rtk::simple::SaltAndPepperNoiseImageFilter::ToString() const

Print ourselves out

*/
public ";

%javamethodmodifiers  rtk::simple::SaltAndPepperNoiseImageFilter::~SaltAndPepperNoiseImageFilter "/**
rtk::simple::SaltAndPepperNoiseImageFilter::~SaltAndPepperNoiseImageFilter()

Destructor

*/
public ";


%typemap(javaimports) rtk::simple::ScalarChanAndVeseDenseLevelSetImageFilter "/**

Dense implementation of the Chan and Vese multiphase level set image
filter.


This code was adapted from the paper:\"An active contour model without
edges\" T. Chan and L. Vese. In Scale-Space Theories in Computer
Vision, pages 141-151, 1999.


Mosaliganti K., Smith B., Gelas A., Gouaillard A., Megason S.
 This code was taken from the Insight Journal paper:\"Cell Tracking
using Coupled Active Surfaces for Nuclei and Membranes\" http://www.insight-journal.org/browse/publication/642 https://hdl.handle.net/10380/3055

That is based on the papers:\"Level Set Segmentation: Active Contours
without edge\" http://www.insight-journal.org/browse/publication/322 https://hdl.handle.net/1926/1532

and

\"Level set segmentation using coupled active surfaces\" http://www.insight-journal.org/browse/publication/323 https://hdl.handle.net/1926/1533

Wiki Examples:

All Examples

Single-phase Chan And Vese Dense Field Level Set Segmentation
See:
 rtk::simple::ScalarChanAndVeseDenseLevelSet for the procedural interface

 itk::ScalarChanAndVeseDenseLevelSetImageFilter for the Doxygen on the original ITK class.



C++ includes: srtkScalarChanAndVeseDenseLevelSetImageFilter.h
*/"

%javamethodmodifiers  rtk::simple::ScalarChanAndVeseDenseLevelSetImageFilter::Execute "/**
Image rtk::simple::ScalarChanAndVeseDenseLevelSetImageFilter::Execute(const Image &image1, const Image &image2)

Execute the filter on the input images

*/
public ";

%javamethodmodifiers  rtk::simple::ScalarChanAndVeseDenseLevelSetImageFilter::Execute "/**
Image rtk::simple::ScalarChanAndVeseDenseLevelSetImageFilter::Execute(const Image &image1, const Image &image2, double maximumRMSError,
uint32_t numberOfIterations, double lambda1, double lambda2, double
epsilon, double curvatureWeight, double areaWeight, double
reinitializationSmoothingWeight, double volume, double
volumeMatchingWeight,
ScalarChanAndVeseDenseLevelSetImageFilter::HeavisideStepFunctionType
heavisideStepFunction, bool useImageSpacing)

Execute the filter on the input images with the given parameters

*/
public ";

%javamethodmodifiers  rtk::simple::ScalarChanAndVeseDenseLevelSetImageFilter::GetAreaWeight "/**
double rtk::simple::ScalarChanAndVeseDenseLevelSetImageFilter::GetAreaWeight() const
*/
public ";

%javamethodmodifiers  rtk::simple::ScalarChanAndVeseDenseLevelSetImageFilter::GetCurvatureWeight "/**
double rtk::simple::ScalarChanAndVeseDenseLevelSetImageFilter::GetCurvatureWeight() const
*/
public ";

%javamethodmodifiers  rtk::simple::ScalarChanAndVeseDenseLevelSetImageFilter::GetElapsedIterations "/**
uint32_t rtk::simple::ScalarChanAndVeseDenseLevelSetImageFilter::GetElapsedIterations() const

Number of iterations run.


This is a measurement. Its value is updated in the Execute methods, so
the value will only be valid after an execution.

*/
public ";

%javamethodmodifiers  rtk::simple::ScalarChanAndVeseDenseLevelSetImageFilter::GetEpsilon "/**
double rtk::simple::ScalarChanAndVeseDenseLevelSetImageFilter::GetEpsilon() const
*/
public ";

%javamethodmodifiers  rtk::simple::ScalarChanAndVeseDenseLevelSetImageFilter::GetHeavisideStepFunction "/**
HeavisideStepFunctionType rtk::simple::ScalarChanAndVeseDenseLevelSetImageFilter::GetHeavisideStepFunction() const
*/
public ";

%javamethodmodifiers  rtk::simple::ScalarChanAndVeseDenseLevelSetImageFilter::GetLambda1 "/**
double rtk::simple::ScalarChanAndVeseDenseLevelSetImageFilter::GetLambda1() const
*/
public ";

%javamethodmodifiers  rtk::simple::ScalarChanAndVeseDenseLevelSetImageFilter::GetLambda2 "/**
double rtk::simple::ScalarChanAndVeseDenseLevelSetImageFilter::GetLambda2() const
*/
public ";

%javamethodmodifiers  rtk::simple::ScalarChanAndVeseDenseLevelSetImageFilter::GetMaximumRMSError "/**
double rtk::simple::ScalarChanAndVeseDenseLevelSetImageFilter::GetMaximumRMSError() const
*/
public ";

%javamethodmodifiers  rtk::simple::ScalarChanAndVeseDenseLevelSetImageFilter::GetName "/**
std::string rtk::simple::ScalarChanAndVeseDenseLevelSetImageFilter::GetName() const

Name of this class

*/
public ";

%javamethodmodifiers  rtk::simple::ScalarChanAndVeseDenseLevelSetImageFilter::GetNumberOfIterations "/**
uint32_t rtk::simple::ScalarChanAndVeseDenseLevelSetImageFilter::GetNumberOfIterations() const
*/
public ";

%javamethodmodifiers  rtk::simple::ScalarChanAndVeseDenseLevelSetImageFilter::GetReinitializationSmoothingWeight "/**
double rtk::simple::ScalarChanAndVeseDenseLevelSetImageFilter::GetReinitializationSmoothingWeight() const
*/
public ";

%javamethodmodifiers  rtk::simple::ScalarChanAndVeseDenseLevelSetImageFilter::GetRMSChange "/**
double rtk::simple::ScalarChanAndVeseDenseLevelSetImageFilter::GetRMSChange() const

The Root Mean Square of the levelset upon termination.


This is a measurement. Its value is updated in the Execute methods, so
the value will only be valid after an execution.

*/
public ";

%javamethodmodifiers  rtk::simple::ScalarChanAndVeseDenseLevelSetImageFilter::GetUseImageSpacing "/**
bool rtk::simple::ScalarChanAndVeseDenseLevelSetImageFilter::GetUseImageSpacing() const

Use the image spacing information in calculations. Use this option if
you want derivatives in physical space. Default is UseImageSpacingOn.

*/
public ";

%javamethodmodifiers  rtk::simple::ScalarChanAndVeseDenseLevelSetImageFilter::GetVolume "/**
double rtk::simple::ScalarChanAndVeseDenseLevelSetImageFilter::GetVolume() const
*/
public ";

%javamethodmodifiers  rtk::simple::ScalarChanAndVeseDenseLevelSetImageFilter::GetVolumeMatchingWeight "/**
double rtk::simple::ScalarChanAndVeseDenseLevelSetImageFilter::GetVolumeMatchingWeight() const
*/
public ";

%javamethodmodifiers  rtk::simple::ScalarChanAndVeseDenseLevelSetImageFilter::ScalarChanAndVeseDenseLevelSetImageFilter "/**
rtk::simple::ScalarChanAndVeseDenseLevelSetImageFilter::ScalarChanAndVeseDenseLevelSetImageFilter()

Default Constructor that takes no arguments and initializes default
parameters

*/
public ";

%javamethodmodifiers  rtk::simple::ScalarChanAndVeseDenseLevelSetImageFilter::SetAreaWeight "/**
Self& rtk::simple::ScalarChanAndVeseDenseLevelSetImageFilter::SetAreaWeight(double AreaWeight)
*/
public ";

%javamethodmodifiers  rtk::simple::ScalarChanAndVeseDenseLevelSetImageFilter::SetCurvatureWeight "/**
Self& rtk::simple::ScalarChanAndVeseDenseLevelSetImageFilter::SetCurvatureWeight(double CurvatureWeight)
*/
public ";

%javamethodmodifiers  rtk::simple::ScalarChanAndVeseDenseLevelSetImageFilter::SetEpsilon "/**
Self& rtk::simple::ScalarChanAndVeseDenseLevelSetImageFilter::SetEpsilon(double Epsilon)
*/
public ";

%javamethodmodifiers  rtk::simple::ScalarChanAndVeseDenseLevelSetImageFilter::SetHeavisideStepFunction "/**
Self& rtk::simple::ScalarChanAndVeseDenseLevelSetImageFilter::SetHeavisideStepFunction(HeavisideStepFunctionType HeavisideStepFunction)
*/
public ";

%javamethodmodifiers  rtk::simple::ScalarChanAndVeseDenseLevelSetImageFilter::SetLambda1 "/**
Self& rtk::simple::ScalarChanAndVeseDenseLevelSetImageFilter::SetLambda1(double Lambda1)
*/
public ";

%javamethodmodifiers  rtk::simple::ScalarChanAndVeseDenseLevelSetImageFilter::SetLambda2 "/**
Self& rtk::simple::ScalarChanAndVeseDenseLevelSetImageFilter::SetLambda2(double Lambda2)
*/
public ";

%javamethodmodifiers  rtk::simple::ScalarChanAndVeseDenseLevelSetImageFilter::SetMaximumRMSError "/**
Self& rtk::simple::ScalarChanAndVeseDenseLevelSetImageFilter::SetMaximumRMSError(double MaximumRMSError)
*/
public ";

%javamethodmodifiers  rtk::simple::ScalarChanAndVeseDenseLevelSetImageFilter::SetNumberOfIterations "/**
Self& rtk::simple::ScalarChanAndVeseDenseLevelSetImageFilter::SetNumberOfIterations(uint32_t NumberOfIterations)
*/
public ";

%javamethodmodifiers  rtk::simple::ScalarChanAndVeseDenseLevelSetImageFilter::SetReinitializationSmoothingWeight "/**
Self& rtk::simple::ScalarChanAndVeseDenseLevelSetImageFilter::SetReinitializationSmoothingWeight(double ReinitializationSmoothingWeight)
*/
public ";

%javamethodmodifiers  rtk::simple::ScalarChanAndVeseDenseLevelSetImageFilter::SetUseImageSpacing "/**
Self& rtk::simple::ScalarChanAndVeseDenseLevelSetImageFilter::SetUseImageSpacing(bool UseImageSpacing)

Use the image spacing information in calculations. Use this option if
you want derivatives in physical space. Default is UseImageSpacingOn.

*/
public ";

%javamethodmodifiers  rtk::simple::ScalarChanAndVeseDenseLevelSetImageFilter::SetVolume "/**
Self& rtk::simple::ScalarChanAndVeseDenseLevelSetImageFilter::SetVolume(double Volume)
*/
public ";

%javamethodmodifiers  rtk::simple::ScalarChanAndVeseDenseLevelSetImageFilter::SetVolumeMatchingWeight "/**
Self& rtk::simple::ScalarChanAndVeseDenseLevelSetImageFilter::SetVolumeMatchingWeight(double VolumeMatchingWeight)
*/
public ";

%javamethodmodifiers  rtk::simple::ScalarChanAndVeseDenseLevelSetImageFilter::ToString "/**
std::string rtk::simple::ScalarChanAndVeseDenseLevelSetImageFilter::ToString() const

Print ourselves out

*/
public ";

%javamethodmodifiers  rtk::simple::ScalarChanAndVeseDenseLevelSetImageFilter::UseImageSpacingOff "/**
Self& rtk::simple::ScalarChanAndVeseDenseLevelSetImageFilter::UseImageSpacingOff()
*/
public ";

%javamethodmodifiers  rtk::simple::ScalarChanAndVeseDenseLevelSetImageFilter::UseImageSpacingOn "/**
Self& rtk::simple::ScalarChanAndVeseDenseLevelSetImageFilter::UseImageSpacingOn()

Set the value of UseImageSpacing to true or false respectfully.

*/
public ";

%javamethodmodifiers  rtk::simple::ScalarChanAndVeseDenseLevelSetImageFilter::~ScalarChanAndVeseDenseLevelSetImageFilter "/**
rtk::simple::ScalarChanAndVeseDenseLevelSetImageFilter::~ScalarChanAndVeseDenseLevelSetImageFilter()

Destructor

*/
public ";


%typemap(javaimports) rtk::simple::ScalarConnectedComponentImageFilter "/**

A connected components filter that labels the objects in an arbitrary
image. Two pixels are similar if they are within threshold of each
other. Uses ConnectedComponentFunctorImageFilter .


Wiki Examples:

All Examples

Label connected components in a grayscale image
See:
 rtk::simple::ScalarConnectedComponent for the procedural interface

 itk::ScalarConnectedComponentImageFilter for the Doxygen on the original ITK class.



C++ includes: srtkScalarConnectedComponentImageFilter.h
*/"

%javamethodmodifiers  rtk::simple::ScalarConnectedComponentImageFilter::Execute "/**
Image rtk::simple::ScalarConnectedComponentImageFilter::Execute(const Image &image1)

Execute the filter on the input image

*/
public ";

%javamethodmodifiers  rtk::simple::ScalarConnectedComponentImageFilter::Execute "/**
Image rtk::simple::ScalarConnectedComponentImageFilter::Execute(const Image &image1, double distanceThreshold, bool fullyConnected)

Execute the filter on the input image with the given parameters

*/
public ";

%javamethodmodifiers  rtk::simple::ScalarConnectedComponentImageFilter::FullyConnectedOff "/**
Self& rtk::simple::ScalarConnectedComponentImageFilter::FullyConnectedOff()
*/
public ";

%javamethodmodifiers  rtk::simple::ScalarConnectedComponentImageFilter::FullyConnectedOn "/**
Self& rtk::simple::ScalarConnectedComponentImageFilter::FullyConnectedOn()

Set the value of FullyConnected to true or false respectfully.

*/
public ";

%javamethodmodifiers  rtk::simple::ScalarConnectedComponentImageFilter::GetDistanceThreshold "/**
double rtk::simple::ScalarConnectedComponentImageFilter::GetDistanceThreshold() const
*/
public ";

%javamethodmodifiers  rtk::simple::ScalarConnectedComponentImageFilter::GetFullyConnected "/**
bool rtk::simple::ScalarConnectedComponentImageFilter::GetFullyConnected() const
*/
public ";

%javamethodmodifiers  rtk::simple::ScalarConnectedComponentImageFilter::GetName "/**
std::string rtk::simple::ScalarConnectedComponentImageFilter::GetName() const

Name of this class

*/
public ";

%javamethodmodifiers  rtk::simple::ScalarConnectedComponentImageFilter::ScalarConnectedComponentImageFilter "/**
rtk::simple::ScalarConnectedComponentImageFilter::ScalarConnectedComponentImageFilter()

Default Constructor that takes no arguments and initializes default
parameters

*/
public ";

%javamethodmodifiers  rtk::simple::ScalarConnectedComponentImageFilter::SetDistanceThreshold "/**
Self& rtk::simple::ScalarConnectedComponentImageFilter::SetDistanceThreshold(double DistanceThreshold)
*/
public ";

%javamethodmodifiers  rtk::simple::ScalarConnectedComponentImageFilter::SetFullyConnected "/**
Self& rtk::simple::ScalarConnectedComponentImageFilter::SetFullyConnected(bool FullyConnected)
*/
public ";

%javamethodmodifiers  rtk::simple::ScalarConnectedComponentImageFilter::ToString "/**
std::string rtk::simple::ScalarConnectedComponentImageFilter::ToString() const

Print ourselves out

*/
public ";

%javamethodmodifiers  rtk::simple::ScalarConnectedComponentImageFilter::~ScalarConnectedComponentImageFilter "/**
rtk::simple::ScalarConnectedComponentImageFilter::~ScalarConnectedComponentImageFilter()

Destructor

*/
public ";


%typemap(javaimports) rtk::simple::ScalarImageKmeansImageFilter "/**

Classifies the intensity values of a scalar image using the K-Means
algorithm.


Given an input image with scalar values, it uses the K-Means
statistical classifier in order to define labels for every pixel in
the image. The filter is templated over the type of the input image.
The output image is predefined as having the same dimension of the
input image and pixel type unsigned char, under the assumption that
the classifier will generate less than 256 classes.

You may want to look also at the RelabelImageFilter that may be used
as a postprocessing stage, in particular if you are interested in
ordering the labels by their relative size in number of pixels.


See:
 Image


 ImageKmeansModelEstimator


KdTreeBasedKmeansEstimator, WeightedCentroidKdTreeGenerator, KdTree


RelabelImageFilter
Wiki Examples:

All Examples

Cluster the pixels in a greyscale image
See:
 rtk::simple::ScalarImageKmeans for the procedural interface

 itk::ScalarImageKmeansImageFilter for the Doxygen on the original ITK class.



C++ includes: srtkScalarImageKmeansImageFilter.h
*/"

%javamethodmodifiers  rtk::simple::ScalarImageKmeansImageFilter::Execute "/**
Image rtk::simple::ScalarImageKmeansImageFilter::Execute(const Image &image1)

Execute the filter on the input image

*/
public ";

%javamethodmodifiers  rtk::simple::ScalarImageKmeansImageFilter::Execute "/**
Image rtk::simple::ScalarImageKmeansImageFilter::Execute(const Image &image1, std::vector< double > classWithInitialMean, bool
useNonContiguousLabels)

Execute the filter on the input image with the given parameters

*/
public ";

%javamethodmodifiers  rtk::simple::ScalarImageKmeansImageFilter::GetClassWithInitialMean "/**
std::vector<double> rtk::simple::ScalarImageKmeansImageFilter::GetClassWithInitialMean() const
*/
public ";

%javamethodmodifiers  rtk::simple::ScalarImageKmeansImageFilter::GetFinalMeans "/**
std::vector<double> rtk::simple::ScalarImageKmeansImageFilter::GetFinalMeans() const

Return the array of Means found after the classification

This is a measurement. Its value is updated in the Execute methods, so
the value will only be valid after an execution.

*/
public ";

%javamethodmodifiers  rtk::simple::ScalarImageKmeansImageFilter::GetName "/**
std::string rtk::simple::ScalarImageKmeansImageFilter::GetName() const

Name of this class

*/
public ";

%javamethodmodifiers  rtk::simple::ScalarImageKmeansImageFilter::GetUseNonContiguousLabels "/**
bool rtk::simple::ScalarImageKmeansImageFilter::GetUseNonContiguousLabels() const

Set/Get the UseNonContiguousLabels flag. When this is set to false the
labels are numbered contiguously, like in {0,1,3..N}. When the flag is
set to true, the labels are selected in order to span the dynamic
range of the output image. This last option is useful when the output
image is intended only for display. The default value is false.

*/
public ";

%javamethodmodifiers  rtk::simple::ScalarImageKmeansImageFilter::ScalarImageKmeansImageFilter "/**
rtk::simple::ScalarImageKmeansImageFilter::ScalarImageKmeansImageFilter()

Default Constructor that takes no arguments and initializes default
parameters

*/
public ";

%javamethodmodifiers  rtk::simple::ScalarImageKmeansImageFilter::SetClassWithInitialMean "/**
Self& rtk::simple::ScalarImageKmeansImageFilter::SetClassWithInitialMean(std::vector< double > ClassWithInitialMean)
*/
public ";

%javamethodmodifiers  rtk::simple::ScalarImageKmeansImageFilter::SetUseNonContiguousLabels "/**
Self& rtk::simple::ScalarImageKmeansImageFilter::SetUseNonContiguousLabels(bool UseNonContiguousLabels)

Set/Get the UseNonContiguousLabels flag. When this is set to false the
labels are numbered contiguously, like in {0,1,3..N}. When the flag is
set to true, the labels are selected in order to span the dynamic
range of the output image. This last option is useful when the output
image is intended only for display. The default value is false.

*/
public ";

%javamethodmodifiers  rtk::simple::ScalarImageKmeansImageFilter::ToString "/**
std::string rtk::simple::ScalarImageKmeansImageFilter::ToString() const

Print ourselves out

*/
public ";

%javamethodmodifiers  rtk::simple::ScalarImageKmeansImageFilter::UseNonContiguousLabelsOff "/**
Self& rtk::simple::ScalarImageKmeansImageFilter::UseNonContiguousLabelsOff()
*/
public ";

%javamethodmodifiers  rtk::simple::ScalarImageKmeansImageFilter::UseNonContiguousLabelsOn "/**
Self& rtk::simple::ScalarImageKmeansImageFilter::UseNonContiguousLabelsOn()

Set the value of UseNonContiguousLabels to true or false respectfully.

*/
public ";

%javamethodmodifiers  rtk::simple::ScalarImageKmeansImageFilter::~ScalarImageKmeansImageFilter "/**
rtk::simple::ScalarImageKmeansImageFilter::~ScalarImageKmeansImageFilter()

Destructor

*/
public ";


%typemap(javaimports) rtk::simple::ScalarToRGBColormapImageFilter "/**

Implements pixel-wise intensity->rgb mapping operation on one image.


This class is parameterized over the type of the input image and the
type of the output image.

The input image's scalar pixel values are mapped into a color map. The
color map is specified by passing the SetColormap function one of the
predefined maps. The following selects the \"Hot\" colormap:

You can also specify a custom color map. This is done by creating a
CustomColormapFunction, and then creating lists of values for the red,
green, and blue channel. An example of setting the red channel of a
colormap with only 2 colors is given below. The blue and green
channels should be specified in the same manner.


The range of values present in the input image is the range that is
mapped to the entire range of colors.

This code was contributed in the Insight Journal paper: \"Meeting Andy
Warhol Somewhere Over the Rainbow: RGB Colormapping and ITK\" by
Tustison N., Zhang H., Lehmann G., Yushkevich P., Gee J. https://hdl.handle.net/1926/1452 http://www.insight-journal.org/browse/publication/285


See:
BinaryFunctionImageFilter TernaryFunctionImageFilter
Wiki Examples:

All Examples

Apply a color map to an image
See:
 rtk::simple::ScalarToRGBColormap for the procedural interface

 itk::ScalarToRGBColormapImageFilter for the Doxygen on the original ITK class.



C++ includes: srtkScalarToRGBColormapImageFilter.h
*/"

%javamethodmodifiers  rtk::simple::ScalarToRGBColormapImageFilter::Execute "/**
Image rtk::simple::ScalarToRGBColormapImageFilter::Execute(const Image &image1)

Execute the filter on the input image

*/
public ";

%javamethodmodifiers  rtk::simple::ScalarToRGBColormapImageFilter::Execute "/**
Image rtk::simple::ScalarToRGBColormapImageFilter::Execute(const Image &image1, ScalarToRGBColormapImageFilter::ColormapType
colormap)

Execute the filter on the input image with the given parameters

*/
public ";

%javamethodmodifiers  rtk::simple::ScalarToRGBColormapImageFilter::GetColormap "/**
ColormapType rtk::simple::ScalarToRGBColormapImageFilter::GetColormap() const

Set/Get the colormap object.

*/
public ";

%javamethodmodifiers  rtk::simple::ScalarToRGBColormapImageFilter::GetName "/**
std::string rtk::simple::ScalarToRGBColormapImageFilter::GetName() const

Name of this class

*/
public ";

%javamethodmodifiers  rtk::simple::ScalarToRGBColormapImageFilter::ScalarToRGBColormapImageFilter "/**
rtk::simple::ScalarToRGBColormapImageFilter::ScalarToRGBColormapImageFilter()

Default Constructor that takes no arguments and initializes default
parameters

*/
public ";

%javamethodmodifiers  rtk::simple::ScalarToRGBColormapImageFilter::SetColormap "/**
Self& rtk::simple::ScalarToRGBColormapImageFilter::SetColormap(ColormapType Colormap)
*/
public ";

%javamethodmodifiers  rtk::simple::ScalarToRGBColormapImageFilter::ToString "/**
std::string rtk::simple::ScalarToRGBColormapImageFilter::ToString() const

Print ourselves out

*/
public ";

%javamethodmodifiers  rtk::simple::ScalarToRGBColormapImageFilter::~ScalarToRGBColormapImageFilter "/**
rtk::simple::ScalarToRGBColormapImageFilter::~ScalarToRGBColormapImageFilter()

Destructor

*/
public ";


%typemap(javaimports) rtk::simple::ScaleSkewVersor3DTransform "/**

A over parameterized 3D Affine transform composed of the addition of a
versor rotation matrix, a scale matrix and a skew matrix around a
fixed center with translation.



See:
 itk::ScaleSkewVersor3DTransform


C++ includes: srtkScaleSkewVersor3DTransform.h
*/"

%javamethodmodifiers  rtk::simple::ScaleSkewVersor3DTransform::GetCenter "/**
std::vector<double> rtk::simple::ScaleSkewVersor3DTransform::GetCenter() const
*/
public ";

%javamethodmodifiers  rtk::simple::ScaleSkewVersor3DTransform::GetMatrix "/**
std::vector<double> rtk::simple::ScaleSkewVersor3DTransform::GetMatrix() const
*/
public ";

%javamethodmodifiers  rtk::simple::ScaleSkewVersor3DTransform::GetName "/**
std::string rtk::simple::ScaleSkewVersor3DTransform::GetName() const

Name of this class

*/
public ";

%javamethodmodifiers  rtk::simple::ScaleSkewVersor3DTransform::GetScale "/**
std::vector<double> rtk::simple::ScaleSkewVersor3DTransform::GetScale() const
*/
public ";

%javamethodmodifiers  rtk::simple::ScaleSkewVersor3DTransform::GetSkew "/**
std::vector<double> rtk::simple::ScaleSkewVersor3DTransform::GetSkew() const
*/
public ";

%javamethodmodifiers  rtk::simple::ScaleSkewVersor3DTransform::GetTranslation "/**
std::vector<double> rtk::simple::ScaleSkewVersor3DTransform::GetTranslation() const
*/
public ";

%javamethodmodifiers  rtk::simple::ScaleSkewVersor3DTransform::GetVersor "/**
std::vector<double> rtk::simple::ScaleSkewVersor3DTransform::GetVersor() const
*/
public ";

%javamethodmodifiers  rtk::simple::ScaleSkewVersor3DTransform::ScaleSkewVersor3DTransform "/**
rtk::simple::ScaleSkewVersor3DTransform::ScaleSkewVersor3DTransform()
*/
public ";

%javamethodmodifiers  rtk::simple::ScaleSkewVersor3DTransform::ScaleSkewVersor3DTransform "/**
rtk::simple::ScaleSkewVersor3DTransform::ScaleSkewVersor3DTransform(const ScaleSkewVersor3DTransform &)
*/
public ";

%javamethodmodifiers  rtk::simple::ScaleSkewVersor3DTransform::ScaleSkewVersor3DTransform "/**
rtk::simple::ScaleSkewVersor3DTransform::ScaleSkewVersor3DTransform(const Transform &)
*/
public ";

%javamethodmodifiers  rtk::simple::ScaleSkewVersor3DTransform::ScaleSkewVersor3DTransform "/**
rtk::simple::ScaleSkewVersor3DTransform::ScaleSkewVersor3DTransform(const std::vector< double > &scale, const std::vector< double >
&skew, const std::vector< double > &versor, const std::vector< double
> &translation=std::vector< double >(3, 0.0), const std::vector<
double > &fixedCenter=std::vector< double >(3, 0.0))
*/
public ";

%javamethodmodifiers  rtk::simple::ScaleSkewVersor3DTransform::ScaleSkewVersor3DTransform "/**
rtk::simple::ScaleSkewVersor3DTransform::ScaleSkewVersor3DTransform(const std::vector< double > &scale, const std::vector< double >
&skew, const std::vector< double > &axis, double angle, const
std::vector< double > &translation=std::vector< double >(3, 0.0),
const std::vector< double > &fixedCenter=std::vector< double >(3,
0.0))
*/
public ";

%javamethodmodifiers  rtk::simple::ScaleSkewVersor3DTransform::SetCenter "/**
Self& rtk::simple::ScaleSkewVersor3DTransform::SetCenter(const std::vector< double > &params)

fixed parameter

*/
public ";

%javamethodmodifiers  rtk::simple::ScaleSkewVersor3DTransform::SetRotation "/**
Self& rtk::simple::ScaleSkewVersor3DTransform::SetRotation(const std::vector< double > &versor)

parameter

*/
public ";

%javamethodmodifiers  rtk::simple::ScaleSkewVersor3DTransform::SetRotation "/**
Self& rtk::simple::ScaleSkewVersor3DTransform::SetRotation(const std::vector< double > &axis, double angle)
*/
public ";

%javamethodmodifiers  rtk::simple::ScaleSkewVersor3DTransform::SetScale "/**
Self& rtk::simple::ScaleSkewVersor3DTransform::SetScale(const std::vector< double > &scale)
*/
public ";

%javamethodmodifiers  rtk::simple::ScaleSkewVersor3DTransform::SetSkew "/**
Self& rtk::simple::ScaleSkewVersor3DTransform::SetSkew(const std::vector< double > &skew)
*/
public ";

%javamethodmodifiers  rtk::simple::ScaleSkewVersor3DTransform::SetTranslation "/**
Self& rtk::simple::ScaleSkewVersor3DTransform::SetTranslation(const std::vector< double > &translation)
*/
public ";

%javamethodmodifiers  rtk::simple::ScaleSkewVersor3DTransform::Translate "/**
Self& rtk::simple::ScaleSkewVersor3DTransform::Translate(const std::vector< double > &offset)

additional methods

*/
public ";


%typemap(javaimports) rtk::simple::ScaleTransform "/**

A 2D or 3D anisotropic scale of coordinate space around a fixed
center.



See:
 itk::ScaleTransform


C++ includes: srtkScaleTransform.h
*/"

%javamethodmodifiers  rtk::simple::ScaleTransform::GetCenter "/**
std::vector<double> rtk::simple::ScaleTransform::GetCenter() const
*/
public ";

%javamethodmodifiers  rtk::simple::ScaleTransform::GetMatrix "/**
std::vector<double> rtk::simple::ScaleTransform::GetMatrix() const

additional methods

*/
public ";

%javamethodmodifiers  rtk::simple::ScaleTransform::GetName "/**
std::string rtk::simple::ScaleTransform::GetName() const

Name of this class

*/
public ";

%javamethodmodifiers  rtk::simple::ScaleTransform::GetScale "/**
std::vector<double> rtk::simple::ScaleTransform::GetScale() const
*/
public ";

%javamethodmodifiers  rtk::simple::ScaleTransform::ScaleTransform "/**
rtk::simple::ScaleTransform::ScaleTransform(unsigned int dimensions, const std::vector< double >
&scale=std::vector< double >(3, 1.0))
*/
public ";

%javamethodmodifiers  rtk::simple::ScaleTransform::ScaleTransform "/**
rtk::simple::ScaleTransform::ScaleTransform(const ScaleTransform &)
*/
public ";

%javamethodmodifiers  rtk::simple::ScaleTransform::ScaleTransform "/**
rtk::simple::ScaleTransform::ScaleTransform(const Transform &)
*/
public ";

%javamethodmodifiers  rtk::simple::ScaleTransform::SetCenter "/**
Self& rtk::simple::ScaleTransform::SetCenter(const std::vector< double > &params)

fixed parameter

*/
public ";

%javamethodmodifiers  rtk::simple::ScaleTransform::SetScale "/**
Self& rtk::simple::ScaleTransform::SetScale(const std::vector< double > &params)
*/
public ";


%typemap(javaimports) rtk::simple::ScaleVersor3DTransform "/**

A parameterized 3D transform composed of the addition of a versor
rotation matrix and a scale matrix around a fixed center with
translation.



See:
 itk::ScaleVersor3DTransform


C++ includes: srtkScaleVersor3DTransform.h
*/"

%javamethodmodifiers  rtk::simple::ScaleVersor3DTransform::GetCenter "/**
std::vector<double> rtk::simple::ScaleVersor3DTransform::GetCenter() const
*/
public ";

%javamethodmodifiers  rtk::simple::ScaleVersor3DTransform::GetMatrix "/**
std::vector<double> rtk::simple::ScaleVersor3DTransform::GetMatrix() const
*/
public ";

%javamethodmodifiers  rtk::simple::ScaleVersor3DTransform::GetName "/**
std::string rtk::simple::ScaleVersor3DTransform::GetName() const

Name of this class

*/
public ";

%javamethodmodifiers  rtk::simple::ScaleVersor3DTransform::GetScale "/**
std::vector<double> rtk::simple::ScaleVersor3DTransform::GetScale() const
*/
public ";

%javamethodmodifiers  rtk::simple::ScaleVersor3DTransform::GetTranslation "/**
std::vector<double> rtk::simple::ScaleVersor3DTransform::GetTranslation() const
*/
public ";

%javamethodmodifiers  rtk::simple::ScaleVersor3DTransform::GetVersor "/**
std::vector<double> rtk::simple::ScaleVersor3DTransform::GetVersor() const
*/
public ";

%javamethodmodifiers  rtk::simple::ScaleVersor3DTransform::ScaleVersor3DTransform "/**
rtk::simple::ScaleVersor3DTransform::ScaleVersor3DTransform()
*/
public ";

%javamethodmodifiers  rtk::simple::ScaleVersor3DTransform::ScaleVersor3DTransform "/**
rtk::simple::ScaleVersor3DTransform::ScaleVersor3DTransform(const ScaleVersor3DTransform &)
*/
public ";

%javamethodmodifiers  rtk::simple::ScaleVersor3DTransform::ScaleVersor3DTransform "/**
rtk::simple::ScaleVersor3DTransform::ScaleVersor3DTransform(const Transform &)
*/
public ";

%javamethodmodifiers  rtk::simple::ScaleVersor3DTransform::ScaleVersor3DTransform "/**
rtk::simple::ScaleVersor3DTransform::ScaleVersor3DTransform(const std::vector< double > &scale, const std::vector< double >
&versor, const std::vector< double > &translation=std::vector< double
>(3, 0.0), const std::vector< double > &fixedCenter=std::vector<
double >(3, 0.0))
*/
public ";

%javamethodmodifiers  rtk::simple::ScaleVersor3DTransform::ScaleVersor3DTransform "/**
rtk::simple::ScaleVersor3DTransform::ScaleVersor3DTransform(const std::vector< double > &scale, const std::vector< double >
&axis, double angle, const std::vector< double >
&translation=std::vector< double >(3, 0.0), const std::vector< double
> &fixedCenter=std::vector< double >(3, 0.0))
*/
public ";

%javamethodmodifiers  rtk::simple::ScaleVersor3DTransform::SetCenter "/**
Self& rtk::simple::ScaleVersor3DTransform::SetCenter(const std::vector< double > &params)

fixed parameter

*/
public ";

%javamethodmodifiers  rtk::simple::ScaleVersor3DTransform::SetRotation "/**
Self& rtk::simple::ScaleVersor3DTransform::SetRotation(const std::vector< double > &versor)

parameter

*/
public ";

%javamethodmodifiers  rtk::simple::ScaleVersor3DTransform::SetRotation "/**
Self& rtk::simple::ScaleVersor3DTransform::SetRotation(const std::vector< double > &axis, double angle)
*/
public ";

%javamethodmodifiers  rtk::simple::ScaleVersor3DTransform::SetScale "/**
Self& rtk::simple::ScaleVersor3DTransform::SetScale(const std::vector< double > &scale)
*/
public ";

%javamethodmodifiers  rtk::simple::ScaleVersor3DTransform::SetTranslation "/**
Self& rtk::simple::ScaleVersor3DTransform::SetTranslation(const std::vector< double > &translation)
*/
public ";

%javamethodmodifiers  rtk::simple::ScaleVersor3DTransform::Translate "/**
Self& rtk::simple::ScaleVersor3DTransform::Translate(const std::vector< double > &offset)

additional methods

*/
public ";


%typemap(javaimports) rtk::simple::ShanbhagThresholdImageFilter "/**

Threshold an image using the Shanbhag Threshold.


This filter creates a binary thresholded image that separates an image
into foreground and background components. The filter computes the
threshold using the ShanbhagThresholdCalculator and applies that theshold to the input image using the BinaryThresholdImageFilter .


Richard Beare. Department of Medicine, Monash University, Melbourne,
Australia.
 Gaetan Lehmann. Biologie du Developpement et de la Reproduction, INRA
de Jouy-en-Josas, France.

This implementation was taken from the Insight Journal paper: https://hdl.handle.net/10380/3279 or http://www.insight-journal.org/browse/publication/811


See:
 HistogramThresholdImageFilter

 rtk::simple::ShanbhagThreshold for the procedural interface

 itk::ShanbhagThresholdImageFilter for the Doxygen on the original ITK class.


C++ includes: srtkShanbhagThresholdImageFilter.h
*/"

%javamethodmodifiers  rtk::simple::ShanbhagThresholdImageFilter::Execute "/**
Image rtk::simple::ShanbhagThresholdImageFilter::Execute(const Image &image, const Image &maskImage)

Execute the filter on the input image

*/
public ";

%javamethodmodifiers  rtk::simple::ShanbhagThresholdImageFilter::Execute "/**
Image rtk::simple::ShanbhagThresholdImageFilter::Execute(const Image &image)
*/
public ";

%javamethodmodifiers  rtk::simple::ShanbhagThresholdImageFilter::Execute "/**
Image rtk::simple::ShanbhagThresholdImageFilter::Execute(const Image &image, const Image &maskImage, uint8_t insideValue,
uint8_t outsideValue, uint32_t numberOfHistogramBins, bool maskOutput,
uint8_t maskValue)

Execute the filter on the input image with the given parameters

*/
public ";

%javamethodmodifiers  rtk::simple::ShanbhagThresholdImageFilter::Execute "/**
Image rtk::simple::ShanbhagThresholdImageFilter::Execute(const Image &image, uint8_t insideValue, uint8_t outsideValue,
uint32_t numberOfHistogramBins, bool maskOutput, uint8_t maskValue)
*/
public ";

%javamethodmodifiers  rtk::simple::ShanbhagThresholdImageFilter::GetInsideValue "/**
uint8_t rtk::simple::ShanbhagThresholdImageFilter::GetInsideValue() const

Get the \"inside\" pixel value.

*/
public ";

%javamethodmodifiers  rtk::simple::ShanbhagThresholdImageFilter::GetMaskOutput "/**
bool rtk::simple::ShanbhagThresholdImageFilter::GetMaskOutput() const
*/
public ";

%javamethodmodifiers  rtk::simple::ShanbhagThresholdImageFilter::GetMaskValue "/**
uint8_t rtk::simple::ShanbhagThresholdImageFilter::GetMaskValue() const
*/
public ";

%javamethodmodifiers  rtk::simple::ShanbhagThresholdImageFilter::GetName "/**
std::string rtk::simple::ShanbhagThresholdImageFilter::GetName() const

Name of this class

*/
public ";

%javamethodmodifiers  rtk::simple::ShanbhagThresholdImageFilter::GetNumberOfHistogramBins "/**
uint32_t rtk::simple::ShanbhagThresholdImageFilter::GetNumberOfHistogramBins() const
*/
public ";

%javamethodmodifiers  rtk::simple::ShanbhagThresholdImageFilter::GetOutsideValue "/**
uint8_t rtk::simple::ShanbhagThresholdImageFilter::GetOutsideValue() const

Get the \"outside\" pixel value.

*/
public ";

%javamethodmodifiers  rtk::simple::ShanbhagThresholdImageFilter::GetThreshold "/**
double rtk::simple::ShanbhagThresholdImageFilter::GetThreshold() const

Get the computed threshold.


This is a measurement. Its value is updated in the Execute methods, so
the value will only be valid after an execution.

*/
public ";

%javamethodmodifiers  rtk::simple::ShanbhagThresholdImageFilter::MaskOutputOff "/**
Self& rtk::simple::ShanbhagThresholdImageFilter::MaskOutputOff()
*/
public ";

%javamethodmodifiers  rtk::simple::ShanbhagThresholdImageFilter::MaskOutputOn "/**
Self& rtk::simple::ShanbhagThresholdImageFilter::MaskOutputOn()

Set the value of MaskOutput to true or false respectfully.

*/
public ";

%javamethodmodifiers  rtk::simple::ShanbhagThresholdImageFilter::SetInsideValue "/**
Self& rtk::simple::ShanbhagThresholdImageFilter::SetInsideValue(uint8_t InsideValue)

Set the \"inside\" pixel value.

*/
public ";

%javamethodmodifiers  rtk::simple::ShanbhagThresholdImageFilter::SetMaskOutput "/**
Self& rtk::simple::ShanbhagThresholdImageFilter::SetMaskOutput(bool MaskOutput)

Do you want the output to be masked by the mask used in histogram
construction. Only relevant if masking is in use.

*/
public ";

%javamethodmodifiers  rtk::simple::ShanbhagThresholdImageFilter::SetMaskValue "/**
Self& rtk::simple::ShanbhagThresholdImageFilter::SetMaskValue(uint8_t MaskValue)

The value in the mask image, if used, indicating voxels that should be
included. Default is the max of pixel type, as in the
MaskedImageToHistogramFilter

*/
public ";

%javamethodmodifiers  rtk::simple::ShanbhagThresholdImageFilter::SetNumberOfHistogramBins "/**
Self& rtk::simple::ShanbhagThresholdImageFilter::SetNumberOfHistogramBins(uint32_t NumberOfHistogramBins)

Set/Get the number of histogram bins.

*/
public ";

%javamethodmodifiers  rtk::simple::ShanbhagThresholdImageFilter::SetOutsideValue "/**
Self& rtk::simple::ShanbhagThresholdImageFilter::SetOutsideValue(uint8_t OutsideValue)

Set the \"outside\" pixel value. The default value NumericTraits<OutputPixelType>::Zero.

*/
public ";

%javamethodmodifiers  rtk::simple::ShanbhagThresholdImageFilter::ShanbhagThresholdImageFilter "/**
rtk::simple::ShanbhagThresholdImageFilter::ShanbhagThresholdImageFilter()

Default Constructor that takes no arguments and initializes default
parameters

*/
public ";

%javamethodmodifiers  rtk::simple::ShanbhagThresholdImageFilter::ToString "/**
std::string rtk::simple::ShanbhagThresholdImageFilter::ToString() const

Print ourselves out

*/
public ";

%javamethodmodifiers  rtk::simple::ShanbhagThresholdImageFilter::~ShanbhagThresholdImageFilter "/**
rtk::simple::ShanbhagThresholdImageFilter::~ShanbhagThresholdImageFilter()

Destructor

*/
public ";


%typemap(javaimports) rtk::simple::ShapeDetectionLevelSetImageFilter "/**

Segments structures in images based on a user supplied edge potential
map.


IMPORTANT
The SegmentationLevelSetImageFilter class and the ShapeDetectionLevelSetFunction class contain additional information necessary to gain full
understanding of how to use this filter.
OVERVIEW
This class is a level set method segmentation filter. An initial
contour is propagated outwards (or inwards) until it ''sticks'' to the
shape boundaries. This is done by using a level set speed function
based on a user supplied edge potential map. This approach for
segmentation follows that of Malladi et al (1995).
INPUTS
This filter requires two inputs. The first input is a initial level
set. The initial level set is a real image which contains the initial
contour/surface as the zero level set. For example, a signed distance
function from the initial contour/surface is typically used. Note that
for this algorithm the initial contour has to be wholly within (or
wholly outside) the structure to be segmented.

The second input is the feature image. For this filter, this is the
edge potential map. General characteristics of an edge potential map
is that it has values close to zero in regions near the edges and
values close to one inside the shape itself. Typically, the edge
potential map is compute from the image gradient, for example:
\\\\[ g(I) = 1 / ( 1 + | (\\\\nabla * G)(I)| ) \\\\] \\\\[ g(I) = \\\\exp^{-|(\\\\nabla * G)(I)|} \\\\]

where $ I $ is image intensity and $ (\\\\nabla * G) $ is the derivative of Gaussian operator.


See SegmentationLevelSetImageFilter and SparseFieldLevelSetImageFilter for more information on Inputs.
PARAMETERS
The PropagationScaling parameter can be used to switch from
propagation outwards (POSITIVE scaling parameter) versus propagating
inwards (NEGATIVE scaling parameter).
 The smoothness of the resulting contour/surface can be adjusted using
a combination of PropagationScaling and CurvatureScaling parameters.
The larger the CurvatureScaling parameter, the smoother the resulting
contour. The CurvatureScaling parameter should be non-negative for
proper operation of this algorithm. To follow the implementation in
Malladi et al paper, set the PropagtionScaling to $\\\\pm 1.0$ and CurvatureScaling to $ \\\\epsilon $ .

Note that there is no advection term for this filter. Setting the
advection scaling will have no effect.

OUTPUTS
The filter outputs a single, scalar, real-valued image. Negative
values in the output image represent the inside of the segmentated
region and positive values in the image represent the outside of the
segmented region. The zero crossings of the image correspond to the
position of the propagating front.

See SparseFieldLevelSetImageFilter and SegmentationLevelSetImageFilter for more information.
REFERENCES

\"Shape Modeling with Front Propagation: A Level Set Approach\", R.
Malladi, J. A. Sethian and B. C. Vermuri. IEEE Trans. on Pattern
Analysis and Machine Intelligence, Vol 17, No. 2, pp 158-174, February
1995

See:
 SegmentationLevelSetImageFilter


 ShapeDetectionLevelSetFunction


 SparseFieldLevelSetImageFilter

 rtk::simple::ShapeDetectionLevelSet for the procedural interface

 itk::ShapeDetectionLevelSetImageFilter for the Doxygen on the original ITK class.


C++ includes: srtkShapeDetectionLevelSetImageFilter.h
*/"

%javamethodmodifiers  rtk::simple::ShapeDetectionLevelSetImageFilter::Execute "/**
Image rtk::simple::ShapeDetectionLevelSetImageFilter::Execute(const Image &image1, const Image &image2)

Execute the filter on the input images

*/
public ";

%javamethodmodifiers  rtk::simple::ShapeDetectionLevelSetImageFilter::Execute "/**
Image rtk::simple::ShapeDetectionLevelSetImageFilter::Execute(const Image &image1, const Image &image2, double maximumRMSError,
double propagationScaling, double curvatureScaling, uint32_t
numberOfIterations, bool reverseExpansionDirection)

Execute the filter on the input images with the given parameters

*/
public ";

%javamethodmodifiers  rtk::simple::ShapeDetectionLevelSetImageFilter::GetCurvatureScaling "/**
double rtk::simple::ShapeDetectionLevelSetImageFilter::GetCurvatureScaling() const
*/
public ";

%javamethodmodifiers  rtk::simple::ShapeDetectionLevelSetImageFilter::GetElapsedIterations "/**
uint32_t rtk::simple::ShapeDetectionLevelSetImageFilter::GetElapsedIterations() const

Number of iterations run.


This is a measurement. Its value is updated in the Execute methods, so
the value will only be valid after an execution.

*/
public ";

%javamethodmodifiers  rtk::simple::ShapeDetectionLevelSetImageFilter::GetMaximumRMSError "/**
double rtk::simple::ShapeDetectionLevelSetImageFilter::GetMaximumRMSError() const
*/
public ";

%javamethodmodifiers  rtk::simple::ShapeDetectionLevelSetImageFilter::GetName "/**
std::string rtk::simple::ShapeDetectionLevelSetImageFilter::GetName() const

Name of this class

*/
public ";

%javamethodmodifiers  rtk::simple::ShapeDetectionLevelSetImageFilter::GetNumberOfIterations "/**
uint32_t rtk::simple::ShapeDetectionLevelSetImageFilter::GetNumberOfIterations() const
*/
public ";

%javamethodmodifiers  rtk::simple::ShapeDetectionLevelSetImageFilter::GetPropagationScaling "/**
double rtk::simple::ShapeDetectionLevelSetImageFilter::GetPropagationScaling() const
*/
public ";

%javamethodmodifiers  rtk::simple::ShapeDetectionLevelSetImageFilter::GetReverseExpansionDirection "/**
bool rtk::simple::ShapeDetectionLevelSetImageFilter::GetReverseExpansionDirection() const
*/
public ";

%javamethodmodifiers  rtk::simple::ShapeDetectionLevelSetImageFilter::GetRMSChange "/**
double rtk::simple::ShapeDetectionLevelSetImageFilter::GetRMSChange() const

The Root Mean Square of the levelset upon termination.


This is a measurement. Its value is updated in the Execute methods, so
the value will only be valid after an execution.

*/
public ";

%javamethodmodifiers  rtk::simple::ShapeDetectionLevelSetImageFilter::ReverseExpansionDirectionOff "/**
Self& rtk::simple::ShapeDetectionLevelSetImageFilter::ReverseExpansionDirectionOff()
*/
public ";

%javamethodmodifiers  rtk::simple::ShapeDetectionLevelSetImageFilter::ReverseExpansionDirectionOn "/**
Self& rtk::simple::ShapeDetectionLevelSetImageFilter::ReverseExpansionDirectionOn()

Set the value of ReverseExpansionDirection to true or false
respectfully.

*/
public ";

%javamethodmodifiers  rtk::simple::ShapeDetectionLevelSetImageFilter::SetCurvatureScaling "/**
Self& rtk::simple::ShapeDetectionLevelSetImageFilter::SetCurvatureScaling(double CurvatureScaling)
*/
public ";

%javamethodmodifiers  rtk::simple::ShapeDetectionLevelSetImageFilter::SetMaximumRMSError "/**
Self& rtk::simple::ShapeDetectionLevelSetImageFilter::SetMaximumRMSError(double MaximumRMSError)
*/
public ";

%javamethodmodifiers  rtk::simple::ShapeDetectionLevelSetImageFilter::SetNumberOfIterations "/**
Self& rtk::simple::ShapeDetectionLevelSetImageFilter::SetNumberOfIterations(uint32_t NumberOfIterations)
*/
public ";

%javamethodmodifiers  rtk::simple::ShapeDetectionLevelSetImageFilter::SetPropagationScaling "/**
Self& rtk::simple::ShapeDetectionLevelSetImageFilter::SetPropagationScaling(double PropagationScaling)
*/
public ";

%javamethodmodifiers  rtk::simple::ShapeDetectionLevelSetImageFilter::SetReverseExpansionDirection "/**
Self& rtk::simple::ShapeDetectionLevelSetImageFilter::SetReverseExpansionDirection(bool ReverseExpansionDirection)
*/
public ";

%javamethodmodifiers  rtk::simple::ShapeDetectionLevelSetImageFilter::ShapeDetectionLevelSetImageFilter "/**
rtk::simple::ShapeDetectionLevelSetImageFilter::ShapeDetectionLevelSetImageFilter()

Default Constructor that takes no arguments and initializes default
parameters

*/
public ";

%javamethodmodifiers  rtk::simple::ShapeDetectionLevelSetImageFilter::ToString "/**
std::string rtk::simple::ShapeDetectionLevelSetImageFilter::ToString() const

Print ourselves out

*/
public ";

%javamethodmodifiers  rtk::simple::ShapeDetectionLevelSetImageFilter::~ShapeDetectionLevelSetImageFilter "/**
rtk::simple::ShapeDetectionLevelSetImageFilter::~ShapeDetectionLevelSetImageFilter()

Destructor

*/
public ";


%typemap(javaimports) rtk::simple::ShiftScaleImageFilter "/**

Shift and scale the pixels in an image.


ShiftScaleImageFilter shifts the input pixel by Shift (default 0.0) and then scales the
pixel by Scale (default 1.0). All computattions are performed in the
precison of the input pixel's RealType. Before assigning the computed
value to the output pixel, the value is clamped at the NonpositiveMin
and max of the pixel type.
See:
 rtk::simple::ShiftScale for the procedural interface

 itk::ShiftScaleImageFilter for the Doxygen on the original ITK class.


C++ includes: srtkShiftScaleImageFilter.h
*/"

%javamethodmodifiers  rtk::simple::ShiftScaleImageFilter::Execute "/**
Image rtk::simple::ShiftScaleImageFilter::Execute(const Image &image1)

Execute the filter on the input image

*/
public ";

%javamethodmodifiers  rtk::simple::ShiftScaleImageFilter::Execute "/**
Image rtk::simple::ShiftScaleImageFilter::Execute(const Image &image1, double shift, double scale)

Execute the filter on the input image with the given parameters

*/
public ";

%javamethodmodifiers  rtk::simple::ShiftScaleImageFilter::GetName "/**
std::string rtk::simple::ShiftScaleImageFilter::GetName() const

Name of this class

*/
public ";

%javamethodmodifiers  rtk::simple::ShiftScaleImageFilter::GetScale "/**
double rtk::simple::ShiftScaleImageFilter::GetScale() const

Set/Get the amount to Scale each Pixel. The Scale is applied after the
Shift.

*/
public ";

%javamethodmodifiers  rtk::simple::ShiftScaleImageFilter::GetShift "/**
double rtk::simple::ShiftScaleImageFilter::GetShift() const

Set/Get the amount to Shift each Pixel. The shift is followed by a
Scale.

*/
public ";

%javamethodmodifiers  rtk::simple::ShiftScaleImageFilter::SetScale "/**
Self& rtk::simple::ShiftScaleImageFilter::SetScale(double Scale)

Set/Get the amount to Scale each Pixel. The Scale is applied after the
Shift.

*/
public ";

%javamethodmodifiers  rtk::simple::ShiftScaleImageFilter::SetShift "/**
Self& rtk::simple::ShiftScaleImageFilter::SetShift(double Shift)

Set/Get the amount to Shift each Pixel. The shift is followed by a
Scale.

*/
public ";

%javamethodmodifiers  rtk::simple::ShiftScaleImageFilter::ShiftScaleImageFilter "/**
rtk::simple::ShiftScaleImageFilter::ShiftScaleImageFilter()

Default Constructor that takes no arguments and initializes default
parameters

*/
public ";

%javamethodmodifiers  rtk::simple::ShiftScaleImageFilter::ToString "/**
std::string rtk::simple::ShiftScaleImageFilter::ToString() const

Print ourselves out

*/
public ";

%javamethodmodifiers  rtk::simple::ShiftScaleImageFilter::~ShiftScaleImageFilter "/**
rtk::simple::ShiftScaleImageFilter::~ShiftScaleImageFilter()

Destructor

*/
public ";


%typemap(javaimports) rtk::simple::ShotNoiseImageFilter "/**

Alter an image with shot noise.


The shot noise follows a Poisson distribution.


Gaetan Lehmann
 This code was contributed in the Insight Journal paper \"Noise
Simulation\". https://hdl.handle.net/10380/3158
See:
 rtk::simple::ShotNoise for the procedural interface

 itk::ShotNoiseImageFilter for the Doxygen on the original ITK class.


C++ includes: srtkShotNoiseImageFilter.h
*/"

%javamethodmodifiers  rtk::simple::ShotNoiseImageFilter::Execute "/**
Image rtk::simple::ShotNoiseImageFilter::Execute(const Image &image1)

Execute the filter on the input image

*/
public ";

%javamethodmodifiers  rtk::simple::ShotNoiseImageFilter::Execute "/**
Image rtk::simple::ShotNoiseImageFilter::Execute(const Image &image1, double scale, uint32_t seed)

Execute the filter on the input image with the given parameters

*/
public ";

%javamethodmodifiers  rtk::simple::ShotNoiseImageFilter::GetName "/**
std::string rtk::simple::ShotNoiseImageFilter::GetName() const

Name of this class

*/
public ";

%javamethodmodifiers  rtk::simple::ShotNoiseImageFilter::GetScale "/**
double rtk::simple::ShotNoiseImageFilter::GetScale() const

a value to map the pixel value to the actual number of photon. This
value defaults to 1.0. The scaling can be seen as the inverse of the
gain used during the acquisition. The noisy signal is then scaled back
to its input intensity range.

*/
public ";

%javamethodmodifiers  rtk::simple::ShotNoiseImageFilter::GetSeed "/**
uint32_t rtk::simple::ShotNoiseImageFilter::GetSeed() const
*/
public ";

%javamethodmodifiers  rtk::simple::ShotNoiseImageFilter::SetScale "/**
Self& rtk::simple::ShotNoiseImageFilter::SetScale(double Scale)
*/
public ";

%javamethodmodifiers  rtk::simple::ShotNoiseImageFilter::SetSeed "/**
Self& rtk::simple::ShotNoiseImageFilter::SetSeed(uint32_t Seed)
*/
public ";

%javamethodmodifiers  rtk::simple::ShotNoiseImageFilter::ShotNoiseImageFilter "/**
rtk::simple::ShotNoiseImageFilter::ShotNoiseImageFilter()

Default Constructor that takes no arguments and initializes default
parameters

*/
public ";

%javamethodmodifiers  rtk::simple::ShotNoiseImageFilter::ToString "/**
std::string rtk::simple::ShotNoiseImageFilter::ToString() const

Print ourselves out

*/
public ";

%javamethodmodifiers  rtk::simple::ShotNoiseImageFilter::~ShotNoiseImageFilter "/**
rtk::simple::ShotNoiseImageFilter::~ShotNoiseImageFilter()

Destructor

*/
public ";


%typemap(javaimports) rtk::simple::ShrinkImageFilter "/**

Reduce the size of an image by an integer factor in each dimension.


ShrinkImageFilter reduces the size of an image by an integer factor in each dimension.
The algorithm implemented is a simple subsample. The output image size
in each dimension is given by:

outputSize[j] = max( std::floor(inputSize[j]/shrinkFactor[j]), 1 );

NOTE: The physical centers of the input and output will be the same.
Because of this, the Origin of the output may not be the same as the
Origin of the input. Since this filter produces an image which is a
different resolution, origin and with different pixel spacing than its
input image, it needs to override several of the methods defined in ProcessObject in order to properly manage the pipeline execution model. In
particular, this filter overrides
ProcessObject::GenerateInputRequestedRegion() and
ProcessObject::GenerateOutputInformation() .

This filter is implemented as a multithreaded filter. It provides a
ThreadedGenerateData() method for its implementation.

Wiki Examples:

All Examples

Shrink an image
See:
 rtk::simple::Shrink for the procedural interface

 itk::ShrinkImageFilter for the Doxygen on the original ITK class.



C++ includes: srtkShrinkImageFilter.h
*/"

%javamethodmodifiers  rtk::simple::ShrinkImageFilter::Execute "/**
Image rtk::simple::ShrinkImageFilter::Execute(const Image &image1)

Execute the filter on the input image

*/
public ";

%javamethodmodifiers  rtk::simple::ShrinkImageFilter::Execute "/**
Image rtk::simple::ShrinkImageFilter::Execute(const Image &image1, const std::vector< unsigned int >
&shrinkFactors)

Execute the filter on the input image with the given parameters

*/
public ";

%javamethodmodifiers  rtk::simple::ShrinkImageFilter::GetName "/**
std::string rtk::simple::ShrinkImageFilter::GetName() const

Name of this class

*/
public ";

%javamethodmodifiers  rtk::simple::ShrinkImageFilter::GetShrinkFactors "/**
std::vector<unsigned int> rtk::simple::ShrinkImageFilter::GetShrinkFactors() const

Get the shrink factors.

*/
public ";

%javamethodmodifiers  rtk::simple::ShrinkImageFilter::SetShrinkFactor "/**
Self& rtk::simple::ShrinkImageFilter::SetShrinkFactor(unsigned int s)

Custom public declarations

*/
public ";

%javamethodmodifiers  rtk::simple::ShrinkImageFilter::SetShrinkFactors "/**
Self& rtk::simple::ShrinkImageFilter::SetShrinkFactors(const std::vector< unsigned int > &ShrinkFactors)

Set the shrink factors. Values are clamped to a minimum value of 1.
Default is 1 for all dimensions.

*/
public ";

%javamethodmodifiers  rtk::simple::ShrinkImageFilter::ShrinkImageFilter "/**
rtk::simple::ShrinkImageFilter::ShrinkImageFilter()

Default Constructor that takes no arguments and initializes default
parameters

*/
public ";

%javamethodmodifiers  rtk::simple::ShrinkImageFilter::ToString "/**
std::string rtk::simple::ShrinkImageFilter::ToString() const

Print ourselves out

*/
public ";

%javamethodmodifiers  rtk::simple::ShrinkImageFilter::~ShrinkImageFilter "/**
rtk::simple::ShrinkImageFilter::~ShrinkImageFilter()

Destructor

*/
public ";


%typemap(javaimports) rtk::simple::SigmoidImageFilter "/**

Computes the sigmoid function pixel-wise.


A linear transformation is applied first on the argument of the
sigmoid fuction. The resulting total transfrom is given by

\\\\[ f(x) = (Max-Min) \\\\cdot \\\\frac{1}{\\\\left(1+e^{- \\\\frac{
x - \\\\beta }{\\\\alpha}}\\\\right)} + Min \\\\]

Every output pixel is equal to f(x). Where x is the intensity of the
homologous input pixel, and alpha and beta are user-provided
constants.

Wiki Examples:

All Examples

Pass image pixels through a sigmoid function
See:
 rtk::simple::Sigmoid for the procedural interface

 itk::SigmoidImageFilter for the Doxygen on the original ITK class.



C++ includes: srtkSigmoidImageFilter.h
*/"

%javamethodmodifiers  rtk::simple::SigmoidImageFilter::Execute "/**
Image rtk::simple::SigmoidImageFilter::Execute(const Image &image1)

Execute the filter on the input image

*/
public ";

%javamethodmodifiers  rtk::simple::SigmoidImageFilter::Execute "/**
Image rtk::simple::SigmoidImageFilter::Execute(const Image &image1, double alpha, double beta, double outputMaximum,
double outputMinimum)

Execute the filter on the input image with the given parameters

*/
public ";

%javamethodmodifiers  rtk::simple::SigmoidImageFilter::GetAlpha "/**
double rtk::simple::SigmoidImageFilter::GetAlpha() const
*/
public ";

%javamethodmodifiers  rtk::simple::SigmoidImageFilter::GetBeta "/**
double rtk::simple::SigmoidImageFilter::GetBeta() const
*/
public ";

%javamethodmodifiers  rtk::simple::SigmoidImageFilter::GetName "/**
std::string rtk::simple::SigmoidImageFilter::GetName() const

Name of this class

*/
public ";

%javamethodmodifiers  rtk::simple::SigmoidImageFilter::GetOutputMaximum "/**
double rtk::simple::SigmoidImageFilter::GetOutputMaximum() const
*/
public ";

%javamethodmodifiers  rtk::simple::SigmoidImageFilter::GetOutputMinimum "/**
double rtk::simple::SigmoidImageFilter::GetOutputMinimum() const
*/
public ";

%javamethodmodifiers  rtk::simple::SigmoidImageFilter::SetAlpha "/**
Self& rtk::simple::SigmoidImageFilter::SetAlpha(double Alpha)
*/
public ";

%javamethodmodifiers  rtk::simple::SigmoidImageFilter::SetBeta "/**
Self& rtk::simple::SigmoidImageFilter::SetBeta(double Beta)
*/
public ";

%javamethodmodifiers  rtk::simple::SigmoidImageFilter::SetOutputMaximum "/**
Self& rtk::simple::SigmoidImageFilter::SetOutputMaximum(double OutputMaximum)
*/
public ";

%javamethodmodifiers  rtk::simple::SigmoidImageFilter::SetOutputMinimum "/**
Self& rtk::simple::SigmoidImageFilter::SetOutputMinimum(double OutputMinimum)
*/
public ";

%javamethodmodifiers  rtk::simple::SigmoidImageFilter::SigmoidImageFilter "/**
rtk::simple::SigmoidImageFilter::SigmoidImageFilter()

Default Constructor that takes no arguments and initializes default
parameters

*/
public ";

%javamethodmodifiers  rtk::simple::SigmoidImageFilter::ToString "/**
std::string rtk::simple::SigmoidImageFilter::ToString() const

Print ourselves out

*/
public ";

%javamethodmodifiers  rtk::simple::SigmoidImageFilter::~SigmoidImageFilter "/**
rtk::simple::SigmoidImageFilter::~SigmoidImageFilter()

Destructor

*/
public ";


%typemap(javaimports) rtk::simple::SignedDanielssonDistanceMapImageFilter "/**

This class is parametrized over the type of the input image and the
type of the output image.

This filter computes the distance map of the input image as an
approximation with pixel accuracy to the Euclidean distance.

For purposes of evaluating the signed distance map, the input is
assumed to be binary composed of pixels with value 0 and non-zero.

The inside is considered as having negative distances. Outside is
treated as having positive distances. To change the convention, use
the InsideIsPositive(bool) function.

As a convention, the distance is evaluated from the boundary of the ON
pixels.

The filter returns
A signed distance map with the approximation to the euclidean
distance.

A voronoi partition. (See itkDanielssonDistanceMapImageFilter)

A vector map containing the component of the vector relating the
current pixel with the closest point of the closest object to this
pixel. Given that the components of the distance are computed in
\"pixels\", the vector is represented by an itk::Offset . That is, physical coordinates are not used. (See
itkDanielssonDistanceMapImageFilter)
 This filter internally uses the DanielssonDistanceMap filter. This
filter is N-dimensional.


See:
itkDanielssonDistanceMapImageFilter

 rtk::simple::SignedDanielssonDistanceMap for the procedural interface

 itk::SignedDanielssonDistanceMapImageFilter for the Doxygen on the original ITK class.


C++ includes: srtkSignedDanielssonDistanceMapImageFilter.h
*/"

%javamethodmodifiers  rtk::simple::SignedDanielssonDistanceMapImageFilter::Execute "/**
Image rtk::simple::SignedDanielssonDistanceMapImageFilter::Execute(const Image &image1)

Execute the filter on the input image

*/
public ";

%javamethodmodifiers  rtk::simple::SignedDanielssonDistanceMapImageFilter::Execute "/**
Image rtk::simple::SignedDanielssonDistanceMapImageFilter::Execute(const Image &image1, bool insideIsPositive, bool squaredDistance,
bool useImageSpacing)

Execute the filter on the input image with the given parameters

*/
public ";

%javamethodmodifiers  rtk::simple::SignedDanielssonDistanceMapImageFilter::GetInsideIsPositive "/**
bool rtk::simple::SignedDanielssonDistanceMapImageFilter::GetInsideIsPositive() const

Get if the inside represents positive values in the signed distance
map. See GetInsideIsPositive()

*/
public ";

%javamethodmodifiers  rtk::simple::SignedDanielssonDistanceMapImageFilter::GetName "/**
std::string rtk::simple::SignedDanielssonDistanceMapImageFilter::GetName() const

Name of this class

*/
public ";

%javamethodmodifiers  rtk::simple::SignedDanielssonDistanceMapImageFilter::GetSquaredDistance "/**
bool rtk::simple::SignedDanielssonDistanceMapImageFilter::GetSquaredDistance() const

Get the distance squared.

*/
public ";

%javamethodmodifiers  rtk::simple::SignedDanielssonDistanceMapImageFilter::GetUseImageSpacing "/**
bool rtk::simple::SignedDanielssonDistanceMapImageFilter::GetUseImageSpacing() const

Get whether spacing is used.

*/
public ";

%javamethodmodifiers  rtk::simple::SignedDanielssonDistanceMapImageFilter::InsideIsPositiveOff "/**
Self& rtk::simple::SignedDanielssonDistanceMapImageFilter::InsideIsPositiveOff()
*/
public ";

%javamethodmodifiers  rtk::simple::SignedDanielssonDistanceMapImageFilter::InsideIsPositiveOn "/**
Self& rtk::simple::SignedDanielssonDistanceMapImageFilter::InsideIsPositiveOn()

Set the value of InsideIsPositive to true or false respectfully.

*/
public ";

%javamethodmodifiers  rtk::simple::SignedDanielssonDistanceMapImageFilter::SetInsideIsPositive "/**
Self& rtk::simple::SignedDanielssonDistanceMapImageFilter::SetInsideIsPositive(bool InsideIsPositive)

Set if the inside represents positive values in the signed distance
map. By convention ON pixels are treated as inside pixels.

*/
public ";

%javamethodmodifiers  rtk::simple::SignedDanielssonDistanceMapImageFilter::SetSquaredDistance "/**
Self& rtk::simple::SignedDanielssonDistanceMapImageFilter::SetSquaredDistance(bool SquaredDistance)

Set if the distance should be squared.

*/
public ";

%javamethodmodifiers  rtk::simple::SignedDanielssonDistanceMapImageFilter::SetUseImageSpacing "/**
Self& rtk::simple::SignedDanielssonDistanceMapImageFilter::SetUseImageSpacing(bool UseImageSpacing)

Set if image spacing should be used in computing distances.

*/
public ";

%javamethodmodifiers  rtk::simple::SignedDanielssonDistanceMapImageFilter::SignedDanielssonDistanceMapImageFilter "/**
rtk::simple::SignedDanielssonDistanceMapImageFilter::SignedDanielssonDistanceMapImageFilter()

Default Constructor that takes no arguments and initializes default
parameters

*/
public ";

%javamethodmodifiers  rtk::simple::SignedDanielssonDistanceMapImageFilter::SquaredDistanceOff "/**
Self& rtk::simple::SignedDanielssonDistanceMapImageFilter::SquaredDistanceOff()
*/
public ";

%javamethodmodifiers  rtk::simple::SignedDanielssonDistanceMapImageFilter::SquaredDistanceOn "/**
Self& rtk::simple::SignedDanielssonDistanceMapImageFilter::SquaredDistanceOn()

Set the value of SquaredDistance to true or false respectfully.

*/
public ";

%javamethodmodifiers  rtk::simple::SignedDanielssonDistanceMapImageFilter::ToString "/**
std::string rtk::simple::SignedDanielssonDistanceMapImageFilter::ToString() const

Print ourselves out

*/
public ";

%javamethodmodifiers  rtk::simple::SignedDanielssonDistanceMapImageFilter::UseImageSpacingOff "/**
Self& rtk::simple::SignedDanielssonDistanceMapImageFilter::UseImageSpacingOff()
*/
public ";

%javamethodmodifiers  rtk::simple::SignedDanielssonDistanceMapImageFilter::UseImageSpacingOn "/**
Self& rtk::simple::SignedDanielssonDistanceMapImageFilter::UseImageSpacingOn()

Set the value of UseImageSpacing to true or false respectfully.

*/
public ";

%javamethodmodifiers  rtk::simple::SignedDanielssonDistanceMapImageFilter::~SignedDanielssonDistanceMapImageFilter "/**
rtk::simple::SignedDanielssonDistanceMapImageFilter::~SignedDanielssonDistanceMapImageFilter()

Destructor

*/
public ";


%typemap(javaimports) rtk::simple::SignedMaurerDistanceMapImageFilter "/**

This filter calculates the Euclidean distance transform of a binary
image in linear time for arbitrary dimensions.


Inputs and Outputs
This is an image-to-image filter. The dimensionality is arbitrary. The
only dimensionality constraint is that the input and output images be
of the same dimensions and size. To maintain integer arithmetic within
the filter, the default output is the signed squared distance. This
implies that the input image should be of type \"unsigned int\" or
\"int\" whereas the output image is of type \"int\". Obviously, if the
user wishes to utilize the image spacing or to have a filter with the
Euclidean distance (as opposed to the squared distance), output image
types of float or double should be used.
 The inside is considered as having negative distances. Outside is
treated as having positive distances. To change the convention, use
the InsideIsPositive(bool) function.

Parameters
Set/GetBackgroundValue specifies the background of the value of the
input binary image. Normally this is zero and, as such, zero is the
default value. Other than that, the usage is completely analogous to
the itk::DanielssonDistanceImageFilter class except it does not return
the Voronoi map.
 Reference: C. R. Maurer, Jr., R. Qi, and V. Raghavan, \"A Linear Time
Algorithm for Computing Exact Euclidean Distance Transforms of Binary
Images in Arbitrary Dimensions\", IEEE - Transactions on Pattern
Analysis and Machine Intelligence, 25(2): 265-270, 2003.
See:
 rtk::simple::SignedMaurerDistanceMap for the procedural interface

 itk::SignedMaurerDistanceMapImageFilter for the Doxygen on the original ITK class.


C++ includes: srtkSignedMaurerDistanceMapImageFilter.h
*/"

%javamethodmodifiers  rtk::simple::SignedMaurerDistanceMapImageFilter::Execute "/**
Image rtk::simple::SignedMaurerDistanceMapImageFilter::Execute(const Image &image1)

Execute the filter on the input image

*/
public ";

%javamethodmodifiers  rtk::simple::SignedMaurerDistanceMapImageFilter::Execute "/**
Image rtk::simple::SignedMaurerDistanceMapImageFilter::Execute(const Image &image1, bool insideIsPositive, bool squaredDistance,
bool useImageSpacing)

Execute the filter on the input image with the given parameters

*/
public ";

%javamethodmodifiers  rtk::simple::SignedMaurerDistanceMapImageFilter::GetInsideIsPositive "/**
bool rtk::simple::SignedMaurerDistanceMapImageFilter::GetInsideIsPositive() const

Get if the inside represents positive values in the signed distance
map.
See:
 GetInsideIsPositive()


*/
public ";

%javamethodmodifiers  rtk::simple::SignedMaurerDistanceMapImageFilter::GetName "/**
std::string rtk::simple::SignedMaurerDistanceMapImageFilter::GetName() const

Name of this class

*/
public ";

%javamethodmodifiers  rtk::simple::SignedMaurerDistanceMapImageFilter::GetSquaredDistance "/**
bool rtk::simple::SignedMaurerDistanceMapImageFilter::GetSquaredDistance() const

Get the distance squared.

*/
public ";

%javamethodmodifiers  rtk::simple::SignedMaurerDistanceMapImageFilter::GetUseImageSpacing "/**
bool rtk::simple::SignedMaurerDistanceMapImageFilter::GetUseImageSpacing() const

Get whether spacing is used.

*/
public ";

%javamethodmodifiers  rtk::simple::SignedMaurerDistanceMapImageFilter::InsideIsPositiveOff "/**
Self& rtk::simple::SignedMaurerDistanceMapImageFilter::InsideIsPositiveOff()
*/
public ";

%javamethodmodifiers  rtk::simple::SignedMaurerDistanceMapImageFilter::InsideIsPositiveOn "/**
Self& rtk::simple::SignedMaurerDistanceMapImageFilter::InsideIsPositiveOn()

Set the value of InsideIsPositive to true or false respectfully.

*/
public ";

%javamethodmodifiers  rtk::simple::SignedMaurerDistanceMapImageFilter::SetInsideIsPositive "/**
Self& rtk::simple::SignedMaurerDistanceMapImageFilter::SetInsideIsPositive(bool InsideIsPositive)

Set if the inside represents positive values in the signed distance
map. By convention ON pixels are treated as inside pixels.

*/
public ";

%javamethodmodifiers  rtk::simple::SignedMaurerDistanceMapImageFilter::SetSquaredDistance "/**
Self& rtk::simple::SignedMaurerDistanceMapImageFilter::SetSquaredDistance(bool SquaredDistance)

Set if the distance should be squared.

*/
public ";

%javamethodmodifiers  rtk::simple::SignedMaurerDistanceMapImageFilter::SetUseImageSpacing "/**
Self& rtk::simple::SignedMaurerDistanceMapImageFilter::SetUseImageSpacing(bool UseImageSpacing)

Set if image spacing should be used in computing distances.

*/
public ";

%javamethodmodifiers  rtk::simple::SignedMaurerDistanceMapImageFilter::SignedMaurerDistanceMapImageFilter "/**
rtk::simple::SignedMaurerDistanceMapImageFilter::SignedMaurerDistanceMapImageFilter()

Default Constructor that takes no arguments and initializes default
parameters

*/
public ";

%javamethodmodifiers  rtk::simple::SignedMaurerDistanceMapImageFilter::SquaredDistanceOff "/**
Self& rtk::simple::SignedMaurerDistanceMapImageFilter::SquaredDistanceOff()
*/
public ";

%javamethodmodifiers  rtk::simple::SignedMaurerDistanceMapImageFilter::SquaredDistanceOn "/**
Self& rtk::simple::SignedMaurerDistanceMapImageFilter::SquaredDistanceOn()

Set the value of SquaredDistance to true or false respectfully.

*/
public ";

%javamethodmodifiers  rtk::simple::SignedMaurerDistanceMapImageFilter::ToString "/**
std::string rtk::simple::SignedMaurerDistanceMapImageFilter::ToString() const

Print ourselves out

*/
public ";

%javamethodmodifiers  rtk::simple::SignedMaurerDistanceMapImageFilter::UseImageSpacingOff "/**
Self& rtk::simple::SignedMaurerDistanceMapImageFilter::UseImageSpacingOff()
*/
public ";

%javamethodmodifiers  rtk::simple::SignedMaurerDistanceMapImageFilter::UseImageSpacingOn "/**
Self& rtk::simple::SignedMaurerDistanceMapImageFilter::UseImageSpacingOn()

Set the value of UseImageSpacing to true or false respectfully.

*/
public ";

%javamethodmodifiers  rtk::simple::SignedMaurerDistanceMapImageFilter::~SignedMaurerDistanceMapImageFilter "/**
rtk::simple::SignedMaurerDistanceMapImageFilter::~SignedMaurerDistanceMapImageFilter()

Destructor

*/
public ";


%typemap(javaimports) rtk::simple::Similarity2DTransform "/**

A similarity 2D transform with rotation in radians and isotropic
scaling around a fixed center with translation.



See:
 itk::Similarity2DTransform


C++ includes: srtkSimilarity2DTransform.h
*/"

%javamethodmodifiers  rtk::simple::Similarity2DTransform::GetAngle "/**
double rtk::simple::Similarity2DTransform::GetAngle() const
*/
public ";

%javamethodmodifiers  rtk::simple::Similarity2DTransform::GetCenter "/**
std::vector<double> rtk::simple::Similarity2DTransform::GetCenter() const
*/
public ";

%javamethodmodifiers  rtk::simple::Similarity2DTransform::GetMatrix "/**
std::vector<double> rtk::simple::Similarity2DTransform::GetMatrix() const

additional methods

*/
public ";

%javamethodmodifiers  rtk::simple::Similarity2DTransform::GetName "/**
std::string rtk::simple::Similarity2DTransform::GetName() const

Name of this class

*/
public ";

%javamethodmodifiers  rtk::simple::Similarity2DTransform::GetScale "/**
double rtk::simple::Similarity2DTransform::GetScale() const
*/
public ";

%javamethodmodifiers  rtk::simple::Similarity2DTransform::GetTranslation "/**
std::vector<double> rtk::simple::Similarity2DTransform::GetTranslation() const
*/
public ";

%javamethodmodifiers  rtk::simple::Similarity2DTransform::SetAngle "/**
Self& rtk::simple::Similarity2DTransform::SetAngle(double angle)

parameter

*/
public ";

%javamethodmodifiers  rtk::simple::Similarity2DTransform::SetCenter "/**
Self& rtk::simple::Similarity2DTransform::SetCenter(const std::vector< double > &params)

fixed parameter

*/
public ";

%javamethodmodifiers  rtk::simple::Similarity2DTransform::SetMatrix "/**
Self& rtk::simple::Similarity2DTransform::SetMatrix(const std::vector< double > &matrix, double tolerance=1e-10)
*/
public ";

%javamethodmodifiers  rtk::simple::Similarity2DTransform::SetScale "/**
Self& rtk::simple::Similarity2DTransform::SetScale(double scale)
*/
public ";

%javamethodmodifiers  rtk::simple::Similarity2DTransform::SetTranslation "/**
Self& rtk::simple::Similarity2DTransform::SetTranslation(const std::vector< double > &translation)
*/
public ";

%javamethodmodifiers  rtk::simple::Similarity2DTransform::Similarity2DTransform "/**
rtk::simple::Similarity2DTransform::Similarity2DTransform()
*/
public ";

%javamethodmodifiers  rtk::simple::Similarity2DTransform::Similarity2DTransform "/**
rtk::simple::Similarity2DTransform::Similarity2DTransform(double scaleFactor, double angle=0.0, const std::vector< double >
&translation=std::vector< double >(2, 0.0), const std::vector< double
> &fixedCenter=std::vector< double >(2, 0.0))
*/
public ";

%javamethodmodifiers  rtk::simple::Similarity2DTransform::Similarity2DTransform "/**
rtk::simple::Similarity2DTransform::Similarity2DTransform(const Similarity2DTransform &)
*/
public ";

%javamethodmodifiers  rtk::simple::Similarity2DTransform::Similarity2DTransform "/**
rtk::simple::Similarity2DTransform::Similarity2DTransform(const Transform &)
*/
public ";


%typemap(javaimports) rtk::simple::Similarity3DTransform "/**

A similarity 3D transform with rotation as a versor, and isotropic
scaling around a fixed center with translation.



See:
 itk::Similarity3DTransform


C++ includes: srtkSimilarity3DTransform.h
*/"

%javamethodmodifiers  rtk::simple::Similarity3DTransform::GetCenter "/**
std::vector<double> rtk::simple::Similarity3DTransform::GetCenter() const
*/
public ";

%javamethodmodifiers  rtk::simple::Similarity3DTransform::GetMatrix "/**
std::vector<double> rtk::simple::Similarity3DTransform::GetMatrix() const
*/
public ";

%javamethodmodifiers  rtk::simple::Similarity3DTransform::GetName "/**
std::string rtk::simple::Similarity3DTransform::GetName() const

Name of this class

*/
public ";

%javamethodmodifiers  rtk::simple::Similarity3DTransform::GetScale "/**
double rtk::simple::Similarity3DTransform::GetScale() const
*/
public ";

%javamethodmodifiers  rtk::simple::Similarity3DTransform::GetTranslation "/**
std::vector<double> rtk::simple::Similarity3DTransform::GetTranslation() const
*/
public ";

%javamethodmodifiers  rtk::simple::Similarity3DTransform::GetVersor "/**
std::vector<double> rtk::simple::Similarity3DTransform::GetVersor() const
*/
public ";

%javamethodmodifiers  rtk::simple::Similarity3DTransform::SetCenter "/**
Self& rtk::simple::Similarity3DTransform::SetCenter(const std::vector< double > &params)

fixed parameter

*/
public ";

%javamethodmodifiers  rtk::simple::Similarity3DTransform::SetMatrix "/**
Self& rtk::simple::Similarity3DTransform::SetMatrix(const std::vector< double > &matrix, double tolerance=1e-10)
*/
public ";

%javamethodmodifiers  rtk::simple::Similarity3DTransform::SetRotation "/**
Self& rtk::simple::Similarity3DTransform::SetRotation(const std::vector< double > &versor)

parameter

*/
public ";

%javamethodmodifiers  rtk::simple::Similarity3DTransform::SetRotation "/**
Self& rtk::simple::Similarity3DTransform::SetRotation(const std::vector< double > &axis, double angle)
*/
public ";

%javamethodmodifiers  rtk::simple::Similarity3DTransform::SetScale "/**
Self& rtk::simple::Similarity3DTransform::SetScale(double scale)
*/
public ";

%javamethodmodifiers  rtk::simple::Similarity3DTransform::SetTranslation "/**
Self& rtk::simple::Similarity3DTransform::SetTranslation(const std::vector< double > &translation)
*/
public ";

%javamethodmodifiers  rtk::simple::Similarity3DTransform::Similarity3DTransform "/**
rtk::simple::Similarity3DTransform::Similarity3DTransform()
*/
public ";

%javamethodmodifiers  rtk::simple::Similarity3DTransform::Similarity3DTransform "/**
rtk::simple::Similarity3DTransform::Similarity3DTransform(const Similarity3DTransform &)
*/
public ";

%javamethodmodifiers  rtk::simple::Similarity3DTransform::Similarity3DTransform "/**
rtk::simple::Similarity3DTransform::Similarity3DTransform(const Transform &)
*/
public ";

%javamethodmodifiers  rtk::simple::Similarity3DTransform::Similarity3DTransform "/**
rtk::simple::Similarity3DTransform::Similarity3DTransform(double scaleFactor, const std::vector< double > &versor, const
std::vector< double > &translation=std::vector< double >(3, 0.0),
const std::vector< double > &fixedCenter=std::vector< double >(3,
0.0))
*/
public ";

%javamethodmodifiers  rtk::simple::Similarity3DTransform::Similarity3DTransform "/**
rtk::simple::Similarity3DTransform::Similarity3DTransform(double scaleFactor, const std::vector< double > &axis, double angle,
const std::vector< double > &translation=std::vector< double >(3,
0.0), const std::vector< double > &fixedCenter=std::vector< double
>(3, 0.0))
*/
public ";

%javamethodmodifiers  rtk::simple::Similarity3DTransform::Translate "/**
Self& rtk::simple::Similarity3DTransform::Translate(const std::vector< double > &offset)

additional methods

*/
public ";


%typemap(javaimports) rtk::simple::SimilarityIndexImageFilter "/**

Measures the similarity between the set of non-zero pixels of two
images.


SimilarityIndexImageFilter measures the similarity between the set non-zero pixels of two images
using the following formula: \\\\[ S = \\\\frac{2 | A \\\\cap B |}{|A| + |B|} \\\\] where $A$ and $B$ are respectively the set of non-zero pixels in the first and second
input images. Operator $|\\\\cdot|$ represents the size of a set and $\\\\cap$ represents the intersection of two sets.

The measure is derived from a reliability measure known as the kappa
statistic. $S$ is sensitive to both differences in size and in location and have
been in the literature for comparing two segmentation masks. For more
information see: \"Morphometric Analysis of White Matter Lesions in MR
Images: Method and Validation\", A. P. Zijdenbos, B. M. Dawant, R. A.
Margolin and A. C. Palmer, IEEE Trans. on Medical Imaging, 13(4) pp
716-724,1994

This filter requires the largest possible region of the first image
and the same corresponding region in the second image. It behaves as
filter with two input and one output. Thus it can be inserted in a
pipeline with other filters. The filter passes the first input through
unmodified.

This filter is templated over the two input image type. It assume both
image have the same number of dimensions.


See:
 itk::SimilarityIndexImageFilter for the Doxygen on the original ITK class.


C++ includes: srtkSimilarityIndexImageFilter.h
*/"

%javamethodmodifiers  rtk::simple::SimilarityIndexImageFilter::Execute "/**
Image rtk::simple::SimilarityIndexImageFilter::Execute(const Image &image1, const Image &image2)

Execute the filter on the input images

*/
public ";

%javamethodmodifiers  rtk::simple::SimilarityIndexImageFilter::GetName "/**
std::string rtk::simple::SimilarityIndexImageFilter::GetName() const

Name of this class

*/
public ";

%javamethodmodifiers  rtk::simple::SimilarityIndexImageFilter::GetSimilarityIndex "/**
double rtk::simple::SimilarityIndexImageFilter::GetSimilarityIndex() const

Return the computed similarity index.

This is a measurement. Its value is updated in the Execute methods, so
the value will only be valid after an execution.

*/
public ";

%javamethodmodifiers  rtk::simple::SimilarityIndexImageFilter::SimilarityIndexImageFilter "/**
rtk::simple::SimilarityIndexImageFilter::SimilarityIndexImageFilter()

Default Constructor that takes no arguments and initializes default
parameters

*/
public ";

%javamethodmodifiers  rtk::simple::SimilarityIndexImageFilter::ToString "/**
std::string rtk::simple::SimilarityIndexImageFilter::ToString() const

Print ourselves out

*/
public ";

%javamethodmodifiers  rtk::simple::SimilarityIndexImageFilter::~SimilarityIndexImageFilter "/**
rtk::simple::SimilarityIndexImageFilter::~SimilarityIndexImageFilter()

Destructor

*/
public ";


%typemap(javaimports) rtk::simple::SimpleContourExtractorImageFilter "/**

Computes an image of contours which will be the contour of the first
image.


A pixel of the source image is considered to belong to the contour if
its pixel value is equal to the input foreground value and it has in
its neighborhood at least one pixel which its pixel value is equal to
the input background value. The output image will have pixels which
will be set to the output foreground value if they belong to the
contour, otherwise they will be set to the ouput background value.

The neighborhood \"radius\" is set thanks to the radius params.


See:
 Image


 Neighborhood


 NeighborhoodOperator


 NeighborhoodIterator

 rtk::simple::SimpleContourExtractor for the procedural interface

 itk::SimpleContourExtractorImageFilter for the Doxygen on the original ITK class.


C++ includes: srtkSimpleContourExtractorImageFilter.h
*/"

%javamethodmodifiers  rtk::simple::SimpleContourExtractorImageFilter::Execute "/**
Image rtk::simple::SimpleContourExtractorImageFilter::Execute(const Image &image1)

Execute the filter on the input image

*/
public ";

%javamethodmodifiers  rtk::simple::SimpleContourExtractorImageFilter::Execute "/**
Image rtk::simple::SimpleContourExtractorImageFilter::Execute(const Image &image1, double inputForegroundValue, double
inputBackgroundValue, const std::vector< unsigned int > &radius,
double outputForegroundValue, double outputBackgroundValue)

Execute the filter on the input image with the given parameters

*/
public ";

%javamethodmodifiers  rtk::simple::SimpleContourExtractorImageFilter::GetInputBackgroundValue "/**
double rtk::simple::SimpleContourExtractorImageFilter::GetInputBackgroundValue() const

Get the background value used in order to identify a background pixel
in the input image.

*/
public ";

%javamethodmodifiers  rtk::simple::SimpleContourExtractorImageFilter::GetInputForegroundValue "/**
double rtk::simple::SimpleContourExtractorImageFilter::GetInputForegroundValue() const

Get the foreground value used in order to identify a foreground pixel
in the input image.

*/
public ";

%javamethodmodifiers  rtk::simple::SimpleContourExtractorImageFilter::GetName "/**
std::string rtk::simple::SimpleContourExtractorImageFilter::GetName() const

Name of this class

*/
public ";

%javamethodmodifiers  rtk::simple::SimpleContourExtractorImageFilter::GetOutputBackgroundValue "/**
double rtk::simple::SimpleContourExtractorImageFilter::GetOutputBackgroundValue() const

Get the background value used in order to identify a background pixel
in the output image.

*/
public ";

%javamethodmodifiers  rtk::simple::SimpleContourExtractorImageFilter::GetOutputForegroundValue "/**
double rtk::simple::SimpleContourExtractorImageFilter::GetOutputForegroundValue() const

Get the foreground value used in order to identify a foreground pixel
in the output image.

*/
public ";

%javamethodmodifiers  rtk::simple::SimpleContourExtractorImageFilter::GetRadius "/**
std::vector<unsigned int> rtk::simple::SimpleContourExtractorImageFilter::GetRadius() const
*/
public ";

%javamethodmodifiers  rtk::simple::SimpleContourExtractorImageFilter::SetInputBackgroundValue "/**
Self& rtk::simple::SimpleContourExtractorImageFilter::SetInputBackgroundValue(double InputBackgroundValue)

Set the background value used in order to identify a background pixel
in the input image.

*/
public ";

%javamethodmodifiers  rtk::simple::SimpleContourExtractorImageFilter::SetInputForegroundValue "/**
Self& rtk::simple::SimpleContourExtractorImageFilter::SetInputForegroundValue(double InputForegroundValue)

Set the foreground value used in order to identify a foreground pixel
in the input image.

*/
public ";

%javamethodmodifiers  rtk::simple::SimpleContourExtractorImageFilter::SetOutputBackgroundValue "/**
Self& rtk::simple::SimpleContourExtractorImageFilter::SetOutputBackgroundValue(double OutputBackgroundValue)

Set the background value used in order to identify a background pixel
in the output image.

*/
public ";

%javamethodmodifiers  rtk::simple::SimpleContourExtractorImageFilter::SetOutputForegroundValue "/**
Self& rtk::simple::SimpleContourExtractorImageFilter::SetOutputForegroundValue(double OutputForegroundValue)

Set the foreground value used in order to identify a foreground pixel
in the output image.

*/
public ";

%javamethodmodifiers  rtk::simple::SimpleContourExtractorImageFilter::SetRadius "/**
Self& rtk::simple::SimpleContourExtractorImageFilter::SetRadius(const std::vector< unsigned int > &Radius)
*/
public ";

%javamethodmodifiers  rtk::simple::SimpleContourExtractorImageFilter::SetRadius "/**
Self& rtk::simple::SimpleContourExtractorImageFilter::SetRadius(unsigned int value)

Set the values of the Radius vector all to value

*/
public ";

%javamethodmodifiers  rtk::simple::SimpleContourExtractorImageFilter::SimpleContourExtractorImageFilter "/**
rtk::simple::SimpleContourExtractorImageFilter::SimpleContourExtractorImageFilter()

Default Constructor that takes no arguments and initializes default
parameters

*/
public ";

%javamethodmodifiers  rtk::simple::SimpleContourExtractorImageFilter::ToString "/**
std::string rtk::simple::SimpleContourExtractorImageFilter::ToString() const

Print ourselves out

*/
public ";

%javamethodmodifiers  rtk::simple::SimpleContourExtractorImageFilter::~SimpleContourExtractorImageFilter "/**
rtk::simple::SimpleContourExtractorImageFilter::~SimpleContourExtractorImageFilter()

Destructor

*/
public ";


%typemap(javaimports) rtk::simple::SinImageFilter "/**

Computes the sine of each pixel.


The computations are performed using std::sin(x).

Wiki Examples:

All Examples

Compute the sine of each pixel.
See:
 rtk::simple::Sin for the procedural interface

 itk::SinImageFilter for the Doxygen on the original ITK class.



C++ includes: srtkSinImageFilter.h
*/"

%javamethodmodifiers  rtk::simple::SinImageFilter::Execute "/**
Image rtk::simple::SinImageFilter::Execute(const Image &image1)

Execute the filter on the input image

*/
public ";

%javamethodmodifiers  rtk::simple::SinImageFilter::GetName "/**
std::string rtk::simple::SinImageFilter::GetName() const

Name of this class

*/
public ";

%javamethodmodifiers  rtk::simple::SinImageFilter::SinImageFilter "/**
rtk::simple::SinImageFilter::SinImageFilter()

Default Constructor that takes no arguments and initializes default
parameters

*/
public ";

%javamethodmodifiers  rtk::simple::SinImageFilter::ToString "/**
std::string rtk::simple::SinImageFilter::ToString() const

Print ourselves out

*/
public ";

%javamethodmodifiers  rtk::simple::SinImageFilter::~SinImageFilter "/**
rtk::simple::SinImageFilter::~SinImageFilter()

Destructor

*/
public ";


%typemap(javaimports) rtk::simple::SliceImageFilter "/**


See:
 rtk::simple::Slice for the procedural interface

 itk::SliceImageFilter for the Doxygen on the original ITK class.


C++ includes: srtkSliceImageFilter.h
*/"

%javamethodmodifiers  rtk::simple::SliceImageFilter::Execute "/**
Image rtk::simple::SliceImageFilter::Execute(const Image &image1)

Execute the filter on the input image

*/
public ";

%javamethodmodifiers  rtk::simple::SliceImageFilter::Execute "/**
Image rtk::simple::SliceImageFilter::Execute(const Image &image1, const std::vector< int32_t > &start, const
std::vector< int32_t > &stop, const std::vector< int > &step)

Execute the filter on the input image with the given parameters

*/
public ";

%javamethodmodifiers  rtk::simple::SliceImageFilter::GetName "/**
std::string rtk::simple::SliceImageFilter::GetName() const

Name of this class

*/
public ";

%javamethodmodifiers  rtk::simple::SliceImageFilter::GetStart "/**
std::vector<int32_t> rtk::simple::SliceImageFilter::GetStart() const
*/
public ";

%javamethodmodifiers  rtk::simple::SliceImageFilter::GetStep "/**
std::vector<int> rtk::simple::SliceImageFilter::GetStep() const
*/
public ";

%javamethodmodifiers  rtk::simple::SliceImageFilter::GetStop "/**
std::vector<int32_t> rtk::simple::SliceImageFilter::GetStop() const
*/
public ";

%javamethodmodifiers  rtk::simple::SliceImageFilter::SetStart "/**
Self& rtk::simple::SliceImageFilter::SetStart(const std::vector< int32_t > &Start)
*/
public ";

%javamethodmodifiers  rtk::simple::SliceImageFilter::SetStep "/**
Self& rtk::simple::SliceImageFilter::SetStep(const std::vector< int > &Step)
*/
public ";

%javamethodmodifiers  rtk::simple::SliceImageFilter::SetStep "/**
Self& rtk::simple::SliceImageFilter::SetStep(int value)

Set the values of the Step vector all to value

*/
public ";

%javamethodmodifiers  rtk::simple::SliceImageFilter::SetStop "/**
Self& rtk::simple::SliceImageFilter::SetStop(const std::vector< int32_t > &Stop)
*/
public ";

%javamethodmodifiers  rtk::simple::SliceImageFilter::SliceImageFilter "/**
rtk::simple::SliceImageFilter::SliceImageFilter()

Default Constructor that takes no arguments and initializes default
parameters

*/
public ";

%javamethodmodifiers  rtk::simple::SliceImageFilter::ToString "/**
std::string rtk::simple::SliceImageFilter::ToString() const

Print ourselves out

*/
public ";

%javamethodmodifiers  rtk::simple::SliceImageFilter::~SliceImageFilter "/**
rtk::simple::SliceImageFilter::~SliceImageFilter()

Destructor

*/
public ";


%typemap(javaimports) rtk::simple::SmoothingRecursiveGaussianImageFilter "/**

Computes the smoothing of an image by convolution with the Gaussian
kernels implemented as IIR filters.


This filter is implemented using the recursive gaussian filters. For
multi-component images, the filter works on each component
independently.

For this filter to be able to run in-place the input and output image
types need to be the same and/or the same type as the RealImageType.

Wiki Examples:

All Examples

Gaussian smoothing that works with image adaptors
See:
 rtk::simple::SmoothingRecursiveGaussian for the procedural interface

 itk::SmoothingRecursiveGaussianImageFilter for the Doxygen on the original ITK class.



C++ includes: srtkSmoothingRecursiveGaussianImageFilter.h
*/"

%javamethodmodifiers  rtk::simple::SmoothingRecursiveGaussianImageFilter::Execute "/**
Image rtk::simple::SmoothingRecursiveGaussianImageFilter::Execute(const Image &image1)

Execute the filter on the input image

*/
public ";

%javamethodmodifiers  rtk::simple::SmoothingRecursiveGaussianImageFilter::Execute "/**
Image rtk::simple::SmoothingRecursiveGaussianImageFilter::Execute(const Image &image1, double sigma, bool normalizeAcrossScale)

Execute the filter on the input image with the given parameters

*/
public ";

%javamethodmodifiers  rtk::simple::SmoothingRecursiveGaussianImageFilter::GetName "/**
std::string rtk::simple::SmoothingRecursiveGaussianImageFilter::GetName() const

Name of this class

*/
public ";

%javamethodmodifiers  rtk::simple::SmoothingRecursiveGaussianImageFilter::GetNormalizeAcrossScale "/**
bool rtk::simple::SmoothingRecursiveGaussianImageFilter::GetNormalizeAcrossScale() const

This method does not effect the output of this filter.
See:
 RecursiveGaussianImageFilter::SetNormalizeAcrossScale


*/
public ";

%javamethodmodifiers  rtk::simple::SmoothingRecursiveGaussianImageFilter::GetSigma "/**
double rtk::simple::SmoothingRecursiveGaussianImageFilter::GetSigma() const
*/
public ";

%javamethodmodifiers  rtk::simple::SmoothingRecursiveGaussianImageFilter::NormalizeAcrossScaleOff "/**
Self& rtk::simple::SmoothingRecursiveGaussianImageFilter::NormalizeAcrossScaleOff()
*/
public ";

%javamethodmodifiers  rtk::simple::SmoothingRecursiveGaussianImageFilter::NormalizeAcrossScaleOn "/**
Self& rtk::simple::SmoothingRecursiveGaussianImageFilter::NormalizeAcrossScaleOn()

Set the value of NormalizeAcrossScale to true or false respectfully.

*/
public ";

%javamethodmodifiers  rtk::simple::SmoothingRecursiveGaussianImageFilter::SetNormalizeAcrossScale "/**
Self& rtk::simple::SmoothingRecursiveGaussianImageFilter::SetNormalizeAcrossScale(bool NormalizeAcrossScale)

This method does not effect the output of this filter.
See:
 RecursiveGaussianImageFilter::SetNormalizeAcrossScale


*/
public ";

%javamethodmodifiers  rtk::simple::SmoothingRecursiveGaussianImageFilter::SetSigma "/**
Self& rtk::simple::SmoothingRecursiveGaussianImageFilter::SetSigma(double Sigma)

Set Sigma value. Sigma is measured in the units of image spacing. You
may use the method SetSigma to set the same value across each axis or
use the method SetSigmaArray if you need different values along each
axis.

*/
public ";

%javamethodmodifiers  rtk::simple::SmoothingRecursiveGaussianImageFilter::SmoothingRecursiveGaussianImageFilter "/**
rtk::simple::SmoothingRecursiveGaussianImageFilter::SmoothingRecursiveGaussianImageFilter()

Default Constructor that takes no arguments and initializes default
parameters

*/
public ";

%javamethodmodifiers  rtk::simple::SmoothingRecursiveGaussianImageFilter::ToString "/**
std::string rtk::simple::SmoothingRecursiveGaussianImageFilter::ToString() const

Print ourselves out

*/
public ";

%javamethodmodifiers  rtk::simple::SmoothingRecursiveGaussianImageFilter::~SmoothingRecursiveGaussianImageFilter "/**
rtk::simple::SmoothingRecursiveGaussianImageFilter::~SmoothingRecursiveGaussianImageFilter()

Destructor

*/
public ";


%typemap(javaimports) rtk::simple::SobelEdgeDetectionImageFilter "/**

A 2D or 3D edge detection using the Sobel operator.


This filter uses the Sobel operator to calculate the image gradient
and then finds the magnitude of this gradient vector. The Sobel
gradient magnitude (square-root sum of squares) is an indication of
edge strength.


See:
 ImageToImageFilter


 SobelOperator


 Neighborhood


 NeighborhoodOperator


 NeighborhoodIterator
Wiki Examples:

All Examples

SobelEdgeDetectionImageFilter
See:
 rtk::simple::SobelEdgeDetection for the procedural interface

 itk::SobelEdgeDetectionImageFilter for the Doxygen on the original ITK class.



C++ includes: srtkSobelEdgeDetectionImageFilter.h
*/"

%javamethodmodifiers  rtk::simple::SobelEdgeDetectionImageFilter::Execute "/**
Image rtk::simple::SobelEdgeDetectionImageFilter::Execute(const Image &image1)

Execute the filter on the input image

*/
public ";

%javamethodmodifiers  rtk::simple::SobelEdgeDetectionImageFilter::GetName "/**
std::string rtk::simple::SobelEdgeDetectionImageFilter::GetName() const

Name of this class

*/
public ";

%javamethodmodifiers  rtk::simple::SobelEdgeDetectionImageFilter::SobelEdgeDetectionImageFilter "/**
rtk::simple::SobelEdgeDetectionImageFilter::SobelEdgeDetectionImageFilter()

Default Constructor that takes no arguments and initializes default
parameters

*/
public ";

%javamethodmodifiers  rtk::simple::SobelEdgeDetectionImageFilter::ToString "/**
std::string rtk::simple::SobelEdgeDetectionImageFilter::ToString() const

Print ourselves out

*/
public ";

%javamethodmodifiers  rtk::simple::SobelEdgeDetectionImageFilter::~SobelEdgeDetectionImageFilter "/**
rtk::simple::SobelEdgeDetectionImageFilter::~SobelEdgeDetectionImageFilter()

Destructor

*/
public ";


%typemap(javaimports) rtk::simple::SpeckleNoiseImageFilter "/**

Alter an image with speckle (multiplicative) noise.


The speckle noise follows a Gamma distribution of mean 1 and standard
deviation provided by the user. The noise is proportional to the pixel
intensity.


Gaetan Lehmann
 This code was contributed in the Insight Journal paper \"Noise
Simulation\". https://hdl.handle.net/10380/3158
See:
 rtk::simple::SpeckleNoise for the procedural interface

 itk::SpeckleNoiseImageFilter for the Doxygen on the original ITK class.


C++ includes: srtkSpeckleNoiseImageFilter.h
*/"

%javamethodmodifiers  rtk::simple::SpeckleNoiseImageFilter::Execute "/**
Image rtk::simple::SpeckleNoiseImageFilter::Execute(const Image &image1)

Execute the filter on the input image

*/
public ";

%javamethodmodifiers  rtk::simple::SpeckleNoiseImageFilter::Execute "/**
Image rtk::simple::SpeckleNoiseImageFilter::Execute(const Image &image1, double standardDeviation, uint32_t seed)

Execute the filter on the input image with the given parameters

*/
public ";

%javamethodmodifiers  rtk::simple::SpeckleNoiseImageFilter::GetName "/**
std::string rtk::simple::SpeckleNoiseImageFilter::GetName() const

Name of this class

*/
public ";

%javamethodmodifiers  rtk::simple::SpeckleNoiseImageFilter::GetSeed "/**
uint32_t rtk::simple::SpeckleNoiseImageFilter::GetSeed() const
*/
public ";

%javamethodmodifiers  rtk::simple::SpeckleNoiseImageFilter::GetStandardDeviation "/**
double rtk::simple::SpeckleNoiseImageFilter::GetStandardDeviation() const
*/
public ";

%javamethodmodifiers  rtk::simple::SpeckleNoiseImageFilter::SetSeed "/**
Self& rtk::simple::SpeckleNoiseImageFilter::SetSeed(uint32_t Seed)
*/
public ";

%javamethodmodifiers  rtk::simple::SpeckleNoiseImageFilter::SetStandardDeviation "/**
Self& rtk::simple::SpeckleNoiseImageFilter::SetStandardDeviation(double StandardDeviation)
*/
public ";

%javamethodmodifiers  rtk::simple::SpeckleNoiseImageFilter::SpeckleNoiseImageFilter "/**
rtk::simple::SpeckleNoiseImageFilter::SpeckleNoiseImageFilter()

Default Constructor that takes no arguments and initializes default
parameters

*/
public ";

%javamethodmodifiers  rtk::simple::SpeckleNoiseImageFilter::ToString "/**
std::string rtk::simple::SpeckleNoiseImageFilter::ToString() const

Print ourselves out

*/
public ";

%javamethodmodifiers  rtk::simple::SpeckleNoiseImageFilter::~SpeckleNoiseImageFilter "/**
rtk::simple::SpeckleNoiseImageFilter::~SpeckleNoiseImageFilter()

Destructor

*/
public ";


%typemap(javaimports) rtk::simple::SqrtImageFilter "/**

Computes the square root of each pixel.


The computations are performed using std::sqrt(x).
See:
 rtk::simple::Sqrt for the procedural interface

 itk::SqrtImageFilter for the Doxygen on the original ITK class.


C++ includes: srtkSqrtImageFilter.h
*/"

%javamethodmodifiers  rtk::simple::SqrtImageFilter::Execute "/**
Image rtk::simple::SqrtImageFilter::Execute(const Image &image1)

Execute the filter on the input image

*/
public ";

%javamethodmodifiers  rtk::simple::SqrtImageFilter::GetName "/**
std::string rtk::simple::SqrtImageFilter::GetName() const

Name of this class

*/
public ";

%javamethodmodifiers  rtk::simple::SqrtImageFilter::SqrtImageFilter "/**
rtk::simple::SqrtImageFilter::SqrtImageFilter()

Default Constructor that takes no arguments and initializes default
parameters

*/
public ";

%javamethodmodifiers  rtk::simple::SqrtImageFilter::ToString "/**
std::string rtk::simple::SqrtImageFilter::ToString() const

Print ourselves out

*/
public ";

%javamethodmodifiers  rtk::simple::SqrtImageFilter::~SqrtImageFilter "/**
rtk::simple::SqrtImageFilter::~SqrtImageFilter()

Destructor

*/
public ";


%typemap(javaimports) rtk::simple::SquareImageFilter "/**

Computes the square of the intensity values pixel-wise.


Wiki Examples:

All Examples

Square every pixel in an image
See:
 rtk::simple::Square for the procedural interface

 itk::SquareImageFilter for the Doxygen on the original ITK class.



C++ includes: srtkSquareImageFilter.h
*/"

%javamethodmodifiers  rtk::simple::SquareImageFilter::Execute "/**
Image rtk::simple::SquareImageFilter::Execute(const Image &image1)

Execute the filter on the input image

*/
public ";

%javamethodmodifiers  rtk::simple::SquareImageFilter::GetName "/**
std::string rtk::simple::SquareImageFilter::GetName() const

Name of this class

*/
public ";

%javamethodmodifiers  rtk::simple::SquareImageFilter::SquareImageFilter "/**
rtk::simple::SquareImageFilter::SquareImageFilter()

Default Constructor that takes no arguments and initializes default
parameters

*/
public ";

%javamethodmodifiers  rtk::simple::SquareImageFilter::ToString "/**
std::string rtk::simple::SquareImageFilter::ToString() const

Print ourselves out

*/
public ";

%javamethodmodifiers  rtk::simple::SquareImageFilter::~SquareImageFilter "/**
rtk::simple::SquareImageFilter::~SquareImageFilter()

Destructor

*/
public ";


%typemap(javaimports) rtk::simple::SquaredDifferenceImageFilter "/**

Implements pixel-wise the computation of squared difference.


This filter is parametrized over the types of the two input images and
the type of the output image.

Numeric conversions (castings) are done by the C++ defaults.

The filter will walk over all the pixels in the two input images, and
for each one of them it will do the following:


cast the input 1 pixel value to double

cast the input 2 pixel value to double

compute the difference of the two pixel values

compute the square of the difference

cast the double value resulting from sqr() to the pixel type of the output image

store the casted value into the output image.
 The filter expect all images to have the same dimension (e.g. all 2D,
or all 3D, or all ND)

Wiki Examples:

All Examples

Compute the squared difference of corresponding pixels in two images
See:
 rtk::simple::SquaredDifference for the procedural interface

 itk::SquaredDifferenceImageFilter for the Doxygen on the original ITK class.



C++ includes: srtkSquaredDifferenceImageFilter.h
*/"

%javamethodmodifiers  rtk::simple::SquaredDifferenceImageFilter::Execute "/**
Image rtk::simple::SquaredDifferenceImageFilter::Execute(const Image &image1, const Image &image2)

Execute the filter on the input images

*/
public ";

%javamethodmodifiers  rtk::simple::SquaredDifferenceImageFilter::Execute "/**
Image rtk::simple::SquaredDifferenceImageFilter::Execute(const Image &image1, double constant)

Execute the filter with an image and a constant

*/
public ";

%javamethodmodifiers  rtk::simple::SquaredDifferenceImageFilter::Execute "/**
Image rtk::simple::SquaredDifferenceImageFilter::Execute(double constant, const Image &image2)
*/
public ";

%javamethodmodifiers  rtk::simple::SquaredDifferenceImageFilter::GetName "/**
std::string rtk::simple::SquaredDifferenceImageFilter::GetName() const

Name of this class

*/
public ";

%javamethodmodifiers  rtk::simple::SquaredDifferenceImageFilter::SquaredDifferenceImageFilter "/**
rtk::simple::SquaredDifferenceImageFilter::SquaredDifferenceImageFilter()

Default Constructor that takes no arguments and initializes default
parameters

*/
public ";

%javamethodmodifiers  rtk::simple::SquaredDifferenceImageFilter::ToString "/**
std::string rtk::simple::SquaredDifferenceImageFilter::ToString() const

Print ourselves out

*/
public ";

%javamethodmodifiers  rtk::simple::SquaredDifferenceImageFilter::~SquaredDifferenceImageFilter "/**
rtk::simple::SquaredDifferenceImageFilter::~SquaredDifferenceImageFilter()

Destructor

*/
public ";


%typemap(javaimports) rtk::simple::StandardDeviationProjectionImageFilter "/**

Mean projection.


This class was contributed to the Insight Journal by Gaetan Lehmann.
The original paper can be found at https://hdl.handle.net/1926/164


Gaetan Lehmann. Biologie du Developpement et de la Reproduction, INRA
de Jouy-en-Josas, France.

See:
 ProjectionImageFilter


 MedianProjectionImageFilter


 MeanProjectionImageFilter


 SumProjectionImageFilter


 MeanProjectionImageFilter


 MaximumProjectionImageFilter


 MinimumProjectionImageFilter


 BinaryProjectionImageFilter

 rtk::simple::StandardDeviationProjection for the procedural interface

 itk::StandardDeviationProjectionImageFilter for the Doxygen on the original ITK class.


C++ includes: srtkStandardDeviationProjectionImageFilter.h
*/"

%javamethodmodifiers  rtk::simple::StandardDeviationProjectionImageFilter::Execute "/**
Image rtk::simple::StandardDeviationProjectionImageFilter::Execute(const Image &image1)

Execute the filter on the input image

*/
public ";

%javamethodmodifiers  rtk::simple::StandardDeviationProjectionImageFilter::Execute "/**
Image rtk::simple::StandardDeviationProjectionImageFilter::Execute(const Image &image1, unsigned int projectionDimension)

Execute the filter on the input image with the given parameters

*/
public ";

%javamethodmodifiers  rtk::simple::StandardDeviationProjectionImageFilter::GetName "/**
std::string rtk::simple::StandardDeviationProjectionImageFilter::GetName() const

Name of this class

*/
public ";

%javamethodmodifiers  rtk::simple::StandardDeviationProjectionImageFilter::GetProjectionDimension "/**
unsigned int rtk::simple::StandardDeviationProjectionImageFilter::GetProjectionDimension() const
*/
public ";

%javamethodmodifiers  rtk::simple::StandardDeviationProjectionImageFilter::SetProjectionDimension "/**
Self& rtk::simple::StandardDeviationProjectionImageFilter::SetProjectionDimension(unsigned int ProjectionDimension)
*/
public ";

%javamethodmodifiers  rtk::simple::StandardDeviationProjectionImageFilter::StandardDeviationProjectionImageFilter "/**
rtk::simple::StandardDeviationProjectionImageFilter::StandardDeviationProjectionImageFilter()

Default Constructor that takes no arguments and initializes default
parameters

*/
public ";

%javamethodmodifiers  rtk::simple::StandardDeviationProjectionImageFilter::ToString "/**
std::string rtk::simple::StandardDeviationProjectionImageFilter::ToString() const

Print ourselves out

*/
public ";

%javamethodmodifiers  rtk::simple::StandardDeviationProjectionImageFilter::~StandardDeviationProjectionImageFilter "/**
rtk::simple::StandardDeviationProjectionImageFilter::~StandardDeviationProjectionImageFilter()

Destructor

*/
public ";


%typemap(javaimports) rtk::simple::StatisticsImageFilter "/**

Compute min. max, variance and mean of an Image .


StatisticsImageFilter computes the minimum, maximum, sum, mean, variance sigma of an image.
The filter needs all of its input image. It behaves as a filter with
an input and output. Thus it can be inserted in a pipline with other
filters and the statistics will only be recomputed if a downstream
filter changes.

The filter passes its input through unmodified. The filter is
threaded. It computes statistics in each thread then combines them in
its AfterThreadedGenerate method.

Wiki Examples:

All Examples

Compute min, max, variance and mean of an Image.

See:
 itk::StatisticsImageFilter for the Doxygen on the original ITK class.


C++ includes: srtkStatisticsImageFilter.h
*/"

%javamethodmodifiers  rtk::simple::StatisticsImageFilter::Execute "/**
Image rtk::simple::StatisticsImageFilter::Execute(const Image &image1)

Execute the filter on the input image

*/
public ";

%javamethodmodifiers  rtk::simple::StatisticsImageFilter::GetMaximum "/**
double rtk::simple::StatisticsImageFilter::GetMaximum() const

Return the computed Maximum.

This is a measurement. Its value is updated in the Execute methods, so
the value will only be valid after an execution.

*/
public ";

%javamethodmodifiers  rtk::simple::StatisticsImageFilter::GetMean "/**
double rtk::simple::StatisticsImageFilter::GetMean() const

Return the computed Mean.

This is a measurement. Its value is updated in the Execute methods, so
the value will only be valid after an execution.

*/
public ";

%javamethodmodifiers  rtk::simple::StatisticsImageFilter::GetMinimum "/**
double rtk::simple::StatisticsImageFilter::GetMinimum() const

Return the computed Minimum.

This is a measurement. Its value is updated in the Execute methods, so
the value will only be valid after an execution.

*/
public ";

%javamethodmodifiers  rtk::simple::StatisticsImageFilter::GetName "/**
std::string rtk::simple::StatisticsImageFilter::GetName() const

Name of this class

*/
public ";

%javamethodmodifiers  rtk::simple::StatisticsImageFilter::GetSigma "/**
double rtk::simple::StatisticsImageFilter::GetSigma() const

Return the computed Standard Deviation.

This is a measurement. Its value is updated in the Execute methods, so
the value will only be valid after an execution.

*/
public ";

%javamethodmodifiers  rtk::simple::StatisticsImageFilter::GetSum "/**
double rtk::simple::StatisticsImageFilter::GetSum() const

Return the compute Sum.

This is a measurement. Its value is updated in the Execute methods, so
the value will only be valid after an execution.

*/
public ";

%javamethodmodifiers  rtk::simple::StatisticsImageFilter::GetVariance "/**
double rtk::simple::StatisticsImageFilter::GetVariance() const

Return the computed Variance.

This is a measurement. Its value is updated in the Execute methods, so
the value will only be valid after an execution.

*/
public ";

%javamethodmodifiers  rtk::simple::StatisticsImageFilter::StatisticsImageFilter "/**
rtk::simple::StatisticsImageFilter::StatisticsImageFilter()

Default Constructor that takes no arguments and initializes default
parameters

*/
public ";

%javamethodmodifiers  rtk::simple::StatisticsImageFilter::ToString "/**
std::string rtk::simple::StatisticsImageFilter::ToString() const

Print ourselves out

*/
public ";

%javamethodmodifiers  rtk::simple::StatisticsImageFilter::~StatisticsImageFilter "/**
rtk::simple::StatisticsImageFilter::~StatisticsImageFilter()

Destructor

*/
public ";


%typemap(javaimports) rtk::simple::SubtractImageFilter "/**

Pixel-wise subtraction of two images.


Subtract each pixel from image2 from its corresponding pixel in
image1:


This is done using


This class is templated over the types of the two input images and the
type of the output image. Numeric conversions (castings) are done by
the C++ defaults.

Additionally, a constant can be subtracted from every pixel in an
image using:



The result of AddImageFilter with a negative constant is not necessarily the same as SubtractImageFilter . This would be the case when the PixelType defines an operator-() that is not the inverse of operator+()
Wiki Examples:

All Examples

Subtract two images

Subtract a constant from every pixel in an image
See:
 rtk::simple::Subtract for the procedural interface

 itk::SubtractImageFilter for the Doxygen on the original ITK class.



C++ includes: srtkSubtractImageFilter.h
*/"

%javamethodmodifiers  rtk::simple::SubtractImageFilter::Execute "/**
Image rtk::simple::SubtractImageFilter::Execute(const Image &image1, const Image &image2)

Execute the filter on the input images

*/
public ";

%javamethodmodifiers  rtk::simple::SubtractImageFilter::Execute "/**
Image rtk::simple::SubtractImageFilter::Execute(const Image &image1, double constant)

Execute the filter with an image and a constant

*/
public ";

%javamethodmodifiers  rtk::simple::SubtractImageFilter::Execute "/**
Image rtk::simple::SubtractImageFilter::Execute(double constant, const Image &image2)
*/
public ";

%javamethodmodifiers  rtk::simple::SubtractImageFilter::GetName "/**
std::string rtk::simple::SubtractImageFilter::GetName() const

Name of this class

*/
public ";

%javamethodmodifiers  rtk::simple::SubtractImageFilter::SubtractImageFilter "/**
rtk::simple::SubtractImageFilter::SubtractImageFilter()

Default Constructor that takes no arguments and initializes default
parameters

*/
public ";

%javamethodmodifiers  rtk::simple::SubtractImageFilter::ToString "/**
std::string rtk::simple::SubtractImageFilter::ToString() const

Print ourselves out

*/
public ";

%javamethodmodifiers  rtk::simple::SubtractImageFilter::~SubtractImageFilter "/**
rtk::simple::SubtractImageFilter::~SubtractImageFilter()

Destructor

*/
public ";


%typemap(javaimports) rtk::simple::SumProjectionImageFilter "/**

Sum projection.


This class was contributed to the Insight Journal by Gaetan Lehmann.
The original paper can be found at https://hdl.handle.net/1926/164


Gaetan Lehmann. Biologie du Developpement et de la Reproduction, INRA
de Jouy-en-Josas, France.

See:
 ProjectionImageFilter


 MedianProjectionImageFilter


 MeanProjectionImageFilter


 MeanProjectionImageFilter


 MaximumProjectionImageFilter


 MinimumProjectionImageFilter


 BinaryProjectionImageFilter


 StandardDeviationProjectionImageFilter

 rtk::simple::SumProjection for the procedural interface

 itk::SumProjectionImageFilter for the Doxygen on the original ITK class.


C++ includes: srtkSumProjectionImageFilter.h
*/"

%javamethodmodifiers  rtk::simple::SumProjectionImageFilter::Execute "/**
Image rtk::simple::SumProjectionImageFilter::Execute(const Image &image1)

Execute the filter on the input image

*/
public ";

%javamethodmodifiers  rtk::simple::SumProjectionImageFilter::Execute "/**
Image rtk::simple::SumProjectionImageFilter::Execute(const Image &image1, unsigned int projectionDimension)

Execute the filter on the input image with the given parameters

*/
public ";

%javamethodmodifiers  rtk::simple::SumProjectionImageFilter::GetName "/**
std::string rtk::simple::SumProjectionImageFilter::GetName() const

Name of this class

*/
public ";

%javamethodmodifiers  rtk::simple::SumProjectionImageFilter::GetProjectionDimension "/**
unsigned int rtk::simple::SumProjectionImageFilter::GetProjectionDimension() const
*/
public ";

%javamethodmodifiers  rtk::simple::SumProjectionImageFilter::SetProjectionDimension "/**
Self& rtk::simple::SumProjectionImageFilter::SetProjectionDimension(unsigned int ProjectionDimension)
*/
public ";

%javamethodmodifiers  rtk::simple::SumProjectionImageFilter::SumProjectionImageFilter "/**
rtk::simple::SumProjectionImageFilter::SumProjectionImageFilter()

Default Constructor that takes no arguments and initializes default
parameters

*/
public ";

%javamethodmodifiers  rtk::simple::SumProjectionImageFilter::ToString "/**
std::string rtk::simple::SumProjectionImageFilter::ToString() const

Print ourselves out

*/
public ";

%javamethodmodifiers  rtk::simple::SumProjectionImageFilter::~SumProjectionImageFilter "/**
rtk::simple::SumProjectionImageFilter::~SumProjectionImageFilter()

Destructor

*/
public ";


%typemap(javaimports) rtk::simple::SymmetricForcesDemonsRegistrationFilter "/**

Deformably register two images using the demons algorithm.


This class was contributed by Corinne Mattmann, ETH Zurich,
Switzerland. based on a variation of the DemonsRegistrationFilter . The basic modification is to use equation (5) from Thirion's paper
along with the modification for avoiding large deformations when
gradients have small values.

SymmetricForcesDemonsRegistrationFilter implements the demons deformable algorithm that register two images
by computing the deformation field which will map a moving image onto
a fixed image.

A deformation field is represented as a image whose pixel type is some
vector type with at least N elements, where N is the dimension of the
fixed image. The vector type must support element access via operator
[]. It is assumed that the vector elements behave like floating point
scalars.

This class is templated over the fixed image type, moving image type
and the deformation field type.

The input fixed and moving images are set via methods SetFixedImage
and SetMovingImage respectively. An initial deformation field maybe
set via SetInitialDisplacementField or SetInput. If no initial field
is set, a zero field is used as the initial condition.

The algorithm has one parameters: the number of iteration to be
performed.

The output deformation field can be obtained via methods GetOutput or
GetDisplacementField.

This class make use of the finite difference solver hierarchy. Update
for each iteration is computed in DemonsRegistrationFunction .


WARNING:
This filter assumes that the fixed image type, moving image type and
deformation field type all have the same number of dimensions.

See:
 SymmetricForcesDemonsRegistrationFunction


 DemonsRegistrationFilter


 DemonsRegistrationFunction

 itk::SymmetricForcesDemonsRegistrationFilter for the Doxygen on the original ITK class.


C++ includes: srtkSymmetricForcesDemonsRegistrationFilter.h
*/"

%javamethodmodifiers  rtk::simple::SymmetricForcesDemonsRegistrationFilter::Execute "/**
Image rtk::simple::SymmetricForcesDemonsRegistrationFilter::Execute(const Image &fixedImage, const Image &movingImage, const Image
&initialDisplacementField)

Execute the filter on the input image

*/
public ";

%javamethodmodifiers  rtk::simple::SymmetricForcesDemonsRegistrationFilter::Execute "/**
Image rtk::simple::SymmetricForcesDemonsRegistrationFilter::Execute(const Image &fixedImage, const Image &movingImage)
*/
public ";

%javamethodmodifiers  rtk::simple::SymmetricForcesDemonsRegistrationFilter::Execute "/**
Image rtk::simple::SymmetricForcesDemonsRegistrationFilter::Execute(const Image &fixedImage, const Image &movingImage, const Image
&initialDisplacementField, const std::vector< double >
&standardDeviations, uint32_t numberOfIterations, double
maximumRMSError, bool smoothDisplacementField, bool smoothUpdateField,
const std::vector< double > &updateFieldStandardDeviations, unsigned
int maximumKernelWidth, double maximumError, double
intensityDifferenceThreshold, bool useImageSpacing)

Execute the filter on the input image with the given parameters

*/
public ";

%javamethodmodifiers  rtk::simple::SymmetricForcesDemonsRegistrationFilter::Execute "/**
Image rtk::simple::SymmetricForcesDemonsRegistrationFilter::Execute(const Image &fixedImage, const Image &movingImage, const std::vector<
double > &standardDeviations, uint32_t numberOfIterations, double
maximumRMSError, bool smoothDisplacementField, bool smoothUpdateField,
const std::vector< double > &updateFieldStandardDeviations, unsigned
int maximumKernelWidth, double maximumError, double
intensityDifferenceThreshold, bool useImageSpacing)
*/
public ";

%javamethodmodifiers  rtk::simple::SymmetricForcesDemonsRegistrationFilter::GetElapsedIterations "/**
uint32_t rtk::simple::SymmetricForcesDemonsRegistrationFilter::GetElapsedIterations() const

Number of iterations run.


This is an active measurement. It may be accessed while the filter is
being executing in command call-backs and can be accessed after
execution.

*/
public ";

%javamethodmodifiers  rtk::simple::SymmetricForcesDemonsRegistrationFilter::GetIntensityDifferenceThreshold "/**
double rtk::simple::SymmetricForcesDemonsRegistrationFilter::GetIntensityDifferenceThreshold() const
*/
public ";

%javamethodmodifiers  rtk::simple::SymmetricForcesDemonsRegistrationFilter::GetMaximumError "/**
double rtk::simple::SymmetricForcesDemonsRegistrationFilter::GetMaximumError() const

Set/Get the desired maximum error of the Guassian kernel approximate.

*/
public ";

%javamethodmodifiers  rtk::simple::SymmetricForcesDemonsRegistrationFilter::GetMaximumKernelWidth "/**
unsigned int rtk::simple::SymmetricForcesDemonsRegistrationFilter::GetMaximumKernelWidth() const

Set/Get the desired limits of the Gaussian kernel width.

*/
public ";

%javamethodmodifiers  rtk::simple::SymmetricForcesDemonsRegistrationFilter::GetMaximumRMSError "/**
double rtk::simple::SymmetricForcesDemonsRegistrationFilter::GetMaximumRMSError() const
*/
public ";

%javamethodmodifiers  rtk::simple::SymmetricForcesDemonsRegistrationFilter::GetMetric "/**
double rtk::simple::SymmetricForcesDemonsRegistrationFilter::GetMetric() const

Get the metric value. The metric value is the mean square difference
in intensity between the fixed image and transforming moving image
computed over the the overlapping region between the two images. This
value is calculated for the current iteration

This is an active measurement. It may be accessed while the filter is
being executing in command call-backs and can be accessed after
execution.

*/
public ";

%javamethodmodifiers  rtk::simple::SymmetricForcesDemonsRegistrationFilter::GetName "/**
std::string rtk::simple::SymmetricForcesDemonsRegistrationFilter::GetName() const

Name of this class

*/
public ";

%javamethodmodifiers  rtk::simple::SymmetricForcesDemonsRegistrationFilter::GetNumberOfIterations "/**
uint32_t rtk::simple::SymmetricForcesDemonsRegistrationFilter::GetNumberOfIterations() const
*/
public ";

%javamethodmodifiers  rtk::simple::SymmetricForcesDemonsRegistrationFilter::GetRMSChange "/**
double rtk::simple::SymmetricForcesDemonsRegistrationFilter::GetRMSChange() const

Set/Get the root mean squared change of the previous iteration. May
not be used by all solvers.

This is a measurement. Its value is updated in the Execute methods, so
the value will only be valid after an execution.

*/
public ";

%javamethodmodifiers  rtk::simple::SymmetricForcesDemonsRegistrationFilter::GetSmoothDisplacementField "/**
bool rtk::simple::SymmetricForcesDemonsRegistrationFilter::GetSmoothDisplacementField() const

Set/Get whether the displacement field is smoothed (regularized).
Smoothing the displacement yields a solution elastic in nature. If
SmoothDisplacementField is on, then the displacement field is smoothed
with a Gaussian whose standard deviations are specified with SetStandardDeviations()

*/
public ";

%javamethodmodifiers  rtk::simple::SymmetricForcesDemonsRegistrationFilter::GetSmoothUpdateField "/**
bool rtk::simple::SymmetricForcesDemonsRegistrationFilter::GetSmoothUpdateField() const

Set/Get whether the update field is smoothed (regularized). Smoothing
the update field yields a solution viscous in nature. If
SmoothUpdateField is on, then the update field is smoothed with a
Gaussian whose standard deviations are specified with SetUpdateFieldStandardDeviations()

*/
public ";

%javamethodmodifiers  rtk::simple::SymmetricForcesDemonsRegistrationFilter::GetStandardDeviations "/**
std::vector<double> rtk::simple::SymmetricForcesDemonsRegistrationFilter::GetStandardDeviations() const

Set/Get the Gaussian smoothing standard deviations for the
displacement field. The values are set with respect to pixel
coordinates.

*/
public ";

%javamethodmodifiers  rtk::simple::SymmetricForcesDemonsRegistrationFilter::GetUpdateFieldStandardDeviations "/**
std::vector<double> rtk::simple::SymmetricForcesDemonsRegistrationFilter::GetUpdateFieldStandardDeviations() const

Set the Gaussian smoothing standard deviations for the update field.
The values are set with respect to pixel coordinates.

*/
public ";

%javamethodmodifiers  rtk::simple::SymmetricForcesDemonsRegistrationFilter::GetUseImageSpacing "/**
bool rtk::simple::SymmetricForcesDemonsRegistrationFilter::GetUseImageSpacing() const
*/
public ";

%javamethodmodifiers  rtk::simple::SymmetricForcesDemonsRegistrationFilter::SetIntensityDifferenceThreshold "/**
Self& rtk::simple::SymmetricForcesDemonsRegistrationFilter::SetIntensityDifferenceThreshold(double IntensityDifferenceThreshold)

Set/Get the threshold below which the absolute difference of intensity
yields a match. When the intensities match between a moving and fixed
image pixel, the update vector (for that iteration) will be the zero
vector. Default is 0.001.

*/
public ";

%javamethodmodifiers  rtk::simple::SymmetricForcesDemonsRegistrationFilter::SetMaximumError "/**
Self& rtk::simple::SymmetricForcesDemonsRegistrationFilter::SetMaximumError(double MaximumError)

Set/Get the desired maximum error of the Guassian kernel approximate.

*/
public ";

%javamethodmodifiers  rtk::simple::SymmetricForcesDemonsRegistrationFilter::SetMaximumKernelWidth "/**
Self& rtk::simple::SymmetricForcesDemonsRegistrationFilter::SetMaximumKernelWidth(unsigned int MaximumKernelWidth)

Set/Get the desired limits of the Gaussian kernel width.

*/
public ";

%javamethodmodifiers  rtk::simple::SymmetricForcesDemonsRegistrationFilter::SetMaximumRMSError "/**
Self& rtk::simple::SymmetricForcesDemonsRegistrationFilter::SetMaximumRMSError(double MaximumRMSError)
*/
public ";

%javamethodmodifiers  rtk::simple::SymmetricForcesDemonsRegistrationFilter::SetNumberOfIterations "/**
Self& rtk::simple::SymmetricForcesDemonsRegistrationFilter::SetNumberOfIterations(uint32_t NumberOfIterations)
*/
public ";

%javamethodmodifiers  rtk::simple::SymmetricForcesDemonsRegistrationFilter::SetSmoothDisplacementField "/**
Self& rtk::simple::SymmetricForcesDemonsRegistrationFilter::SetSmoothDisplacementField(bool SmoothDisplacementField)

Set/Get whether the displacement field is smoothed (regularized).
Smoothing the displacement yields a solution elastic in nature. If
SmoothDisplacementField is on, then the displacement field is smoothed
with a Gaussian whose standard deviations are specified with SetStandardDeviations()

*/
public ";

%javamethodmodifiers  rtk::simple::SymmetricForcesDemonsRegistrationFilter::SetSmoothUpdateField "/**
Self& rtk::simple::SymmetricForcesDemonsRegistrationFilter::SetSmoothUpdateField(bool SmoothUpdateField)

Set/Get whether the update field is smoothed (regularized). Smoothing
the update field yields a solution viscous in nature. If
SmoothUpdateField is on, then the update field is smoothed with a
Gaussian whose standard deviations are specified with SetUpdateFieldStandardDeviations()

*/
public ";

%javamethodmodifiers  rtk::simple::SymmetricForcesDemonsRegistrationFilter::SetStandardDeviations "/**
Self& rtk::simple::SymmetricForcesDemonsRegistrationFilter::SetStandardDeviations(const std::vector< double > &StandardDeviations)

Set/Get the Gaussian smoothing standard deviations for the
displacement field. The values are set with respect to pixel
coordinates.

*/
public ";

%javamethodmodifiers  rtk::simple::SymmetricForcesDemonsRegistrationFilter::SetStandardDeviations "/**
Self& rtk::simple::SymmetricForcesDemonsRegistrationFilter::SetStandardDeviations(double value)

Set the values of the StandardDeviations vector all to value

*/
public ";

%javamethodmodifiers  rtk::simple::SymmetricForcesDemonsRegistrationFilter::SetUpdateFieldStandardDeviations "/**
Self& rtk::simple::SymmetricForcesDemonsRegistrationFilter::SetUpdateFieldStandardDeviations(const std::vector< double > &UpdateFieldStandardDeviations)

Set the Gaussian smoothing standard deviations for the update field.
The values are set with respect to pixel coordinates.

*/
public ";

%javamethodmodifiers  rtk::simple::SymmetricForcesDemonsRegistrationFilter::SetUpdateFieldStandardDeviations "/**
Self& rtk::simple::SymmetricForcesDemonsRegistrationFilter::SetUpdateFieldStandardDeviations(double value)

Set the values of the UpdateFieldStandardDeviations vector all to
value

*/
public ";

%javamethodmodifiers  rtk::simple::SymmetricForcesDemonsRegistrationFilter::SetUseImageSpacing "/**
Self& rtk::simple::SymmetricForcesDemonsRegistrationFilter::SetUseImageSpacing(bool UseImageSpacing)
*/
public ";

%javamethodmodifiers  rtk::simple::SymmetricForcesDemonsRegistrationFilter::SmoothDisplacementFieldOff "/**
Self& rtk::simple::SymmetricForcesDemonsRegistrationFilter::SmoothDisplacementFieldOff()
*/
public ";

%javamethodmodifiers  rtk::simple::SymmetricForcesDemonsRegistrationFilter::SmoothDisplacementFieldOn "/**
Self& rtk::simple::SymmetricForcesDemonsRegistrationFilter::SmoothDisplacementFieldOn()

Set the value of SmoothDisplacementField to true or false
respectfully.

*/
public ";

%javamethodmodifiers  rtk::simple::SymmetricForcesDemonsRegistrationFilter::SmoothUpdateFieldOff "/**
Self& rtk::simple::SymmetricForcesDemonsRegistrationFilter::SmoothUpdateFieldOff()
*/
public ";

%javamethodmodifiers  rtk::simple::SymmetricForcesDemonsRegistrationFilter::SmoothUpdateFieldOn "/**
Self& rtk::simple::SymmetricForcesDemonsRegistrationFilter::SmoothUpdateFieldOn()

Set the value of SmoothUpdateField to true or false respectfully.

*/
public ";

%javamethodmodifiers  rtk::simple::SymmetricForcesDemonsRegistrationFilter::SymmetricForcesDemonsRegistrationFilter "/**
rtk::simple::SymmetricForcesDemonsRegistrationFilter::SymmetricForcesDemonsRegistrationFilter()

Default Constructor that takes no arguments and initializes default
parameters

*/
public ";

%javamethodmodifiers  rtk::simple::SymmetricForcesDemonsRegistrationFilter::ToString "/**
std::string rtk::simple::SymmetricForcesDemonsRegistrationFilter::ToString() const

Print ourselves out

*/
public ";

%javamethodmodifiers  rtk::simple::SymmetricForcesDemonsRegistrationFilter::UseImageSpacingOff "/**
Self& rtk::simple::SymmetricForcesDemonsRegistrationFilter::UseImageSpacingOff()
*/
public ";

%javamethodmodifiers  rtk::simple::SymmetricForcesDemonsRegistrationFilter::UseImageSpacingOn "/**
Self& rtk::simple::SymmetricForcesDemonsRegistrationFilter::UseImageSpacingOn()

Set the value of UseImageSpacing to true or false respectfully.

*/
public ";

%javamethodmodifiers  rtk::simple::SymmetricForcesDemonsRegistrationFilter::~SymmetricForcesDemonsRegistrationFilter "/**
rtk::simple::SymmetricForcesDemonsRegistrationFilter::~SymmetricForcesDemonsRegistrationFilter()

Destructor

*/
public ";


%typemap(javaimports) rtk::simple::TanImageFilter "/**

Computes the tangent of each input pixel.


The computations are performed using std::tan(x).
See:
 rtk::simple::Tan for the procedural interface

 itk::TanImageFilter for the Doxygen on the original ITK class.


C++ includes: srtkTanImageFilter.h
*/"

%javamethodmodifiers  rtk::simple::TanImageFilter::Execute "/**
Image rtk::simple::TanImageFilter::Execute(const Image &image1)

Execute the filter on the input image

*/
public ";

%javamethodmodifiers  rtk::simple::TanImageFilter::GetName "/**
std::string rtk::simple::TanImageFilter::GetName() const

Name of this class

*/
public ";

%javamethodmodifiers  rtk::simple::TanImageFilter::TanImageFilter "/**
rtk::simple::TanImageFilter::TanImageFilter()

Default Constructor that takes no arguments and initializes default
parameters

*/
public ";

%javamethodmodifiers  rtk::simple::TanImageFilter::ToString "/**
std::string rtk::simple::TanImageFilter::ToString() const

Print ourselves out

*/
public ";

%javamethodmodifiers  rtk::simple::TanImageFilter::~TanImageFilter "/**
rtk::simple::TanImageFilter::~TanImageFilter()

Destructor

*/
public ";


%typemap(javaimports) rtk::simple::TernaryAddImageFilter "/**

Pixel-wise addition of three images.


This class is templated over the types of the three input images and
the type of the output image. Numeric conversions (castings) are done
by the C++ defaults.
See:
 rtk::simple::TernaryAdd for the procedural interface

 itk::TernaryAddImageFilter for the Doxygen on the original ITK class.


C++ includes: srtkTernaryAddImageFilter.h
*/"

%javamethodmodifiers  rtk::simple::TernaryAddImageFilter::Execute "/**
Image rtk::simple::TernaryAddImageFilter::Execute(const Image &image1, const Image &image2, const Image &image3)

Execute the filter on the input image

*/
public ";

%javamethodmodifiers  rtk::simple::TernaryAddImageFilter::GetName "/**
std::string rtk::simple::TernaryAddImageFilter::GetName() const

Name of this class

*/
public ";

%javamethodmodifiers  rtk::simple::TernaryAddImageFilter::TernaryAddImageFilter "/**
rtk::simple::TernaryAddImageFilter::TernaryAddImageFilter()

Default Constructor that takes no arguments and initializes default
parameters

*/
public ";

%javamethodmodifiers  rtk::simple::TernaryAddImageFilter::ToString "/**
std::string rtk::simple::TernaryAddImageFilter::ToString() const

Print ourselves out

*/
public ";

%javamethodmodifiers  rtk::simple::TernaryAddImageFilter::~TernaryAddImageFilter "/**
rtk::simple::TernaryAddImageFilter::~TernaryAddImageFilter()

Destructor

*/
public ";


%typemap(javaimports) rtk::simple::TernaryMagnitudeImageFilter "/**

Pixel-wise addition of three images.


This class is templated over the types of the three input images and
the type of the output image. Numeric conversions (castings) are done
by the C++ defaults.
See:
 rtk::simple::TernaryMagnitude for the procedural interface

 itk::TernaryMagnitudeImageFilter for the Doxygen on the original ITK class.


C++ includes: srtkTernaryMagnitudeImageFilter.h
*/"

%javamethodmodifiers  rtk::simple::TernaryMagnitudeImageFilter::Execute "/**
Image rtk::simple::TernaryMagnitudeImageFilter::Execute(const Image &image1, const Image &image2, const Image &image3)

Execute the filter on the input image

*/
public ";

%javamethodmodifiers  rtk::simple::TernaryMagnitudeImageFilter::GetName "/**
std::string rtk::simple::TernaryMagnitudeImageFilter::GetName() const

Name of this class

*/
public ";

%javamethodmodifiers  rtk::simple::TernaryMagnitudeImageFilter::TernaryMagnitudeImageFilter "/**
rtk::simple::TernaryMagnitudeImageFilter::TernaryMagnitudeImageFilter()

Default Constructor that takes no arguments and initializes default
parameters

*/
public ";

%javamethodmodifiers  rtk::simple::TernaryMagnitudeImageFilter::ToString "/**
std::string rtk::simple::TernaryMagnitudeImageFilter::ToString() const

Print ourselves out

*/
public ";

%javamethodmodifiers  rtk::simple::TernaryMagnitudeImageFilter::~TernaryMagnitudeImageFilter "/**
rtk::simple::TernaryMagnitudeImageFilter::~TernaryMagnitudeImageFilter()

Destructor

*/
public ";


%typemap(javaimports) rtk::simple::TernaryMagnitudeSquaredImageFilter "/**

Pixel-wise addition of three images.


This class is templated over the types of the three input images and
the type of the output image. Numeric conversions (castings) are done
by the C++ defaults.
See:
 rtk::simple::TernaryMagnitudeSquared for the procedural interface

 itk::TernaryMagnitudeSquaredImageFilter for the Doxygen on the original ITK class.


C++ includes: srtkTernaryMagnitudeSquaredImageFilter.h
*/"

%javamethodmodifiers  rtk::simple::TernaryMagnitudeSquaredImageFilter::Execute "/**
Image rtk::simple::TernaryMagnitudeSquaredImageFilter::Execute(const Image &image1, const Image &image2, const Image &image3)

Execute the filter on the input image

*/
public ";

%javamethodmodifiers  rtk::simple::TernaryMagnitudeSquaredImageFilter::GetName "/**
std::string rtk::simple::TernaryMagnitudeSquaredImageFilter::GetName() const

Name of this class

*/
public ";

%javamethodmodifiers  rtk::simple::TernaryMagnitudeSquaredImageFilter::TernaryMagnitudeSquaredImageFilter "/**
rtk::simple::TernaryMagnitudeSquaredImageFilter::TernaryMagnitudeSquaredImageFilter()

Default Constructor that takes no arguments and initializes default
parameters

*/
public ";

%javamethodmodifiers  rtk::simple::TernaryMagnitudeSquaredImageFilter::ToString "/**
std::string rtk::simple::TernaryMagnitudeSquaredImageFilter::ToString() const

Print ourselves out

*/
public ";

%javamethodmodifiers  rtk::simple::TernaryMagnitudeSquaredImageFilter::~TernaryMagnitudeSquaredImageFilter "/**
rtk::simple::TernaryMagnitudeSquaredImageFilter::~TernaryMagnitudeSquaredImageFilter()

Destructor

*/
public ";


%typemap(javaimports) rtk::simple::ThresholdImageFilter "/**

Set image values to a user-specified value if they are below, above,
or between simple threshold values.


ThresholdImageFilter sets image values to a user-specified \"outside\" value (by default,
\"black\") if the image values are below, above, or between simple
threshold values.

The available methods are:

ThresholdAbove() : The values greater than the threshold value are set
to OutsideValue

ThresholdBelow() : The values less than the threshold value are set to
OutsideValue

ThresholdOutside() : The values outside the threshold range (less than
lower or greater than upper) are set to OutsideValue

Note that these definitions indicate that pixels equal to the
threshold value are not set to OutsideValue in any of these methods

The pixels must support the operators >= and <=.

Wiki Examples:

All Examples

Threshold an image
See:
 rtk::simple::Threshold for the procedural interface

 itk::ThresholdImageFilter for the Doxygen on the original ITK class.



C++ includes: srtkThresholdImageFilter.h
*/"

%javamethodmodifiers  rtk::simple::ThresholdImageFilter::Execute "/**
Image rtk::simple::ThresholdImageFilter::Execute(const Image &image1)

Execute the filter on the input image

*/
public ";

%javamethodmodifiers  rtk::simple::ThresholdImageFilter::Execute "/**
Image rtk::simple::ThresholdImageFilter::Execute(const Image &image1, double lower, double upper, double outsideValue)

Execute the filter on the input image with the given parameters

*/
public ";

%javamethodmodifiers  rtk::simple::ThresholdImageFilter::GetLower "/**
double rtk::simple::ThresholdImageFilter::GetLower() const

Set/Get methods to set the lower threshold

*/
public ";

%javamethodmodifiers  rtk::simple::ThresholdImageFilter::GetName "/**
std::string rtk::simple::ThresholdImageFilter::GetName() const

Name of this class

*/
public ";

%javamethodmodifiers  rtk::simple::ThresholdImageFilter::GetOutsideValue "/**
double rtk::simple::ThresholdImageFilter::GetOutsideValue() const

Get the \"outside\" pixel value.

*/
public ";

%javamethodmodifiers  rtk::simple::ThresholdImageFilter::GetUpper "/**
double rtk::simple::ThresholdImageFilter::GetUpper() const

Set/Get methods to set the upper threshold

*/
public ";

%javamethodmodifiers  rtk::simple::ThresholdImageFilter::SetLower "/**
Self& rtk::simple::ThresholdImageFilter::SetLower(double Lower)

Set/Get methods to set the lower threshold

*/
public ";

%javamethodmodifiers  rtk::simple::ThresholdImageFilter::SetOutsideValue "/**
Self& rtk::simple::ThresholdImageFilter::SetOutsideValue(double OutsideValue)

The pixel type must support comparison operators. Set the \"outside\"
pixel value. The default value NumericTraits<PixelType>::ZeroValue() .

*/
public ";

%javamethodmodifiers  rtk::simple::ThresholdImageFilter::SetUpper "/**
Self& rtk::simple::ThresholdImageFilter::SetUpper(double Upper)

Set/Get methods to set the upper threshold

*/
public ";

%javamethodmodifiers  rtk::simple::ThresholdImageFilter::ThresholdImageFilter "/**
rtk::simple::ThresholdImageFilter::ThresholdImageFilter()

Default Constructor that takes no arguments and initializes default
parameters

*/
public ";

%javamethodmodifiers  rtk::simple::ThresholdImageFilter::ToString "/**
std::string rtk::simple::ThresholdImageFilter::ToString() const

Print ourselves out

*/
public ";

%javamethodmodifiers  rtk::simple::ThresholdImageFilter::~ThresholdImageFilter "/**
rtk::simple::ThresholdImageFilter::~ThresholdImageFilter()

Destructor

*/
public ";


%typemap(javaimports) rtk::simple::ThresholdMaximumConnectedComponentsImageFilter "/**

Finds the threshold value of an image based on maximizing the number
of objects in the image that are larger than a given minimal size.



This method is based on Topological Stable State Thresholding to
calculate the threshold set point. This method is particularly
effective when there are a large number of objects in a microscopy
image. Compiling in Debug mode and enable the debug flag for this
filter to print debug information to see how the filter focuses in on
a threshold value. Please see the Insight Journal's MICCAI 2005
workshop for a complete description. References are below.
Parameters
The MinimumObjectSizeInPixels parameter is controlled through the
class Get/SetMinimumObjectSizeInPixels() method. Similar to the
standard itk::BinaryThresholdImageFilter the Get/SetInside and Get/SetOutside values of the threshold can be
set. The GetNumberOfObjects() and GetThresholdValue() methods return
the number of objects above the minimum pixel size and the calculated
threshold value.
Automatic Thresholding in ITK
There are multiple methods to automatically calculate the threshold
intensity value of an image. As of version 4.0, ITK has a Thresholding
( ITKThresholding ) module which contains numerous automatic
thresholding methods.implements two of these. Topological Stable State
Thresholding works well on images with a large number of objects to be
counted.
References:
1) Urish KL, August J, Huard J. \"Unsupervised segmentation for
myofiber counting in immunoflourescent images\". Insight Journal. ISC
/NA-MIC/MICCAI Workshop on Open-Source Software (2005) Dspace handle: https://hdl.handle.net/1926/48 2) Pikaz A, Averbuch, A. \"Digital image thresholding based on
topological stable-state\". Pattern Recognition, 29(5): 829-843, 1996.

Questions: email Ken Urish at ken.urish(at)gmail.com Please cc the itk
list serve for archival purposes.

See:
 rtk::simple::ThresholdMaximumConnectedComponents for the procedural interface

 itk::ThresholdMaximumConnectedComponentsImageFilter for the Doxygen on the original ITK class.


C++ includes: srtkThresholdMaximumConnectedComponentsImageFilter.h
*/"

%javamethodmodifiers  rtk::simple::ThresholdMaximumConnectedComponentsImageFilter::Execute "/**
Image rtk::simple::ThresholdMaximumConnectedComponentsImageFilter::Execute(const Image &image1)

Execute the filter on the input image

*/
public ";

%javamethodmodifiers  rtk::simple::ThresholdMaximumConnectedComponentsImageFilter::Execute "/**
Image rtk::simple::ThresholdMaximumConnectedComponentsImageFilter::Execute(const Image &image1, uint32_t minimumObjectSizeInPixels, double
upperBoundary, uint8_t insideValue, uint8_t outsideValue)

Execute the filter on the input image with the given parameters

*/
public ";

%javamethodmodifiers  rtk::simple::ThresholdMaximumConnectedComponentsImageFilter::GetInsideValue "/**
uint8_t rtk::simple::ThresholdMaximumConnectedComponentsImageFilter::GetInsideValue() const

The following Set/Get methods are for the binary threshold function.
This class automatically calculates the lower threshold boundary. The
upper threshold boundary, inside value, and outside value can be
defined by the user, however the standard values are used as default
if not set by the user. The default value of the: Inside value is the
maximum pixel type intensity. Outside value is the minimum pixel type
intensity. Upper threshold boundary is the maximum pixel type
intensity.

*/
public ";

%javamethodmodifiers  rtk::simple::ThresholdMaximumConnectedComponentsImageFilter::GetMinimumObjectSizeInPixels "/**
uint32_t rtk::simple::ThresholdMaximumConnectedComponentsImageFilter::GetMinimumObjectSizeInPixels() const

The pixel type must support comparison operators. Set the minimum
pixel area used to count objects on the image. Thus, only objects that
have a pixel area greater than the minimum pixel area will be counted
as an object in the optimization portion of this filter. Essentially,
it eliminates noise from being counted as an object. The default value
is zero.

*/
public ";

%javamethodmodifiers  rtk::simple::ThresholdMaximumConnectedComponentsImageFilter::GetName "/**
std::string rtk::simple::ThresholdMaximumConnectedComponentsImageFilter::GetName() const

Name of this class

*/
public ";

%javamethodmodifiers  rtk::simple::ThresholdMaximumConnectedComponentsImageFilter::GetOutsideValue "/**
uint8_t rtk::simple::ThresholdMaximumConnectedComponentsImageFilter::GetOutsideValue() const

The following Set/Get methods are for the binary threshold function.
This class automatically calculates the lower threshold boundary. The
upper threshold boundary, inside value, and outside value can be
defined by the user, however the standard values are used as default
if not set by the user. The default value of the: Inside value is the
maximum pixel type intensity. Outside value is the minimum pixel type
intensity. Upper threshold boundary is the maximum pixel type
intensity.

*/
public ";

%javamethodmodifiers  rtk::simple::ThresholdMaximumConnectedComponentsImageFilter::GetUpperBoundary "/**
double rtk::simple::ThresholdMaximumConnectedComponentsImageFilter::GetUpperBoundary() const

The following Set/Get methods are for the binary threshold function.
This class automatically calculates the lower threshold boundary. The
upper threshold boundary, inside value, and outside value can be
defined by the user, however the standard values are used as default
if not set by the user. The default value of the: Inside value is the
maximum pixel type intensity. Outside value is the minimum pixel type
intensity. Upper threshold boundary is the maximum pixel type
intensity.

*/
public ";

%javamethodmodifiers  rtk::simple::ThresholdMaximumConnectedComponentsImageFilter::SetInsideValue "/**
Self& rtk::simple::ThresholdMaximumConnectedComponentsImageFilter::SetInsideValue(uint8_t InsideValue)

The following Set/Get methods are for the binary threshold function.
This class automatically calculates the lower threshold boundary. The
upper threshold boundary, inside value, and outside value can be
defined by the user, however the standard values are used as default
if not set by the user. The default value of the: Inside value is the
maximum pixel type intensity. Outside value is the minimum pixel type
intensity. Upper threshold boundary is the maximum pixel type
intensity.

*/
public ";

%javamethodmodifiers  rtk::simple::ThresholdMaximumConnectedComponentsImageFilter::SetMinimumObjectSizeInPixels "/**
Self& rtk::simple::ThresholdMaximumConnectedComponentsImageFilter::SetMinimumObjectSizeInPixels(uint32_t MinimumObjectSizeInPixels)

The pixel type must support comparison operators. Set the minimum
pixel area used to count objects on the image. Thus, only objects that
have a pixel area greater than the minimum pixel area will be counted
as an object in the optimization portion of this filter. Essentially,
it eliminates noise from being counted as an object. The default value
is zero.

*/
public ";

%javamethodmodifiers  rtk::simple::ThresholdMaximumConnectedComponentsImageFilter::SetOutsideValue "/**
Self& rtk::simple::ThresholdMaximumConnectedComponentsImageFilter::SetOutsideValue(uint8_t OutsideValue)

The following Set/Get methods are for the binary threshold function.
This class automatically calculates the lower threshold boundary. The
upper threshold boundary, inside value, and outside value can be
defined by the user, however the standard values are used as default
if not set by the user. The default value of the: Inside value is the
maximum pixel type intensity. Outside value is the minimum pixel type
intensity. Upper threshold boundary is the maximum pixel type
intensity.

*/
public ";

%javamethodmodifiers  rtk::simple::ThresholdMaximumConnectedComponentsImageFilter::SetUpperBoundary "/**
Self& rtk::simple::ThresholdMaximumConnectedComponentsImageFilter::SetUpperBoundary(double UpperBoundary)

The following Set/Get methods are for the binary threshold function.
This class automatically calculates the lower threshold boundary. The
upper threshold boundary, inside value, and outside value can be
defined by the user, however the standard values are used as default
if not set by the user. The default value of the: Inside value is the
maximum pixel type intensity. Outside value is the minimum pixel type
intensity. Upper threshold boundary is the maximum pixel type
intensity.

*/
public ";

%javamethodmodifiers  rtk::simple::ThresholdMaximumConnectedComponentsImageFilter::ThresholdMaximumConnectedComponentsImageFilter "/**
rtk::simple::ThresholdMaximumConnectedComponentsImageFilter::ThresholdMaximumConnectedComponentsImageFilter()

Default Constructor that takes no arguments and initializes default
parameters

*/
public ";

%javamethodmodifiers  rtk::simple::ThresholdMaximumConnectedComponentsImageFilter::ToString "/**
std::string rtk::simple::ThresholdMaximumConnectedComponentsImageFilter::ToString() const

Print ourselves out

*/
public ";

%javamethodmodifiers  rtk::simple::ThresholdMaximumConnectedComponentsImageFilter::~ThresholdMaximumConnectedComponentsImageFilter "/**
rtk::simple::ThresholdMaximumConnectedComponentsImageFilter::~ThresholdMaximumConnectedComponentsImageFilter()

Destructor

*/
public ";


%typemap(javaimports) rtk::simple::ThresholdSegmentationLevelSetImageFilter "/**

Segments structures in images based on intensity values.


IMPORTANT
The SegmentationLevelSetImageFilter class and the ThresholdSegmentationLevelSetFunction class contain additional information necessary to the full
understanding of how to use this filter.
OVERVIEW
This class is a level set method segmentation filter. It constructs a
speed function which is close to zero at the upper and lower bounds of
an intensity window, effectively locking the propagating front onto
those edges. Elsewhere, the front will propagate quickly.
INPUTS
This filter requires two inputs. The first input is a seed image. This
seed image must contain an isosurface that you want to use as the seed
for your segmentation. It can be a binary, graylevel, or floating
point image. The only requirement is that it contain a closed
isosurface that you will identify as the seed by setting the
IsosurfaceValue parameter of the filter. For a binary image you will
want to set your isosurface value halfway between your on and off
values (i.e. for 0's and 1's, use an isosurface value of 0.5).

The second input is the feature image. This is the image from which
the speed function will be calculated. For most applications, this is
the image that you want to segment. The desired isosurface in your
seed image should lie within the region of your feature image that you
are trying to segment. Note that this filter does no preprocessing of
the feature image before thresholding.

See SegmentationLevelSetImageFilter for more information on Inputs.
OUTPUTS
The filter outputs a single, scalar, real-valued image. Positive
values in the output image are inside the segmentated region and
negative values in the image are outside of the inside region. The
zero crossings of the image correspond to the position of the level
set front.

See SparseFieldLevelSetImageFilter and SegmentationLevelSetImageFilter for more information.
PARAMETERS
In addition to parameters described in SegmentationLevelSetImageFilter , this filter adds the UpperThreshold and LowerThreshold. See ThresholdSegmentationLevelSetFunction for a description of how these values affect the segmentation.

See:
 SegmentationLevelSetImageFilter


 ThresholdSegmentationLevelSetFunction ,


 SparseFieldLevelSetImageFilter

 rtk::simple::ThresholdSegmentationLevelSet for the procedural interface

 itk::ThresholdSegmentationLevelSetImageFilter for the Doxygen on the original ITK class.


C++ includes: srtkThresholdSegmentationLevelSetImageFilter.h
*/"

%javamethodmodifiers  rtk::simple::ThresholdSegmentationLevelSetImageFilter::Execute "/**
Image rtk::simple::ThresholdSegmentationLevelSetImageFilter::Execute(const Image &image1, const Image &image2)

Execute the filter on the input images

*/
public ";

%javamethodmodifiers  rtk::simple::ThresholdSegmentationLevelSetImageFilter::Execute "/**
Image rtk::simple::ThresholdSegmentationLevelSetImageFilter::Execute(const Image &image1, const Image &image2, double lowerThreshold,
double upperThreshold, double maximumRMSError, double
propagationScaling, double curvatureScaling, uint32_t
numberOfIterations, bool reverseExpansionDirection)

Execute the filter on the input images with the given parameters

*/
public ";

%javamethodmodifiers  rtk::simple::ThresholdSegmentationLevelSetImageFilter::GetCurvatureScaling "/**
double rtk::simple::ThresholdSegmentationLevelSetImageFilter::GetCurvatureScaling() const
*/
public ";

%javamethodmodifiers  rtk::simple::ThresholdSegmentationLevelSetImageFilter::GetElapsedIterations "/**
uint32_t rtk::simple::ThresholdSegmentationLevelSetImageFilter::GetElapsedIterations() const

Number of iterations run.


This is a measurement. Its value is updated in the Execute methods, so
the value will only be valid after an execution.

*/
public ";

%javamethodmodifiers  rtk::simple::ThresholdSegmentationLevelSetImageFilter::GetLowerThreshold "/**
double rtk::simple::ThresholdSegmentationLevelSetImageFilter::GetLowerThreshold() const
*/
public ";

%javamethodmodifiers  rtk::simple::ThresholdSegmentationLevelSetImageFilter::GetMaximumRMSError "/**
double rtk::simple::ThresholdSegmentationLevelSetImageFilter::GetMaximumRMSError() const
*/
public ";

%javamethodmodifiers  rtk::simple::ThresholdSegmentationLevelSetImageFilter::GetName "/**
std::string rtk::simple::ThresholdSegmentationLevelSetImageFilter::GetName() const

Name of this class

*/
public ";

%javamethodmodifiers  rtk::simple::ThresholdSegmentationLevelSetImageFilter::GetNumberOfIterations "/**
uint32_t rtk::simple::ThresholdSegmentationLevelSetImageFilter::GetNumberOfIterations() const
*/
public ";

%javamethodmodifiers  rtk::simple::ThresholdSegmentationLevelSetImageFilter::GetPropagationScaling "/**
double rtk::simple::ThresholdSegmentationLevelSetImageFilter::GetPropagationScaling() const
*/
public ";

%javamethodmodifiers  rtk::simple::ThresholdSegmentationLevelSetImageFilter::GetReverseExpansionDirection "/**
bool rtk::simple::ThresholdSegmentationLevelSetImageFilter::GetReverseExpansionDirection() const
*/
public ";

%javamethodmodifiers  rtk::simple::ThresholdSegmentationLevelSetImageFilter::GetRMSChange "/**
double rtk::simple::ThresholdSegmentationLevelSetImageFilter::GetRMSChange() const

The Root Mean Square of the levelset upon termination.


This is a measurement. Its value is updated in the Execute methods, so
the value will only be valid after an execution.

*/
public ";

%javamethodmodifiers  rtk::simple::ThresholdSegmentationLevelSetImageFilter::GetUpperThreshold "/**
double rtk::simple::ThresholdSegmentationLevelSetImageFilter::GetUpperThreshold() const
*/
public ";

%javamethodmodifiers  rtk::simple::ThresholdSegmentationLevelSetImageFilter::ReverseExpansionDirectionOff "/**
Self& rtk::simple::ThresholdSegmentationLevelSetImageFilter::ReverseExpansionDirectionOff()
*/
public ";

%javamethodmodifiers  rtk::simple::ThresholdSegmentationLevelSetImageFilter::ReverseExpansionDirectionOn "/**
Self& rtk::simple::ThresholdSegmentationLevelSetImageFilter::ReverseExpansionDirectionOn()

Set the value of ReverseExpansionDirection to true or false
respectfully.

*/
public ";

%javamethodmodifiers  rtk::simple::ThresholdSegmentationLevelSetImageFilter::SetCurvatureScaling "/**
Self& rtk::simple::ThresholdSegmentationLevelSetImageFilter::SetCurvatureScaling(double CurvatureScaling)
*/
public ";

%javamethodmodifiers  rtk::simple::ThresholdSegmentationLevelSetImageFilter::SetLowerThreshold "/**
Self& rtk::simple::ThresholdSegmentationLevelSetImageFilter::SetLowerThreshold(double LowerThreshold)
*/
public ";

%javamethodmodifiers  rtk::simple::ThresholdSegmentationLevelSetImageFilter::SetMaximumRMSError "/**
Self& rtk::simple::ThresholdSegmentationLevelSetImageFilter::SetMaximumRMSError(double MaximumRMSError)
*/
public ";

%javamethodmodifiers  rtk::simple::ThresholdSegmentationLevelSetImageFilter::SetNumberOfIterations "/**
Self& rtk::simple::ThresholdSegmentationLevelSetImageFilter::SetNumberOfIterations(uint32_t NumberOfIterations)
*/
public ";

%javamethodmodifiers  rtk::simple::ThresholdSegmentationLevelSetImageFilter::SetPropagationScaling "/**
Self& rtk::simple::ThresholdSegmentationLevelSetImageFilter::SetPropagationScaling(double PropagationScaling)
*/
public ";

%javamethodmodifiers  rtk::simple::ThresholdSegmentationLevelSetImageFilter::SetReverseExpansionDirection "/**
Self& rtk::simple::ThresholdSegmentationLevelSetImageFilter::SetReverseExpansionDirection(bool ReverseExpansionDirection)
*/
public ";

%javamethodmodifiers  rtk::simple::ThresholdSegmentationLevelSetImageFilter::SetUpperThreshold "/**
Self& rtk::simple::ThresholdSegmentationLevelSetImageFilter::SetUpperThreshold(double UpperThreshold)

Get/Set the threshold values that will be used to calculate the speed
function.

*/
public ";

%javamethodmodifiers  rtk::simple::ThresholdSegmentationLevelSetImageFilter::ThresholdSegmentationLevelSetImageFilter "/**
rtk::simple::ThresholdSegmentationLevelSetImageFilter::ThresholdSegmentationLevelSetImageFilter()

Default Constructor that takes no arguments and initializes default
parameters

*/
public ";

%javamethodmodifiers  rtk::simple::ThresholdSegmentationLevelSetImageFilter::ToString "/**
std::string rtk::simple::ThresholdSegmentationLevelSetImageFilter::ToString() const

Print ourselves out

*/
public ";

%javamethodmodifiers  rtk::simple::ThresholdSegmentationLevelSetImageFilter::~ThresholdSegmentationLevelSetImageFilter "/**
rtk::simple::ThresholdSegmentationLevelSetImageFilter::~ThresholdSegmentationLevelSetImageFilter()

Destructor

*/
public ";


%typemap(javaimports) rtk::simple::TikhonovDeconvolutionImageFilter "/**

An inverse deconvolution filter regularized in the Tikhonov sense.


The Tikhonov deconvolution filter is the inverse deconvolution filter
with a regularization term added to the denominator. The filter
minimizes the equation \\\\[ ||\\\\hat{f} \\\\otimes h - g||_{L_2}^2 + \\\\mu||\\\\hat{f}||^2
\\\\] where $\\\\hat{f}$ is the estimate of the unblurred image, $h$ is the blurring kernel, $g$ is the blurred image, and $\\\\mu$ is a non-negative real regularization function.

The filter applies a kernel described in the Fourier domain as $H^*(\\\\omega) / (|H(\\\\omega)|^2 + \\\\mu)$ where $H(\\\\omega)$ is the Fourier transform of $h$ . The term $\\\\mu$ is called RegularizationConstant in this filter. If $\\\\mu$ is set to zero, this filter is equivalent to the InverseDeconvolutionImageFilter .


Gaetan Lehmann, Biologie du Developpement et de la Reproduction, INRA
de Jouy-en-Josas, France
 Cory Quammen, The University of North Carolina at Chapel Hill
See:
 rtk::simple::TikhonovDeconvolution for the procedural interface

 itk::TikhonovDeconvolutionImageFilter for the Doxygen on the original ITK class.


C++ includes: srtkTikhonovDeconvolutionImageFilter.h
*/"

%javamethodmodifiers  rtk::simple::TikhonovDeconvolutionImageFilter::Execute "/**
Image rtk::simple::TikhonovDeconvolutionImageFilter::Execute(const Image &image1, const Image &image2)

Execute the filter on the input images

*/
public ";

%javamethodmodifiers  rtk::simple::TikhonovDeconvolutionImageFilter::Execute "/**
Image rtk::simple::TikhonovDeconvolutionImageFilter::Execute(const Image &image1, const Image &image2, double
regularizationConstant, bool normalize,
TikhonovDeconvolutionImageFilter::BoundaryConditionType
boundaryCondition,
TikhonovDeconvolutionImageFilter::OutputRegionModeType
outputRegionMode)

Execute the filter on the input images with the given parameters

*/
public ";

%javamethodmodifiers  rtk::simple::TikhonovDeconvolutionImageFilter::GetBoundaryCondition "/**
BoundaryConditionType rtk::simple::TikhonovDeconvolutionImageFilter::GetBoundaryCondition() const
*/
public ";

%javamethodmodifiers  rtk::simple::TikhonovDeconvolutionImageFilter::GetName "/**
std::string rtk::simple::TikhonovDeconvolutionImageFilter::GetName() const

Name of this class

*/
public ";

%javamethodmodifiers  rtk::simple::TikhonovDeconvolutionImageFilter::GetNormalize "/**
bool rtk::simple::TikhonovDeconvolutionImageFilter::GetNormalize() const
*/
public ";

%javamethodmodifiers  rtk::simple::TikhonovDeconvolutionImageFilter::GetOutputRegionMode "/**
OutputRegionModeType rtk::simple::TikhonovDeconvolutionImageFilter::GetOutputRegionMode() const
*/
public ";

%javamethodmodifiers  rtk::simple::TikhonovDeconvolutionImageFilter::GetRegularizationConstant "/**
double rtk::simple::TikhonovDeconvolutionImageFilter::GetRegularizationConstant() const

The regularization factor. Larger values reduce the dominance of noise
in the solution, but results in higher approximation error in the
deblurred image. Default value is 0.0, yielding the same results as
the InverseDeconvolutionImageFilter .

*/
public ";

%javamethodmodifiers  rtk::simple::TikhonovDeconvolutionImageFilter::NormalizeOff "/**
Self& rtk::simple::TikhonovDeconvolutionImageFilter::NormalizeOff()
*/
public ";

%javamethodmodifiers  rtk::simple::TikhonovDeconvolutionImageFilter::NormalizeOn "/**
Self& rtk::simple::TikhonovDeconvolutionImageFilter::NormalizeOn()

Set the value of Normalize to true or false respectfully.

*/
public ";

%javamethodmodifiers  rtk::simple::TikhonovDeconvolutionImageFilter::SetBoundaryCondition "/**
Self& rtk::simple::TikhonovDeconvolutionImageFilter::SetBoundaryCondition(BoundaryConditionType BoundaryCondition)
*/
public ";

%javamethodmodifiers  rtk::simple::TikhonovDeconvolutionImageFilter::SetNormalize "/**
Self& rtk::simple::TikhonovDeconvolutionImageFilter::SetNormalize(bool Normalize)

Normalize the output image by the sum of the kernel components

*/
public ";

%javamethodmodifiers  rtk::simple::TikhonovDeconvolutionImageFilter::SetOutputRegionMode "/**
Self& rtk::simple::TikhonovDeconvolutionImageFilter::SetOutputRegionMode(OutputRegionModeType OutputRegionMode)
*/
public ";

%javamethodmodifiers  rtk::simple::TikhonovDeconvolutionImageFilter::SetRegularizationConstant "/**
Self& rtk::simple::TikhonovDeconvolutionImageFilter::SetRegularizationConstant(double RegularizationConstant)

The regularization factor. Larger values reduce the dominance of noise
in the solution, but results in higher approximation error in the
deblurred image. Default value is 0.0, yielding the same results as
the InverseDeconvolutionImageFilter .

*/
public ";

%javamethodmodifiers  rtk::simple::TikhonovDeconvolutionImageFilter::TikhonovDeconvolutionImageFilter "/**
rtk::simple::TikhonovDeconvolutionImageFilter::TikhonovDeconvolutionImageFilter()

Default Constructor that takes no arguments and initializes default
parameters

*/
public ";

%javamethodmodifiers  rtk::simple::TikhonovDeconvolutionImageFilter::ToString "/**
std::string rtk::simple::TikhonovDeconvolutionImageFilter::ToString() const

Print ourselves out

*/
public ";

%javamethodmodifiers  rtk::simple::TikhonovDeconvolutionImageFilter::~TikhonovDeconvolutionImageFilter "/**
rtk::simple::TikhonovDeconvolutionImageFilter::~TikhonovDeconvolutionImageFilter()

Destructor

*/
public ";


%typemap(javaimports) rtk::simple::TileImageFilter "/**

Tile multiple input images into a single output image.


This filter will tile multiple images using a user-specified layout.
The tile sizes will be large enough to accommodate the largest image
for each tile. The layout is specified with the SetLayout method. The
layout has the same dimension as the output image. If all entries of
the layout are positive, the tiled output will contain the exact
number of tiles. If the layout contains a 0 in the last dimension, the
filter will compute a size that will accommodate all of the images.
Empty tiles are filled with the value specified with the SetDefault
value method. The input images must have a dimension less than or
equal to the output image. The output image have a larger dimension
than the input images. This filter can be used to create a volume from
a series of inputs by specifying a layout of 1,1,0.

Wiki Examples:

All Examples

Tile multiple images into another image

Stack multiple 2D images into a 3D image

Tile multiple images side by side

See:
 rtk::simple::Tile for the procedural interface


C++ includes: srtkTileImageFilter.h
*/"

%javamethodmodifiers  rtk::simple::TileImageFilter::Execute "/**
Image rtk::simple::TileImageFilter::Execute(const std::vector< Image > &images)

Execute the filter on the input images

*/
public ";

%javamethodmodifiers  rtk::simple::TileImageFilter::Execute "/**
Image rtk::simple::TileImageFilter::Execute(const Image &image1)
*/
public ";

%javamethodmodifiers  rtk::simple::TileImageFilter::Execute "/**
Image rtk::simple::TileImageFilter::Execute(const Image &image1, const Image &image2)
*/
public ";

%javamethodmodifiers  rtk::simple::TileImageFilter::Execute "/**
Image rtk::simple::TileImageFilter::Execute(const Image &image1, const Image &image2, const Image &image3)
*/
public ";

%javamethodmodifiers  rtk::simple::TileImageFilter::Execute "/**
Image rtk::simple::TileImageFilter::Execute(const Image &image1, const Image &image2, const Image &image3, const
Image &image4)
*/
public ";

%javamethodmodifiers  rtk::simple::TileImageFilter::Execute "/**
Image rtk::simple::TileImageFilter::Execute(const Image &image1, const Image &image2, const Image &image3, const
Image &image4, const Image &image5)
*/
public ";

%javamethodmodifiers  rtk::simple::TileImageFilter::Execute "/**
Image rtk::simple::TileImageFilter::Execute(const std::vector< Image > &images, const std::vector< uint32_t >
&layout, double defaultPixelValue)

Execute the filter on the input images with the given parameters

*/
public ";

%javamethodmodifiers  rtk::simple::TileImageFilter::Execute "/**
Image rtk::simple::TileImageFilter::Execute(const Image &image1, const std::vector< uint32_t > &layout, double
defaultPixelValue)
*/
public ";

%javamethodmodifiers  rtk::simple::TileImageFilter::Execute "/**
Image rtk::simple::TileImageFilter::Execute(const Image &image1, const Image &image2, const std::vector< uint32_t
> &layout, double defaultPixelValue)
*/
public ";

%javamethodmodifiers  rtk::simple::TileImageFilter::Execute "/**
Image rtk::simple::TileImageFilter::Execute(const Image &image1, const Image &image2, const Image &image3, const
std::vector< uint32_t > &layout, double defaultPixelValue)
*/
public ";

%javamethodmodifiers  rtk::simple::TileImageFilter::Execute "/**
Image rtk::simple::TileImageFilter::Execute(const Image &image1, const Image &image2, const Image &image3, const
Image &image4, const std::vector< uint32_t > &layout, double
defaultPixelValue)
*/
public ";

%javamethodmodifiers  rtk::simple::TileImageFilter::Execute "/**
Image rtk::simple::TileImageFilter::Execute(const Image &image1, const Image &image2, const Image &image3, const
Image &image4, const Image &image5, const std::vector< uint32_t >
&layout, double defaultPixelValue)
*/
public ";

%javamethodmodifiers  rtk::simple::TileImageFilter::GetDefaultPixelValue "/**
double rtk::simple::TileImageFilter::GetDefaultPixelValue() const
*/
public ";

%javamethodmodifiers  rtk::simple::TileImageFilter::GetLayout "/**
std::vector<uint32_t> rtk::simple::TileImageFilter::GetLayout() const
*/
public ";

%javamethodmodifiers  rtk::simple::TileImageFilter::GetName "/**
std::string rtk::simple::TileImageFilter::GetName() const

Name of this class

*/
public ";

%javamethodmodifiers  rtk::simple::TileImageFilter::SetDefaultPixelValue "/**
Self& rtk::simple::TileImageFilter::SetDefaultPixelValue(double DefaultPixelValue)
*/
public ";

%javamethodmodifiers  rtk::simple::TileImageFilter::SetLayout "/**
Self& rtk::simple::TileImageFilter::SetLayout(const std::vector< uint32_t > &Layout)
*/
public ";

%javamethodmodifiers  rtk::simple::TileImageFilter::TileImageFilter "/**
rtk::simple::TileImageFilter::TileImageFilter()

Default Constructor that takes no arguments and initializes default
parameters

*/
public ";

%javamethodmodifiers  rtk::simple::TileImageFilter::ToString "/**
std::string rtk::simple::TileImageFilter::ToString() const

Print ourselves out

*/
public ";

%javamethodmodifiers  rtk::simple::TileImageFilter::~TileImageFilter "/**
rtk::simple::TileImageFilter::~TileImageFilter()

Destructor

*/
public ";


%typemap(javaimports) rtk::simple::Transform "/**

A simplified wrapper around a variety of ITK transforms.


The interface to ITK transform objects to be used with the ImageRegistrationMethod, ResampleImageFilter and other SimpleRTK process objects. The transforms are designed to
have a serialized array of parameters to facilitate optimization for
registration.

Provides a base class interface to any type of ITK transform. Objects
of this type may have their interface converted to a derived interface
while keeping the same reference to the ITK object.

Additionally, this class provides a basic interface to a composite
transforms.


See:
 itk::CompositeTransform


C++ includes: srtkTransform.h
*/"

%javamethodmodifiers  rtk::simple::Transform::AddTransform "/**
Transform& rtk::simple::Transform::AddTransform(Transform t)
*/
public ";

%javamethodmodifiers  rtk::simple::Transform::GetDimension "/**
unsigned int rtk::simple::Transform::GetDimension(void) const

Return the dimension of the Transform ( 2D or 3D )

*/
public ";

%javamethodmodifiers  rtk::simple::Transform::GetInverse "/**
Transform rtk::simple::Transform::GetInverse() const

Return a new inverse transform of the same type as this.


Creates a new transform object and tries to set the value to the
inverse. As not all transform types have inverse and some transforms
are not invertable, an exception will be throw is there is no inverse.

*/
public ";

%javamethodmodifiers  rtk::simple::Transform::GetName "/**
virtual std::string rtk::simple::Transform::GetName() const

return user readable name for the SimpleRTK transform

*/
public ";

%javamethodmodifiers  rtk::simple::Transform::IsLinear "/**
virtual bool rtk::simple::Transform::IsLinear() const
*/
public ";

%javamethodmodifiers  rtk::simple::Transform::MakeUnique "/**
void rtk::simple::Transform::MakeUnique(void)

Performs actually coping if needed to make object unique.


The Transform class by default performs lazy coping and assignment. This method
make sure that coping actually happens to the itk::Transform pointed to is only pointed to by this object.

*/
public ";

%javamethodmodifiers  rtk::simple::Transform::SetIdentity "/**
virtual void rtk::simple::Transform::SetIdentity()
*/
public ";

%javamethodmodifiers  rtk::simple::Transform::SetInverse "/**
virtual bool rtk::simple::Transform::SetInverse()

Try to change the current transform to it's inverse.


If the transform has an inverse, i.e. non-singular linear transforms,
then a new ITK transform is created of the same type and this object
is set to it.

However not all transform have a direct inverse, if the inverse does
not exist or fails false will be returned and this transform will not
be modified.

*/
public ";

%javamethodmodifiers  rtk::simple::Transform::ToString "/**
std::string rtk::simple::Transform::ToString(void) const
*/
public ";

%javamethodmodifiers  rtk::simple::Transform::Transform "/**
rtk::simple::Transform::Transform(void)

By default a 3-d identity transform is constructed.

*/
public ";

%javamethodmodifiers  rtk::simple::Transform::Transform "/**
rtk::simple::Transform::Transform(itk::CompositeTransform< double, NDimension > *compositeTransform)

Construct a SimpleRTK Transform from a pointer to an ITK composite transform.

*/
public ";

%javamethodmodifiers  rtk::simple::Transform::Transform "/**
rtk::simple::Transform::Transform(itk::TransformBase *transform)
*/
public ";

%javamethodmodifiers  rtk::simple::Transform::Transform "/**
rtk::simple::Transform::Transform(unsigned int dimensions, TransformEnum type)

Construct a specific transformation.


Deprecated
This constructor will be removed in future releases.


*/
public ";

%javamethodmodifiers  rtk::simple::Transform::Transform "/**
rtk::simple::Transform::Transform(Image &displacement, TransformEnum type=srtkDisplacementField)

Use an image to construct a transform.


The input displacement image is transferred to the constructed
transform object. The input image is modified to be a default
constructed Image object.

Only the srtkDisplacementField transformation type can currently be
constructed this way. Image must be of srtkVectorFloat64 pixel type with the number of components
equal to the image dimension.

Deprecated
This constructor will be removed in future releases.


*/
public ";

%javamethodmodifiers  rtk::simple::Transform::TransformPoint "/**
std::vector< double > rtk::simple::Transform::TransformPoint(const std::vector< double > &point) const
*/
public ";

%javamethodmodifiers  rtk::simple::Transform::WriteTransform "/**
void rtk::simple::Transform::WriteTransform(const std::string &filename) const
*/
public ";

%javamethodmodifiers  rtk::simple::Transform::~Transform "/**
virtual rtk::simple::Transform::~Transform(void)
*/
public ";


%typemap(javaimports) rtk::simple::TransformToDisplacementFieldFilter "/**

Generate a displacement field from a coordinate transform.


Output information (spacing, size and direction) for the output image
should be set. This information has the normal defaults of unit
spacing, zero origin and identity direction. Optionally, the output
information can be obtained from a reference image. If the reference
image is provided and UseReferenceImage is On, then the spacing,
origin and direction of the reference image will be used.

Since this filter produces an image which is a different size than its
input, it needs to override several of the methods defined in ProcessObject in order to properly manage the pipeline execution model. In
particular, this filter overrides
ProcessObject::GenerateOutputInformation() .

This filter is implemented as a multithreaded filter. It provides a
ThreadedGenerateData() method for its implementation.


Marius Staring, Leiden University Medical Center, The Netherlands.
 This class was taken from the Insight Journal paper: https://hdl.handle.net/1926/1387
See:
 rtk::simple::TransformToDisplacementFieldFilter for the procedural interface

 itk::TransformToDisplacementFieldFilter for the Doxygen on the original ITK class.


C++ includes: srtkTransformToDisplacementFieldFilter.h
*/"

%javamethodmodifiers  rtk::simple::TransformToDisplacementFieldFilter::Execute "/**
Image rtk::simple::TransformToDisplacementFieldFilter::Execute(const Transform &transform)

Execute the filter on the input image

*/
public ";

%javamethodmodifiers  rtk::simple::TransformToDisplacementFieldFilter::Execute "/**
Image rtk::simple::TransformToDisplacementFieldFilter::Execute(const Transform &transform, PixelIDValueEnum outputPixelType, const
std::vector< unsigned int > &size, const std::vector< double >
&outputOrigin, const std::vector< double > &outputSpacing,
std::vector< double > outputDirection)

Execute the filter on the input image with the given parameters

*/
public ";

%javamethodmodifiers  rtk::simple::TransformToDisplacementFieldFilter::GetName "/**
std::string rtk::simple::TransformToDisplacementFieldFilter::GetName() const

Name of this class

*/
public ";

%javamethodmodifiers  rtk::simple::TransformToDisplacementFieldFilter::GetOutputDirection "/**
std::vector<double> rtk::simple::TransformToDisplacementFieldFilter::GetOutputDirection() const

Set the output direction cosine matrix.

*/
public ";

%javamethodmodifiers  rtk::simple::TransformToDisplacementFieldFilter::GetOutputOrigin "/**
std::vector<double> rtk::simple::TransformToDisplacementFieldFilter::GetOutputOrigin() const

Get the output image origin.

*/
public ";

%javamethodmodifiers  rtk::simple::TransformToDisplacementFieldFilter::GetOutputPixelType "/**
PixelIDValueEnum rtk::simple::TransformToDisplacementFieldFilter::GetOutputPixelType() const

Get the ouput pixel type.

*/
public ";

%javamethodmodifiers  rtk::simple::TransformToDisplacementFieldFilter::GetOutputSpacing "/**
std::vector<double> rtk::simple::TransformToDisplacementFieldFilter::GetOutputSpacing() const

Get the output image spacing.

*/
public ";

%javamethodmodifiers  rtk::simple::TransformToDisplacementFieldFilter::GetSize "/**
std::vector<unsigned int> rtk::simple::TransformToDisplacementFieldFilter::GetSize() const

Set/Get the size of the output image.

*/
public ";

%javamethodmodifiers  rtk::simple::TransformToDisplacementFieldFilter::SetOutputDirection "/**
Self& rtk::simple::TransformToDisplacementFieldFilter::SetOutputDirection(std::vector< double > OutputDirection)

Set the output direction cosine matrix.

*/
public ";

%javamethodmodifiers  rtk::simple::TransformToDisplacementFieldFilter::SetOutputOrigin "/**
Self& rtk::simple::TransformToDisplacementFieldFilter::SetOutputOrigin(const std::vector< double > &OutputOrigin)

Set the output image origin.

*/
public ";

%javamethodmodifiers  rtk::simple::TransformToDisplacementFieldFilter::SetOutputPixelType "/**
Self& rtk::simple::TransformToDisplacementFieldFilter::SetOutputPixelType(PixelIDValueEnum OutputPixelType)

Set the output pixel type, only srtkVectorFloat32 and
srtkVectorFloat64 are supported.

*/
public ";

%javamethodmodifiers  rtk::simple::TransformToDisplacementFieldFilter::SetOutputSpacing "/**
Self& rtk::simple::TransformToDisplacementFieldFilter::SetOutputSpacing(const std::vector< double > &OutputSpacing)

Set the output image spacing.

*/
public ";

%javamethodmodifiers  rtk::simple::TransformToDisplacementFieldFilter::SetReferenceImage "/**
void rtk::simple::TransformToDisplacementFieldFilter::SetReferenceImage(const Image &refImage)

This methods sets the size, origin, spacing and direction to that of
the provided image

*/
public ";

%javamethodmodifiers  rtk::simple::TransformToDisplacementFieldFilter::SetSize "/**
Self& rtk::simple::TransformToDisplacementFieldFilter::SetSize(const std::vector< unsigned int > &Size)

Set/Get the size of the output image.

*/
public ";

%javamethodmodifiers  rtk::simple::TransformToDisplacementFieldFilter::ToString "/**
std::string rtk::simple::TransformToDisplacementFieldFilter::ToString() const

Print ourselves out

*/
public ";

%javamethodmodifiers  rtk::simple::TransformToDisplacementFieldFilter::TransformToDisplacementFieldFilter "/**
rtk::simple::TransformToDisplacementFieldFilter::TransformToDisplacementFieldFilter()

Default Constructor that takes no arguments and initializes default
parameters

*/
public ";

%javamethodmodifiers  rtk::simple::TransformToDisplacementFieldFilter::~TransformToDisplacementFieldFilter "/**
rtk::simple::TransformToDisplacementFieldFilter::~TransformToDisplacementFieldFilter()

Destructor

*/
public ";


%typemap(javaimports) rtk::simple::TranslationTransform "/**

Translation of a 2D or 3D coordinate space.



See:
 itk::TranslationTransform


C++ includes: srtkTranslationTransform.h
*/"

%javamethodmodifiers  rtk::simple::TranslationTransform::GetOffset "/**
std::vector<double> rtk::simple::TranslationTransform::GetOffset() const
*/
public ";

%javamethodmodifiers  rtk::simple::TranslationTransform::SetOffset "/**
Self& rtk::simple::TranslationTransform::SetOffset(const std::vector< double > &params)
*/
public ";

%javamethodmodifiers  rtk::simple::TranslationTransform::TranslationTransform "/**
rtk::simple::TranslationTransform::TranslationTransform(unsigned int dimensions, const std::vector< double >
&offset=std::vector< double >(3, 0.0))
*/
public ";

%javamethodmodifiers  rtk::simple::TranslationTransform::TranslationTransform "/**
rtk::simple::TranslationTransform::TranslationTransform(const TranslationTransform &)
*/
public ";

%javamethodmodifiers  rtk::simple::TranslationTransform::TranslationTransform "/**
rtk::simple::TranslationTransform::TranslationTransform(const Transform &)
*/
public ";


%typemap(javaimports) rtk::simple::TriangleThresholdImageFilter "/**

Threshold an image using the Triangle Threshold.


This filter creates a binary thresholded image that separates an image
into foreground and background components. The filter computes the
threshold using the TriangleThresholdCalculator and applies that theshold to the input image using the BinaryThresholdImageFilter .


Richard Beare. Department of Medicine, Monash University, Melbourne,
Australia.
 Gaetan Lehmann. Biologie du Developpement et de la Reproduction, INRA
de Jouy-en-Josas, France.

This implementation was taken from the Insight Journal paper: https://hdl.handle.net/10380/3279 or http://www.insight-journal.org/browse/publication/811


See:
 HistogramThresholdImageFilter

 rtk::simple::TriangleThreshold for the procedural interface

 itk::TriangleThresholdImageFilter for the Doxygen on the original ITK class.


C++ includes: srtkTriangleThresholdImageFilter.h
*/"

%javamethodmodifiers  rtk::simple::TriangleThresholdImageFilter::Execute "/**
Image rtk::simple::TriangleThresholdImageFilter::Execute(const Image &image, const Image &maskImage)

Execute the filter on the input image

*/
public ";

%javamethodmodifiers  rtk::simple::TriangleThresholdImageFilter::Execute "/**
Image rtk::simple::TriangleThresholdImageFilter::Execute(const Image &image)
*/
public ";

%javamethodmodifiers  rtk::simple::TriangleThresholdImageFilter::Execute "/**
Image rtk::simple::TriangleThresholdImageFilter::Execute(const Image &image, const Image &maskImage, uint8_t insideValue,
uint8_t outsideValue, uint32_t numberOfHistogramBins, bool maskOutput,
uint8_t maskValue)

Execute the filter on the input image with the given parameters

*/
public ";

%javamethodmodifiers  rtk::simple::TriangleThresholdImageFilter::Execute "/**
Image rtk::simple::TriangleThresholdImageFilter::Execute(const Image &image, uint8_t insideValue, uint8_t outsideValue,
uint32_t numberOfHistogramBins, bool maskOutput, uint8_t maskValue)
*/
public ";

%javamethodmodifiers  rtk::simple::TriangleThresholdImageFilter::GetInsideValue "/**
uint8_t rtk::simple::TriangleThresholdImageFilter::GetInsideValue() const

Get the \"inside\" pixel value.

*/
public ";

%javamethodmodifiers  rtk::simple::TriangleThresholdImageFilter::GetMaskOutput "/**
bool rtk::simple::TriangleThresholdImageFilter::GetMaskOutput() const
*/
public ";

%javamethodmodifiers  rtk::simple::TriangleThresholdImageFilter::GetMaskValue "/**
uint8_t rtk::simple::TriangleThresholdImageFilter::GetMaskValue() const
*/
public ";

%javamethodmodifiers  rtk::simple::TriangleThresholdImageFilter::GetName "/**
std::string rtk::simple::TriangleThresholdImageFilter::GetName() const

Name of this class

*/
public ";

%javamethodmodifiers  rtk::simple::TriangleThresholdImageFilter::GetNumberOfHistogramBins "/**
uint32_t rtk::simple::TriangleThresholdImageFilter::GetNumberOfHistogramBins() const
*/
public ";

%javamethodmodifiers  rtk::simple::TriangleThresholdImageFilter::GetOutsideValue "/**
uint8_t rtk::simple::TriangleThresholdImageFilter::GetOutsideValue() const

Get the \"outside\" pixel value.

*/
public ";

%javamethodmodifiers  rtk::simple::TriangleThresholdImageFilter::GetThreshold "/**
double rtk::simple::TriangleThresholdImageFilter::GetThreshold() const

Get the computed threshold.


This is a measurement. Its value is updated in the Execute methods, so
the value will only be valid after an execution.

*/
public ";

%javamethodmodifiers  rtk::simple::TriangleThresholdImageFilter::MaskOutputOff "/**
Self& rtk::simple::TriangleThresholdImageFilter::MaskOutputOff()
*/
public ";

%javamethodmodifiers  rtk::simple::TriangleThresholdImageFilter::MaskOutputOn "/**
Self& rtk::simple::TriangleThresholdImageFilter::MaskOutputOn()

Set the value of MaskOutput to true or false respectfully.

*/
public ";

%javamethodmodifiers  rtk::simple::TriangleThresholdImageFilter::SetInsideValue "/**
Self& rtk::simple::TriangleThresholdImageFilter::SetInsideValue(uint8_t InsideValue)

Set the \"inside\" pixel value.

*/
public ";

%javamethodmodifiers  rtk::simple::TriangleThresholdImageFilter::SetMaskOutput "/**
Self& rtk::simple::TriangleThresholdImageFilter::SetMaskOutput(bool MaskOutput)

Do you want the output to be masked by the mask used in histogram
construction. Only relevant if masking is in use.

*/
public ";

%javamethodmodifiers  rtk::simple::TriangleThresholdImageFilter::SetMaskValue "/**
Self& rtk::simple::TriangleThresholdImageFilter::SetMaskValue(uint8_t MaskValue)

The value in the mask image, if used, indicating voxels that should be
included. Default is the max of pixel type, as in the
MaskedImageToHistogramFilter

*/
public ";

%javamethodmodifiers  rtk::simple::TriangleThresholdImageFilter::SetNumberOfHistogramBins "/**
Self& rtk::simple::TriangleThresholdImageFilter::SetNumberOfHistogramBins(uint32_t NumberOfHistogramBins)

Set/Get the number of histogram bins.

*/
public ";

%javamethodmodifiers  rtk::simple::TriangleThresholdImageFilter::SetOutsideValue "/**
Self& rtk::simple::TriangleThresholdImageFilter::SetOutsideValue(uint8_t OutsideValue)

Set the \"outside\" pixel value. The default value NumericTraits<OutputPixelType>::Zero.

*/
public ";

%javamethodmodifiers  rtk::simple::TriangleThresholdImageFilter::ToString "/**
std::string rtk::simple::TriangleThresholdImageFilter::ToString() const

Print ourselves out

*/
public ";

%javamethodmodifiers  rtk::simple::TriangleThresholdImageFilter::TriangleThresholdImageFilter "/**
rtk::simple::TriangleThresholdImageFilter::TriangleThresholdImageFilter()

Default Constructor that takes no arguments and initializes default
parameters

*/
public ";

%javamethodmodifiers  rtk::simple::TriangleThresholdImageFilter::~TriangleThresholdImageFilter "/**
rtk::simple::TriangleThresholdImageFilter::~TriangleThresholdImageFilter()

Destructor

*/
public ";


%typemap(javaimports) rtk::simple::UnaryMinusImageFilter "/**

Computes the negative of each pixel.



See:
 rtk::simple::UnaryMinus for the procedural interface

 itk::UnaryFunctorImageFilter for the Doxygen on the original ITK class.


C++ includes: srtkUnaryMinusImageFilter.h
*/"

%javamethodmodifiers  rtk::simple::UnaryMinusImageFilter::Execute "/**
Image rtk::simple::UnaryMinusImageFilter::Execute(const Image &image1)

Execute the filter on the input image

*/
public ";

%javamethodmodifiers  rtk::simple::UnaryMinusImageFilter::GetName "/**
std::string rtk::simple::UnaryMinusImageFilter::GetName() const

Name of this class

*/
public ";

%javamethodmodifiers  rtk::simple::UnaryMinusImageFilter::ToString "/**
std::string rtk::simple::UnaryMinusImageFilter::ToString() const

Print ourselves out

*/
public ";

%javamethodmodifiers  rtk::simple::UnaryMinusImageFilter::UnaryMinusImageFilter "/**
rtk::simple::UnaryMinusImageFilter::UnaryMinusImageFilter()

Default Constructor that takes no arguments and initializes default
parameters

*/
public ";

%javamethodmodifiers  rtk::simple::UnaryMinusImageFilter::~UnaryMinusImageFilter "/**
rtk::simple::UnaryMinusImageFilter::~UnaryMinusImageFilter()

Destructor

*/
public ";


%typemap(javaimports) rtk::simple::ValuedRegionalMaximaImageFilter "/**

Transforms the image so that any pixel that is not a regional maxima
is set to the minimum value for the pixel type. Pixels that are
regional maxima retain their value.


Regional maxima are flat zones surrounded by pixels of lower value. A
completely flat image will be marked as a regional maxima by this
filter.

This code was contributed in the Insight Journal paper: \"Finding
regional extrema - methods and performance\" by Beare R., Lehmann G. https://hdl.handle.net/1926/153 http://www.insight-journal.org/browse/publication/65


Richard Beare. Department of Medicine, Monash University, Melbourne,
Australia.

See:
 ValuedRegionalMinimaImageFilter


 ValuedRegionalExtremaImageFilter


 HMinimaImageFilter
Wiki Examples:

All Examples

ValuedRegionalMaximaImageFilter
See:
 rtk::simple::ValuedRegionalMaxima for the procedural interface

 itk::ValuedRegionalMaximaImageFilter for the Doxygen on the original ITK class.



C++ includes: srtkValuedRegionalMaximaImageFilter.h
*/"

%javamethodmodifiers  rtk::simple::ValuedRegionalMaximaImageFilter::Execute "/**
Image rtk::simple::ValuedRegionalMaximaImageFilter::Execute(const Image &image1)

Execute the filter on the input image

*/
public ";

%javamethodmodifiers  rtk::simple::ValuedRegionalMaximaImageFilter::Execute "/**
Image rtk::simple::ValuedRegionalMaximaImageFilter::Execute(const Image &image1, bool fullyConnected)

Execute the filter on the input image with the given parameters

*/
public ";

%javamethodmodifiers  rtk::simple::ValuedRegionalMaximaImageFilter::FullyConnectedOff "/**
Self& rtk::simple::ValuedRegionalMaximaImageFilter::FullyConnectedOff()
*/
public ";

%javamethodmodifiers  rtk::simple::ValuedRegionalMaximaImageFilter::FullyConnectedOn "/**
Self& rtk::simple::ValuedRegionalMaximaImageFilter::FullyConnectedOn()

Set the value of FullyConnected to true or false respectfully.

*/
public ";

%javamethodmodifiers  rtk::simple::ValuedRegionalMaximaImageFilter::GetFlat "/**
bool rtk::simple::ValuedRegionalMaximaImageFilter::GetFlat() const

This is a measurement. Its value is updated in the Execute methods, so
the value will only be valid after an execution.

*/
public ";

%javamethodmodifiers  rtk::simple::ValuedRegionalMaximaImageFilter::GetFullyConnected "/**
bool rtk::simple::ValuedRegionalMaximaImageFilter::GetFullyConnected() const
*/
public ";

%javamethodmodifiers  rtk::simple::ValuedRegionalMaximaImageFilter::GetName "/**
std::string rtk::simple::ValuedRegionalMaximaImageFilter::GetName() const

Name of this class

*/
public ";

%javamethodmodifiers  rtk::simple::ValuedRegionalMaximaImageFilter::SetFullyConnected "/**
Self& rtk::simple::ValuedRegionalMaximaImageFilter::SetFullyConnected(bool FullyConnected)
*/
public ";

%javamethodmodifiers  rtk::simple::ValuedRegionalMaximaImageFilter::ToString "/**
std::string rtk::simple::ValuedRegionalMaximaImageFilter::ToString() const

Print ourselves out

*/
public ";

%javamethodmodifiers  rtk::simple::ValuedRegionalMaximaImageFilter::ValuedRegionalMaximaImageFilter "/**
rtk::simple::ValuedRegionalMaximaImageFilter::ValuedRegionalMaximaImageFilter()

Default Constructor that takes no arguments and initializes default
parameters

*/
public ";

%javamethodmodifiers  rtk::simple::ValuedRegionalMaximaImageFilter::~ValuedRegionalMaximaImageFilter "/**
rtk::simple::ValuedRegionalMaximaImageFilter::~ValuedRegionalMaximaImageFilter()

Destructor

*/
public ";


%typemap(javaimports) rtk::simple::ValuedRegionalMinimaImageFilter "/**

Transforms the image so that any pixel that is not a regional minima
is set to the maximum value for the pixel type. Pixels that are
regional minima retain their value.


Regional minima are flat zones surrounded by pixels of higher value. A
completely flat image will be marked as a regional minima by this
filter.

This code was contributed in the Insight Journal paper: \"Finding
regional extrema - methods and performance\" by Beare R., Lehmann G. https://hdl.handle.net/1926/153 http://www.insight-journal.org/browse/publication/65


Richard Beare. Department of Medicine, Monash University, Melbourne,
Australia.

See:
 ValuedRegionalMaximaImageFilter , ValuedRegionalExtremaImageFilter ,


 HMinimaImageFilter
Wiki Examples:

All Examples

ValuedRegionalMinimaImageFilter
See:
 rtk::simple::ValuedRegionalMinima for the procedural interface

 itk::ValuedRegionalMinimaImageFilter for the Doxygen on the original ITK class.



C++ includes: srtkValuedRegionalMinimaImageFilter.h
*/"

%javamethodmodifiers  rtk::simple::ValuedRegionalMinimaImageFilter::Execute "/**
Image rtk::simple::ValuedRegionalMinimaImageFilter::Execute(const Image &image1)

Execute the filter on the input image

*/
public ";

%javamethodmodifiers  rtk::simple::ValuedRegionalMinimaImageFilter::Execute "/**
Image rtk::simple::ValuedRegionalMinimaImageFilter::Execute(const Image &image1, bool fullyConnected)

Execute the filter on the input image with the given parameters

*/
public ";

%javamethodmodifiers  rtk::simple::ValuedRegionalMinimaImageFilter::FullyConnectedOff "/**
Self& rtk::simple::ValuedRegionalMinimaImageFilter::FullyConnectedOff()
*/
public ";

%javamethodmodifiers  rtk::simple::ValuedRegionalMinimaImageFilter::FullyConnectedOn "/**
Self& rtk::simple::ValuedRegionalMinimaImageFilter::FullyConnectedOn()

Set the value of FullyConnected to true or false respectfully.

*/
public ";

%javamethodmodifiers  rtk::simple::ValuedRegionalMinimaImageFilter::GetFlat "/**
bool rtk::simple::ValuedRegionalMinimaImageFilter::GetFlat() const

This is a measurement. Its value is updated in the Execute methods, so
the value will only be valid after an execution.

*/
public ";

%javamethodmodifiers  rtk::simple::ValuedRegionalMinimaImageFilter::GetFullyConnected "/**
bool rtk::simple::ValuedRegionalMinimaImageFilter::GetFullyConnected() const
*/
public ";

%javamethodmodifiers  rtk::simple::ValuedRegionalMinimaImageFilter::GetName "/**
std::string rtk::simple::ValuedRegionalMinimaImageFilter::GetName() const

Name of this class

*/
public ";

%javamethodmodifiers  rtk::simple::ValuedRegionalMinimaImageFilter::SetFullyConnected "/**
Self& rtk::simple::ValuedRegionalMinimaImageFilter::SetFullyConnected(bool FullyConnected)
*/
public ";

%javamethodmodifiers  rtk::simple::ValuedRegionalMinimaImageFilter::ToString "/**
std::string rtk::simple::ValuedRegionalMinimaImageFilter::ToString() const

Print ourselves out

*/
public ";

%javamethodmodifiers  rtk::simple::ValuedRegionalMinimaImageFilter::ValuedRegionalMinimaImageFilter "/**
rtk::simple::ValuedRegionalMinimaImageFilter::ValuedRegionalMinimaImageFilter()

Default Constructor that takes no arguments and initializes default
parameters

*/
public ";

%javamethodmodifiers  rtk::simple::ValuedRegionalMinimaImageFilter::~ValuedRegionalMinimaImageFilter "/**
rtk::simple::ValuedRegionalMinimaImageFilter::~ValuedRegionalMinimaImageFilter()

Destructor

*/
public ";


%typemap(javaimports) rtk::simple::VectorConfidenceConnectedImageFilter "/**

Segment pixels with similar statistics using connectivity.


This filter extracts a connected set of pixels whose pixel intensities
are consistent with the pixel statistics of a seed point. The mean and
variance across a neighborhood (8-connected, 26-connected, etc.) are
calculated for a seed point. Then pixels connected to this seed point
whose values are within the confidence interval for the seed point are
grouped. The width of the confidence interval is controlled by the
\"Multiplier\" variable (the confidence interval is the mean plus or
minus the \"Multiplier\" times the standard deviation). If the
intensity variations across a segment were gaussian, a \"Multiplier\"
setting of 2.5 would define a confidence interval wide enough to
capture 99% of samples in the segment.

After this initial segmentation is calculated, the mean and variance
are re-calculated. All the pixels in the previous segmentation are
used to calculate the mean the standard deviation (as opposed to using
the pixels in the neighborhood of the seed point). The segmentation is
then recalculted using these refined estimates for the mean and
variance of the pixel values. This process is repeated for the
specified number of iterations. Setting the \"NumberOfIterations\" to
zero stops the algorithm after the initial segmentation from the seed
point.

NOTE: the lower and upper threshold are restricted to lie within the
valid numeric limits of the input data pixel type. Also, the limits
may be adjusted to contain the seed point's intensity.
See:
 rtk::simple::VectorConfidenceConnected for the procedural interface

 itk::VectorConfidenceConnectedImageFilter for the Doxygen on the original ITK class.


C++ includes: srtkVectorConfidenceConnectedImageFilter.h
*/"

%javamethodmodifiers  rtk::simple::VectorConfidenceConnectedImageFilter::AddSeed "/**
Self& rtk::simple::VectorConfidenceConnectedImageFilter::AddSeed(const std::vector< unsigned int > &idx)

AddSeed - Add a seed to the end of the list

*/
public ";

%javamethodmodifiers  rtk::simple::VectorConfidenceConnectedImageFilter::ClearSeeds "/**
Self& rtk::simple::VectorConfidenceConnectedImageFilter::ClearSeeds()

ClearSeeds - Clear out all seeds in the list

*/
public ";

%javamethodmodifiers  rtk::simple::VectorConfidenceConnectedImageFilter::Execute "/**
Image rtk::simple::VectorConfidenceConnectedImageFilter::Execute(const Image &image1)

Execute the filter on the input image

*/
public ";

%javamethodmodifiers  rtk::simple::VectorConfidenceConnectedImageFilter::Execute "/**
Image rtk::simple::VectorConfidenceConnectedImageFilter::Execute(const Image &image1, const std::vector< std::vector< unsigned int > >
&seedList, unsigned int numberOfIterations, double multiplier,
unsigned int initialNeighborhoodRadius, uint8_t replaceValue)

Execute the filter on the input image with the given parameters

*/
public ";

%javamethodmodifiers  rtk::simple::VectorConfidenceConnectedImageFilter::GetCovariance "/**
std::vector<double> rtk::simple::VectorConfidenceConnectedImageFilter::GetCovariance() const

Get the Covariance matrix computed during the segmentation

This is a measurement. Its value is updated in the Execute methods, so
the value will only be valid after an execution.

*/
public ";

%javamethodmodifiers  rtk::simple::VectorConfidenceConnectedImageFilter::GetInitialNeighborhoodRadius "/**
unsigned int rtk::simple::VectorConfidenceConnectedImageFilter::GetInitialNeighborhoodRadius() const

Get/Set the radius of the neighborhood over which the statistics are
evaluated

*/
public ";

%javamethodmodifiers  rtk::simple::VectorConfidenceConnectedImageFilter::GetMean "/**
std::vector<double> rtk::simple::VectorConfidenceConnectedImageFilter::GetMean() const

Get the Mean Vector computed during the segmentation

This is a measurement. Its value is updated in the Execute methods, so
the value will only be valid after an execution.

*/
public ";

%javamethodmodifiers  rtk::simple::VectorConfidenceConnectedImageFilter::GetMultiplier "/**
double rtk::simple::VectorConfidenceConnectedImageFilter::GetMultiplier() const

Set/Get the multiplier to define the confidence interval. Multiplier
can be anything greater than zero. A typical value is 2.5

*/
public ";

%javamethodmodifiers  rtk::simple::VectorConfidenceConnectedImageFilter::GetName "/**
std::string rtk::simple::VectorConfidenceConnectedImageFilter::GetName() const

Name of this class

*/
public ";

%javamethodmodifiers  rtk::simple::VectorConfidenceConnectedImageFilter::GetNumberOfIterations "/**
unsigned int rtk::simple::VectorConfidenceConnectedImageFilter::GetNumberOfIterations() const

Set/Get the number of iterations

*/
public ";

%javamethodmodifiers  rtk::simple::VectorConfidenceConnectedImageFilter::GetReplaceValue "/**
uint8_t rtk::simple::VectorConfidenceConnectedImageFilter::GetReplaceValue() const

Set/Get value to replace thresholded pixels

*/
public ";

%javamethodmodifiers  rtk::simple::VectorConfidenceConnectedImageFilter::GetSeedList "/**
std::vector< std::vector<unsigned int> > rtk::simple::VectorConfidenceConnectedImageFilter::GetSeedList() const

Get SeedList

*/
public ";

%javamethodmodifiers  rtk::simple::VectorConfidenceConnectedImageFilter::SetInitialNeighborhoodRadius "/**
Self& rtk::simple::VectorConfidenceConnectedImageFilter::SetInitialNeighborhoodRadius(unsigned int InitialNeighborhoodRadius)

Get/Set the radius of the neighborhood over which the statistics are
evaluated

*/
public ";

%javamethodmodifiers  rtk::simple::VectorConfidenceConnectedImageFilter::SetMultiplier "/**
Self& rtk::simple::VectorConfidenceConnectedImageFilter::SetMultiplier(double Multiplier)

Set/Get the multiplier to define the confidence interval. Multiplier
can be anything greater than zero. A typical value is 2.5

*/
public ";

%javamethodmodifiers  rtk::simple::VectorConfidenceConnectedImageFilter::SetNumberOfIterations "/**
Self& rtk::simple::VectorConfidenceConnectedImageFilter::SetNumberOfIterations(unsigned int NumberOfIterations)

Set/Get the number of iterations

*/
public ";

%javamethodmodifiers  rtk::simple::VectorConfidenceConnectedImageFilter::SetReplaceValue "/**
Self& rtk::simple::VectorConfidenceConnectedImageFilter::SetReplaceValue(uint8_t ReplaceValue)

Set/Get value to replace thresholded pixels

*/
public ";

%javamethodmodifiers  rtk::simple::VectorConfidenceConnectedImageFilter::SetSeed "/**
Self& rtk::simple::VectorConfidenceConnectedImageFilter::SetSeed(const std::vector< unsigned int > &idx)

SetSeed - Set list to a single seed

*/
public ";

%javamethodmodifiers  rtk::simple::VectorConfidenceConnectedImageFilter::SetSeedList "/**
Self& rtk::simple::VectorConfidenceConnectedImageFilter::SetSeedList(const std::vector< std::vector< unsigned int > > &t)

Set SeedList

*/
public ";

%javamethodmodifiers  rtk::simple::VectorConfidenceConnectedImageFilter::ToString "/**
std::string rtk::simple::VectorConfidenceConnectedImageFilter::ToString() const

Print ourselves out

*/
public ";

%javamethodmodifiers  rtk::simple::VectorConfidenceConnectedImageFilter::VectorConfidenceConnectedImageFilter "/**
rtk::simple::VectorConfidenceConnectedImageFilter::VectorConfidenceConnectedImageFilter()

Default Constructor that takes no arguments and initializes default
parameters

*/
public ";

%javamethodmodifiers  rtk::simple::VectorConfidenceConnectedImageFilter::~VectorConfidenceConnectedImageFilter "/**
rtk::simple::VectorConfidenceConnectedImageFilter::~VectorConfidenceConnectedImageFilter()

Destructor

*/
public ";


%typemap(javaimports) rtk::simple::VectorConnectedComponentImageFilter "/**

A connected components filter that labels the objects in a vector
image. Two vectors are pointing similar directions if one minus their
dot product is less than a threshold. Vectors that are 180 degrees out
of phase are similar. Assumes that vectors are normalized.



See:
 rtk::simple::VectorConnectedComponent for the procedural interface

 itk::VectorConnectedComponentImageFilter for the Doxygen on the original ITK class.


C++ includes: srtkVectorConnectedComponentImageFilter.h
*/"

%javamethodmodifiers  rtk::simple::VectorConnectedComponentImageFilter::Execute "/**
Image rtk::simple::VectorConnectedComponentImageFilter::Execute(const Image &image1)

Execute the filter on the input image

*/
public ";

%javamethodmodifiers  rtk::simple::VectorConnectedComponentImageFilter::Execute "/**
Image rtk::simple::VectorConnectedComponentImageFilter::Execute(const Image &image1, double distanceThreshold, bool fullyConnected)

Execute the filter on the input image with the given parameters

*/
public ";

%javamethodmodifiers  rtk::simple::VectorConnectedComponentImageFilter::FullyConnectedOff "/**
Self& rtk::simple::VectorConnectedComponentImageFilter::FullyConnectedOff()
*/
public ";

%javamethodmodifiers  rtk::simple::VectorConnectedComponentImageFilter::FullyConnectedOn "/**
Self& rtk::simple::VectorConnectedComponentImageFilter::FullyConnectedOn()

Set the value of FullyConnected to true or false respectfully.

*/
public ";

%javamethodmodifiers  rtk::simple::VectorConnectedComponentImageFilter::GetDistanceThreshold "/**
double rtk::simple::VectorConnectedComponentImageFilter::GetDistanceThreshold() const
*/
public ";

%javamethodmodifiers  rtk::simple::VectorConnectedComponentImageFilter::GetFullyConnected "/**
bool rtk::simple::VectorConnectedComponentImageFilter::GetFullyConnected() const
*/
public ";

%javamethodmodifiers  rtk::simple::VectorConnectedComponentImageFilter::GetName "/**
std::string rtk::simple::VectorConnectedComponentImageFilter::GetName() const

Name of this class

*/
public ";

%javamethodmodifiers  rtk::simple::VectorConnectedComponentImageFilter::SetDistanceThreshold "/**
Self& rtk::simple::VectorConnectedComponentImageFilter::SetDistanceThreshold(double DistanceThreshold)
*/
public ";

%javamethodmodifiers  rtk::simple::VectorConnectedComponentImageFilter::SetFullyConnected "/**
Self& rtk::simple::VectorConnectedComponentImageFilter::SetFullyConnected(bool FullyConnected)
*/
public ";

%javamethodmodifiers  rtk::simple::VectorConnectedComponentImageFilter::ToString "/**
std::string rtk::simple::VectorConnectedComponentImageFilter::ToString() const

Print ourselves out

*/
public ";

%javamethodmodifiers  rtk::simple::VectorConnectedComponentImageFilter::VectorConnectedComponentImageFilter "/**
rtk::simple::VectorConnectedComponentImageFilter::VectorConnectedComponentImageFilter()

Default Constructor that takes no arguments and initializes default
parameters

*/
public ";

%javamethodmodifiers  rtk::simple::VectorConnectedComponentImageFilter::~VectorConnectedComponentImageFilter "/**
rtk::simple::VectorConnectedComponentImageFilter::~VectorConnectedComponentImageFilter()

Destructor

*/
public ";


%typemap(javaimports) rtk::simple::VectorIndexSelectionCastImageFilter "/**

Extracts the selected index of the vector that is the input pixel
type.


This filter is templated over the input image type and output image
type.

The filter expect the input image pixel type to be a vector and the
output image pixel type to be a scalar. The only requirement on the
type used for representing the vector is that it must provide an
operator[].


See:
 ComposeImageFilter
Wiki Examples:

All Examples

Extract a component/channel of a vector image
See:
 rtk::simple::VectorIndexSelectionCast for the procedural interface

 itk::VectorIndexSelectionCastImageFilter for the Doxygen on the original ITK class.



C++ includes: srtkVectorIndexSelectionCastImageFilter.h
*/"

%javamethodmodifiers  rtk::simple::VectorIndexSelectionCastImageFilter::Execute "/**
Image rtk::simple::VectorIndexSelectionCastImageFilter::Execute(const Image &image1)

Execute the filter on the input image

*/
public ";

%javamethodmodifiers  rtk::simple::VectorIndexSelectionCastImageFilter::Execute "/**
Image rtk::simple::VectorIndexSelectionCastImageFilter::Execute(const Image &image1, unsigned int index, PixelIDValueEnum
outputPixelType)

Execute the filter on the input image with the given parameters

*/
public ";

%javamethodmodifiers  rtk::simple::VectorIndexSelectionCastImageFilter::GetIndex "/**
unsigned int rtk::simple::VectorIndexSelectionCastImageFilter::GetIndex() const
*/
public ";

%javamethodmodifiers  rtk::simple::VectorIndexSelectionCastImageFilter::GetName "/**
std::string rtk::simple::VectorIndexSelectionCastImageFilter::GetName() const

Name of this class

*/
public ";

%javamethodmodifiers  rtk::simple::VectorIndexSelectionCastImageFilter::GetOutputPixelType "/**
PixelIDValueEnum rtk::simple::VectorIndexSelectionCastImageFilter::GetOutputPixelType() const

Get the ouput pixel type.

*/
public ";

%javamethodmodifiers  rtk::simple::VectorIndexSelectionCastImageFilter::SetIndex "/**
Self& rtk::simple::VectorIndexSelectionCastImageFilter::SetIndex(unsigned int Index)

Get/Set methods for the index

*/
public ";

%javamethodmodifiers  rtk::simple::VectorIndexSelectionCastImageFilter::SetOutputPixelType "/**
Self& rtk::simple::VectorIndexSelectionCastImageFilter::SetOutputPixelType(PixelIDValueEnum OutputPixelType)

Set the output pixel type of the scalar component to extract.

*/
public ";

%javamethodmodifiers  rtk::simple::VectorIndexSelectionCastImageFilter::ToString "/**
std::string rtk::simple::VectorIndexSelectionCastImageFilter::ToString() const

Print ourselves out

*/
public ";

%javamethodmodifiers  rtk::simple::VectorIndexSelectionCastImageFilter::VectorIndexSelectionCastImageFilter "/**
rtk::simple::VectorIndexSelectionCastImageFilter::VectorIndexSelectionCastImageFilter()

Default Constructor that takes no arguments and initializes default
parameters

*/
public ";

%javamethodmodifiers  rtk::simple::VectorIndexSelectionCastImageFilter::~VectorIndexSelectionCastImageFilter "/**
rtk::simple::VectorIndexSelectionCastImageFilter::~VectorIndexSelectionCastImageFilter()

Destructor

*/
public ";


%typemap(javaimports) rtk::simple::VectorMagnitudeImageFilter "/**

Take an image of vectors as input and produce an image with the
magnitude of those vectors.


The filter expects the input image pixel type to be a vector and the
output image pixel type to be a scalar.

This filter assumes that the PixelType of the input image is a
VectorType that provides a GetNorm() method.

Wiki Examples:

All Examples

Compute the magnitude of each pixel in a vector image to produce a
magnitude image
See:
 rtk::simple::VectorMagnitude for the procedural interface

 itk::VectorMagnitudeImageFilter for the Doxygen on the original ITK class.



C++ includes: srtkVectorMagnitudeImageFilter.h
*/"

%javamethodmodifiers  rtk::simple::VectorMagnitudeImageFilter::Execute "/**
Image rtk::simple::VectorMagnitudeImageFilter::Execute(const Image &image1)

Execute the filter on the input image

*/
public ";

%javamethodmodifiers  rtk::simple::VectorMagnitudeImageFilter::GetName "/**
std::string rtk::simple::VectorMagnitudeImageFilter::GetName() const

Name of this class

*/
public ";

%javamethodmodifiers  rtk::simple::VectorMagnitudeImageFilter::ToString "/**
std::string rtk::simple::VectorMagnitudeImageFilter::ToString() const

Print ourselves out

*/
public ";

%javamethodmodifiers  rtk::simple::VectorMagnitudeImageFilter::VectorMagnitudeImageFilter "/**
rtk::simple::VectorMagnitudeImageFilter::VectorMagnitudeImageFilter()

Default Constructor that takes no arguments and initializes default
parameters

*/
public ";

%javamethodmodifiers  rtk::simple::VectorMagnitudeImageFilter::~VectorMagnitudeImageFilter "/**
rtk::simple::VectorMagnitudeImageFilter::~VectorMagnitudeImageFilter()

Destructor

*/
public ";


%typemap(javaimports) rtk::simple::Version "/**

Version info for SimpleRTK.

C++ includes: srtkVersion.h
*/"

%javamethodmodifiers  rtk::simple::Version::ToString "/**
std::string rtk::simple::Version::ToString()
*/
public ";


%typemap(javaimports) rtk::simple::VersorRigid3DTransform "/**

A rotation as a versor around a fixed center with translation of a 3D
coordinate space.



See:
 itk::VersorRigid3DTransform


C++ includes: srtkVersorRigid3DTransform.h
*/"

%javamethodmodifiers  rtk::simple::VersorRigid3DTransform::GetCenter "/**
std::vector<double> rtk::simple::VersorRigid3DTransform::GetCenter() const
*/
public ";

%javamethodmodifiers  rtk::simple::VersorRigid3DTransform::GetMatrix "/**
std::vector<double> rtk::simple::VersorRigid3DTransform::GetMatrix() const
*/
public ";

%javamethodmodifiers  rtk::simple::VersorRigid3DTransform::GetTranslation "/**
std::vector<double> rtk::simple::VersorRigid3DTransform::GetTranslation() const
*/
public ";

%javamethodmodifiers  rtk::simple::VersorRigid3DTransform::GetVersor "/**
std::vector<double> rtk::simple::VersorRigid3DTransform::GetVersor() const
*/
public ";

%javamethodmodifiers  rtk::simple::VersorRigid3DTransform::SetCenter "/**
Self& rtk::simple::VersorRigid3DTransform::SetCenter(const std::vector< double > &params)

fixed parameter

*/
public ";

%javamethodmodifiers  rtk::simple::VersorRigid3DTransform::SetMatrix "/**
Self& rtk::simple::VersorRigid3DTransform::SetMatrix(const std::vector< double > &matrix, double tolerance=1e-10)
*/
public ";

%javamethodmodifiers  rtk::simple::VersorRigid3DTransform::SetRotation "/**
Self& rtk::simple::VersorRigid3DTransform::SetRotation(const std::vector< double > &versor)

parameter

*/
public ";

%javamethodmodifiers  rtk::simple::VersorRigid3DTransform::SetRotation "/**
Self& rtk::simple::VersorRigid3DTransform::SetRotation(const std::vector< double > &axis, double angle)
*/
public ";

%javamethodmodifiers  rtk::simple::VersorRigid3DTransform::SetTranslation "/**
Self& rtk::simple::VersorRigid3DTransform::SetTranslation(const std::vector< double > &translation)
*/
public ";

%javamethodmodifiers  rtk::simple::VersorRigid3DTransform::Translate "/**
Self& rtk::simple::VersorRigid3DTransform::Translate(const std::vector< double > &offset)

additional methods

*/
public ";

%javamethodmodifiers  rtk::simple::VersorRigid3DTransform::VersorRigid3DTransform "/**
rtk::simple::VersorRigid3DTransform::VersorRigid3DTransform()
*/
public ";

%javamethodmodifiers  rtk::simple::VersorRigid3DTransform::VersorRigid3DTransform "/**
rtk::simple::VersorRigid3DTransform::VersorRigid3DTransform(const VersorRigid3DTransform &)
*/
public ";

%javamethodmodifiers  rtk::simple::VersorRigid3DTransform::VersorRigid3DTransform "/**
rtk::simple::VersorRigid3DTransform::VersorRigid3DTransform(const Transform &)
*/
public ";

%javamethodmodifiers  rtk::simple::VersorRigid3DTransform::VersorRigid3DTransform "/**
rtk::simple::VersorRigid3DTransform::VersorRigid3DTransform(const std::vector< double > &versor, const std::vector< double >
&translation=std::vector< double >(3, 0.0), const std::vector< double
> &fixedCenter=std::vector< double >(3, 0.0))
*/
public ";

%javamethodmodifiers  rtk::simple::VersorRigid3DTransform::VersorRigid3DTransform "/**
rtk::simple::VersorRigid3DTransform::VersorRigid3DTransform(const std::vector< double > &axis, double angle, const std::vector<
double > &translation=std::vector< double >(3, 0.0), const
std::vector< double > &fixedCenter=std::vector< double >(3, 0.0))
*/
public ";


%typemap(javaimports) rtk::simple::VersorTransform "/**

A 3D rotation transfrom with rotation as a versor around a fixed
center.



See:
 itk::VersorTransform


C++ includes: srtkVersorTransform.h
*/"

%javamethodmodifiers  rtk::simple::VersorTransform::GetCenter "/**
std::vector<double> rtk::simple::VersorTransform::GetCenter() const
*/
public ";

%javamethodmodifiers  rtk::simple::VersorTransform::GetMatrix "/**
std::vector<double> rtk::simple::VersorTransform::GetMatrix() const

additional methods

*/
public ";

%javamethodmodifiers  rtk::simple::VersorTransform::GetVersor "/**
std::vector<double> rtk::simple::VersorTransform::GetVersor() const
*/
public ";

%javamethodmodifiers  rtk::simple::VersorTransform::SetCenter "/**
Self& rtk::simple::VersorTransform::SetCenter(const std::vector< double > &params)

fixed parameter

*/
public ";

%javamethodmodifiers  rtk::simple::VersorTransform::SetMatrix "/**
Self& rtk::simple::VersorTransform::SetMatrix(const std::vector< double > &matrix, double tolerance=1e-10)
*/
public ";

%javamethodmodifiers  rtk::simple::VersorTransform::SetRotation "/**
Self& rtk::simple::VersorTransform::SetRotation(const std::vector< double > &versor)

parameter

*/
public ";

%javamethodmodifiers  rtk::simple::VersorTransform::SetRotation "/**
Self& rtk::simple::VersorTransform::SetRotation(const std::vector< double > &axis, double angle)
*/
public ";

%javamethodmodifiers  rtk::simple::VersorTransform::VersorTransform "/**
rtk::simple::VersorTransform::VersorTransform()
*/
public ";

%javamethodmodifiers  rtk::simple::VersorTransform::VersorTransform "/**
rtk::simple::VersorTransform::VersorTransform(const VersorTransform &)
*/
public ";

%javamethodmodifiers  rtk::simple::VersorTransform::VersorTransform "/**
rtk::simple::VersorTransform::VersorTransform(const Transform &)
*/
public ";

%javamethodmodifiers  rtk::simple::VersorTransform::VersorTransform "/**
rtk::simple::VersorTransform::VersorTransform(const std::vector< double > &versor, const std::vector< double >
&fixedCenter=std::vector< double >(3, 0.0))
*/
public ";

%javamethodmodifiers  rtk::simple::VersorTransform::VersorTransform "/**
rtk::simple::VersorTransform::VersorTransform(const std::vector< double > &axis, double angle, const std::vector<
double > &fixedCenter=std::vector< double >(3, 0.0))
*/
public ";


%typemap(javaimports) rtk::simple::VotingBinaryHoleFillingImageFilter "/**

Fills in holes and cavities by applying a voting operation on each
pixel.



See:
 Image


 VotingBinaryImageFilter


 VotingBinaryIterativeHoleFillingImageFilter


 Neighborhood


 NeighborhoodOperator


 NeighborhoodIterator

 rtk::simple::VotingBinaryHoleFilling for the procedural interface

 itk::VotingBinaryHoleFillingImageFilter for the Doxygen on the original ITK class.


C++ includes: srtkVotingBinaryHoleFillingImageFilter.h
*/"

%javamethodmodifiers  rtk::simple::VotingBinaryHoleFillingImageFilter::Execute "/**
Image rtk::simple::VotingBinaryHoleFillingImageFilter::Execute(const Image &image1)

Execute the filter on the input image

*/
public ";

%javamethodmodifiers  rtk::simple::VotingBinaryHoleFillingImageFilter::Execute "/**
Image rtk::simple::VotingBinaryHoleFillingImageFilter::Execute(const Image &image1, const std::vector< unsigned int > &radius,
unsigned int majorityThreshold, double foregroundValue, double
backgroundValue)

Execute the filter on the input image with the given parameters

*/
public ";

%javamethodmodifiers  rtk::simple::VotingBinaryHoleFillingImageFilter::GetBackgroundValue "/**
double rtk::simple::VotingBinaryHoleFillingImageFilter::GetBackgroundValue() const
*/
public ";

%javamethodmodifiers  rtk::simple::VotingBinaryHoleFillingImageFilter::GetForegroundValue "/**
double rtk::simple::VotingBinaryHoleFillingImageFilter::GetForegroundValue() const
*/
public ";

%javamethodmodifiers  rtk::simple::VotingBinaryHoleFillingImageFilter::GetMajorityThreshold "/**
unsigned int rtk::simple::VotingBinaryHoleFillingImageFilter::GetMajorityThreshold() const

Majority threshold. It is the number of pixels over 50% that will
decide whether an OFF pixel will become ON or not. For example, if the
neighborhood of a pixel has 124 pixels (excluding itself), the 50%
will be 62, and if you set upd a Majority threshold of 5, that means
that the filter will require 67 or more neighbor pixels to be ON in
order to switch the current OFF pixel to ON. The default value is 1.

*/
public ";

%javamethodmodifiers  rtk::simple::VotingBinaryHoleFillingImageFilter::GetName "/**
std::string rtk::simple::VotingBinaryHoleFillingImageFilter::GetName() const

Name of this class

*/
public ";

%javamethodmodifiers  rtk::simple::VotingBinaryHoleFillingImageFilter::GetRadius "/**
std::vector<unsigned int> rtk::simple::VotingBinaryHoleFillingImageFilter::GetRadius() const
*/
public ";

%javamethodmodifiers  rtk::simple::VotingBinaryHoleFillingImageFilter::SetBackgroundValue "/**
Self& rtk::simple::VotingBinaryHoleFillingImageFilter::SetBackgroundValue(double BackgroundValue)
*/
public ";

%javamethodmodifiers  rtk::simple::VotingBinaryHoleFillingImageFilter::SetForegroundValue "/**
Self& rtk::simple::VotingBinaryHoleFillingImageFilter::SetForegroundValue(double ForegroundValue)
*/
public ";

%javamethodmodifiers  rtk::simple::VotingBinaryHoleFillingImageFilter::SetMajorityThreshold "/**
Self& rtk::simple::VotingBinaryHoleFillingImageFilter::SetMajorityThreshold(unsigned int MajorityThreshold)

Majority threshold. It is the number of pixels over 50% that will
decide whether an OFF pixel will become ON or not. For example, if the
neighborhood of a pixel has 124 pixels (excluding itself), the 50%
will be 62, and if you set upd a Majority threshold of 5, that means
that the filter will require 67 or more neighbor pixels to be ON in
order to switch the current OFF pixel to ON. The default value is 1.

*/
public ";

%javamethodmodifiers  rtk::simple::VotingBinaryHoleFillingImageFilter::SetRadius "/**
Self& rtk::simple::VotingBinaryHoleFillingImageFilter::SetRadius(const std::vector< unsigned int > &Radius)
*/
public ";

%javamethodmodifiers  rtk::simple::VotingBinaryHoleFillingImageFilter::SetRadius "/**
Self& rtk::simple::VotingBinaryHoleFillingImageFilter::SetRadius(unsigned int value)

Set the values of the Radius vector all to value

*/
public ";

%javamethodmodifiers  rtk::simple::VotingBinaryHoleFillingImageFilter::ToString "/**
std::string rtk::simple::VotingBinaryHoleFillingImageFilter::ToString() const

Print ourselves out

*/
public ";

%javamethodmodifiers  rtk::simple::VotingBinaryHoleFillingImageFilter::VotingBinaryHoleFillingImageFilter "/**
rtk::simple::VotingBinaryHoleFillingImageFilter::VotingBinaryHoleFillingImageFilter()

Default Constructor that takes no arguments and initializes default
parameters

*/
public ";

%javamethodmodifiers  rtk::simple::VotingBinaryHoleFillingImageFilter::~VotingBinaryHoleFillingImageFilter "/**
rtk::simple::VotingBinaryHoleFillingImageFilter::~VotingBinaryHoleFillingImageFilter()

Destructor

*/
public ";


%typemap(javaimports) rtk::simple::VotingBinaryImageFilter "/**

Applies a voting operation in a neighborhood of each pixel.



Pixels which are not Foreground or Background will remain unchanged.

See:
 Image


 Neighborhood


 NeighborhoodOperator


 NeighborhoodIterator

 rtk::simple::VotingBinary for the procedural interface

 itk::VotingBinaryImageFilter for the Doxygen on the original ITK class.


C++ includes: srtkVotingBinaryImageFilter.h
*/"

%javamethodmodifiers  rtk::simple::VotingBinaryImageFilter::Execute "/**
Image rtk::simple::VotingBinaryImageFilter::Execute(const Image &image1)

Execute the filter on the input image

*/
public ";

%javamethodmodifiers  rtk::simple::VotingBinaryImageFilter::Execute "/**
Image rtk::simple::VotingBinaryImageFilter::Execute(const Image &image1, const std::vector< unsigned int > &radius,
unsigned int birthThreshold, unsigned int survivalThreshold, double
foregroundValue, double backgroundValue)

Execute the filter on the input image with the given parameters

*/
public ";

%javamethodmodifiers  rtk::simple::VotingBinaryImageFilter::GetBackgroundValue "/**
double rtk::simple::VotingBinaryImageFilter::GetBackgroundValue() const

Get the value associated with the Foreground (or the object) on the
binary input image and the Background .

*/
public ";

%javamethodmodifiers  rtk::simple::VotingBinaryImageFilter::GetBirthThreshold "/**
unsigned int rtk::simple::VotingBinaryImageFilter::GetBirthThreshold() const

Birth threshold. Pixels that are OFF will turn ON when the number of
neighbors ON is larger than the value defined in this threshold.

*/
public ";

%javamethodmodifiers  rtk::simple::VotingBinaryImageFilter::GetForegroundValue "/**
double rtk::simple::VotingBinaryImageFilter::GetForegroundValue() const

Get the value associated with the Foreground (or the object) on the
binary input image and the Background .

*/
public ";

%javamethodmodifiers  rtk::simple::VotingBinaryImageFilter::GetName "/**
std::string rtk::simple::VotingBinaryImageFilter::GetName() const

Name of this class

*/
public ";

%javamethodmodifiers  rtk::simple::VotingBinaryImageFilter::GetRadius "/**
std::vector<unsigned int> rtk::simple::VotingBinaryImageFilter::GetRadius() const

Get the radius of the neighborhood used to compute the median

*/
public ";

%javamethodmodifiers  rtk::simple::VotingBinaryImageFilter::GetSurvivalThreshold "/**
unsigned int rtk::simple::VotingBinaryImageFilter::GetSurvivalThreshold() const

Survival threshold. Pixels that are ON will turn OFF when the number
of neighbors ON is smaller than the value defined in this survival
threshold.

*/
public ";

%javamethodmodifiers  rtk::simple::VotingBinaryImageFilter::SetBackgroundValue "/**
Self& rtk::simple::VotingBinaryImageFilter::SetBackgroundValue(double BackgroundValue)

Set the value associated with the Foreground (or the object) on the
binary input image and the Background .

*/
public ";

%javamethodmodifiers  rtk::simple::VotingBinaryImageFilter::SetBirthThreshold "/**
Self& rtk::simple::VotingBinaryImageFilter::SetBirthThreshold(unsigned int BirthThreshold)

Birth threshold. Pixels that are OFF will turn ON when the number of
neighbors ON is larger than the value defined in this threshold.

*/
public ";

%javamethodmodifiers  rtk::simple::VotingBinaryImageFilter::SetForegroundValue "/**
Self& rtk::simple::VotingBinaryImageFilter::SetForegroundValue(double ForegroundValue)

Set the value associated with the Foreground (or the object) on the
binary input image and the Background .

*/
public ";

%javamethodmodifiers  rtk::simple::VotingBinaryImageFilter::SetRadius "/**
Self& rtk::simple::VotingBinaryImageFilter::SetRadius(const std::vector< unsigned int > &Radius)

Set the radius of the neighborhood used to compute the median.

*/
public ";

%javamethodmodifiers  rtk::simple::VotingBinaryImageFilter::SetRadius "/**
Self& rtk::simple::VotingBinaryImageFilter::SetRadius(unsigned int value)

Set the values of the Radius vector all to value

*/
public ";

%javamethodmodifiers  rtk::simple::VotingBinaryImageFilter::SetSurvivalThreshold "/**
Self& rtk::simple::VotingBinaryImageFilter::SetSurvivalThreshold(unsigned int SurvivalThreshold)

Survival threshold. Pixels that are ON will turn OFF when the number
of neighbors ON is smaller than the value defined in this survival
threshold.

*/
public ";

%javamethodmodifiers  rtk::simple::VotingBinaryImageFilter::ToString "/**
std::string rtk::simple::VotingBinaryImageFilter::ToString() const

Print ourselves out

*/
public ";

%javamethodmodifiers  rtk::simple::VotingBinaryImageFilter::VotingBinaryImageFilter "/**
rtk::simple::VotingBinaryImageFilter::VotingBinaryImageFilter()

Default Constructor that takes no arguments and initializes default
parameters

*/
public ";

%javamethodmodifiers  rtk::simple::VotingBinaryImageFilter::~VotingBinaryImageFilter "/**
rtk::simple::VotingBinaryImageFilter::~VotingBinaryImageFilter()

Destructor

*/
public ";


%typemap(javaimports) rtk::simple::VotingBinaryIterativeHoleFillingImageFilter "/**

Fills in holes and cavities by iteratively applying a voting
operation.


This filter uses internally the VotingBinaryHoleFillingImageFilter , and runs it iteratively until no pixels are being changed or until
it reaches the maximum number of iterations. The purpose of the filter
is to fill in holes of medium size (tens of pixels in radius). In
principle the number of iterations is related to the size of the holes
to be filled in. The larger the holes, the more iteration must be run
with this filter in order to fill in the full hole. The size of the
neighborhood is also related to the curvature of the hole borders and
therefore the hole size. Note that as a collateral effect this filter
may also fill in cavities in the external side of structures.

This filter is templated over a single image type because the output
image type must be the same as the input image type. This is required
in order to make the iterations possible, since the output image of
one iteration is taken as the input image for the next iteration.


See:
 Image


 VotingBinaryImageFilter


 VotingBinaryHoleFillingImageFilter


 Neighborhood


 NeighborhoodOperator


 NeighborhoodIterator

 rtk::simple::VotingBinaryIterativeHoleFilling for the procedural interface

 itk::VotingBinaryIterativeHoleFillingImageFilter for the Doxygen on the original ITK class.


C++ includes: srtkVotingBinaryIterativeHoleFillingImageFilter.h
*/"

%javamethodmodifiers  rtk::simple::VotingBinaryIterativeHoleFillingImageFilter::Execute "/**
Image rtk::simple::VotingBinaryIterativeHoleFillingImageFilter::Execute(const Image &image1)

Execute the filter on the input image

*/
public ";

%javamethodmodifiers  rtk::simple::VotingBinaryIterativeHoleFillingImageFilter::Execute "/**
Image rtk::simple::VotingBinaryIterativeHoleFillingImageFilter::Execute(const Image &image1, const std::vector< unsigned int > &radius,
unsigned int maximumNumberOfIterations, unsigned int
majorityThreshold, double foregroundValue, double backgroundValue)

Execute the filter on the input image with the given parameters

*/
public ";

%javamethodmodifiers  rtk::simple::VotingBinaryIterativeHoleFillingImageFilter::GetBackgroundValue "/**
double rtk::simple::VotingBinaryIterativeHoleFillingImageFilter::GetBackgroundValue() const

Get the value associated with the Foreground (or the object) on the
binary input image and the Background .

*/
public ";

%javamethodmodifiers  rtk::simple::VotingBinaryIterativeHoleFillingImageFilter::GetForegroundValue "/**
double rtk::simple::VotingBinaryIterativeHoleFillingImageFilter::GetForegroundValue() const

Get the value associated with the Foreground (or the object) on the
binary input image and the Background .

*/
public ";

%javamethodmodifiers  rtk::simple::VotingBinaryIterativeHoleFillingImageFilter::GetMajorityThreshold "/**
unsigned int rtk::simple::VotingBinaryIterativeHoleFillingImageFilter::GetMajorityThreshold() const

Majority threshold. It is the number of pixels over 50% that will
decide whether an OFF pixel will become ON or not. For example, if the
neighborhood of a pixel has 124 pixels (excluding itself), the 50%
will be 62, and if you set upd a Majority threshold of 5, that means
that the filter will require 67 or more neighbor pixels to be ON in
order to switch the current OFF pixel to ON. The default value is 1.

*/
public ";

%javamethodmodifiers  rtk::simple::VotingBinaryIterativeHoleFillingImageFilter::GetMaximumNumberOfIterations "/**
unsigned int rtk::simple::VotingBinaryIterativeHoleFillingImageFilter::GetMaximumNumberOfIterations() const

Maximum number of iterations. This filter is executed iteratively as
long as at least one pixel has changed in a previous iteration, or
until the maximum number of iterations has been reached.

*/
public ";

%javamethodmodifiers  rtk::simple::VotingBinaryIterativeHoleFillingImageFilter::GetName "/**
std::string rtk::simple::VotingBinaryIterativeHoleFillingImageFilter::GetName() const

Name of this class

*/
public ";

%javamethodmodifiers  rtk::simple::VotingBinaryIterativeHoleFillingImageFilter::GetRadius "/**
std::vector<unsigned int> rtk::simple::VotingBinaryIterativeHoleFillingImageFilter::GetRadius() const

Get the radius of the neighborhood used to compute the median

*/
public ";

%javamethodmodifiers  rtk::simple::VotingBinaryIterativeHoleFillingImageFilter::SetBackgroundValue "/**
Self& rtk::simple::VotingBinaryIterativeHoleFillingImageFilter::SetBackgroundValue(double BackgroundValue)

Set the value associated with the Foreground (or the object) on the
binary input image and the Background .

*/
public ";

%javamethodmodifiers  rtk::simple::VotingBinaryIterativeHoleFillingImageFilter::SetForegroundValue "/**
Self& rtk::simple::VotingBinaryIterativeHoleFillingImageFilter::SetForegroundValue(double ForegroundValue)

Set the value associated with the Foreground (or the object) on the
binary input image and the Background .

*/
public ";

%javamethodmodifiers  rtk::simple::VotingBinaryIterativeHoleFillingImageFilter::SetMajorityThreshold "/**
Self& rtk::simple::VotingBinaryIterativeHoleFillingImageFilter::SetMajorityThreshold(unsigned int MajorityThreshold)

Majority threshold. It is the number of pixels over 50% that will
decide whether an OFF pixel will become ON or not. For example, if the
neighborhood of a pixel has 124 pixels (excluding itself), the 50%
will be 62, and if you set upd a Majority threshold of 5, that means
that the filter will require 67 or more neighbor pixels to be ON in
order to switch the current OFF pixel to ON. The default value is 1.

*/
public ";

%javamethodmodifiers  rtk::simple::VotingBinaryIterativeHoleFillingImageFilter::SetMaximumNumberOfIterations "/**
Self& rtk::simple::VotingBinaryIterativeHoleFillingImageFilter::SetMaximumNumberOfIterations(unsigned int MaximumNumberOfIterations)

Maximum number of iterations. This filter is executed iteratively as
long as at least one pixel has changed in a previous iteration, or
until the maximum number of iterations has been reached.

*/
public ";

%javamethodmodifiers  rtk::simple::VotingBinaryIterativeHoleFillingImageFilter::SetRadius "/**
Self& rtk::simple::VotingBinaryIterativeHoleFillingImageFilter::SetRadius(const std::vector< unsigned int > &Radius)

Set the radius of the neighborhood used to compute the median.

*/
public ";

%javamethodmodifiers  rtk::simple::VotingBinaryIterativeHoleFillingImageFilter::SetRadius "/**
Self& rtk::simple::VotingBinaryIterativeHoleFillingImageFilter::SetRadius(unsigned int value)

Set the values of the Radius vector all to value

*/
public ";

%javamethodmodifiers  rtk::simple::VotingBinaryIterativeHoleFillingImageFilter::ToString "/**
std::string rtk::simple::VotingBinaryIterativeHoleFillingImageFilter::ToString() const

Print ourselves out

*/
public ";

%javamethodmodifiers  rtk::simple::VotingBinaryIterativeHoleFillingImageFilter::VotingBinaryIterativeHoleFillingImageFilter "/**
rtk::simple::VotingBinaryIterativeHoleFillingImageFilter::VotingBinaryIterativeHoleFillingImageFilter()

Default Constructor that takes no arguments and initializes default
parameters

*/
public ";

%javamethodmodifiers  rtk::simple::VotingBinaryIterativeHoleFillingImageFilter::~VotingBinaryIterativeHoleFillingImageFilter "/**
rtk::simple::VotingBinaryIterativeHoleFillingImageFilter::~VotingBinaryIterativeHoleFillingImageFilter()

Destructor

*/
public ";


%typemap(javaimports) rtk::simple::WarpImageFilter "/**

Warps an image using an input displacement field.


WarpImageFilter warps an existing image with respect to a given displacement field.

A displacement field is represented as a image whose pixel type is
some vector type with at least N elements, where N is the dimension of
the input image. The vector type must support element access via
operator [].

The output image is produced by inverse mapping: the output pixels are
mapped back onto the input image. This scheme avoids the creation of
any holes and overlaps in the output image.

Each vector in the displacement field represent the distance between a
geometric point in the input space and a point in the output space
such that:

\\\\[ p_{in} = p_{out} + d \\\\]

Typically the mapped position does not correspond to an integer pixel
position in the input image. Interpolation via an image function is
used to compute values at non-integer positions. The default
interpolation typed used is the LinearInterpolateImageFunction . The user can specify a particular interpolation function via SetInterpolator() . Note that the input interpolator must derive from base class InterpolateImageFunction .

Position mapped to outside of the input image buffer are assigned a
edge padding value.

The LargetPossibleRegion for the output is inherited from the input
displacement field. The output image spacing, origin and orientation
may be set via SetOutputSpacing, SetOutputOrigin and
SetOutputDirection. The default are respectively a vector of 1's, a
vector of 0's and an identity matrix.

This class is templated over the type of the input image, the type of
the output image and the type of the displacement field.

The input image is set via SetInput. The input displacement field is
set via SetDisplacementField.

This filter is implemented as a multithreaded filter.


WARNING:
This filter assumes that the input type, output type and displacement
field type all have the same number of dimensions.
Wiki Examples:

All Examples

Warp one image to another using manually specified landmarks
See:
 rtk::simple::Warp for the procedural interface

 itk::WarpImageFilter for the Doxygen on the original ITK class.



C++ includes: srtkWarpImageFilter.h
*/"

%javamethodmodifiers  rtk::simple::WarpImageFilter::Execute "/**
Image rtk::simple::WarpImageFilter::Execute(const Image &image1, const Image &image2)

Execute the filter on the input images

*/
public ";

%javamethodmodifiers  rtk::simple::WarpImageFilter::Execute "/**
Image rtk::simple::WarpImageFilter::Execute(const Image &image1, const Image &image2, InterpolatorEnum
interpolator, const std::vector< uint32_t > &outputSize, const
std::vector< double > &outputOrigin, const std::vector< double >
&outputSpacing, std::vector< double > outputDirection, double
edgePaddingValue)

Execute the filter on the input images with the given parameters

*/
public ";

%javamethodmodifiers  rtk::simple::WarpImageFilter::GetEdgePaddingValue "/**
double rtk::simple::WarpImageFilter::GetEdgePaddingValue() const

Get the edge padding value

*/
public ";

%javamethodmodifiers  rtk::simple::WarpImageFilter::GetInterpolator "/**
InterpolatorEnum rtk::simple::WarpImageFilter::GetInterpolator() const

Get/Set the interpolator function.

*/
public ";

%javamethodmodifiers  rtk::simple::WarpImageFilter::GetName "/**
std::string rtk::simple::WarpImageFilter::GetName() const

Name of this class

*/
public ";

%javamethodmodifiers  rtk::simple::WarpImageFilter::GetOutputDirection "/**
std::vector<double> rtk::simple::WarpImageFilter::GetOutputDirection() const

Set/Get the direction (orientation) of the output image

*/
public ";

%javamethodmodifiers  rtk::simple::WarpImageFilter::GetOutputOrigin "/**
std::vector<double> rtk::simple::WarpImageFilter::GetOutputOrigin() const

Get the output image origin.

*/
public ";

%javamethodmodifiers  rtk::simple::WarpImageFilter::GetOutputSize "/**
std::vector<uint32_t> rtk::simple::WarpImageFilter::GetOutputSize() const

Get the size of the output image.

*/
public ";

%javamethodmodifiers  rtk::simple::WarpImageFilter::GetOutputSpacing "/**
std::vector<double> rtk::simple::WarpImageFilter::GetOutputSpacing() const

Get the output image spacing.

*/
public ";

%javamethodmodifiers  rtk::simple::WarpImageFilter::SetEdgePaddingValue "/**
Self& rtk::simple::WarpImageFilter::SetEdgePaddingValue(double EdgePaddingValue)

Set the edge padding value

*/
public ";

%javamethodmodifiers  rtk::simple::WarpImageFilter::SetInterpolator "/**
Self& rtk::simple::WarpImageFilter::SetInterpolator(InterpolatorEnum Interpolator)

Get/Set the interpolator function.

*/
public ";

%javamethodmodifiers  rtk::simple::WarpImageFilter::SetOutputDirection "/**
Self& rtk::simple::WarpImageFilter::SetOutputDirection(std::vector< double > OutputDirection)

Set/Get the direction (orientation) of the output image

*/
public ";

%javamethodmodifiers  rtk::simple::WarpImageFilter::SetOutputOrigin "/**
Self& rtk::simple::WarpImageFilter::SetOutputOrigin(const std::vector< double > &OutputOrigin)

Set the output image origin.

*/
public ";

%javamethodmodifiers  rtk::simple::WarpImageFilter::SetOutputParameteresFromImage "/**
void rtk::simple::WarpImageFilter::SetOutputParameteresFromImage(const Image &refImage)

This methods sets the output size, origin, spacing and direction to
that of the provided image

*/
public ";

%javamethodmodifiers  rtk::simple::WarpImageFilter::SetOutputSize "/**
Self& rtk::simple::WarpImageFilter::SetOutputSize(const std::vector< uint32_t > &OutputSize)

Set the size of the output image.

*/
public ";

%javamethodmodifiers  rtk::simple::WarpImageFilter::SetOutputSpacing "/**
Self& rtk::simple::WarpImageFilter::SetOutputSpacing(const std::vector< double > &OutputSpacing)

Set the output image spacing.

*/
public ";

%javamethodmodifiers  rtk::simple::WarpImageFilter::ToString "/**
std::string rtk::simple::WarpImageFilter::ToString() const

Print ourselves out

*/
public ";

%javamethodmodifiers  rtk::simple::WarpImageFilter::WarpImageFilter "/**
rtk::simple::WarpImageFilter::WarpImageFilter()

Default Constructor that takes no arguments and initializes default
parameters

*/
public ";

%javamethodmodifiers  rtk::simple::WarpImageFilter::~WarpImageFilter "/**
rtk::simple::WarpImageFilter::~WarpImageFilter()

Destructor

*/
public ";


%typemap(javaimports) rtk::simple::WhiteTopHatImageFilter "/**

White top hat extract local maxima that are larger than the
structuring element.


Top-hats are described in Chapter 4.5 of Pierre Soille's book
\"Morphological Image Analysis: Principles and Applications\", Second
Edition, Springer, 2003.


Gaetan Lehmann. Biologie du Developpement et de la Reproduction, INRA
de Jouy-en-Josas, France.

See:
 rtk::simple::WhiteTopHat for the procedural interface

 itk::WhiteTopHatImageFilter for the Doxygen on the original ITK class.


C++ includes: srtkWhiteTopHatImageFilter.h
*/"

%javamethodmodifiers  rtk::simple::WhiteTopHatImageFilter::Execute "/**
Image rtk::simple::WhiteTopHatImageFilter::Execute(const Image &image1)

Execute the filter on the input image

*/
public ";

%javamethodmodifiers  rtk::simple::WhiteTopHatImageFilter::Execute "/**
Image rtk::simple::WhiteTopHatImageFilter::Execute(const Image &image1, bool safeBorder)

Execute the filter on the input image with the given parameters

*/
public ";

%javamethodmodifiers  rtk::simple::WhiteTopHatImageFilter::GetKernelRadius "/**
std::vector<uint32_t> rtk::simple::WhiteTopHatImageFilter::GetKernelRadius() const
*/
public ";

%javamethodmodifiers  rtk::simple::WhiteTopHatImageFilter::GetKernelType "/**
KernelEnum rtk::simple::WhiteTopHatImageFilter::GetKernelType() const
*/
public ";

%javamethodmodifiers  rtk::simple::WhiteTopHatImageFilter::GetName "/**
std::string rtk::simple::WhiteTopHatImageFilter::GetName() const

Name of this class

*/
public ";

%javamethodmodifiers  rtk::simple::WhiteTopHatImageFilter::GetSafeBorder "/**
bool rtk::simple::WhiteTopHatImageFilter::GetSafeBorder() const

A safe border is added to input image to avoid borders effects and
remove it once the closing is done

*/
public ";

%javamethodmodifiers  rtk::simple::WhiteTopHatImageFilter::SafeBorderOff "/**
Self& rtk::simple::WhiteTopHatImageFilter::SafeBorderOff()
*/
public ";

%javamethodmodifiers  rtk::simple::WhiteTopHatImageFilter::SafeBorderOn "/**
Self& rtk::simple::WhiteTopHatImageFilter::SafeBorderOn()

Set the value of SafeBorder to true or false respectfully.

*/
public ";

%javamethodmodifiers  rtk::simple::WhiteTopHatImageFilter::SetKernelRadius "/**
Self& rtk::simple::WhiteTopHatImageFilter::SetKernelRadius(uint32_t r)

Kernel radius as a scale for isotropic structures

*/
public ";

%javamethodmodifiers  rtk::simple::WhiteTopHatImageFilter::SetKernelRadius "/**
Self& rtk::simple::WhiteTopHatImageFilter::SetKernelRadius(const std::vector< uint32_t > &r)

Set/Get the radius of the kernel structuring element as a vector.

If the dimension of the image is greater then the length of r, then
the radius will be padded. If it is less the r will be truncated.

*/
public ";

%javamethodmodifiers  rtk::simple::WhiteTopHatImageFilter::SetKernelType "/**
Self& rtk::simple::WhiteTopHatImageFilter::SetKernelType(KernelEnum t)

Set/Get the kernel or structuring elemenent used for the morphology

*/
public ";

%javamethodmodifiers  rtk::simple::WhiteTopHatImageFilter::SetKernelType "/**
Self& rtk::simple::WhiteTopHatImageFilter::SetKernelType(KernelType t)
*/
public ";

%javamethodmodifiers  rtk::simple::WhiteTopHatImageFilter::SetSafeBorder "/**
Self& rtk::simple::WhiteTopHatImageFilter::SetSafeBorder(bool SafeBorder)

A safe border is added to input image to avoid borders effects and
remove it once the closing is done

*/
public ";

%javamethodmodifiers  rtk::simple::WhiteTopHatImageFilter::ToString "/**
std::string rtk::simple::WhiteTopHatImageFilter::ToString() const

Print ourselves out

*/
public ";

%javamethodmodifiers  rtk::simple::WhiteTopHatImageFilter::WhiteTopHatImageFilter "/**
rtk::simple::WhiteTopHatImageFilter::WhiteTopHatImageFilter()

Default Constructor that takes no arguments and initializes default
parameters

*/
public ";

%javamethodmodifiers  rtk::simple::WhiteTopHatImageFilter::~WhiteTopHatImageFilter "/**
rtk::simple::WhiteTopHatImageFilter::~WhiteTopHatImageFilter()

Destructor

*/
public ";


%typemap(javaimports) rtk::simple::WienerDeconvolutionImageFilter "/**

The Wiener deconvolution image filter is designed to restore an image
convolved with a blurring kernel while keeping noise enhancement to a
minimum.


The Wiener filter aims to minimize noise enhancement induced by
frequencies with low signal-to-noise ratio. The Wiener filter kernel
is defined in the frequency domain as $W(\\\\omega) = H^*(\\\\omega) / (|H(\\\\omega)|^2 + (1 /
SNR(\\\\omega)))$ where $H(\\\\omega)$ is the Fourier transform of the blurring kernel with which the
original image was convolved and the signal-to-noise ratio $SNR(\\\\omega)$ . $SNR(\\\\omega)$ is defined by $P_f(\\\\omega) / P_n(\\\\omega)$ where $P_f(\\\\omega)$ is the power spectral density of the uncorrupted signal and $P_n(\\\\omega)$ is the power spectral density of the noise. When applied to the input
blurred image, this filter produces an estimate $\\\\hat{f}(x)$ of the true underlying signal $f(x)$ that minimizes the expected error between $\\\\hat{f}(x)$ and $f(x)$ .

This filter requires two inputs, the image to be deconvolved and the
blurring kernel. These two inputs can be set using the methods
SetInput() and SetKernelImage() , respectively.

The power spectral densities of the signal and noise are typically
unavailable for a given problem. In particular, $P_f(\\\\omega)$ cannot be computed from $f(x)$ because this unknown signal is precisely the signal that this filter
aims to recover. Nevertheless, it is common for the noise to have a
power spectral density that is flat or decreasing significantly more
slowly than the power spectral density of a typical image as the
frequency $\\\\omega$ increases. Hence, $P_n(\\\\omega)$ can typically be approximated with a constant, and this filter makes
this assumption (see the NoiseVariance member variable). $P_f(\\\\omega)$ , on the other hand, will vary with input. This filter computes the
power spectral density of the input blurred image, subtracts the power
spectral density of the noise, and uses the result as the estimate of $P_f(\\\\omega)$ .

For further information on the Wiener deconvolution filter, please see
\"Digital Signal Processing\" by Kenneth R. Castleman, Prentice Hall,
1995


Gaetan Lehmann, Biologie du Developpement et de la Reproduction, INRA
de Jouy-en-Josas, France
 Chris Mullins, The University of North Carolina at Chapel Hill

Cory Quammen, The University of North Carolina at Chapel Hill
See:
 rtk::simple::WienerDeconvolution for the procedural interface

 itk::WienerDeconvolutionImageFilter for the Doxygen on the original ITK class.


C++ includes: srtkWienerDeconvolutionImageFilter.h
*/"

%javamethodmodifiers  rtk::simple::WienerDeconvolutionImageFilter::Execute "/**
Image rtk::simple::WienerDeconvolutionImageFilter::Execute(const Image &image1, const Image &image2)

Execute the filter on the input images

*/
public ";

%javamethodmodifiers  rtk::simple::WienerDeconvolutionImageFilter::Execute "/**
Image rtk::simple::WienerDeconvolutionImageFilter::Execute(const Image &image1, const Image &image2, double noiseVariance, bool
normalize, WienerDeconvolutionImageFilter::BoundaryConditionType
boundaryCondition,
WienerDeconvolutionImageFilter::OutputRegionModeType outputRegionMode)

Execute the filter on the input images with the given parameters

*/
public ";

%javamethodmodifiers  rtk::simple::WienerDeconvolutionImageFilter::GetBoundaryCondition "/**
BoundaryConditionType rtk::simple::WienerDeconvolutionImageFilter::GetBoundaryCondition() const
*/
public ";

%javamethodmodifiers  rtk::simple::WienerDeconvolutionImageFilter::GetName "/**
std::string rtk::simple::WienerDeconvolutionImageFilter::GetName() const

Name of this class

*/
public ";

%javamethodmodifiers  rtk::simple::WienerDeconvolutionImageFilter::GetNoiseVariance "/**
double rtk::simple::WienerDeconvolutionImageFilter::GetNoiseVariance() const

Set/get the variance of the zero-mean Gaussian white noise assumed to
be added to the input.

*/
public ";

%javamethodmodifiers  rtk::simple::WienerDeconvolutionImageFilter::GetNormalize "/**
bool rtk::simple::WienerDeconvolutionImageFilter::GetNormalize() const
*/
public ";

%javamethodmodifiers  rtk::simple::WienerDeconvolutionImageFilter::GetOutputRegionMode "/**
OutputRegionModeType rtk::simple::WienerDeconvolutionImageFilter::GetOutputRegionMode() const
*/
public ";

%javamethodmodifiers  rtk::simple::WienerDeconvolutionImageFilter::NormalizeOff "/**
Self& rtk::simple::WienerDeconvolutionImageFilter::NormalizeOff()
*/
public ";

%javamethodmodifiers  rtk::simple::WienerDeconvolutionImageFilter::NormalizeOn "/**
Self& rtk::simple::WienerDeconvolutionImageFilter::NormalizeOn()

Set the value of Normalize to true or false respectfully.

*/
public ";

%javamethodmodifiers  rtk::simple::WienerDeconvolutionImageFilter::SetBoundaryCondition "/**
Self& rtk::simple::WienerDeconvolutionImageFilter::SetBoundaryCondition(BoundaryConditionType BoundaryCondition)
*/
public ";

%javamethodmodifiers  rtk::simple::WienerDeconvolutionImageFilter::SetNoiseVariance "/**
Self& rtk::simple::WienerDeconvolutionImageFilter::SetNoiseVariance(double NoiseVariance)

Set/get the variance of the zero-mean Gaussian white noise assumed to
be added to the input.

*/
public ";

%javamethodmodifiers  rtk::simple::WienerDeconvolutionImageFilter::SetNormalize "/**
Self& rtk::simple::WienerDeconvolutionImageFilter::SetNormalize(bool Normalize)

Normalize the output image by the sum of the kernel components

*/
public ";

%javamethodmodifiers  rtk::simple::WienerDeconvolutionImageFilter::SetOutputRegionMode "/**
Self& rtk::simple::WienerDeconvolutionImageFilter::SetOutputRegionMode(OutputRegionModeType OutputRegionMode)
*/
public ";

%javamethodmodifiers  rtk::simple::WienerDeconvolutionImageFilter::ToString "/**
std::string rtk::simple::WienerDeconvolutionImageFilter::ToString() const

Print ourselves out

*/
public ";

%javamethodmodifiers  rtk::simple::WienerDeconvolutionImageFilter::WienerDeconvolutionImageFilter "/**
rtk::simple::WienerDeconvolutionImageFilter::WienerDeconvolutionImageFilter()

Default Constructor that takes no arguments and initializes default
parameters

*/
public ";

%javamethodmodifiers  rtk::simple::WienerDeconvolutionImageFilter::~WienerDeconvolutionImageFilter "/**
rtk::simple::WienerDeconvolutionImageFilter::~WienerDeconvolutionImageFilter()

Destructor

*/
public ";


%typemap(javaimports) rtk::simple::WrapPadImageFilter "/**

Increase the image size by padding with replicants of the input image
value.


WrapPadImageFilter changes the image bounds of an image. Added pixels are filled in with
a wrapped replica of the input image. For instance, if the output
image needs a pixel that istwo pixels to the left of the
LargestPossibleRegionof the input image, the value assigned will be
from the pixeltwo pixels inside the right boundary of the
LargestPossibleRegion. The image bounds of the output must be
specified.

Visual explanation of padding regions.This filter is implemented as a
multithreaded filter. It provides a ThreadedGenerateData() method for
its implementation.


See:
 MirrorPadImageFilter , ConstantPadImageFilter
Wiki Examples:

All Examples

Pad an image by wrapping
See:
 rtk::simple::WrapPad for the procedural interface

 itk::WrapPadImageFilter for the Doxygen on the original ITK class.



C++ includes: srtkWrapPadImageFilter.h
*/"

%javamethodmodifiers  rtk::simple::WrapPadImageFilter::Execute "/**
Image rtk::simple::WrapPadImageFilter::Execute(const Image &image1)

Execute the filter on the input image

*/
public ";

%javamethodmodifiers  rtk::simple::WrapPadImageFilter::Execute "/**
Image rtk::simple::WrapPadImageFilter::Execute(const Image &image1, const std::vector< unsigned int >
&padLowerBound, const std::vector< unsigned int > &padUpperBound)

Execute the filter on the input image with the given parameters

*/
public ";

%javamethodmodifiers  rtk::simple::WrapPadImageFilter::GetName "/**
std::string rtk::simple::WrapPadImageFilter::GetName() const

Name of this class

*/
public ";

%javamethodmodifiers  rtk::simple::WrapPadImageFilter::GetPadLowerBound "/**
std::vector<unsigned int> rtk::simple::WrapPadImageFilter::GetPadLowerBound() const
*/
public ";

%javamethodmodifiers  rtk::simple::WrapPadImageFilter::GetPadUpperBound "/**
std::vector<unsigned int> rtk::simple::WrapPadImageFilter::GetPadUpperBound() const
*/
public ";

%javamethodmodifiers  rtk::simple::WrapPadImageFilter::SetPadLowerBound "/**
Self& rtk::simple::WrapPadImageFilter::SetPadLowerBound(const std::vector< unsigned int > &PadLowerBound)
*/
public ";

%javamethodmodifiers  rtk::simple::WrapPadImageFilter::SetPadUpperBound "/**
Self& rtk::simple::WrapPadImageFilter::SetPadUpperBound(const std::vector< unsigned int > &PadUpperBound)
*/
public ";

%javamethodmodifiers  rtk::simple::WrapPadImageFilter::ToString "/**
std::string rtk::simple::WrapPadImageFilter::ToString() const

Print ourselves out

*/
public ";

%javamethodmodifiers  rtk::simple::WrapPadImageFilter::WrapPadImageFilter "/**
rtk::simple::WrapPadImageFilter::WrapPadImageFilter()

Default Constructor that takes no arguments and initializes default
parameters

*/
public ";

%javamethodmodifiers  rtk::simple::WrapPadImageFilter::~WrapPadImageFilter "/**
rtk::simple::WrapPadImageFilter::~WrapPadImageFilter()

Destructor

*/
public ";


%typemap(javaimports) rtk::simple::XorImageFilter "/**

Computes the XOR bitwise operator pixel-wise between two images.


This class is templated over the types of the two input images and the
type of the output image. Numeric conversions (castings) are done by
the C++ defaults.

Since the bitwise XOR operation is only defined in C++ for integer
types, the images passed to this filter must comply with the
requirement of using integer pixel type.

The total operation over one pixel will be


Where \"^\" is the boolean XOR operator in C++.

Wiki Examples:

All Examples

Binary XOR (exclusive OR) two images
See:
 rtk::simple::Xor for the procedural interface

 itk::XorImageFilter for the Doxygen on the original ITK class.



C++ includes: srtkXorImageFilter.h
*/"

%javamethodmodifiers  rtk::simple::XorImageFilter::Execute "/**
Image rtk::simple::XorImageFilter::Execute(const Image &image1, const Image &image2)

Execute the filter on the input images

*/
public ";

%javamethodmodifiers  rtk::simple::XorImageFilter::Execute "/**
Image rtk::simple::XorImageFilter::Execute(const Image &image1, int constant)

Execute the filter with an image and a constant

*/
public ";

%javamethodmodifiers  rtk::simple::XorImageFilter::Execute "/**
Image rtk::simple::XorImageFilter::Execute(int constant, const Image &image2)
*/
public ";

%javamethodmodifiers  rtk::simple::XorImageFilter::GetName "/**
std::string rtk::simple::XorImageFilter::GetName() const

Name of this class

*/
public ";

%javamethodmodifiers  rtk::simple::XorImageFilter::ToString "/**
std::string rtk::simple::XorImageFilter::ToString() const

Print ourselves out

*/
public ";

%javamethodmodifiers  rtk::simple::XorImageFilter::XorImageFilter "/**
rtk::simple::XorImageFilter::XorImageFilter()

Default Constructor that takes no arguments and initializes default
parameters

*/
public ";

%javamethodmodifiers  rtk::simple::XorImageFilter::~XorImageFilter "/**
rtk::simple::XorImageFilter::~XorImageFilter()

Destructor

*/
public ";


%typemap(javaimports) rtk::simple::YenThresholdImageFilter "/**

Threshold an image using the Yen Threshold.


This filter creates a binary thresholded image that separates an image
into foreground and background components. The filter computes the
threshold using the YenThresholdCalculator and applies that theshold to the input image using the BinaryThresholdImageFilter .


Richard Beare
 Gaetan Lehmann. Biologie du Developpement et de la Reproduction, INRA
de Jouy-en-Josas, France.

This implementation was taken from the Insight Journal paper: https://hdl.handle.net/10380/3279 or http://www.insight-journal.org/browse/publication/811


See:
 HistogramThresholdImageFilter

 rtk::simple::YenThreshold for the procedural interface

 itk::YenThresholdImageFilter for the Doxygen on the original ITK class.


C++ includes: srtkYenThresholdImageFilter.h
*/"

%javamethodmodifiers  rtk::simple::YenThresholdImageFilter::Execute "/**
Image rtk::simple::YenThresholdImageFilter::Execute(const Image &image, const Image &maskImage)

Execute the filter on the input image

*/
public ";

%javamethodmodifiers  rtk::simple::YenThresholdImageFilter::Execute "/**
Image rtk::simple::YenThresholdImageFilter::Execute(const Image &image)
*/
public ";

%javamethodmodifiers  rtk::simple::YenThresholdImageFilter::Execute "/**
Image rtk::simple::YenThresholdImageFilter::Execute(const Image &image, const Image &maskImage, uint8_t insideValue,
uint8_t outsideValue, uint32_t numberOfHistogramBins, bool maskOutput,
uint8_t maskValue)

Execute the filter on the input image with the given parameters

*/
public ";

%javamethodmodifiers  rtk::simple::YenThresholdImageFilter::Execute "/**
Image rtk::simple::YenThresholdImageFilter::Execute(const Image &image, uint8_t insideValue, uint8_t outsideValue,
uint32_t numberOfHistogramBins, bool maskOutput, uint8_t maskValue)
*/
public ";

%javamethodmodifiers  rtk::simple::YenThresholdImageFilter::GetInsideValue "/**
uint8_t rtk::simple::YenThresholdImageFilter::GetInsideValue() const

Get the \"inside\" pixel value.

*/
public ";

%javamethodmodifiers  rtk::simple::YenThresholdImageFilter::GetMaskOutput "/**
bool rtk::simple::YenThresholdImageFilter::GetMaskOutput() const
*/
public ";

%javamethodmodifiers  rtk::simple::YenThresholdImageFilter::GetMaskValue "/**
uint8_t rtk::simple::YenThresholdImageFilter::GetMaskValue() const
*/
public ";

%javamethodmodifiers  rtk::simple::YenThresholdImageFilter::GetName "/**
std::string rtk::simple::YenThresholdImageFilter::GetName() const

Name of this class

*/
public ";

%javamethodmodifiers  rtk::simple::YenThresholdImageFilter::GetNumberOfHistogramBins "/**
uint32_t rtk::simple::YenThresholdImageFilter::GetNumberOfHistogramBins() const
*/
public ";

%javamethodmodifiers  rtk::simple::YenThresholdImageFilter::GetOutsideValue "/**
uint8_t rtk::simple::YenThresholdImageFilter::GetOutsideValue() const

Get the \"outside\" pixel value.

*/
public ";

%javamethodmodifiers  rtk::simple::YenThresholdImageFilter::GetThreshold "/**
double rtk::simple::YenThresholdImageFilter::GetThreshold() const

Get the computed threshold.


This is a measurement. Its value is updated in the Execute methods, so
the value will only be valid after an execution.

*/
public ";

%javamethodmodifiers  rtk::simple::YenThresholdImageFilter::MaskOutputOff "/**
Self& rtk::simple::YenThresholdImageFilter::MaskOutputOff()
*/
public ";

%javamethodmodifiers  rtk::simple::YenThresholdImageFilter::MaskOutputOn "/**
Self& rtk::simple::YenThresholdImageFilter::MaskOutputOn()

Set the value of MaskOutput to true or false respectfully.

*/
public ";

%javamethodmodifiers  rtk::simple::YenThresholdImageFilter::SetInsideValue "/**
Self& rtk::simple::YenThresholdImageFilter::SetInsideValue(uint8_t InsideValue)

Set the \"inside\" pixel value.

*/
public ";

%javamethodmodifiers  rtk::simple::YenThresholdImageFilter::SetMaskOutput "/**
Self& rtk::simple::YenThresholdImageFilter::SetMaskOutput(bool MaskOutput)

Do you want the output to be masked by the mask used in histogram
construction. Only relevant if masking is in use.

*/
public ";

%javamethodmodifiers  rtk::simple::YenThresholdImageFilter::SetMaskValue "/**
Self& rtk::simple::YenThresholdImageFilter::SetMaskValue(uint8_t MaskValue)

The value in the mask image, if used, indicating voxels that should be
included. Default is the max of pixel type, as in the
MaskedImageToHistogramFilter

*/
public ";

%javamethodmodifiers  rtk::simple::YenThresholdImageFilter::SetNumberOfHistogramBins "/**
Self& rtk::simple::YenThresholdImageFilter::SetNumberOfHistogramBins(uint32_t NumberOfHistogramBins)

Set/Get the number of histogram bins.

*/
public ";

%javamethodmodifiers  rtk::simple::YenThresholdImageFilter::SetOutsideValue "/**
Self& rtk::simple::YenThresholdImageFilter::SetOutsideValue(uint8_t OutsideValue)

Set the \"outside\" pixel value. The default value NumericTraits<OutputPixelType>::Zero.

*/
public ";

%javamethodmodifiers  rtk::simple::YenThresholdImageFilter::ToString "/**
std::string rtk::simple::YenThresholdImageFilter::ToString() const

Print ourselves out

*/
public ";

%javamethodmodifiers  rtk::simple::YenThresholdImageFilter::YenThresholdImageFilter "/**
rtk::simple::YenThresholdImageFilter::YenThresholdImageFilter()

Default Constructor that takes no arguments and initializes default
parameters

*/
public ";

%javamethodmodifiers  rtk::simple::YenThresholdImageFilter::~YenThresholdImageFilter "/**
rtk::simple::YenThresholdImageFilter::~YenThresholdImageFilter()

Destructor

*/
public ";


%typemap(javaimports) rtk::simple::ZeroCrossingBasedEdgeDetectionImageFilter "/**

This filter implements a zero-crossing based edge detecor.


The zero-crossing based edge detector looks for pixels in the
Laplacian of an image where the value of the Laplacian passes through
zeropoints where the Laplacian changes sign. Such points often occur
at ``edges'' in imagesi.e. points where the intensity of the image
changes rapidly, but they also occur at places that are not as easy to
associate with edges. It is best to think of the zero crossing
detector as some sort of feature detector rather than as a specific
edge detector.


Zero crossings always lie on closed contours and so the output from
the zero crossing detector is usually a binary image with single pixel
thickness lines showing the positions of the zero crossing points.

In this implementation, the input image is first smoothed with a
Gaussian filter, then the LaplacianImageFilter is applied to smoothed image. Finally the zero-crossing of the
Laplacian of the smoothed image is detected. The output is a binary
image.
Inputs and Outputs
The input to the filter should be a scalar, itk::Image of arbitrary dimension. The output image is a binary, labeled image.
See itkZeroCrossingImageFilter for more information on requirements of
the data type of the output.

To use this filter, first set the parameters (variance and maximum
error) needed by the embedded DiscreteGaussianImageFilter , i.e. See DiscreteGaussianImageFilter for information about these parameters. Optionally, you may also set
foreground and background values for the zero-crossing filter. The
default label values are Zero for the background and One for the
foreground, as defined in NumericTraits for the data type of the output image.

See:
 DiscreteGaussianImageFilter


 LaplacianImageFilter


 ZeroCrossingImageFilter

 rtk::simple::ZeroCrossingBasedEdgeDetection for the procedural interface

 itk::ZeroCrossingBasedEdgeDetectionImageFilter for the Doxygen on the original ITK class.


C++ includes: srtkZeroCrossingBasedEdgeDetectionImageFilter.h
*/"

%javamethodmodifiers  rtk::simple::ZeroCrossingBasedEdgeDetectionImageFilter::Execute "/**
Image rtk::simple::ZeroCrossingBasedEdgeDetectionImageFilter::Execute(const Image &image1)

Execute the filter on the input image

*/
public ";

%javamethodmodifiers  rtk::simple::ZeroCrossingBasedEdgeDetectionImageFilter::Execute "/**
Image rtk::simple::ZeroCrossingBasedEdgeDetectionImageFilter::Execute(const Image &image1, double variance, uint8_t foregroundValue,
uint8_t backgroundValue, double maximumError)

Execute the filter on the input image with the given parameters

*/
public ";

%javamethodmodifiers  rtk::simple::ZeroCrossingBasedEdgeDetectionImageFilter::GetBackgroundValue "/**
uint8_t rtk::simple::ZeroCrossingBasedEdgeDetectionImageFilter::GetBackgroundValue() const

Get/Set the label values for the ZeroCrossingImageFilter

*/
public ";

%javamethodmodifiers  rtk::simple::ZeroCrossingBasedEdgeDetectionImageFilter::GetForegroundValue "/**
uint8_t rtk::simple::ZeroCrossingBasedEdgeDetectionImageFilter::GetForegroundValue() const

Get/Set the label values for the ZeroCrossingImageFilter

*/
public ";

%javamethodmodifiers  rtk::simple::ZeroCrossingBasedEdgeDetectionImageFilter::GetMaximumError "/**
double rtk::simple::ZeroCrossingBasedEdgeDetectionImageFilter::GetMaximumError() const

Standard get/set macros for Gaussian filter parameters.

*/
public ";

%javamethodmodifiers  rtk::simple::ZeroCrossingBasedEdgeDetectionImageFilter::GetName "/**
std::string rtk::simple::ZeroCrossingBasedEdgeDetectionImageFilter::GetName() const

Name of this class

*/
public ";

%javamethodmodifiers  rtk::simple::ZeroCrossingBasedEdgeDetectionImageFilter::GetVariance "/**
double rtk::simple::ZeroCrossingBasedEdgeDetectionImageFilter::GetVariance() const

Standard get/set macros for Gaussian filter parameters.

*/
public ";

%javamethodmodifiers  rtk::simple::ZeroCrossingBasedEdgeDetectionImageFilter::SetBackgroundValue "/**
Self& rtk::simple::ZeroCrossingBasedEdgeDetectionImageFilter::SetBackgroundValue(uint8_t BackgroundValue)

Get/Set the label values for the ZeroCrossingImageFilter

*/
public ";

%javamethodmodifiers  rtk::simple::ZeroCrossingBasedEdgeDetectionImageFilter::SetForegroundValue "/**
Self& rtk::simple::ZeroCrossingBasedEdgeDetectionImageFilter::SetForegroundValue(uint8_t ForegroundValue)

Get/Set the label values for the ZeroCrossingImageFilter

*/
public ";

%javamethodmodifiers  rtk::simple::ZeroCrossingBasedEdgeDetectionImageFilter::SetMaximumError "/**
Self& rtk::simple::ZeroCrossingBasedEdgeDetectionImageFilter::SetMaximumError(double MaximumError)

Set the MaximumError parameter needed by the embedded gaussian filter
This value is used to set the desired maximum error of the gaussian
approximation. Maximum error is the difference between the area under
the discrete Gaussian curve and the area under the continuous
Gaussian. Maximum error affects the Gaussian operator size. The value
must be between 0.0 and 1.0.

*/
public ";

%javamethodmodifiers  rtk::simple::ZeroCrossingBasedEdgeDetectionImageFilter::SetVariance "/**
Self& rtk::simple::ZeroCrossingBasedEdgeDetectionImageFilter::SetVariance(double Variance)

Set the variance parameter needed by the embedded gaussian filter

*/
public ";

%javamethodmodifiers  rtk::simple::ZeroCrossingBasedEdgeDetectionImageFilter::ToString "/**
std::string rtk::simple::ZeroCrossingBasedEdgeDetectionImageFilter::ToString() const

Print ourselves out

*/
public ";

%javamethodmodifiers  rtk::simple::ZeroCrossingBasedEdgeDetectionImageFilter::ZeroCrossingBasedEdgeDetectionImageFilter "/**
rtk::simple::ZeroCrossingBasedEdgeDetectionImageFilter::ZeroCrossingBasedEdgeDetectionImageFilter()

Default Constructor that takes no arguments and initializes default
parameters

*/
public ";

%javamethodmodifiers  rtk::simple::ZeroCrossingBasedEdgeDetectionImageFilter::~ZeroCrossingBasedEdgeDetectionImageFilter "/**
rtk::simple::ZeroCrossingBasedEdgeDetectionImageFilter::~ZeroCrossingBasedEdgeDetectionImageFilter()

Destructor

*/
public ";


%typemap(javaimports) rtk::simple::ZeroCrossingImageFilter "/**

This filter finds the closest pixel to the zero-crossings (sign
changes) in a signed itk::Image .


Pixels closest to zero-crossings are labeled with a foreground value.
All other pixels are marked with a background value. The algorithm
works by detecting differences in sign among neighbors using city-
block style connectivity (4-neighbors in 2d, 6-neighbors in 3d, etc.).

Inputs and Outputs
The input to this filter is an itk::Image of arbitrary dimension. The algorithm assumes a signed data type
(zero-crossings are not defined for unsigned data types), and requires
that operator>, operator<, operator==, and operator!= are defined.

The output of the filter is a binary, labeled image of user-specified
type. By default, zero-crossing pixels are labeled with a default foreground'' value of itk::NumericTraits<OutputDataType>::OneValue() , where OutputDataType is the data type
of the output image. All other pixels are labeled with a defaultbackground'' value of itk::NumericTraits<OutputDataType>::ZeroValue() .
Parameters
There are two parameters for this filter. ForegroundValue is the value
that marks zero-crossing pixels. The BackgroundValue is the value
given to all other pixels.

See:
 Image


 Neighborhood


 NeighborhoodOperator


 NeighborhoodIterator
Wiki Examples:

All Examples

Find zero crossings in a signed image
See:
 rtk::simple::ZeroCrossing for the procedural interface

 itk::ZeroCrossingImageFilter for the Doxygen on the original ITK class.



C++ includes: srtkZeroCrossingImageFilter.h
*/"

%javamethodmodifiers  rtk::simple::ZeroCrossingImageFilter::Execute "/**
Image rtk::simple::ZeroCrossingImageFilter::Execute(const Image &image1)

Execute the filter on the input image

*/
public ";

%javamethodmodifiers  rtk::simple::ZeroCrossingImageFilter::Execute "/**
Image rtk::simple::ZeroCrossingImageFilter::Execute(const Image &image1, uint8_t foregroundValue, uint8_t
backgroundValue)

Execute the filter on the input image with the given parameters

*/
public ";

%javamethodmodifiers  rtk::simple::ZeroCrossingImageFilter::GetBackgroundValue "/**
uint8_t rtk::simple::ZeroCrossingImageFilter::GetBackgroundValue() const

Set/Get the label value for non-zero-crossing pixels.

*/
public ";

%javamethodmodifiers  rtk::simple::ZeroCrossingImageFilter::GetForegroundValue "/**
uint8_t rtk::simple::ZeroCrossingImageFilter::GetForegroundValue() const

Set/Get the label value for zero-crossing pixels.

*/
public ";

%javamethodmodifiers  rtk::simple::ZeroCrossingImageFilter::GetName "/**
std::string rtk::simple::ZeroCrossingImageFilter::GetName() const

Name of this class

*/
public ";

%javamethodmodifiers  rtk::simple::ZeroCrossingImageFilter::SetBackgroundValue "/**
Self& rtk::simple::ZeroCrossingImageFilter::SetBackgroundValue(uint8_t BackgroundValue)

Set/Get the label value for non-zero-crossing pixels.

*/
public ";

%javamethodmodifiers  rtk::simple::ZeroCrossingImageFilter::SetForegroundValue "/**
Self& rtk::simple::ZeroCrossingImageFilter::SetForegroundValue(uint8_t ForegroundValue)

Set/Get the label value for zero-crossing pixels.

*/
public ";

%javamethodmodifiers  rtk::simple::ZeroCrossingImageFilter::ToString "/**
std::string rtk::simple::ZeroCrossingImageFilter::ToString() const

Print ourselves out

*/
public ";

%javamethodmodifiers  rtk::simple::ZeroCrossingImageFilter::ZeroCrossingImageFilter "/**
rtk::simple::ZeroCrossingImageFilter::ZeroCrossingImageFilter()

Default Constructor that takes no arguments and initializes default
parameters

*/
public ";

%javamethodmodifiers  rtk::simple::ZeroCrossingImageFilter::~ZeroCrossingImageFilter "/**
rtk::simple::ZeroCrossingImageFilter::~ZeroCrossingImageFilter()

Destructor

*/
public ";


%typemap(javaimports) rtk::simple::ZeroFluxNeumannPadImageFilter "/**

Increase the image size by padding according to the zero-flux Neumann
boundary condition.


A filter which extends the image size and fill the missing pixels
according to a Neumann boundary condition where first, upwind
derivatives on the boundary are zero. This is a useful condition in
solving some classes of differential equations.

For example, invoking this filter on an image with a corner like: returns the following padded image:


Gaetan Lehmann. Biologie du Developpement et de la Reproduction, INRA
de Jouy-en-Josas, France.

See:
 WrapPadImageFilter , MirrorPadImageFilter , ConstantPadImageFilter , ZeroFluxNeumannBoundaryCondition

 rtk::simple::ZeroFluxNeumannPad for the procedural interface

 itk::ZeroFluxNeumannPadImageFilter for the Doxygen on the original ITK class.


C++ includes: srtkZeroFluxNeumannPadImageFilter.h
*/"

%javamethodmodifiers  rtk::simple::ZeroFluxNeumannPadImageFilter::Execute "/**
Image rtk::simple::ZeroFluxNeumannPadImageFilter::Execute(const Image &image1)

Execute the filter on the input image

*/
public ";

%javamethodmodifiers  rtk::simple::ZeroFluxNeumannPadImageFilter::Execute "/**
Image rtk::simple::ZeroFluxNeumannPadImageFilter::Execute(const Image &image1, const std::vector< unsigned int >
&padLowerBound, const std::vector< unsigned int > &padUpperBound)

Execute the filter on the input image with the given parameters

*/
public ";

%javamethodmodifiers  rtk::simple::ZeroFluxNeumannPadImageFilter::GetName "/**
std::string rtk::simple::ZeroFluxNeumannPadImageFilter::GetName() const

Name of this class

*/
public ";

%javamethodmodifiers  rtk::simple::ZeroFluxNeumannPadImageFilter::GetPadLowerBound "/**
std::vector<unsigned int> rtk::simple::ZeroFluxNeumannPadImageFilter::GetPadLowerBound() const
*/
public ";

%javamethodmodifiers  rtk::simple::ZeroFluxNeumannPadImageFilter::GetPadUpperBound "/**
std::vector<unsigned int> rtk::simple::ZeroFluxNeumannPadImageFilter::GetPadUpperBound() const
*/
public ";

%javamethodmodifiers  rtk::simple::ZeroFluxNeumannPadImageFilter::SetPadLowerBound "/**
Self& rtk::simple::ZeroFluxNeumannPadImageFilter::SetPadLowerBound(const std::vector< unsigned int > &PadLowerBound)
*/
public ";

%javamethodmodifiers  rtk::simple::ZeroFluxNeumannPadImageFilter::SetPadUpperBound "/**
Self& rtk::simple::ZeroFluxNeumannPadImageFilter::SetPadUpperBound(const std::vector< unsigned int > &PadUpperBound)
*/
public ";

%javamethodmodifiers  rtk::simple::ZeroFluxNeumannPadImageFilter::ToString "/**
std::string rtk::simple::ZeroFluxNeumannPadImageFilter::ToString() const

Print ourselves out

*/
public ";

%javamethodmodifiers  rtk::simple::ZeroFluxNeumannPadImageFilter::ZeroFluxNeumannPadImageFilter "/**
rtk::simple::ZeroFluxNeumannPadImageFilter::ZeroFluxNeumannPadImageFilter()

Default Constructor that takes no arguments and initializes default
parameters

*/
public ";

%javamethodmodifiers  rtk::simple::ZeroFluxNeumannPadImageFilter::~ZeroFluxNeumannPadImageFilter "/**
rtk::simple::ZeroFluxNeumannPadImageFilter::~ZeroFluxNeumannPadImageFilter()

Destructor

*/
public ";


%typemap(javaimports) rtk::simple::DualMemberFunctionFactory "/**

A class used to instantiate and generate function objects of templated
member functions with two template arguments.




Parameters:

TMemberFunctionPointer:
is the type of pointer to member function

 Example member function and pointer:

The provided Addressor will instantiate the templeted member functions
by taking the address in the RegisterMethods. Later they can be
retrieve with the GetMemberFunction method, which returns a function
object with the same arguments as the templated member function
pointer.

An instance of a MemberFunctionFactory is bound to a specific instance of an object, so that the returned
function object does not need to have the calling object specified.


WARNING:
Use this class with caution because it can instantiate a combinatorial
number of methods.

See:
 MemberFunctionFactory


C++ includes: srtkDualMemberFunctionFactory.h
*/"

%javamethodmodifiers  rtk::simple::DualMemberFunctionFactory::DualMemberFunctionFactory "/**
rtk::simple::DualMemberFunctionFactory< TMemberFunctionPointer >::DualMemberFunctionFactory(ObjectType *pObject)

Constructor which permanently binds the constructed object to pObject.

*/
public ";

%javamethodmodifiers  rtk::simple::DualMemberFunctionFactory::GetMemberFunction "/**
FunctionObjectType rtk::simple::DualMemberFunctionFactory< TMemberFunctionPointer >::GetMemberFunction(PixelIDValueType pixelID1, PixelIDValueType pixelID2, unsigned int
imageDimension)

Returns a function object for the combination of PixelID1 and
PixelID2, and image dimension.


pixelID1 or pixelID2 is the value of Image::GetPixelIDValue(), or PixelIDToPixelIDValue<PixelIDType>::Result

imageDimension is the the value returned by Image::GetDimension()

Example usage:

If the requested member function is not registered then an exception
is generated. The returned function object is guaranteed to be valid.

*/
public ";

%javamethodmodifiers  rtk::simple::DualMemberFunctionFactory::HasMemberFunction "/**
bool rtk::simple::DualMemberFunctionFactory< TMemberFunctionPointer >::HasMemberFunction(PixelIDValueType pixelID1, PixelIDValueType pixelID2, unsigned int
imageDimension) const
 throw ()
Query to determine if an member function has been registered for
pixelID1, pixelID2 and imageDimension.

*/
public ";

%javamethodmodifiers  rtk::simple::DualMemberFunctionFactory::Register "/**
void rtk::simple::DualMemberFunctionFactory< TMemberFunctionPointer >::Register(MemberFunctionType pfunc, TImageType1 *, TImageType2 *)

Registers a specific member function.


Registers a member function templated over TImageType1 and TImageType2

*/
public ";


%typemap(javaimports) rtk::simple::MemberFunctionFactory "/**

A class used to instantiate and generate function object to templated
member functions.




Parameters:

TMemberFunctionPointer:
is the type of pointer to member function

 Example member function pointer:

The RegisterMemberFunctions instantiate the templeted member functions
and registers the member function pointer, so that it be used for
dispatch later. Later they can be retrieve with the GetMemberFunction
methods, which return a function object with the same arguments as the
templated member function pointer.

An instance of a MemberFunctionFactory is bound to a specific instance of an object, so that the returned
function object does not need to have the calling object specified.

C++ includes: srtkMemberFunctionFactory.h
*/"

%javamethodmodifiers  rtk::simple::MemberFunctionFactory::GetMemberFunction "/**
FunctionObjectType rtk::simple::MemberFunctionFactory< TMemberFunctionPointer >::GetMemberFunction(PixelIDValueType pixelID, unsigned int imageDimension)

Returns a function object for the PixelIndex, and image dimension.


pixelID is the value of Image::GetPixelIDValue(), or PixelIDToPixelIDValue<PixelIDType>::Result

imageDimension is the the value returned by Image::GetDimension()

Example usage:

If the requested member function is not registered then an exception
is generated. The returned function object is guaranteed to be valid.

*/
public ";

%javamethodmodifiers  rtk::simple::MemberFunctionFactory::HasMemberFunction "/**
bool rtk::simple::MemberFunctionFactory< TMemberFunctionPointer >::HasMemberFunction(PixelIDValueType pixelID, unsigned int imageDimension) const
 throw ()
Query to determine if an member function has been registered for
pixelID and imageDimension.

*/
public ";

%javamethodmodifiers  rtk::simple::MemberFunctionFactory::MemberFunctionFactory "/**
rtk::simple::MemberFunctionFactory< TMemberFunctionPointer >::MemberFunctionFactory(ObjectType *pObject)

Constructor which permanently binds the constructed object to pObject.

*/
public ";

%javamethodmodifiers  rtk::simple::MemberFunctionFactory::Register "/**
void rtk::simple::MemberFunctionFactory< TMemberFunctionPointer >::Register(MemberFunctionType pfunc, TImageType *)

Registers a specific member function.


Registers a member function which will be dispatched to the TImageType
type

*/
public ";


%typemap(javaimports) rtk::simple::MemberFunctionFactoryBase "/**

A base class for the MemberFunctionFactory.


This class is for specialization needed for different arity for the
templated member function pointer

C++ includes: srtkMemberFunctionFactoryBase.h
*/"


%typemap(javaimports) rtk::simple::MemberFunctionFactoryBase< TMemberFunctionPointer, TKey, 0 > "/**
C++ includes: srtkMemberFunctionFactoryBase.h
*/"


%typemap(javaimports) rtk::simple::MemberFunctionFactoryBase< TMemberFunctionPointer, TKey, 1 > "/**
C++ includes: srtkMemberFunctionFactoryBase.h
*/"


%typemap(javaimports) rtk::simple::MemberFunctionFactoryBase< TMemberFunctionPointer, TKey, 2 > "/**
C++ includes: srtkMemberFunctionFactoryBase.h
*/"


%typemap(javaimports) rtk::simple::MemberFunctionFactoryBase< TMemberFunctionPointer, TKey, 3 > "/**
C++ includes: srtkMemberFunctionFactoryBase.h
*/"


%typemap(javaimports) rtk::simple::MemberFunctionFactoryBase< TMemberFunctionPointer, TKey, 4 > "/**
C++ includes: srtkMemberFunctionFactoryBase.h
*/"


%typemap(javaimports) rtk::simple::MemberFunctionFactoryBase< TMemberFunctionPointer, TKey, 5 > "/**
C++ includes: srtkMemberFunctionFactoryBase.h
*/"

%javamethodmodifiers  rtk::simple::Abs "/**
Image rtk::simple::Abs(const Image &image1)

Computes the absolute value of each pixel.


This function directly calls the execute method of AbsImageFilter in order to support a procedural API


See:
 rtk::simple::AbsImageFilter for the object oriented interface


*/
public ";

%javamethodmodifiers  rtk::simple::AbsoluteValueDifference "/**
Image rtk::simple::AbsoluteValueDifference(const Image &image1, const Image &image2)

Implements pixel-wise the computation of absolute value difference.


This function directly calls the execute method of AbsoluteValueDifferenceImageFilter in order to support a procedural API


See:
 rtk::simple::AbsoluteValueDifferenceImageFilter for the object oriented interface


*/
public ";

%javamethodmodifiers  rtk::simple::AbsoluteValueDifference "/**
Image rtk::simple::AbsoluteValueDifference(const Image &image1, double constant)
*/
public ";

%javamethodmodifiers  rtk::simple::AbsoluteValueDifference "/**
Image rtk::simple::AbsoluteValueDifference(double constant, const Image &image2)
*/
public ";

%javamethodmodifiers  rtk::simple::Acos "/**
Image rtk::simple::Acos(const Image &image1)

Computes the inverse cosine of each pixel.


This function directly calls the execute method of AcosImageFilter in order to support a procedural API


See:
 rtk::simple::AcosImageFilter for the object oriented interface


*/
public ";

%javamethodmodifiers  rtk::simple::AdaptiveHistogramEqualization "/**
Image rtk::simple::AdaptiveHistogramEqualization(const Image &image1, const std::vector< unsigned int >
&radius=std::vector< unsigned int >(3, 5), float alpha=0.3f, float
beta=0.3f, bool useLookupTable=false)

Power Law Adaptive Histogram Equalization.


This function directly calls the execute method of AdaptiveHistogramEqualizationImageFilter in order to support a procedural API


See:
 rtk::simple::AdaptiveHistogramEqualizationImageFilter for the object oriented interface


*/
public ";

%javamethodmodifiers  rtk::simple::Add "/**
Image rtk::simple::Add(const Image &image1, const Image &image2)

Pixel-wise addition of two images.


This function directly calls the execute method of AddImageFilter in order to support a procedural API


See:
 rtk::simple::AddImageFilter for the object oriented interface


*/
public ";

%javamethodmodifiers  rtk::simple::Add "/**
Image rtk::simple::Add(const Image &image1, double constant)
*/
public ";

%javamethodmodifiers  rtk::simple::Add "/**
Image rtk::simple::Add(double constant, const Image &image2)
*/
public ";

%javamethodmodifiers  rtk::simple::AdditiveGaussianNoise "/**
Image rtk::simple::AdditiveGaussianNoise(const Image &image1, double standardDeviation=1.0, double mean=0.0,
uint32_t seed=0u)

Alter an image with additive gaussian white noise.


This function directly calls the execute method of AdditiveGaussianNoiseImageFilter in order to support a procedural API


See:
 rtk::simple::AdditiveGaussianNoiseImageFilter for the object oriented interface


*/
public ";

%javamethodmodifiers  rtk::simple::AggregateLabelMap "/**
Image rtk::simple::AggregateLabelMap(const Image &image1)

Collapses all labels into the first label.


This function directly calls the execute method of AggregateLabelMapFilter in order to support a procedural API


See:
 rtk::simple::AggregateLabelMapFilter for the object oriented interface


*/
public ";

%javamethodmodifiers  rtk::simple::And "/**
Image rtk::simple::And(const Image &image1, const Image &image2)

Implements the AND bitwise operator pixel-wise between two images.


This function directly calls the execute method of AndImageFilter in order to support a procedural API


See:
 rtk::simple::AndImageFilter for the object oriented interface


*/
public ";

%javamethodmodifiers  rtk::simple::And "/**
Image rtk::simple::And(const Image &image1, int constant)
*/
public ";

%javamethodmodifiers  rtk::simple::And "/**
Image rtk::simple::And(int constant, const Image &image2)
*/
public ";

%javamethodmodifiers  rtk::simple::AntiAliasBinary "/**
Image rtk::simple::AntiAliasBinary(const Image &image1, double maximumRMSError=0.07, uint32_t
numberOfIterations=1000u)

A method for estimation of a surface from a binary volume.


This function directly calls the execute method of AntiAliasBinaryImageFilter in order to support a procedural API


See:
 rtk::simple::AntiAliasBinaryImageFilter for the object oriented interface


*/
public ";

%javamethodmodifiers  rtk::simple::ApproximateSignedDistanceMap "/**
Image rtk::simple::ApproximateSignedDistanceMap(const Image &image1, double insideValue=1u, double outsideValue=0u)

Create a map of the approximate signed distance from the boundaries of
a binary image.


This function directly calls the execute method of ApproximateSignedDistanceMapImageFilter in order to support a procedural API


See:
 rtk::simple::ApproximateSignedDistanceMapImageFilter for the object oriented interface


*/
public ";

%javamethodmodifiers  rtk::simple::Asin "/**
Image rtk::simple::Asin(const Image &image1)

Computes the sine of each pixel.


This function directly calls the execute method of AsinImageFilter in order to support a procedural API


See:
 rtk::simple::AsinImageFilter for the object oriented interface


*/
public ";

%javamethodmodifiers  rtk::simple::Atan "/**
Image rtk::simple::Atan(const Image &image1)

Computes the one-argument inverse tangent of each pixel.


This function directly calls the execute method of AtanImageFilter in order to support a procedural API


See:
 rtk::simple::AtanImageFilter for the object oriented interface


*/
public ";

%javamethodmodifiers  rtk::simple::Atan2 "/**
Image rtk::simple::Atan2(const Image &image1, const Image &image2)

Computes two argument inverse tangent.


This function directly calls the execute method of Atan2ImageFilter in order to support a procedural API


See:
 rtk::simple::Atan2ImageFilter for the object oriented interface


*/
public ";

%javamethodmodifiers  rtk::simple::Atan2 "/**
Image rtk::simple::Atan2(const Image &image1, double constant)
*/
public ";

%javamethodmodifiers  rtk::simple::Atan2 "/**
Image rtk::simple::Atan2(double constant, const Image &image2)
*/
public ";

%javamethodmodifiers  rtk::simple::Bilateral "/**
Image rtk::simple::Bilateral(const Image &image1, double domainSigma=4.0, double rangeSigma=50.0,
unsigned int numberOfRangeGaussianSamples=100u)

Blurs an image while preserving edges.


This function directly calls the execute method of BilateralImageFilter in order to support a procedural API


See:
 rtk::simple::BilateralImageFilter for the object oriented interface


*/
public ";

%javamethodmodifiers  rtk::simple::BinaryClosingByReconstruction "/**
Image rtk::simple::BinaryClosingByReconstruction(const Image &, uint32_t radius=1, KernelEnum kernel=srtkBall, double
foregroundValue=1.0, bool fullyConnected=false)

rtk::simple::BinaryClosingByReconstructionImageFilter Functional Interface

This function directly calls the execute method of BinaryClosingByReconstructionImageFilter in order to support a fully functional API

*/
public ";

%javamethodmodifiers  rtk::simple::BinaryClosingByReconstruction "/**
Image rtk::simple::BinaryClosingByReconstruction(const Image &, const std::vector< uint32_t > vectorRadius, KernelEnum
kernel=srtkBall, double foregroundValue=1.0, bool
fullyConnected=false)

rtk::simple::BinaryClosingByReconstructionImageFilter Functional Interface

This function directly calls the execute method of BinaryClosingByReconstructionImageFilter in order to support a fully functional API

*/
public ";

%javamethodmodifiers  rtk::simple::BinaryContour "/**
Image rtk::simple::BinaryContour(const Image &image1, bool fullyConnected=false, double
backgroundValue=0.0, double foregroundValue=1.0)

Labels the pixels on the border of the objects in a binary image.


This function directly calls the execute method of BinaryContourImageFilter in order to support a procedural API


See:
 rtk::simple::BinaryContourImageFilter for the object oriented interface


*/
public ";

%javamethodmodifiers  rtk::simple::BinaryDilate "/**
Image rtk::simple::BinaryDilate(const Image &, uint32_t radius=1, KernelEnum kernel=srtkBall, double
backgroundValue=0.0, double foregroundValue=1.0, bool
boundaryToForeground=false)

rtk::simple::BinaryDilateImageFilter Functional Interface

This function directly calls the execute method of BinaryDilateImageFilter in order to support a fully functional API

*/
public ";

%javamethodmodifiers  rtk::simple::BinaryDilate "/**
Image rtk::simple::BinaryDilate(const Image &, const std::vector< uint32_t > vectorRadius, KernelEnum
kernel=srtkBall, double backgroundValue=0.0, double
foregroundValue=1.0, bool boundaryToForeground=false)

rtk::simple::BinaryDilateImageFilter Functional Interface

This function directly calls the execute method of BinaryDilateImageFilter in order to support a fully functional API

*/
public ";

%javamethodmodifiers  rtk::simple::BinaryErode "/**
Image rtk::simple::BinaryErode(const Image &, uint32_t radius=1, KernelEnum kernel=srtkBall, double
backgroundValue=0.0, double foregroundValue=1.0, bool
boundaryToForeground=true)

rtk::simple::BinaryErodeImageFilter Functional Interface

This function directly calls the execute method of BinaryErodeImageFilter in order to support a fully functional API

*/
public ";

%javamethodmodifiers  rtk::simple::BinaryErode "/**
Image rtk::simple::BinaryErode(const Image &, const std::vector< uint32_t > vectorRadius, KernelEnum
kernel=srtkBall, double backgroundValue=0.0, double
foregroundValue=1.0, bool boundaryToForeground=true)

rtk::simple::BinaryErodeImageFilter Functional Interface

This function directly calls the execute method of BinaryErodeImageFilter in order to support a fully functional API

*/
public ";

%javamethodmodifiers  rtk::simple::BinaryFillhole "/**
Image rtk::simple::BinaryFillhole(const Image &image1, bool fullyConnected=false, double
foregroundValue=1.0)

Remove holes not connected to the boundary of the image.


This function directly calls the execute method of BinaryFillholeImageFilter in order to support a procedural API


See:
 rtk::simple::BinaryFillholeImageFilter for the object oriented interface


*/
public ";

%javamethodmodifiers  rtk::simple::BinaryGrindPeak "/**
Image rtk::simple::BinaryGrindPeak(const Image &image1, bool fullyConnected=false, double
foregroundValue=1.0, double backgroundValue=0)

Remove the objects not connected to the boundary of the image.


This function directly calls the execute method of BinaryGrindPeakImageFilter in order to support a procedural API


See:
 rtk::simple::BinaryGrindPeakImageFilter for the object oriented interface


*/
public ";

%javamethodmodifiers  rtk::simple::BinaryImageToLabelMap "/**
Image rtk::simple::BinaryImageToLabelMap(const Image &image1, bool fullyConnected=false, double
inputForegroundValue=1.0, double outputBackgroundValue=0.0)

Label the connected components in a binary image and produce a
collection of label objects.


This function directly calls the execute method of BinaryImageToLabelMapFilter in order to support a procedural API


See:
 rtk::simple::BinaryImageToLabelMapFilter for the object oriented interface


*/
public ";

%javamethodmodifiers  rtk::simple::BinaryMagnitude "/**
Image rtk::simple::BinaryMagnitude(const Image &image1, const Image &image2)

Computes the square root of the sum of squares of corresponding input
pixels.


This function directly calls the execute method of BinaryMagnitudeImageFilter in order to support a procedural API


See:
 rtk::simple::BinaryMagnitudeImageFilter for the object oriented interface


*/
public ";

%javamethodmodifiers  rtk::simple::BinaryMedian "/**
Image rtk::simple::BinaryMedian(const Image &image1, const std::vector< unsigned int >
&radius=std::vector< unsigned int >(3, 1), double foregroundValue=1.0,
double backgroundValue=0.0)

Applies a version of the median filter optimized for binary images.


This function directly calls the execute method of BinaryMedianImageFilter in order to support a procedural API


See:
 rtk::simple::BinaryMedianImageFilter for the object oriented interface


*/
public ";

%javamethodmodifiers  rtk::simple::BinaryMinMaxCurvatureFlow "/**
Image rtk::simple::BinaryMinMaxCurvatureFlow(const Image &image1, double timeStep=0.05, uint32_t
numberOfIterations=5u, int stencilRadius=2, double threshold=0)

Denoise a binary image using min/max curvature flow.


This function directly calls the execute method of BinaryMinMaxCurvatureFlowImageFilter in order to support a procedural API


See:
 rtk::simple::BinaryMinMaxCurvatureFlowImageFilter for the object oriented interface


*/
public ";

%javamethodmodifiers  rtk::simple::BinaryMorphologicalClosing "/**
Image rtk::simple::BinaryMorphologicalClosing(const Image &, uint32_t radius=1, KernelEnum kernel=srtkBall, double
foregroundValue=1.0, bool safeBorder=true)

rtk::simple::BinaryMorphologicalClosingImageFilter Functional Interface

This function directly calls the execute method of BinaryMorphologicalClosingImageFilter in order to support a fully functional API

*/
public ";

%javamethodmodifiers  rtk::simple::BinaryMorphologicalClosing "/**
Image rtk::simple::BinaryMorphologicalClosing(const Image &, const std::vector< uint32_t > vectorRadius, KernelEnum
kernel=srtkBall, double foregroundValue=1.0, bool safeBorder=true)

rtk::simple::BinaryMorphologicalClosingImageFilter Functional Interface

This function directly calls the execute method of BinaryMorphologicalClosingImageFilter in order to support a fully functional API

*/
public ";

%javamethodmodifiers  rtk::simple::BinaryMorphologicalOpening "/**
Image rtk::simple::BinaryMorphologicalOpening(const Image &, uint32_t radius=1, KernelEnum kernel=srtkBall, double
backgroundValue=0.0, double foregroundValue=1.0)

rtk::simple::BinaryMorphologicalOpeningImageFilter Functional Interface

This function directly calls the execute method of BinaryMorphologicalOpeningImageFilter in order to support a fully functional API

*/
public ";

%javamethodmodifiers  rtk::simple::BinaryMorphologicalOpening "/**
Image rtk::simple::BinaryMorphologicalOpening(const Image &, const std::vector< uint32_t > vectorRadius, KernelEnum
kernel=srtkBall, double backgroundValue=0.0, double
foregroundValue=1.0)

rtk::simple::BinaryMorphologicalOpeningImageFilter Functional Interface

This function directly calls the execute method of BinaryMorphologicalOpeningImageFilter in order to support a fully functional API

*/
public ";

%javamethodmodifiers  rtk::simple::BinaryNot "/**
Image rtk::simple::BinaryNot(const Image &image1, double foregroundValue=1.0, double
backgroundValue=0.0)

Implements the BinaryNot logical operator pixel-wise between two
images.


This function directly calls the execute method of BinaryNotImageFilter in order to support a procedural API


See:
 rtk::simple::BinaryNotImageFilter for the object oriented interface


*/
public ";

%javamethodmodifiers  rtk::simple::BinaryOpeningByReconstruction "/**
Image rtk::simple::BinaryOpeningByReconstruction(const Image &, uint32_t radius=1, KernelEnum kernel=srtkBall, double
foregroundValue=1.0, double backgroundValue=0.0, bool
fullyConnected=false)

rtk::simple::BinaryOpeningByReconstructionImageFilter Functional Interface

This function directly calls the execute method of BinaryOpeningByReconstructionImageFilter in order to support a fully functional API

*/
public ";

%javamethodmodifiers  rtk::simple::BinaryOpeningByReconstruction "/**
Image rtk::simple::BinaryOpeningByReconstruction(const Image &, const std::vector< uint32_t > vectorRadius, KernelEnum
kernel=srtkBall, double foregroundValue=1.0, double
backgroundValue=0.0, bool fullyConnected=false)

rtk::simple::BinaryOpeningByReconstructionImageFilter Functional Interface

This function directly calls the execute method of BinaryOpeningByReconstructionImageFilter in order to support a fully functional API

*/
public ";

%javamethodmodifiers  rtk::simple::BinaryProjection "/**
Image rtk::simple::BinaryProjection(const Image &image1, unsigned int projectionDimension=0u, double
foregroundValue=1.0, double backgroundValue=0.0)

Binary projection.


This function directly calls the execute method of BinaryProjectionImageFilter in order to support a procedural API


See:
 rtk::simple::BinaryProjectionImageFilter for the object oriented interface


*/
public ";

%javamethodmodifiers  rtk::simple::BinaryReconstructionByDilation "/**
Image rtk::simple::BinaryReconstructionByDilation(const Image &image1, const Image &image2, double backgroundValue=0.0,
double foregroundValue=1.0, bool fullyConnected=false)

binary reconstruction by dilation of an image


This function directly calls the execute method of BinaryReconstructionByDilationImageFilter in order to support a procedural API


See:
 rtk::simple::BinaryReconstructionByDilationImageFilter for the object oriented interface


*/
public ";

%javamethodmodifiers  rtk::simple::BinaryReconstructionByErosion "/**
Image rtk::simple::BinaryReconstructionByErosion(const Image &image1, const Image &image2, double backgroundValue=0.0,
double foregroundValue=1.0, bool fullyConnected=false)

binary reconstruction by erosion of an image


This function directly calls the execute method of BinaryReconstructionByErosionImageFilter in order to support a procedural API


See:
 rtk::simple::BinaryReconstructionByErosionImageFilter for the object oriented interface


*/
public ";

%javamethodmodifiers  rtk::simple::BinaryThinning "/**
Image rtk::simple::BinaryThinning(const Image &image1)

This filter computes one-pixel-wide edges of the input image.


This function directly calls the execute method of BinaryThinningImageFilter in order to support a procedural API


See:
 rtk::simple::BinaryThinningImageFilter for the object oriented interface


*/
public ";

%javamethodmodifiers  rtk::simple::BinaryThreshold "/**
Image rtk::simple::BinaryThreshold(const Image &image1, double lowerThreshold=0.0, double
upperThreshold=255.0, uint8_t insideValue=1u, uint8_t outsideValue=0u)

Binarize an input image by thresholding.


This function directly calls the execute method of BinaryThresholdImageFilter in order to support a procedural API


See:
 rtk::simple::BinaryThresholdImageFilter for the object oriented interface


*/
public ";

%javamethodmodifiers  rtk::simple::BinaryThresholdProjection "/**
Image rtk::simple::BinaryThresholdProjection(const Image &image1, unsigned int projectionDimension=0u, double
thresholdValue=0.0, uint8_t foregroundValue=1u, uint8_t
backgroundValue=0u)

BinaryThreshold projection.


This function directly calls the execute method of BinaryThresholdProjectionImageFilter in order to support a procedural API


See:
 rtk::simple::BinaryThresholdProjectionImageFilter for the object oriented interface


*/
public ";

%javamethodmodifiers  rtk::simple::BinomialBlur "/**
Image rtk::simple::BinomialBlur(const Image &image1, unsigned int repetitions=1u)

Performs a separable blur on each dimension of an image.


This function directly calls the execute method of BinomialBlurImageFilter in order to support a procedural API


See:
 rtk::simple::BinomialBlurImageFilter for the object oriented interface


*/
public ";

%javamethodmodifiers  rtk::simple::BinShrink "/**
Image rtk::simple::BinShrink(const Image &image1, const std::vector< unsigned int >
&shrinkFactors=std::vector< unsigned int >(3, 1))

Reduce the size of an image by an integer factor in each dimension
while performing averaging of an input neighborhood.


This function directly calls the execute method of BinShrinkImageFilter in order to support a procedural API


See:
 rtk::simple::BinShrinkImageFilter for the object oriented interface


*/
public ";

%javamethodmodifiers  rtk::simple::BitwiseNot "/**
Image rtk::simple::BitwiseNot(const Image &image1)

Implements pixel-wise generic operation on one image.


This function directly calls the execute method of BitwiseNotImageFilter in order to support a procedural API


See:
 rtk::simple::BitwiseNotImageFilter for the object oriented interface


*/
public ";

%javamethodmodifiers  rtk::simple::BlackTopHat "/**
Image rtk::simple::BlackTopHat(const Image &, uint32_t radius=1, KernelEnum kernel=srtkBall, bool
safeBorder=true)

rtk::simple::BlackTopHatImageFilter Functional Interface

This function directly calls the execute method of BlackTopHatImageFilter in order to support a fully functional API

*/
public ";

%javamethodmodifiers  rtk::simple::BlackTopHat "/**
Image rtk::simple::BlackTopHat(const Image &, const std::vector< uint32_t > vectorRadius, KernelEnum
kernel=srtkBall, bool safeBorder=true)

rtk::simple::BlackTopHatImageFilter Functional Interface

This function directly calls the execute method of BlackTopHatImageFilter in order to support a fully functional API

*/
public ";

%javamethodmodifiers  rtk::simple::BoundedReciprocal "/**
Image rtk::simple::BoundedReciprocal(const Image &image1)

Computes 1/(1+x) for each pixel in the image.


This function directly calls the execute method of BoundedReciprocalImageFilter in order to support a procedural API


See:
 rtk::simple::BoundedReciprocalImageFilter for the object oriented interface


*/
public ";

%javamethodmodifiers  rtk::simple::BoxMean "/**
Image rtk::simple::BoxMean(const Image &image1, const std::vector< unsigned int >
&radius=std::vector< unsigned int >(3, 1))

Implements a fast rectangular mean filter using the accumulator
approach.


This function directly calls the execute method of BoxMeanImageFilter in order to support a procedural API


See:
 rtk::simple::BoxMeanImageFilter for the object oriented interface


*/
public ";

%javamethodmodifiers  rtk::simple::BoxSigma "/**
Image rtk::simple::BoxSigma(const Image &image1, const std::vector< unsigned int >
&radius=std::vector< unsigned int >(3, 1))

Implements a fast rectangular sigma filter using the accumulator
approach.


This function directly calls the execute method of BoxSigmaImageFilter in order to support a procedural API


See:
 rtk::simple::BoxSigmaImageFilter for the object oriented interface


*/
public ";

%javamethodmodifiers  rtk::simple::BSplineTransformInitializer "/**
BSplineTransform rtk::simple::BSplineTransformInitializer(const Image &image1, const std::vector< uint32_t >
&transformDomainMeshSize=std::vector< uint32_t >(3, 1u), unsigned int
order=3u)

BSplineTransformInitializerFilter is a helper class intended to initialize the control point grid such
that it has a physically consistent definition. It sets the transform
domain origin, physical dimensions and direction from information
obtained from the image. It also sets the mesh size if asked to do so
by calling SetTransformDomainMeshSize()before calling
InitializeTransform().


This function directly calls the execute method of BSplineTransformInitializerFilter in order to support a procedural API


See:
 rtk::simple::BSplineTransformInitializerFilter for the object oriented interface


*/
public ";

%javamethodmodifiers  rtk::simple::CannyEdgeDetection "/**
Image rtk::simple::CannyEdgeDetection(const Image &image1, double lowerThreshold=0.0, double
upperThreshold=0.0, const std::vector< double > &variance=std::vector<
double >(3, 0.0), const std::vector< double >
&maximumError=std::vector< double >(3, 0.01))

This filter is an implementation of a Canny edge detector for scalar-
valued images.


This function directly calls the execute method of CannyEdgeDetectionImageFilter in order to support a procedural API


See:
 rtk::simple::CannyEdgeDetectionImageFilter for the object oriented interface


*/
public ";

%javamethodmodifiers  rtk::simple::Cast "/**
Image rtk::simple::Cast(const Image &image, PixelIDValueEnum pixelID)
*/
public ";

%javamethodmodifiers  rtk::simple::CenteredTransformInitializer "/**
Transform rtk::simple::CenteredTransformInitializer(const Image &fixedImage, const Image &movingImage, const Transform
&transform, CenteredTransformInitializerFilter::OperationModeType oper
ationMode=rtk::simple::CenteredTransformInitializerFilter::MOMENTS)

CenteredTransformInitializer is a helper class intended to initialize the center of rotation and
the translation of Transforms having the center of rotation among
their parameters.


This function directly calls the execute method of CenteredTransformInitializerFilter in order to support a procedural API


See:
 rtk::simple::CenteredTransformInitializerFilter for the object oriented interface


*/
public ";

%javamethodmodifiers  rtk::simple::CenteredVersorTransformInitializer "/**
Transform rtk::simple::CenteredVersorTransformInitializer(const Image &fixedImage, const Image &movingImage, const Transform
&transform, bool computeRotation=false)

CenteredVersorTransformInitializer is a helper class intended to initialize the center of rotation,
versor, and translation of the VersorRigid3DTransform.


This function directly calls the execute method of
CenteredVectorTransformInitializerFilter in order to support a
procedural API.


See:
 rtk::simple::CenteredVersorTransformInitializerFilter for the object oriented interface


*/
public ";

%javamethodmodifiers  rtk::simple::ChangeLabel "/**
Image rtk::simple::ChangeLabel(const Image &image1, std::map< double, double > changeMap=std::map<
double, double >())

Change Sets of Labels.


This function directly calls the execute method of ChangeLabelImageFilter in order to support a procedural API


See:
 rtk::simple::ChangeLabelImageFilter for the object oriented interface


*/
public ";

%javamethodmodifiers  rtk::simple::ChangeLabelLabelMap "/**
Image rtk::simple::ChangeLabelLabelMap(const Image &image1, std::map< double, double > changeMap=std::map<
double, double >())

Replace the label Ids of selected LabelObjects with new label Ids.


This function directly calls the execute method of ChangeLabelLabelMapFilter in order to support a procedural API


See:
 rtk::simple::ChangeLabelLabelMapFilter for the object oriented interface


*/
public ";

%javamethodmodifiers  rtk::simple::CheckerBoard "/**
Image rtk::simple::CheckerBoard(const Image &image1, const Image &image2, const std::vector< uint32_t
> &checkerPattern=std::vector< uint32_t >(3, 4))

Combines two images in a checkerboard pattern.


This function directly calls the execute method of CheckerBoardImageFilter in order to support a procedural API


See:
 rtk::simple::CheckerBoardImageFilter for the object oriented interface


*/
public ";

%javamethodmodifiers  rtk::simple::Clamp "/**
Image rtk::simple::Clamp(const Image &image1, PixelIDValueEnum
outputPixelType=rtk::simple::srtkFloat32, double
lowerBound=-std::numeric_limits< double >::max(), double
upperBound=std::numeric_limits< double >::max())

Casts input pixels to output pixel type and clamps the output pixel
values to a specified range.


This function directly calls the execute method of ClampImageFilter in order to support a procedural API


See:
 rtk::simple::ClampImageFilter for the object oriented interface


*/
public ";

%javamethodmodifiers  rtk::simple::ClosingByReconstruction "/**
Image rtk::simple::ClosingByReconstruction(const Image &, uint32_t radius=1, KernelEnum kernel=srtkBall, bool
fullyConnected=false, bool preserveIntensities=false)

rtk::simple::ClosingByReconstructionImageFilter Functional Interface

This function directly calls the execute method of ClosingByReconstructionImageFilter in order to support a fully functional API

*/
public ";

%javamethodmodifiers  rtk::simple::ClosingByReconstruction "/**
Image rtk::simple::ClosingByReconstruction(const Image &, const std::vector< uint32_t > vectorRadius, KernelEnum
kernel=srtkBall, bool fullyConnected=false, bool
preserveIntensities=false)

rtk::simple::ClosingByReconstructionImageFilter Functional Interface

This function directly calls the execute method of ClosingByReconstructionImageFilter in order to support a fully functional API

*/
public ";

%javamethodmodifiers  rtk::simple::CollidingFronts "/**
Image rtk::simple::CollidingFronts(const Image &image1, const std::vector< std::vector< unsigned int > >
&seedPoints1=std::vector< std::vector< unsigned int > >(), const
std::vector< std::vector< unsigned int > > &seedPoints2=std::vector<
std::vector< unsigned int > >(), bool applyConnectivity=true, double
negativeEpsilon=-1e-6, bool stopOnTargets=false)

Selects a region of space where two independent fronts run towards
each other.


This function directly calls the execute method of CollidingFrontsImageFilter in order to support a procedural API


See:
 rtk::simple::CollidingFrontsImageFilter for the object oriented interface


*/
public ";

%javamethodmodifiers  rtk::simple::ComplexToImaginary "/**
Image rtk::simple::ComplexToImaginary(const Image &image1)

Computes pixel-wise the imaginary part of a complex image.


This function directly calls the execute method of ComplexToImaginaryImageFilter in order to support a procedural API


See:
 rtk::simple::ComplexToImaginaryImageFilter for the object oriented interface


*/
public ";

%javamethodmodifiers  rtk::simple::ComplexToModulus "/**
Image rtk::simple::ComplexToModulus(const Image &image1)

Computes pixel-wise the Modulus of a complex image.


This function directly calls the execute method of ComplexToModulusImageFilter in order to support a procedural API


See:
 rtk::simple::ComplexToModulusImageFilter for the object oriented interface


*/
public ";

%javamethodmodifiers  rtk::simple::ComplexToPhase "/**
Image rtk::simple::ComplexToPhase(const Image &image1)

Computes pixel-wise the modulus of a complex image.


This function directly calls the execute method of ComplexToPhaseImageFilter in order to support a procedural API


See:
 rtk::simple::ComplexToPhaseImageFilter for the object oriented interface


*/
public ";

%javamethodmodifiers  rtk::simple::ComplexToReal "/**
Image rtk::simple::ComplexToReal(const Image &image1)

Computes pixel-wise the real(x) part of a complex image.


This function directly calls the execute method of ComplexToRealImageFilter in order to support a procedural API


See:
 rtk::simple::ComplexToRealImageFilter for the object oriented interface


*/
public ";

%javamethodmodifiers  rtk::simple::ConfidenceConnected "/**
Image rtk::simple::ConfidenceConnected(const Image &image1, const std::vector< std::vector< unsigned int > >
&seedList, unsigned int numberOfIterations=4u, double multiplier=4.5,
unsigned int initialNeighborhoodRadius=1u, uint8_t replaceValue=1u)

rtk::simple::ConfidenceConnectedImageFilter Functional Interface

This function directly calls the execute method of ConfidenceConnectedImageFilter in order to support a fully functional API

*/
public ";

%javamethodmodifiers  rtk::simple::ConnectedComponent "/**
Image rtk::simple::ConnectedComponent(const Image &image1, bool fullyConnected=false)

Label the objects in a binary image.


This function directly calls the execute method of ConnectedComponentImageFilter in order to support a procedural API


See:
 rtk::simple::ConnectedComponentImageFilter for the object oriented interface


*/
public ";

%javamethodmodifiers  rtk::simple::ConnectedThreshold "/**
Image rtk::simple::ConnectedThreshold(const Image &image1, const std::vector< std::vector< unsigned int > >
&seedList, double lower=0, double upper=1, uint8_t replaceValue=1u,
ConnectedThresholdImageFilter::ConnectivityType connectivity=itk::simp
le::ConnectedThresholdImageFilter::FaceConnectivity)

rtk::simple::ConnectedThresholdImageFilter Functional Interface

This function directly calls the execute method of ConnectedThresholdImageFilter in order to support a fully functional API

*/
public ";

%javamethodmodifiers  rtk::simple::ConstantPad "/**
Image rtk::simple::ConstantPad(const Image &image1, const std::vector< unsigned int >
&padLowerBound=std::vector< unsigned int >(3, 0), const std::vector<
unsigned int > &padUpperBound=std::vector< unsigned int >(3, 0),
double constant=0.0)

Increase the image size by padding with a constant value.


This function directly calls the execute method of ConstantPadImageFilter in order to support a procedural API


See:
 rtk::simple::ConstantPadImageFilter for the object oriented interface


*/
public ";

%javamethodmodifiers  rtk::simple::Convolution "/**
Image rtk::simple::Convolution(const Image &image1, const Image &image2, bool normalize=false,
ConvolutionImageFilter::BoundaryConditionType boundaryCondition=itk::s
imple::ConvolutionImageFilter::ZERO_FLUX_NEUMANN_PAD,
ConvolutionImageFilter::OutputRegionModeType
outputRegionMode=rtk::simple::ConvolutionImageFilter::SAME)

Convolve a given image with an arbitrary image kernel.


This function directly calls the execute method of ConvolutionImageFilter in order to support a procedural API


See:
 rtk::simple::ConvolutionImageFilter for the object oriented interface


*/
public ";

%javamethodmodifiers  rtk::simple::Cos "/**
Image rtk::simple::Cos(const Image &image1)

Computes the cosine of each pixel.


This function directly calls the execute method of CosImageFilter in order to support a procedural API


See:
 rtk::simple::CosImageFilter for the object oriented interface


*/
public ";

%javamethodmodifiers  rtk::simple::CreateKernel "/**
itk::FlatStructuringElement< VImageDimension > rtk::simple::CreateKernel(KernelEnum kernelType, const std::vector< uint32_t > &size)
*/
public ";

%javamethodmodifiers  rtk::simple::Crop "/**
Image rtk::simple::Crop(const Image &image1, const std::vector< unsigned int >
&lowerBoundaryCropSize=std::vector< unsigned int >(3, 0), const
std::vector< unsigned int > &upperBoundaryCropSize=std::vector<
unsigned int >(3, 0))

Decrease the image size by cropping the image by an itk::Size at both the upper and lower bounds of the largest possible region.


This function directly calls the execute method of CropImageFilter in order to support a procedural API


See:
 rtk::simple::CropImageFilter for the object oriented interface


*/
public ";

%javamethodmodifiers  rtk::simple::CurvatureAnisotropicDiffusion "/**
Image rtk::simple::CurvatureAnisotropicDiffusion(const Image &image1, double timeStep=0.0625, double
conductanceParameter=3, unsigned int
conductanceScalingUpdateInterval=1u, uint32_t numberOfIterations=5u)

rtk::simple::CurvatureAnisotropicDiffusionImageFilter Procedural Interface


This function directly calls the execute method of CurvatureAnisotropicDiffusionImageFilter in order to support a procedural API


See:
 rtk::simple::CurvatureAnisotropicDiffusionImageFilter for the object oriented interface


*/
public ";

%javamethodmodifiers  rtk::simple::CurvatureFlow "/**
Image rtk::simple::CurvatureFlow(const Image &image1, double timeStep=0.05, uint32_t
numberOfIterations=5u)

Denoise an image using curvature driven flow.


This function directly calls the execute method of CurvatureFlowImageFilter in order to support a procedural API


See:
 rtk::simple::CurvatureFlowImageFilter for the object oriented interface


*/
public ";

%javamethodmodifiers  rtk::simple::CyclicShift "/**
Image rtk::simple::CyclicShift(const Image &image1, const std::vector< int > &shift=std::vector< int
>(3, 0))

Perform a cyclic spatial shift of image intensities on the image grid.


This function directly calls the execute method of CyclicShiftImageFilter in order to support a procedural API


See:
 rtk::simple::CyclicShiftImageFilter for the object oriented interface


*/
public ";

%javamethodmodifiers  rtk::simple::DanielssonDistanceMap "/**
Image rtk::simple::DanielssonDistanceMap(const Image &image1, bool inputIsBinary=false, bool
squaredDistance=false, bool useImageSpacing=false)

This filter computes the distance map of the input image as an
approximation with pixel accuracy to the Euclidean distance.


This function directly calls the execute method of DanielssonDistanceMapImageFilter in order to support a procedural API


See:
 rtk::simple::DanielssonDistanceMapImageFilter for the object oriented interface


*/
public ";

%javamethodmodifiers  rtk::simple::Derivative "/**
Image rtk::simple::Derivative(const Image &image1, unsigned int direction=0u, unsigned int
order=1u, bool useImageSpacing=true)

Computes the directional derivative of an image. The directional
derivative at each pixel location is computed by convolution with a
derivative operator of user-specified order.


This function directly calls the execute method of DerivativeImageFilter in order to support a procedural API


See:
 rtk::simple::DerivativeImageFilter for the object oriented interface


*/
public ";

%javamethodmodifiers  rtk::simple::DilateObjectMorphology "/**
Image rtk::simple::DilateObjectMorphology(const Image &, uint32_t radius=1, KernelEnum kernel=srtkBall, double
objectValue=1)

rtk::simple::DilateObjectMorphologyImageFilter Functional Interface

This function directly calls the execute method of DilateObjectMorphologyImageFilter in order to support a fully functional API

*/
public ";

%javamethodmodifiers  rtk::simple::DilateObjectMorphology "/**
Image rtk::simple::DilateObjectMorphology(const Image &, const std::vector< uint32_t > vectorRadius, KernelEnum
kernel=srtkBall, double objectValue=1)

rtk::simple::DilateObjectMorphologyImageFilter Functional Interface

This function directly calls the execute method of DilateObjectMorphologyImageFilter in order to support a fully functional API

*/
public ";

%javamethodmodifiers  rtk::simple::DiscreteGaussian "/**
Image rtk::simple::DiscreteGaussian(const Image &image1, double variance=1.0, unsigned int
maximumKernelWidth=32u, double maximumError=0.01, bool
useImageSpacing=true)

Blurs an image by separable convolution with discrete gaussian
kernels. This filter performs Gaussian blurring by separable
convolution of an image and a discrete Gaussian operator (kernel).


This function directly calls the execute method of DiscreteGaussianImageFilter in order to support a procedural API


See:
 rtk::simple::DiscreteGaussianImageFilter for the object oriented interface


*/
public ";

%javamethodmodifiers  rtk::simple::DiscreteGaussianDerivative "/**
Image rtk::simple::DiscreteGaussianDerivative(const Image &image1, const std::vector< double >
&variance=std::vector< double >(3, 0.0), const std::vector< unsigned
int > &order=std::vector< unsigned int >(3, 1), unsigned int
maximumKernelWidth=32u, double maximumError=0.01, bool
useImageSpacing=true, bool normalizeAcrossScale=false)

Calculates image derivatives using discrete derivative gaussian
kernels. This filter calculates Gaussian derivative by separable
convolution of an image and a discrete Gaussian derivative operator
(kernel).


This function directly calls the execute method of DiscreteGaussianDerivativeImageFilter in order to support a procedural API


See:
 rtk::simple::DiscreteGaussianDerivativeImageFilter for the object oriented interface


*/
public ";

%javamethodmodifiers  rtk::simple::DisplacementFieldJacobianDeterminant "/**
Image rtk::simple::DisplacementFieldJacobianDeterminant(const Image &image1, bool useImageSpacing=true, const std::vector<
double > &derivativeWeights=std::vector< double >())

Computes a scalar image from a vector image (e.g., deformation field)
input, where each output scalar at each pixel is the Jacobian
determinant of the vector field at that location. This calculation is
correct in the case where the vector image is a \"displacement\" from
the current location. The computation for the jacobian determinant is:
det[ dT/dx ] = det[ I + du/dx ].


This function directly calls the execute method of DisplacementFieldJacobianDeterminantFilter in order to support a procedural API


See:
 rtk::simple::DisplacementFieldJacobianDeterminantFilter for the object oriented interface


*/
public ";

%javamethodmodifiers  rtk::simple::Divide "/**
Image rtk::simple::Divide(const Image &image1, const Image &image2)

Pixel-wise division of two images.


This function directly calls the execute method of DivideImageFilter in order to support a procedural API


See:
 rtk::simple::DivideImageFilter for the object oriented interface


*/
public ";

%javamethodmodifiers  rtk::simple::Divide "/**
Image rtk::simple::Divide(const Image &image1, double constant)
*/
public ";

%javamethodmodifiers  rtk::simple::Divide "/**
Image rtk::simple::Divide(double constant, const Image &image2)
*/
public ";

%javamethodmodifiers  rtk::simple::DivideFloor "/**
Image rtk::simple::DivideFloor(const Image &image1, const Image &image2)

Implements pixel-wise generic operation of two images, or of an image
and a constant.


This function directly calls the execute method of DivideFloorImageFilter in order to support a procedural API


See:
 rtk::simple::DivideFloorImageFilter for the object oriented interface


*/
public ";

%javamethodmodifiers  rtk::simple::DivideFloor "/**
Image rtk::simple::DivideFloor(const Image &image1, double constant)
*/
public ";

%javamethodmodifiers  rtk::simple::DivideFloor "/**
Image rtk::simple::DivideFloor(double constant, const Image &image2)
*/
public ";

%javamethodmodifiers  rtk::simple::DivideReal "/**
Image rtk::simple::DivideReal(const Image &image1, const Image &image2)

Implements pixel-wise generic operation of two images, or of an image
and a constant.


This function directly calls the execute method of DivideRealImageFilter in order to support a procedural API


See:
 rtk::simple::DivideRealImageFilter for the object oriented interface


*/
public ";

%javamethodmodifiers  rtk::simple::DivideReal "/**
Image rtk::simple::DivideReal(const Image &image1, double constant)
*/
public ";

%javamethodmodifiers  rtk::simple::DivideReal "/**
Image rtk::simple::DivideReal(double constant, const Image &image2)
*/
public ";

%javamethodmodifiers  rtk::simple::DoubleThreshold "/**
Image rtk::simple::DoubleThreshold(const Image &image1, double threshold1=0.0, double threshold2=1.0,
double threshold3=254.0, double threshold4=255.0, uint8_t
insideValue=1u, uint8_t outsideValue=0u, bool fullyConnected=false)

Binarize an input image using double thresholding.


This function directly calls the execute method of DoubleThresholdImageFilter in order to support a procedural API


See:
 rtk::simple::DoubleThresholdImageFilter for the object oriented interface


*/
public ";

%javamethodmodifiers  rtk::simple::EdgePotential "/**
Image rtk::simple::EdgePotential(const Image &image1)

Computes the edge potential of an image from the image gradient.


This function directly calls the execute method of EdgePotentialImageFilter in order to support a procedural API


See:
 rtk::simple::EdgePotentialImageFilter for the object oriented interface


*/
public ";

%javamethodmodifiers  rtk::simple::Equal "/**
Image rtk::simple::Equal(const Image &image1, const Image &image2, uint8_t backgroundValue=0u,
uint8_t foregroundValue=1u)

Implements pixel-wise generic operation of two images, or of an image
and a constant.


This function directly calls the execute method of EqualImageFilter in order to support a procedural API


See:
 rtk::simple::EqualImageFilter for the object oriented interface


*/
public ";

%javamethodmodifiers  rtk::simple::Equal "/**
Image rtk::simple::Equal(const Image &image1, double constant, uint8_t backgroundValue=0u,
uint8_t foregroundValue=1u)
*/
public ";

%javamethodmodifiers  rtk::simple::Equal "/**
Image rtk::simple::Equal(double constant, const Image &image2, uint8_t backgroundValue=0u,
uint8_t foregroundValue=1u)
*/
public ";

%javamethodmodifiers  rtk::simple::ErodeObjectMorphology "/**
Image rtk::simple::ErodeObjectMorphology(const Image &, uint32_t radius=1, KernelEnum kernel=srtkBall, double
objectValue=1, double backgroundValue=0)

rtk::simple::ErodeObjectMorphologyImageFilter Functional Interface

This function directly calls the execute method of ErodeObjectMorphologyImageFilter in order to support a fully functional API

*/
public ";

%javamethodmodifiers  rtk::simple::ErodeObjectMorphology "/**
Image rtk::simple::ErodeObjectMorphology(const Image &, const std::vector< uint32_t > vectorRadius, KernelEnum
kernel=srtkBall, double objectValue=1, double backgroundValue=0)

rtk::simple::ErodeObjectMorphologyImageFilter Functional Interface

This function directly calls the execute method of ErodeObjectMorphologyImageFilter in order to support a fully functional API

*/
public ";

%javamethodmodifiers  rtk::simple::Exp "/**
Image rtk::simple::Exp(const Image &image1)

Computes the exponential function of each pixel.


This function directly calls the execute method of ExpImageFilter in order to support a procedural API


See:
 rtk::simple::ExpImageFilter for the object oriented interface


*/
public ";

%javamethodmodifiers  rtk::simple::Expand "/**
Image rtk::simple::Expand(const Image &image1, const std::vector< unsigned int >
&expandFactors=std::vector< unsigned int >(3, 1), InterpolatorEnum
interpolator=rtk::simple::srtkLinear)

Expand the size of an image by an integer factor in each dimension.


This function directly calls the execute method of ExpandImageFilter in order to support a procedural API


See:
 rtk::simple::ExpandImageFilter for the object oriented interface


*/
public ";

%javamethodmodifiers  rtk::simple::ExpNegative "/**
Image rtk::simple::ExpNegative(const Image &image1)

Computes the function exp(-K.x) for each input pixel.


This function directly calls the execute method of ExpNegativeImageFilter in order to support a procedural API


See:
 rtk::simple::ExpNegativeImageFilter for the object oriented interface


*/
public ";

%javamethodmodifiers  rtk::simple::Extract "/**
Image rtk::simple::Extract(const Image &image1, const std::vector< unsigned int >
&size=std::vector< unsigned int >(4, 1), const std::vector< int >
&index=std::vector< int >(4, 0),
ExtractImageFilter::DirectionCollapseToStrategyType directionCollapseT
oStrategy=rtk::simple::ExtractImageFilter::DIRECTIONCOLLAPSETOGUESS)

Decrease the image size by cropping the image to the selected region
bounds.


This function directly calls the execute method of ExtractImageFilter in order to support a procedural API


See:
 rtk::simple::ExtractImageFilter for the object oriented interface


*/
public ";

%javamethodmodifiers  rtk::simple::FastApproximateRank "/**
Image rtk::simple::FastApproximateRank(const Image &image1, double rank=0.5, const std::vector< unsigned int
> &radius=std::vector< unsigned int >(3, 1))

A separable rank filter.


This function directly calls the execute method of FastApproximateRankImageFilter in order to support a procedural API


See:
 rtk::simple::FastApproximateRankImageFilter for the object oriented interface


*/
public ";

%javamethodmodifiers  rtk::simple::FastMarching "/**
Image rtk::simple::FastMarching(const Image &image1, const std::vector< std::vector< unsigned int > >
&trialPoints=std::vector< std::vector< unsigned int > >(), double
normalizationFactor=1.0, double stoppingValue=std::numeric_limits<
double >::max()/2.0)

Solve an Eikonal equation using Fast Marching.


This function directly calls the execute method of FastMarchingImageFilter in order to support a procedural API


See:
 rtk::simple::FastMarchingImageFilter for the object oriented interface


*/
public ";

%javamethodmodifiers  rtk::simple::FastMarchingBase "/**
Image rtk::simple::FastMarchingBase(const Image &imageA, std::vector< std::vector< unsigned int > >
trialPoints, double normalizationFactor=1.0, double
stoppingValue=std::numeric_limits< float >::max()/2.0,
FastMarchingBaseImageFilter::TopologyCheckType
topologyCheck=rtk::simple::FastMarchingBaseImageFilter::Nothing)

rtk::simple::FastMarchingBaseImageFilter Functional Interface

This function directly calls the execute method of FastMarchingBaseImageFilter in order to support a fully functional API

*/
public ";

%javamethodmodifiers  rtk::simple::FastMarchingUpwindGradient "/**
Image rtk::simple::FastMarchingUpwindGradient(const Image &image1, const std::vector< std::vector< unsigned int > >
&trialPoints=std::vector< std::vector< unsigned int > >(), unsigned
int numberOfTargets=0u, const std::vector< std::vector< unsigned int >
> &targetPoints=std::vector< std::vector< unsigned int > >(), double
targetOffset=1, double normalizationFactor=1.0)

Generates the upwind gradient field of fast marching arrival times.


This function directly calls the execute method of FastMarchingUpwindGradientImageFilter in order to support a procedural API


See:
 rtk::simple::FastMarchingUpwindGradientImageFilter for the object oriented interface


*/
public ";

%javamethodmodifiers  rtk::simple::FFTConvolution "/**
Image rtk::simple::FFTConvolution(const Image &image1, const Image &image2, bool normalize=false,
FFTConvolutionImageFilter::BoundaryConditionType boundaryCondition=itk
::simple::FFTConvolutionImageFilter::ZERO_FLUX_NEUMANN_PAD,
FFTConvolutionImageFilter::OutputRegionModeType
outputRegionMode=rtk::simple::FFTConvolutionImageFilter::SAME)

Convolve a given image with an arbitrary image kernel using
multiplication in the Fourier domain.


This function directly calls the execute method of FFTConvolutionImageFilter in order to support a procedural API


See:
 rtk::simple::FFTConvolutionImageFilter for the object oriented interface


*/
public ";

%javamethodmodifiers  rtk::simple::FFTNormalizedCorrelation "/**
Image rtk::simple::FFTNormalizedCorrelation(const Image &image1, const Image &image2, uint64_t
requiredNumberOfOverlappingPixels=0u)

Calculate normalized cross correlation using FFTs.


This function directly calls the execute method of FFTNormalizedCorrelationImageFilter in order to support a procedural API


See:
 rtk::simple::FFTNormalizedCorrelationImageFilter for the object oriented interface


*/
public ";

%javamethodmodifiers  rtk::simple::FFTPad "/**
Image rtk::simple::FFTPad(const Image &image1, FFTPadImageFilter::BoundaryConditionType boundar
yCondition=rtk::simple::FFTPadImageFilter::ZERO_FLUX_NEUMANN_PAD, int
sizeGreatestPrimeFactor=5)

Pad an image to make it suitable for an FFT transformation.


This function directly calls the execute method of FFTPadImageFilter in order to support a procedural API


See:
 rtk::simple::FFTPadImageFilter for the object oriented interface


*/
public ";

%javamethodmodifiers  rtk::simple::FFTShift "/**
Image rtk::simple::FFTShift(const Image &image1, bool inverse=false)

Shift the zero-frequency components of a Fourier transfrom to the
center of the image.


This function directly calls the execute method of FFTShiftImageFilter in order to support a procedural API


See:
 rtk::simple::FFTShiftImageFilter for the object oriented interface


*/
public ";

%javamethodmodifiers  rtk::simple::Flip "/**
Image rtk::simple::Flip(const Image &image1, const std::vector< bool > &flipAxes=std::vector<
bool >(3, false), bool flipAboutOrigin=false)

Flips an image across user specified axes.


This function directly calls the execute method of FlipImageFilter in order to support a procedural API


See:
 rtk::simple::FlipImageFilter for the object oriented interface


*/
public ";

%javamethodmodifiers  rtk::simple::ForwardFFT "/**
Image rtk::simple::ForwardFFT(const Image &image1)

Base class for forward Fast Fourier Transform .


This function directly calls the execute method of ForwardFFTImageFilter in order to support a procedural API


See:
 rtk::simple::ForwardFFTImageFilter for the object oriented interface


*/
public ";

%javamethodmodifiers  rtk::simple::GaborSource "/**
Image rtk::simple::GaborSource(PixelIDValueEnum outputPixelType=rtk::simple::srtkFloat32, const
std::vector< unsigned int > &size=std::vector< unsigned int >(3, 64),
const std::vector< double > &sigma=std::vector< double >(3, 16.0),
const std::vector< double > &mean=std::vector< double >(3, 32.0),
double frequency=0.4, const std::vector< double > &origin=std::vector<
double >(3, 0.0), const std::vector< double > &spacing=std::vector<
double >(3, 1.0), std::vector< double > direction=std::vector< double
>())

Generate an n-dimensional image of a Gabor filter.


This function directly calls the execute method of GaborImageSource in order to support a procedural API


See:
 rtk::simple::GaborImageSource for the object oriented interface


*/
public ";

%javamethodmodifiers  rtk::simple::GaussianSource "/**
Image rtk::simple::GaussianSource(PixelIDValueEnum outputPixelType=rtk::simple::srtkFloat32, const
std::vector< unsigned int > &size=std::vector< unsigned int >(3, 64),
const std::vector< double > &sigma=std::vector< double >(3, 16.0),
const std::vector< double > &mean=std::vector< double >(3, 32.0),
double scale=255, const std::vector< double > &origin=std::vector<
double >(3, 0.0), const std::vector< double > &spacing=std::vector<
double >(3, 1.0), std::vector< double > direction=std::vector< double
>())

Generate an n-dimensional image of a Gaussian.


This function directly calls the execute method of GaussianImageSource in order to support a procedural API


See:
 rtk::simple::GaussianImageSource for the object oriented interface


*/
public ";

%javamethodmodifiers  rtk::simple::GeodesicActiveContourLevelSet "/**
Image rtk::simple::GeodesicActiveContourLevelSet(const Image &image1, const Image &image2, double
maximumRMSError=0.01, double propagationScaling=1.0, double
curvatureScaling=1.0, double advectionScaling=1.0, uint32_t
numberOfIterations=1000u, bool reverseExpansionDirection=false)

Segments structures in images based on a user supplied edge potential
map.


This function directly calls the execute method of GeodesicActiveContourLevelSetImageFilter in order to support a procedural API


See:
 rtk::simple::GeodesicActiveContourLevelSetImageFilter for the object oriented interface


*/
public ";

%javamethodmodifiers  rtk::simple::GetImageFromVectorImage "/**
SITKCommon_HIDDEN itk::Image< itk::Vector< TPixelType, ImageDimension >, ImageDimension>::Pointer rtk::simple::GetImageFromVectorImage(itk::VectorImage< TPixelType, ImageDimension > *img, bool
transferOwnership=false)

A utility method to help convert between itk image types efficiently.

*/
public ";

%javamethodmodifiers  rtk::simple::GetPixelIDValueAsString "/**
const std::string SITKCommon_EXPORT rtk::simple::GetPixelIDValueAsString(PixelIDValueType type)
*/
public ";

%javamethodmodifiers  rtk::simple::GetPixelIDValueAsString "/**
const std::string SITKCommon_EXPORT rtk::simple::GetPixelIDValueAsString(PixelIDValueEnum type)
*/
public ";

%javamethodmodifiers  rtk::simple::GetPixelIDValueFromString "/**
PixelIDValueType SITKCommon_EXPORT rtk::simple::GetPixelIDValueFromString(const std::string &enumString)

Function mapping enumeration names in std::string to values.


This function is intended for use by the R bindings. R stores the
enumeration values using the names : \"srtkUnkown\", \"srtkUInt8\",
etc from PixelIDValueEnum above. This function is used to provide the
integer values using calls like:

val = GetPixelIDValueFromString(\"srtkInt32\")

If the pixel type has not been instantiated then the srtkUnknown value
(-1) will be returned. If the pixel type string is not recognised
(i.e. is not in the set of tested names) then the return value is -99.
The idea is to provide a warning (via the R package) if this function
needs to be updated to match changes to PixelIDValueEnum - i.e. if a
new pixel type is added.

*/
public ";

%javamethodmodifiers  rtk::simple::GetVectorImageFromImage "/**
SITKCommon_HIDDEN itk::VectorImage< TPixelType, NImageDimension >::Pointer rtk::simple::GetVectorImageFromImage(itk::Image< itk::Vector< TPixelType, NLength >, NImageDimension >
*img, bool transferOwnership=false)
*/
public ";

%javamethodmodifiers  rtk::simple::GetVectorImageFromImage "/**
SITKCommon_HIDDEN itk::VectorImage< TPixelType, NImageDimension >::Pointer rtk::simple::GetVectorImageFromImage(itk::Image< itk::Vector< TPixelType, NImageDimension >,
NImageDimension > *img, bool transferOwnership=false)
*/
public ";

%javamethodmodifiers  rtk::simple::Gradient "/**
Image rtk::simple::Gradient(const Image &image1, bool useImageSpacing=true, bool
useImageDirection=false)

Computes the gradient of an image using directional derivatives.


This function directly calls the execute method of GradientImageFilter in order to support a procedural API


See:
 rtk::simple::GradientImageFilter for the object oriented interface


*/
public ";

%javamethodmodifiers  rtk::simple::GradientAnisotropicDiffusion "/**
Image rtk::simple::GradientAnisotropicDiffusion(const Image &image1, double timeStep=0.125, double
conductanceParameter=3, unsigned int
conductanceScalingUpdateInterval=1u, uint32_t numberOfIterations=5u)

rtk::simple::GradientAnisotropicDiffusionImageFilter Procedural Interface


This function directly calls the execute method of GradientAnisotropicDiffusionImageFilter in order to support a procedural API


See:
 rtk::simple::GradientAnisotropicDiffusionImageFilter for the object oriented interface


*/
public ";

%javamethodmodifiers  rtk::simple::GradientMagnitude "/**
Image rtk::simple::GradientMagnitude(const Image &image1, bool useImageSpacing=true)

Computes the gradient magnitude of an image region at each pixel.


This function directly calls the execute method of GradientMagnitudeImageFilter in order to support a procedural API


See:
 rtk::simple::GradientMagnitudeImageFilter for the object oriented interface


*/
public ";

%javamethodmodifiers  rtk::simple::GradientMagnitudeRecursiveGaussian "/**
Image rtk::simple::GradientMagnitudeRecursiveGaussian(const Image &image1, double sigma=1.0, bool
normalizeAcrossScale=false)

Computes the Magnitude of the Gradient of an image by convolution with
the first derivative of a Gaussian.


This function directly calls the execute method of GradientMagnitudeRecursiveGaussianImageFilter in order to support a procedural API


See:
 rtk::simple::GradientMagnitudeRecursiveGaussianImageFilter for the object oriented interface


*/
public ";

%javamethodmodifiers  rtk::simple::GradientRecursiveGaussian "/**
Image rtk::simple::GradientRecursiveGaussian(const Image &image1, double sigma=1.0, bool
normalizeAcrossScale=false, bool useImageDirection=false)

Computes the gradient of an image by convolution with the first
derivative of a Gaussian.


This function directly calls the execute method of GradientRecursiveGaussianImageFilter in order to support a procedural API


See:
 rtk::simple::GradientRecursiveGaussianImageFilter for the object oriented interface


*/
public ";

%javamethodmodifiers  rtk::simple::GrayscaleConnectedClosing "/**
Image rtk::simple::GrayscaleConnectedClosing(const Image &image1, const std::vector< uint32_t > &seed=std::vector<
uint32_t >(3, 0), bool fullyConnected=false)

Enhance pixels associated with a dark object (identified by a seed
pixel) where the dark object is surrounded by a brigher object.


This function directly calls the execute method of GrayscaleConnectedClosingImageFilter in order to support a procedural API


See:
 rtk::simple::GrayscaleConnectedClosingImageFilter for the object oriented interface


*/
public ";

%javamethodmodifiers  rtk::simple::GrayscaleConnectedOpening "/**
Image rtk::simple::GrayscaleConnectedOpening(const Image &image1, const std::vector< unsigned int >
&seed=std::vector< unsigned int >(3, 0), bool fullyConnected=false)

Enhance pixels associated with a bright object (identified by a seed
pixel) where the bright object is surrounded by a darker object.


This function directly calls the execute method of GrayscaleConnectedOpeningImageFilter in order to support a procedural API


See:
 rtk::simple::GrayscaleConnectedOpeningImageFilter for the object oriented interface


*/
public ";

%javamethodmodifiers  rtk::simple::GrayscaleDilate "/**
Image rtk::simple::GrayscaleDilate(const Image &, uint32_t radius=1, KernelEnum kernel=srtkBall)

rtk::simple::GrayscaleDilateImageFilter Functional Interface

This function directly calls the execute method of GrayscaleDilateImageFilter in order to support a fully functional API

*/
public ";

%javamethodmodifiers  rtk::simple::GrayscaleDilate "/**
Image rtk::simple::GrayscaleDilate(const Image &, const std::vector< uint32_t > vectorRadius, KernelEnum
kernel=srtkBall)

rtk::simple::GrayscaleDilateImageFilter Functional Interface

This function directly calls the execute method of GrayscaleDilateImageFilter in order to support a fully functional API

*/
public ";

%javamethodmodifiers  rtk::simple::GrayscaleErode "/**
Image rtk::simple::GrayscaleErode(const Image &, uint32_t radius=1, KernelEnum kernel=srtkBall)

rtk::simple::GrayscaleErodeImageFilter Functional Interface

This function directly calls the execute method of GrayscaleErodeImageFilter in order to support a fully functional API

*/
public ";

%javamethodmodifiers  rtk::simple::GrayscaleErode "/**
Image rtk::simple::GrayscaleErode(const Image &, const std::vector< uint32_t > vectorRadius, KernelEnum
kernel=srtkBall)

rtk::simple::GrayscaleErodeImageFilter Functional Interface

This function directly calls the execute method of GrayscaleErodeImageFilter in order to support a fully functional API

*/
public ";

%javamethodmodifiers  rtk::simple::GrayscaleFillhole "/**
Image rtk::simple::GrayscaleFillhole(const Image &image1, bool fullyConnected=false)

Remove local minima not connected to the boundary of the image.


This function directly calls the execute method of GrayscaleFillholeImageFilter in order to support a procedural API


See:
 rtk::simple::GrayscaleFillholeImageFilter for the object oriented interface


*/
public ";

%javamethodmodifiers  rtk::simple::GrayscaleGeodesicDilate "/**
Image rtk::simple::GrayscaleGeodesicDilate(const Image &image1, const Image &image2, bool runOneIteration=false,
bool fullyConnected=false)

geodesic gray scale dilation of an image


This function directly calls the execute method of GrayscaleGeodesicDilateImageFilter in order to support a procedural API


See:
 rtk::simple::GrayscaleGeodesicDilateImageFilter for the object oriented interface


*/
public ";

%javamethodmodifiers  rtk::simple::GrayscaleGeodesicErode "/**
Image rtk::simple::GrayscaleGeodesicErode(const Image &image1, const Image &image2, bool runOneIteration=false,
bool fullyConnected=false)

geodesic gray scale erosion of an image


This function directly calls the execute method of GrayscaleGeodesicErodeImageFilter in order to support a procedural API


See:
 rtk::simple::GrayscaleGeodesicErodeImageFilter for the object oriented interface


*/
public ";

%javamethodmodifiers  rtk::simple::GrayscaleGrindPeak "/**
Image rtk::simple::GrayscaleGrindPeak(const Image &image1, bool fullyConnected=false)

Remove local maxima not connected to the boundary of the image.


This function directly calls the execute method of GrayscaleGrindPeakImageFilter in order to support a procedural API


See:
 rtk::simple::GrayscaleGrindPeakImageFilter for the object oriented interface


*/
public ";

%javamethodmodifiers  rtk::simple::GrayscaleMorphologicalClosing "/**
Image rtk::simple::GrayscaleMorphologicalClosing(const Image &, uint32_t radius=1, KernelEnum kernel=srtkBall, bool
safeBorder=true)

rtk::simple::GrayscaleMorphologicalClosingImageFilter Functional Interface

This function directly calls the execute method of GrayscaleMorphologicalClosingImageFilter in order to support a fully functional API

*/
public ";

%javamethodmodifiers  rtk::simple::GrayscaleMorphologicalClosing "/**
Image rtk::simple::GrayscaleMorphologicalClosing(const Image &, const std::vector< uint32_t > vectorRadius, KernelEnum
kernel=srtkBall, bool safeBorder=true)

rtk::simple::GrayscaleMorphologicalClosingImageFilter Functional Interface

This function directly calls the execute method of GrayscaleMorphologicalClosingImageFilter in order to support a fully functional API

*/
public ";

%javamethodmodifiers  rtk::simple::GrayscaleMorphologicalOpening "/**
Image rtk::simple::GrayscaleMorphologicalOpening(const Image &, uint32_t radius=1, KernelEnum kernel=srtkBall, bool
safeBorder=true)

rtk::simple::GrayscaleMorphologicalOpeningImageFilter Functional Interface

This function directly calls the execute method of GrayscaleMorphologicalOpeningImageFilter in order to support a fully functional API

*/
public ";

%javamethodmodifiers  rtk::simple::GrayscaleMorphologicalOpening "/**
Image rtk::simple::GrayscaleMorphologicalOpening(const Image &, const std::vector< uint32_t > vectorRadius, KernelEnum
kernel=srtkBall, bool safeBorder=true)

rtk::simple::GrayscaleMorphologicalOpeningImageFilter Functional Interface

This function directly calls the execute method of GrayscaleMorphologicalOpeningImageFilter in order to support a fully functional API

*/
public ";

%javamethodmodifiers  rtk::simple::Greater "/**
Image rtk::simple::Greater(const Image &image1, const Image &image2, uint8_t backgroundValue=0u,
uint8_t foregroundValue=1u)

Implements pixel-wise generic operation of two images, or of an image
and a constant.


This function directly calls the execute method of GreaterImageFilter in order to support a procedural API


See:
 rtk::simple::GreaterImageFilter for the object oriented interface


*/
public ";

%javamethodmodifiers  rtk::simple::Greater "/**
Image rtk::simple::Greater(const Image &image1, double constant, uint8_t backgroundValue=0u,
uint8_t foregroundValue=1u)
*/
public ";

%javamethodmodifiers  rtk::simple::Greater "/**
Image rtk::simple::Greater(double constant, const Image &image2, uint8_t backgroundValue=0u,
uint8_t foregroundValue=1u)
*/
public ";

%javamethodmodifiers  rtk::simple::GreaterEqual "/**
Image rtk::simple::GreaterEqual(const Image &image1, const Image &image2, uint8_t backgroundValue=0u,
uint8_t foregroundValue=1u)

Implements pixel-wise generic operation of two images, or of an image
and a constant.


This function directly calls the execute method of GreaterEqualImageFilter in order to support a procedural API


See:
 rtk::simple::GreaterEqualImageFilter for the object oriented interface


*/
public ";

%javamethodmodifiers  rtk::simple::GreaterEqual "/**
Image rtk::simple::GreaterEqual(const Image &image1, double constant, uint8_t backgroundValue=0u,
uint8_t foregroundValue=1u)
*/
public ";

%javamethodmodifiers  rtk::simple::GreaterEqual "/**
Image rtk::simple::GreaterEqual(double constant, const Image &image2, uint8_t backgroundValue=0u,
uint8_t foregroundValue=1u)
*/
public ";

%javamethodmodifiers  rtk::simple::GridSource "/**
Image rtk::simple::GridSource(PixelIDValueEnum outputPixelType=rtk::simple::srtkFloat32, const
std::vector< unsigned int > &size=std::vector< unsigned int >(3, 64),
const std::vector< double > &sigma=std::vector< double >(3, 0.5),
const std::vector< double > &gridSpacing=std::vector< double >(3,
4.0), const std::vector< double > &gridOffset=std::vector< double >(3,
0.0), double scale=255.0, const std::vector< double >
&origin=std::vector< double >(3, 0.0), const std::vector< double >
&spacing=std::vector< double >(3, 1.0), std::vector< double >
direction=std::vector< double >())

Generate an n-dimensional image of a grid.


This function directly calls the execute method of GridImageSource in order to support a procedural API


See:
 rtk::simple::GridImageSource for the object oriented interface


*/
public ";

%javamethodmodifiers  rtk::simple::HalfHermitianToRealInverseFFT "/**
Image rtk::simple::HalfHermitianToRealInverseFFT(const Image &image1, bool actualXDimensionIsOdd=false)

Base class for specialized complex-to-real inverse Fast Fourier Transform .


This function directly calls the execute method of HalfHermitianToRealInverseFFTImageFilter in order to support a procedural API


See:
 rtk::simple::HalfHermitianToRealInverseFFTImageFilter for the object oriented interface


*/
public ";

%javamethodmodifiers  rtk::simple::Hash "/**
std::string rtk::simple::Hash(const Image &image, HashImageFilter::HashFunction
function=HashImageFilter::SHA1)
*/
public ";

%javamethodmodifiers  rtk::simple::HConcave "/**
Image rtk::simple::HConcave(const Image &image1, double height=2.0, bool fullyConnected=false)

Identify local minima whose depth below the baseline is greater than
h.


This function directly calls the execute method of HConcaveImageFilter in order to support a procedural API


See:
 rtk::simple::HConcaveImageFilter for the object oriented interface


*/
public ";

%javamethodmodifiers  rtk::simple::HConvex "/**
Image rtk::simple::HConvex(const Image &image1, double height=2.0, bool fullyConnected=false)

Identify local maxima whose height above the baseline is greater than
h.


This function directly calls the execute method of HConvexImageFilter in order to support a procedural API


See:
 rtk::simple::HConvexImageFilter for the object oriented interface


*/
public ";

%javamethodmodifiers  rtk::simple::HistogramMatching "/**
Image rtk::simple::HistogramMatching(const Image &image1, const Image &image2, uint32_t
numberOfHistogramLevels=256u, uint32_t numberOfMatchPoints=1u, bool
thresholdAtMeanIntensity=true)

Normalize the grayscale values between two images by histogram
matching.


This function directly calls the execute method of HistogramMatchingImageFilter in order to support a procedural API


See:
 rtk::simple::HistogramMatchingImageFilter for the object oriented interface


*/
public ";

%javamethodmodifiers  rtk::simple::HMaxima "/**
Image rtk::simple::HMaxima(const Image &image1, double height=2.0)

Suppress local maxima whose height above the baseline is less than h.


This function directly calls the execute method of HMaximaImageFilter in order to support a procedural API


See:
 rtk::simple::HMaximaImageFilter for the object oriented interface


*/
public ";

%javamethodmodifiers  rtk::simple::HMinima "/**
Image rtk::simple::HMinima(const Image &image1, double height=2.0, bool fullyConnected=false)

Suppress local minima whose depth below the baseline is less than h.


This function directly calls the execute method of HMinimaImageFilter in order to support a procedural API


See:
 rtk::simple::HMinimaImageFilter for the object oriented interface


*/
public ";

%javamethodmodifiers  rtk::simple::HuangThreshold "/**
Image rtk::simple::HuangThreshold(const Image &image, const Image &maskImage, uint8_t insideValue=1u,
uint8_t outsideValue=0u, uint32_t numberOfHistogramBins=128u, bool
maskOutput=true, uint8_t maskValue=255u)

Threshold an image using the Huang Threshold.


This function directly calls the execute method of HuangThresholdImageFilter in order to support a procedural API


See:
 rtk::simple::HuangThresholdImageFilter for the object oriented interface


*/
public ";

%javamethodmodifiers  rtk::simple::HuangThreshold "/**
Image rtk::simple::HuangThreshold(const Image &image, uint8_t insideValue=1u, uint8_t outsideValue=0u,
uint32_t numberOfHistogramBins=128u, bool maskOutput=true, uint8_t
maskValue=255u)
*/
public ";

%javamethodmodifiers  rtk::simple::ImportAsDouble "/**
Image SITKIO_EXPORT rtk::simple::ImportAsDouble(double *buffer, const std::vector< unsigned int > &size, const
std::vector< double > &spacing=std::vector< double >(3, 1.0), const
std::vector< double > &origin=std::vector< double >(3, 0.0), const
std::vector< double > &direction=std::vector< double >(), unsigned int
numberOfComponents=1)
*/
public ";

%javamethodmodifiers  rtk::simple::ImportAsFloat "/**
Image SITKIO_EXPORT rtk::simple::ImportAsFloat(float *buffer, const std::vector< unsigned int > &size, const
std::vector< double > &spacing=std::vector< double >(3, 1.0), const
std::vector< double > &origin=std::vector< double >(3, 0.0), const
std::vector< double > &direction=std::vector< double >(), unsigned int
numberOfComponents=1)
*/
public ";

%javamethodmodifiers  rtk::simple::ImportAsInt16 "/**
Image SITKIO_EXPORT rtk::simple::ImportAsInt16(int16_t *buffer, const std::vector< unsigned int > &size, const
std::vector< double > &spacing=std::vector< double >(3, 1.0), const
std::vector< double > &origin=std::vector< double >(3, 0.0), const
std::vector< double > &direction=std::vector< double >(), unsigned int
numberOfComponents=1)
*/
public ";

%javamethodmodifiers  rtk::simple::ImportAsInt32 "/**
Image SITKIO_EXPORT rtk::simple::ImportAsInt32(int32_t *buffer, const std::vector< unsigned int > &size, const
std::vector< double > &spacing=std::vector< double >(3, 1.0), const
std::vector< double > &origin=std::vector< double >(3, 0.0), const
std::vector< double > &direction=std::vector< double >(), unsigned int
numberOfComponents=1)
*/
public ";

%javamethodmodifiers  rtk::simple::ImportAsInt64 "/**
Image SITKIO_EXPORT rtk::simple::ImportAsInt64(int64_t *buffer, const std::vector< unsigned int > &size, const
std::vector< double > &spacing=std::vector< double >(3, 1.0), const
std::vector< double > &origin=std::vector< double >(3, 0.0), const
std::vector< double > &direction=std::vector< double >(), unsigned int
numberOfComponents=1)
*/
public ";

%javamethodmodifiers  rtk::simple::ImportAsInt8 "/**
Image SITKIO_EXPORT rtk::simple::ImportAsInt8(int8_t *buffer, const std::vector< unsigned int > &size, const
std::vector< double > &spacing=std::vector< double >(3, 1.0), const
std::vector< double > &origin=std::vector< double >(3, 0.0), const
std::vector< double > &direction=std::vector< double >(), unsigned int
numberOfComponents=1)
*/
public ";

%javamethodmodifiers  rtk::simple::ImportAsUInt16 "/**
Image SITKIO_EXPORT rtk::simple::ImportAsUInt16(uint16_t *buffer, const std::vector< unsigned int > &size, const
std::vector< double > &spacing=std::vector< double >(3, 1.0), const
std::vector< double > &origin=std::vector< double >(3, 0.0), const
std::vector< double > &direction=std::vector< double >(), unsigned int
numberOfComponents=1)
*/
public ";

%javamethodmodifiers  rtk::simple::ImportAsUInt32 "/**
Image SITKIO_EXPORT rtk::simple::ImportAsUInt32(uint32_t *buffer, const std::vector< unsigned int > &size, const
std::vector< double > &spacing=std::vector< double >(3, 1.0), const
std::vector< double > &origin=std::vector< double >(3, 0.0), const
std::vector< double > &direction=std::vector< double >(), unsigned int
numberOfComponents=1)
*/
public ";

%javamethodmodifiers  rtk::simple::ImportAsUInt64 "/**
Image SITKIO_EXPORT rtk::simple::ImportAsUInt64(uint64_t *buffer, const std::vector< unsigned int > &size, const
std::vector< double > &spacing=std::vector< double >(3, 1.0), const
std::vector< double > &origin=std::vector< double >(3, 0.0), const
std::vector< double > &direction=std::vector< double >(), unsigned int
numberOfComponents=1)
*/
public ";

%javamethodmodifiers  rtk::simple::ImportAsUInt8 "/**
Image SITKIO_EXPORT rtk::simple::ImportAsUInt8(uint8_t *buffer, const std::vector< unsigned int > &size, const
std::vector< double > &spacing=std::vector< double >(3, 1.0), const
std::vector< double > &origin=std::vector< double >(3, 0.0), const
std::vector< double > &direction=std::vector< double >(), unsigned int
numberOfComponents=1)
*/
public ";

%javamethodmodifiers  rtk::simple::IntensityWindowing "/**
Image rtk::simple::IntensityWindowing(const Image &image1, double windowMinimum=0.0, double
windowMaximum=255, double outputMinimum=0, double outputMaximum=255)

Applies a linear transformation to the intensity levels of the input Image that are inside a user-defined interval. Values below this interval
are mapped to a constant. Values over the interval are mapped to
another constant.


This function directly calls the execute method of IntensityWindowingImageFilter in order to support a procedural API


See:
 rtk::simple::IntensityWindowingImageFilter for the object oriented interface


*/
public ";

%javamethodmodifiers  rtk::simple::IntermodesThreshold "/**
Image rtk::simple::IntermodesThreshold(const Image &image, const Image &maskImage, uint8_t insideValue=1u,
uint8_t outsideValue=0u, uint32_t numberOfHistogramBins=256u, bool
maskOutput=true, uint8_t maskValue=255u)

Threshold an image using the Intermodes Threshold.


This function directly calls the execute method of IntermodesThresholdImageFilter in order to support a procedural API


See:
 rtk::simple::IntermodesThresholdImageFilter for the object oriented interface


*/
public ";

%javamethodmodifiers  rtk::simple::IntermodesThreshold "/**
Image rtk::simple::IntermodesThreshold(const Image &image, uint8_t insideValue=1u, uint8_t outsideValue=0u,
uint32_t numberOfHistogramBins=256u, bool maskOutput=true, uint8_t
maskValue=255u)
*/
public ";

%javamethodmodifiers  rtk::simple::InverseDeconvolution "/**
Image rtk::simple::InverseDeconvolution(const Image &image1, const Image &image2, double
kernelZeroMagnitudeThreshold=1.0e-4, bool normalize=false,
InverseDeconvolutionImageFilter::BoundaryConditionType boundaryConditi
on=rtk::simple::InverseDeconvolutionImageFilter::ZERO_FLUX_NEUMANN_PAD
, InverseDeconvolutionImageFilter::OutputRegionModeType
outputRegionMode=rtk::simple::InverseDeconvolutionImageFilter::SAME)

The direct linear inverse deconvolution filter.


This function directly calls the execute method of InverseDeconvolutionImageFilter in order to support a procedural API


See:
 rtk::simple::InverseDeconvolutionImageFilter for the object oriented interface


*/
public ";

%javamethodmodifiers  rtk::simple::InverseDisplacementField "/**
Image rtk::simple::InverseDisplacementField(const Image &image1, const std::vector< uint32_t > &size=std::vector<
uint32_t >(3, 0), const std::vector< double >
&outputOrigin=std::vector< double >(3, 0.0), const std::vector< double
> &outputSpacing=std::vector< double >(3, 1.0), unsigned int
subsamplingFactor=16u)

Computes the inverse of a displacement field.


This function directly calls the execute method of InverseDisplacementFieldImageFilter in order to support a procedural API


See:
 rtk::simple::InverseDisplacementFieldImageFilter for the object oriented interface


*/
public ";

%javamethodmodifiers  rtk::simple::InverseFFT "/**
Image rtk::simple::InverseFFT(const Image &image1)

Base class for inverse Fast Fourier Transform .


This function directly calls the execute method of InverseFFTImageFilter in order to support a procedural API


See:
 rtk::simple::InverseFFTImageFilter for the object oriented interface


*/
public ";

%javamethodmodifiers  rtk::simple::InvertDisplacementField "/**
Image rtk::simple::InvertDisplacementField(const Image &image1, uint32_t maximumNumberOfIterations=10u, double
maxErrorToleranceThreshold=0.1, double
meanErrorToleranceThreshold=0.001, bool enforceBoundaryCondition=true)

Iteratively estimate the inverse field of a displacement field.


This function directly calls the execute method of InvertDisplacementFieldImageFilter in order to support a procedural API


See:
 rtk::simple::InvertDisplacementFieldImageFilter for the object oriented interface


*/
public ";

%javamethodmodifiers  rtk::simple::InvertIntensity "/**
Image rtk::simple::InvertIntensity(const Image &image1, double maximum=255)

Invert the intensity of an image.


This function directly calls the execute method of InvertIntensityImageFilter in order to support a procedural API


See:
 rtk::simple::InvertIntensityImageFilter for the object oriented interface


*/
public ";

%javamethodmodifiers  rtk::simple::IsoContourDistance "/**
Image rtk::simple::IsoContourDistance(const Image &image1, double levelSetValue=0, double farValue=10)

Compute an approximate distance from an interpolated isocontour to the
close grid points.


This function directly calls the execute method of IsoContourDistanceImageFilter in order to support a procedural API


See:
 rtk::simple::IsoContourDistanceImageFilter for the object oriented interface


*/
public ";

%javamethodmodifiers  rtk::simple::IsoDataThreshold "/**
Image rtk::simple::IsoDataThreshold(const Image &image, const Image &maskImage, uint8_t insideValue=1u,
uint8_t outsideValue=0u, uint32_t numberOfHistogramBins=256u, bool
maskOutput=true, uint8_t maskValue=255u)

Threshold an image using the IsoData Threshold.


This function directly calls the execute method of IsoDataThresholdImageFilter in order to support a procedural API


See:
 rtk::simple::IsoDataThresholdImageFilter for the object oriented interface


*/
public ";

%javamethodmodifiers  rtk::simple::IsoDataThreshold "/**
Image rtk::simple::IsoDataThreshold(const Image &image, uint8_t insideValue=1u, uint8_t outsideValue=0u,
uint32_t numberOfHistogramBins=256u, bool maskOutput=true, uint8_t
maskValue=255u)
*/
public ";

%javamethodmodifiers  rtk::simple::IsolatedConnected "/**
Image rtk::simple::IsolatedConnected(const Image &image1, const std::vector< unsigned int >
&seed1=std::vector< unsigned int >(3, 0), const std::vector< unsigned
int > &seed2=std::vector< unsigned int >(3, 0), double lower=0, double
upper=1, uint8_t replaceValue=1u, double isolatedValueTolerance=1.0,
bool findUpperThreshold=true)

Label pixels that are connected to one set of seeds but not another.


This function directly calls the execute method of IsolatedConnectedImageFilter in order to support a procedural API


See:
 rtk::simple::IsolatedConnectedImageFilter for the object oriented interface


*/
public ";

%javamethodmodifiers  rtk::simple::IsolatedWatershed "/**
Image rtk::simple::IsolatedWatershed(const Image &image1, const std::vector< uint32_t >
&seed1=std::vector< uint32_t >(3, 0), const std::vector< uint32_t >
&seed2=std::vector< uint32_t >(3, 0), double threshold=0.0, double
upperValueLimit=1.0, double isolatedValueTolerance=0.001, uint8_t
replaceValue1=1u, uint8_t replaceValue2=2u)

Isolate watershed basins using two seeds.


This function directly calls the execute method of IsolatedWatershedImageFilter in order to support a procedural API


See:
 rtk::simple::IsolatedWatershedImageFilter for the object oriented interface


*/
public ";

%javamethodmodifiers  rtk::simple::KittlerIllingworthThreshold "/**
Image rtk::simple::KittlerIllingworthThreshold(const Image &image, const Image &maskImage, uint8_t insideValue=1u,
uint8_t outsideValue=0u, uint32_t numberOfHistogramBins=256u, bool
maskOutput=true, uint8_t maskValue=255u)

Threshold an image using the KittlerIllingworth Threshold.


This function directly calls the execute method of KittlerIllingworthThresholdImageFilter in order to support a procedural API


See:
 rtk::simple::KittlerIllingworthThresholdImageFilter for the object oriented interface


*/
public ";

%javamethodmodifiers  rtk::simple::KittlerIllingworthThreshold "/**
Image rtk::simple::KittlerIllingworthThreshold(const Image &image, uint8_t insideValue=1u, uint8_t outsideValue=0u,
uint32_t numberOfHistogramBins=256u, bool maskOutput=true, uint8_t
maskValue=255u)
*/
public ";

%javamethodmodifiers  rtk::simple::LabelContour "/**
Image rtk::simple::LabelContour(const Image &image1, bool fullyConnected=false, double
backgroundValue=0)

Labels the pixels on the border of the objects in a labeled image.


This function directly calls the execute method of LabelContourImageFilter in order to support a procedural API


See:
 rtk::simple::LabelContourImageFilter for the object oriented interface


*/
public ";

%javamethodmodifiers  rtk::simple::LabelImageToLabelMap "/**
Image rtk::simple::LabelImageToLabelMap(const Image &image1, double backgroundValue=0)

convert a labeled image to a label collection image


This function directly calls the execute method of LabelImageToLabelMapFilter in order to support a procedural API


See:
 rtk::simple::LabelImageToLabelMapFilter for the object oriented interface


*/
public ";

%javamethodmodifiers  rtk::simple::LabelMapContourOverlay "/**
Image rtk::simple::LabelMapContourOverlay(const Image &labelMapImage, const Image &featureImage, double
opacity=0.5, const std::vector< unsigned int >
&dilationRadius=std::vector< unsigned int >(3, 1), const std::vector<
unsigned int > &contourThickness=std::vector< unsigned int >(3, 1),
unsigned int sliceDimension=0u,
LabelMapContourOverlayImageFilter::ContourTypeType
contourType=rtk::simple::LabelMapContourOverlayImageFilter::CONTOUR,
LabelMapContourOverlayImageFilter::PriorityType priority=rtk::simple::
LabelMapContourOverlayImageFilter::HIGH_LABEL_ON_TOP)

Apply a colormap to the contours (outlines) of each object in a label
map and superimpose it on top of the feature image.


This function directly calls the execute method of LabelMapContourOverlayImageFilter in order to support a procedural API


See:
 rtk::simple::LabelMapContourOverlayImageFilter for the object oriented interface


*/
public ";

%javamethodmodifiers  rtk::simple::LabelMapMask "/**
Image rtk::simple::LabelMapMask(const Image &labelMapImage, const Image &featureImage, uint64_t
label=1u, double backgroundValue=0, bool negated=false, bool
crop=false, const std::vector< unsigned int > &cropBorder=std::vector<
unsigned int >(3, 0))

Mask and image with a LabelMap .


This function directly calls the execute method of LabelMapMaskImageFilter in order to support a procedural API


See:
 rtk::simple::LabelMapMaskImageFilter for the object oriented interface


*/
public ";

%javamethodmodifiers  rtk::simple::LabelMapOverlay "/**
Image rtk::simple::LabelMapOverlay(const Image &image1, const Image &image2, double opacity=0.5)

Apply a colormap to a label map and superimpose it on an image.


This function directly calls the execute method of LabelMapOverlayImageFilter in order to support a procedural API


See:
 rtk::simple::LabelMapOverlayImageFilter for the object oriented interface


*/
public ";

%javamethodmodifiers  rtk::simple::LabelMapToBinary "/**
Image rtk::simple::LabelMapToBinary(const Image &image1, double backgroundValue=0, double
foregroundValue=1.0)

Convert a LabelMap to a binary image.


This function directly calls the execute method of LabelMapToBinaryImageFilter in order to support a procedural API


See:
 rtk::simple::LabelMapToBinaryImageFilter for the object oriented interface


*/
public ";

%javamethodmodifiers  rtk::simple::LabelMapToLabel "/**
Image rtk::simple::LabelMapToLabel(const Image &image1)

Converts a LabelMap to a labeled image.


This function directly calls the execute method of LabelMapToLabelImageFilter in order to support a procedural API


See:
 rtk::simple::LabelMapToLabelImageFilter for the object oriented interface


*/
public ";

%javamethodmodifiers  rtk::simple::LabelMapToRGB "/**
Image rtk::simple::LabelMapToRGB(const Image &image1)

Convert a LabelMap to a colored image.


This function directly calls the execute method of LabelMapToRGBImageFilter in order to support a procedural API


See:
 rtk::simple::LabelMapToRGBImageFilter for the object oriented interface


*/
public ";

%javamethodmodifiers  rtk::simple::LabelOverlay "/**
Image rtk::simple::LabelOverlay(const Image &image, const Image &labelImage, double opacity=0.5,
double backgroundValue=0.0)

Apply a colormap to a label image and put it on top of the input
image.


This function directly calls the execute method of LabelOverlayImageFilter in order to support a procedural API


See:
 rtk::simple::LabelOverlayImageFilter for the object oriented interface


*/
public ";

%javamethodmodifiers  rtk::simple::LabelToRGB "/**
Image rtk::simple::LabelToRGB(const Image &image1, double backgroundValue=0.0)

Apply a colormap to a label image.


This function directly calls the execute method of LabelToRGBImageFilter in order to support a procedural API


See:
 rtk::simple::LabelToRGBImageFilter for the object oriented interface


*/
public ";

%javamethodmodifiers  rtk::simple::LabelUniqueLabelMap "/**
Image rtk::simple::LabelUniqueLabelMap(const Image &image1, bool reverseOrdering=false)

Make sure that the objects are not overlapping.


This function directly calls the execute method of LabelUniqueLabelMapFilter in order to support a procedural API


See:
 rtk::simple::LabelUniqueLabelMapFilter for the object oriented interface


*/
public ";

%javamethodmodifiers  rtk::simple::LandmarkBasedTransformInitializer "/**
Transform rtk::simple::LandmarkBasedTransformInitializer(const Transform &transform, const std::vector< double >
&fixedLandmarks=std::vector< double >(), const std::vector< double >
&movingLandmarks=std::vector< double >(), const std::vector< double >
&landmarkWeight=std::vector< double >(), const Image
&referenceImage=Image(), unsigned int numberOfControlPoints=4u)

rtk::simple::LandmarkBasedTransformInitializerFilter Procedural Interface


This function directly calls the execute method of LandmarkBasedTransformInitializerFilter in order to support a procedural API


See:
 rtk::simple::LandmarkBasedTransformInitializerFilter for the object oriented interface


*/
public ";

%javamethodmodifiers  rtk::simple::LandweberDeconvolution "/**
Image rtk::simple::LandweberDeconvolution(const Image &image1, const Image &image2, double alpha=0.1, int
numberOfIterations=1, bool normalize=false,
LandweberDeconvolutionImageFilter::BoundaryConditionType boundaryCondi
tion=rtk::simple::LandweberDeconvolutionImageFilter::ZERO_FLUX_NEUMANN
_PAD, LandweberDeconvolutionImageFilter::OutputRegionModeType
outputRegionMode=rtk::simple::LandweberDeconvolutionImageFilter::SAME)

Deconvolve an image using the Landweber deconvolution algorithm.


This function directly calls the execute method of LandweberDeconvolutionImageFilter in order to support a procedural API


See:
 rtk::simple::LandweberDeconvolutionImageFilter for the object oriented interface


*/
public ";

%javamethodmodifiers  rtk::simple::Laplacian "/**
Image rtk::simple::Laplacian(const Image &image1, bool useImageSpacing=true)

rtk::simple::LaplacianImageFilter Procedural Interface


This function directly calls the execute method of LaplacianImageFilter in order to support a procedural API


See:
 rtk::simple::LaplacianImageFilter for the object oriented interface


*/
public ";

%javamethodmodifiers  rtk::simple::LaplacianRecursiveGaussian "/**
Image rtk::simple::LaplacianRecursiveGaussian(const Image &image1, double sigma=1.0, bool
normalizeAcrossScale=false)

Computes the Laplacian of Gaussian (LoG) of an image.


This function directly calls the execute method of LaplacianRecursiveGaussianImageFilter in order to support a procedural API


See:
 rtk::simple::LaplacianRecursiveGaussianImageFilter for the object oriented interface


*/
public ";

%javamethodmodifiers  rtk::simple::LaplacianSegmentationLevelSet "/**
Image rtk::simple::LaplacianSegmentationLevelSet(const Image &image1, const Image &image2, double
maximumRMSError=0.02, double propagationScaling=1.0, double
curvatureScaling=1.0, uint32_t numberOfIterations=1000u, bool
reverseExpansionDirection=false)

Segments structures in images based on a second derivative image
features.


This function directly calls the execute method of LaplacianSegmentationLevelSetImageFilter in order to support a procedural API


See:
 rtk::simple::LaplacianSegmentationLevelSetImageFilter for the object oriented interface


*/
public ";

%javamethodmodifiers  rtk::simple::LaplacianSharpening "/**
Image rtk::simple::LaplacianSharpening(const Image &image1, bool useImageSpacing=true)

This filter sharpens an image using a Laplacian. LaplacianSharpening
highlights regions of rapid intensity change and therefore highlights
or enhances the edges. The result is an image that appears more in
focus.


This function directly calls the execute method of LaplacianSharpeningImageFilter in order to support a procedural API


See:
 rtk::simple::LaplacianSharpeningImageFilter for the object oriented interface


*/
public ";

%javamethodmodifiers  rtk::simple::Less "/**
Image rtk::simple::Less(const Image &image1, const Image &image2, uint8_t backgroundValue=0u,
uint8_t foregroundValue=1u)

Implements pixel-wise generic operation of two images, or of an image
and a constant.


This function directly calls the execute method of LessImageFilter in order to support a procedural API


See:
 rtk::simple::LessImageFilter for the object oriented interface


*/
public ";

%javamethodmodifiers  rtk::simple::Less "/**
Image rtk::simple::Less(const Image &image1, double constant, uint8_t backgroundValue=0u,
uint8_t foregroundValue=1u)
*/
public ";

%javamethodmodifiers  rtk::simple::Less "/**
Image rtk::simple::Less(double constant, const Image &image2, uint8_t backgroundValue=0u,
uint8_t foregroundValue=1u)
*/
public ";

%javamethodmodifiers  rtk::simple::LessEqual "/**
Image rtk::simple::LessEqual(const Image &image1, const Image &image2, uint8_t backgroundValue=0u,
uint8_t foregroundValue=1u)

Implements pixel-wise generic operation of two images, or of an image
and a constant.


This function directly calls the execute method of LessEqualImageFilter in order to support a procedural API


See:
 rtk::simple::LessEqualImageFilter for the object oriented interface


*/
public ";

%javamethodmodifiers  rtk::simple::LessEqual "/**
Image rtk::simple::LessEqual(const Image &image1, double constant, uint8_t backgroundValue=0u,
uint8_t foregroundValue=1u)
*/
public ";

%javamethodmodifiers  rtk::simple::LessEqual "/**
Image rtk::simple::LessEqual(double constant, const Image &image2, uint8_t backgroundValue=0u,
uint8_t foregroundValue=1u)
*/
public ";

%javamethodmodifiers  rtk::simple::LiThreshold "/**
Image rtk::simple::LiThreshold(const Image &image, const Image &maskImage, uint8_t insideValue=1u,
uint8_t outsideValue=0u, uint32_t numberOfHistogramBins=256u, bool
maskOutput=true, uint8_t maskValue=255u)

Threshold an image using the Li Threshold.


This function directly calls the execute method of LiThresholdImageFilter in order to support a procedural API


See:
 rtk::simple::LiThresholdImageFilter for the object oriented interface


*/
public ";

%javamethodmodifiers  rtk::simple::LiThreshold "/**
Image rtk::simple::LiThreshold(const Image &image, uint8_t insideValue=1u, uint8_t outsideValue=0u,
uint32_t numberOfHistogramBins=256u, bool maskOutput=true, uint8_t
maskValue=255u)
*/
public ";

%javamethodmodifiers  rtk::simple::Log "/**
Image rtk::simple::Log(const Image &image1)

Computes the log() of each pixel.


This function directly calls the execute method of LogImageFilter in order to support a procedural API


See:
 rtk::simple::LogImageFilter for the object oriented interface


*/
public ";

%javamethodmodifiers  rtk::simple::Log10 "/**
Image rtk::simple::Log10(const Image &image1)

Computes the log10 of each pixel.


This function directly calls the execute method of Log10ImageFilter in order to support a procedural API


See:
 rtk::simple::Log10ImageFilter for the object oriented interface


*/
public ";

%javamethodmodifiers  rtk::simple::MagnitudeAndPhaseToComplex "/**
Image rtk::simple::MagnitudeAndPhaseToComplex(const Image &image1, const Image &image2)

Implements pixel-wise conversion of magnitude and phase data into
complex voxels.


This function directly calls the execute method of MagnitudeAndPhaseToComplexImageFilter in order to support a procedural API


See:
 rtk::simple::MagnitudeAndPhaseToComplexImageFilter for the object oriented interface


*/
public ";

%javamethodmodifiers  rtk::simple::MagnitudeAndPhaseToComplex "/**
Image rtk::simple::MagnitudeAndPhaseToComplex(const Image &image1, double constant)
*/
public ";

%javamethodmodifiers  rtk::simple::MagnitudeAndPhaseToComplex "/**
Image rtk::simple::MagnitudeAndPhaseToComplex(double constant, const Image &image2)
*/
public ";

%javamethodmodifiers  rtk::simple::Mask "/**
Image rtk::simple::Mask(const Image &image, const Image &maskImage, double outsideValue=0)

Mask an image with a mask.


This function directly calls the execute method of MaskImageFilter in order to support a procedural API


See:
 rtk::simple::MaskImageFilter for the object oriented interface


*/
public ";

%javamethodmodifiers  rtk::simple::MaskedFFTNormalizedCorrelation "/**
Image rtk::simple::MaskedFFTNormalizedCorrelation(const Image &fixedImage, const Image &movingImage, const Image
&fixedImageMask, const Image &movingImageMask, uint64_t
requiredNumberOfOverlappingPixels=0u, float
requiredFractionOfOverlappingPixels=0.0)

Calculate masked normalized cross correlation using FFTs.


This function directly calls the execute method of MaskedFFTNormalizedCorrelationImageFilter in order to support a procedural API


See:
 rtk::simple::MaskedFFTNormalizedCorrelationImageFilter for the object oriented interface


*/
public ";

%javamethodmodifiers  rtk::simple::MaskNegated "/**
Image rtk::simple::MaskNegated(const Image &image, const Image &maskImage)

Mask an image with the negative of a mask.


This function directly calls the execute method of MaskNegatedImageFilter in order to support a procedural API


See:
 rtk::simple::MaskNegatedImageFilter for the object oriented interface


*/
public ";

%javamethodmodifiers  rtk::simple::Maximum "/**
Image rtk::simple::Maximum(const Image &image1, const Image &image2)

Implements a pixel-wise operator Max(a,b) between two images.


This function directly calls the execute method of MaximumImageFilter in order to support a procedural API


See:
 rtk::simple::MaximumImageFilter for the object oriented interface


*/
public ";

%javamethodmodifiers  rtk::simple::Maximum "/**
Image rtk::simple::Maximum(const Image &image1, double constant)
*/
public ";

%javamethodmodifiers  rtk::simple::Maximum "/**
Image rtk::simple::Maximum(double constant, const Image &image2)
*/
public ";

%javamethodmodifiers  rtk::simple::MaximumEntropyThreshold "/**
Image rtk::simple::MaximumEntropyThreshold(const Image &image, const Image &maskImage, uint8_t insideValue=1u,
uint8_t outsideValue=0u, uint32_t numberOfHistogramBins=256u, bool
maskOutput=true, uint8_t maskValue=255u)

Threshold an image using the MaximumEntropy Threshold.


This function directly calls the execute method of MaximumEntropyThresholdImageFilter in order to support a procedural API


See:
 rtk::simple::MaximumEntropyThresholdImageFilter for the object oriented interface


*/
public ";

%javamethodmodifiers  rtk::simple::MaximumEntropyThreshold "/**
Image rtk::simple::MaximumEntropyThreshold(const Image &image, uint8_t insideValue=1u, uint8_t outsideValue=0u,
uint32_t numberOfHistogramBins=256u, bool maskOutput=true, uint8_t
maskValue=255u)
*/
public ";

%javamethodmodifiers  rtk::simple::MaximumProjection "/**
Image rtk::simple::MaximumProjection(const Image &image1, unsigned int projectionDimension=0u)

Maximum projection.


This function directly calls the execute method of MaximumProjectionImageFilter in order to support a procedural API


See:
 rtk::simple::MaximumProjectionImageFilter for the object oriented interface


*/
public ";

%javamethodmodifiers  rtk::simple::Mean "/**
Image rtk::simple::Mean(const Image &image1, const std::vector< unsigned int >
&radius=std::vector< unsigned int >(3, 1))

Applies an averaging filter to an image.


This function directly calls the execute method of MeanImageFilter in order to support a procedural API


See:
 rtk::simple::MeanImageFilter for the object oriented interface


*/
public ";

%javamethodmodifiers  rtk::simple::MeanProjection "/**
Image rtk::simple::MeanProjection(const Image &image1, unsigned int projectionDimension=0u)

Mean projection.


This function directly calls the execute method of MeanProjectionImageFilter in order to support a procedural API


See:
 rtk::simple::MeanProjectionImageFilter for the object oriented interface


*/
public ";

%javamethodmodifiers  rtk::simple::Median "/**
Image rtk::simple::Median(const Image &image1, const std::vector< unsigned int >
&radius=std::vector< unsigned int >(3, 1))

Applies a median filter to an image.


This function directly calls the execute method of MedianImageFilter in order to support a procedural API


See:
 rtk::simple::MedianImageFilter for the object oriented interface


*/
public ";

%javamethodmodifiers  rtk::simple::MedianProjection "/**
Image rtk::simple::MedianProjection(const Image &image1, unsigned int projectionDimension=0u)

Median projection.


This function directly calls the execute method of MedianProjectionImageFilter in order to support a procedural API


See:
 rtk::simple::MedianProjectionImageFilter for the object oriented interface


*/
public ";

%javamethodmodifiers  rtk::simple::Minimum "/**
Image rtk::simple::Minimum(const Image &image1, const Image &image2)

Implements a pixel-wise operator Min(a,b) between two images.


This function directly calls the execute method of MinimumImageFilter in order to support a procedural API


See:
 rtk::simple::MinimumImageFilter for the object oriented interface


*/
public ";

%javamethodmodifiers  rtk::simple::Minimum "/**
Image rtk::simple::Minimum(const Image &image1, double constant)
*/
public ";

%javamethodmodifiers  rtk::simple::Minimum "/**
Image rtk::simple::Minimum(double constant, const Image &image2)
*/
public ";

%javamethodmodifiers  rtk::simple::MinimumProjection "/**
Image rtk::simple::MinimumProjection(const Image &image1, unsigned int projectionDimension=0u)

Minimum projection.


This function directly calls the execute method of MinimumProjectionImageFilter in order to support a procedural API


See:
 rtk::simple::MinimumProjectionImageFilter for the object oriented interface


*/
public ";

%javamethodmodifiers  rtk::simple::MinMaxCurvatureFlow "/**
Image rtk::simple::MinMaxCurvatureFlow(const Image &image1, double timeStep=0.05, uint32_t
numberOfIterations=5u, int stencilRadius=2)

Denoise an image using min/max curvature flow.


This function directly calls the execute method of MinMaxCurvatureFlowImageFilter in order to support a procedural API


See:
 rtk::simple::MinMaxCurvatureFlowImageFilter for the object oriented interface


*/
public ";

%javamethodmodifiers  rtk::simple::MirrorPad "/**
Image rtk::simple::MirrorPad(const Image &image1, const std::vector< unsigned int >
&padLowerBound=std::vector< unsigned int >(3, 0), const std::vector<
unsigned int > &padUpperBound=std::vector< unsigned int >(3, 0))

Increase the image size by padding with replicants of the input image
value.


This function directly calls the execute method of MirrorPadImageFilter in order to support a procedural API


See:
 rtk::simple::MirrorPadImageFilter for the object oriented interface


*/
public ";

%javamethodmodifiers  rtk::simple::Modulus "/**
Image rtk::simple::Modulus(const Image &image1, const Image &image2)

Computes the modulus (x % dividend) pixel-wise.


This function directly calls the execute method of ModulusImageFilter in order to support a procedural API


See:
 rtk::simple::ModulusImageFilter for the object oriented interface


*/
public ";

%javamethodmodifiers  rtk::simple::Modulus "/**
Image rtk::simple::Modulus(const Image &image1, uint32_t constant)
*/
public ";

%javamethodmodifiers  rtk::simple::Modulus "/**
Image rtk::simple::Modulus(uint32_t constant, const Image &image2)
*/
public ";

%javamethodmodifiers  rtk::simple::MomentsThreshold "/**
Image rtk::simple::MomentsThreshold(const Image &image, const Image &maskImage, uint8_t insideValue=1u,
uint8_t outsideValue=0u, uint32_t numberOfHistogramBins=256u, bool
maskOutput=true, uint8_t maskValue=255u)

Threshold an image using the Moments Threshold.


This function directly calls the execute method of MomentsThresholdImageFilter in order to support a procedural API


See:
 rtk::simple::MomentsThresholdImageFilter for the object oriented interface


*/
public ";

%javamethodmodifiers  rtk::simple::MomentsThreshold "/**
Image rtk::simple::MomentsThreshold(const Image &image, uint8_t insideValue=1u, uint8_t outsideValue=0u,
uint32_t numberOfHistogramBins=256u, bool maskOutput=true, uint8_t
maskValue=255u)
*/
public ";

%javamethodmodifiers  rtk::simple::MorphologicalGradient "/**
Image rtk::simple::MorphologicalGradient(const Image &, uint32_t radius=1, KernelEnum kernel=srtkBall)

rtk::simple::MorphologicalGradientImageFilter Functional Interface

This function directly calls the execute method of MorphologicalGradientImageFilter in order to support a fully functional API

*/
public ";

%javamethodmodifiers  rtk::simple::MorphologicalGradient "/**
Image rtk::simple::MorphologicalGradient(const Image &, const std::vector< uint32_t > vectorRadius, KernelEnum
kernel=srtkBall)

rtk::simple::MorphologicalGradientImageFilter Functional Interface

This function directly calls the execute method of MorphologicalGradientImageFilter in order to support a fully functional API

*/
public ";

%javamethodmodifiers  rtk::simple::MorphologicalWatershed "/**
Image rtk::simple::MorphologicalWatershed(const Image &image1, double level=0.0, bool markWatershedLine=true,
bool fullyConnected=false)

TODO.


This function directly calls the execute method of MorphologicalWatershedImageFilter in order to support a procedural API


See:
 rtk::simple::MorphologicalWatershedImageFilter for the object oriented interface


*/
public ";

%javamethodmodifiers  rtk::simple::MorphologicalWatershedFromMarkers "/**
Image rtk::simple::MorphologicalWatershedFromMarkers(const Image &image, const Image &markerImage, bool
markWatershedLine=true, bool fullyConnected=false)

Morphological watershed transform from markers.


This function directly calls the execute method of MorphologicalWatershedFromMarkersImageFilter in order to support a procedural API


See:
 rtk::simple::MorphologicalWatershedFromMarkersImageFilter for the object oriented interface


*/
public ";

%javamethodmodifiers  rtk::simple::Multiply "/**
Image rtk::simple::Multiply(const Image &image1, const Image &image2)

Pixel-wise multiplication of two images.


This function directly calls the execute method of MultiplyImageFilter in order to support a procedural API


See:
 rtk::simple::MultiplyImageFilter for the object oriented interface


*/
public ";

%javamethodmodifiers  rtk::simple::Multiply "/**
Image rtk::simple::Multiply(const Image &image1, double constant)
*/
public ";

%javamethodmodifiers  rtk::simple::Multiply "/**
Image rtk::simple::Multiply(double constant, const Image &image2)
*/
public ";

%javamethodmodifiers  rtk::simple::N4BiasFieldCorrection "/**
Image rtk::simple::N4BiasFieldCorrection(const Image &image, const Image &maskImage, double
convergenceThreshold=0.001, std::vector< uint32_t >
maximumNumberOfIterations=std::vector< uint32_t >(4, 50), double
biasFieldFullWidthAtHalfMaximum=0.15, double wienerFilterNoise=0.01,
uint32_t numberOfHistogramBins=200u, const std::vector< uint32_t >
&numberOfControlPoints=std::vector< uint32_t >(3, 4), uint32_t
splineOrder=3u)

Implementation of the N4 bias field correction algorithm.


This function directly calls the execute method of N4BiasFieldCorrectionImageFilter in order to support a procedural API


See:
 rtk::simple::N4BiasFieldCorrectionImageFilter for the object oriented interface


*/
public ";

%javamethodmodifiers  rtk::simple::NeighborhoodConnected "/**
Image rtk::simple::NeighborhoodConnected(const Image &image1, const std::vector< std::vector< unsigned int > >
&seedList, double lower=0, double upper=1, const std::vector< unsigned
int > &radius=std::vector< unsigned int >(3, 1), double
replaceValue=1)

rtk::simple::NeighborhoodConnectedImageFilter Functional Interface

This function directly calls the execute method of NeighborhoodConnectedImageFilter in order to support a fully functional API

*/
public ";

%javamethodmodifiers  rtk::simple::Noise "/**
Image rtk::simple::Noise(const Image &image1, const std::vector< unsigned int >
&radius=std::vector< unsigned int >(3, 1))

Calculate the local noise in an image.


This function directly calls the execute method of NoiseImageFilter in order to support a procedural API


See:
 rtk::simple::NoiseImageFilter for the object oriented interface


*/
public ";

%javamethodmodifiers  rtk::simple::Normalize "/**
Image rtk::simple::Normalize(const Image &image1)

Normalize an image by setting its mean to zero and variance to one.


This function directly calls the execute method of NormalizeImageFilter in order to support a procedural API


See:
 rtk::simple::NormalizeImageFilter for the object oriented interface


*/
public ";

%javamethodmodifiers  rtk::simple::NormalizedCorrelation "/**
Image rtk::simple::NormalizedCorrelation(const Image &image, const Image &maskImage, const Image
&templateImage)

Computes the normalized correlation of an image and a template.


This function directly calls the execute method of NormalizedCorrelationImageFilter in order to support a procedural API


See:
 rtk::simple::NormalizedCorrelationImageFilter for the object oriented interface


*/
public ";

%javamethodmodifiers  rtk::simple::NormalizeToConstant "/**
Image rtk::simple::NormalizeToConstant(const Image &image1, double constant=1.0)

Scales image pixel intensities to make the sum of all pixels equal a
user-defined constant.


This function directly calls the execute method of NormalizeToConstantImageFilter in order to support a procedural API


See:
 rtk::simple::NormalizeToConstantImageFilter for the object oriented interface


*/
public ";

%javamethodmodifiers  rtk::simple::Not "/**
Image rtk::simple::Not(const Image &image1)

Implements the NOT logical operator pixel-wise on an image.


This function directly calls the execute method of NotImageFilter in order to support a procedural API


See:
 rtk::simple::NotImageFilter for the object oriented interface


*/
public ";

%javamethodmodifiers  rtk::simple::NotEqual "/**
Image rtk::simple::NotEqual(const Image &image1, const Image &image2, uint8_t backgroundValue=0u,
uint8_t foregroundValue=1u)

Implements pixel-wise generic operation of two images, or of an image
and a constant.


This function directly calls the execute method of NotEqualImageFilter in order to support a procedural API


See:
 rtk::simple::NotEqualImageFilter for the object oriented interface


*/
public ";

%javamethodmodifiers  rtk::simple::NotEqual "/**
Image rtk::simple::NotEqual(const Image &image1, double constant, uint8_t backgroundValue=0u,
uint8_t foregroundValue=1u)
*/
public ";

%javamethodmodifiers  rtk::simple::NotEqual "/**
Image rtk::simple::NotEqual(double constant, const Image &image2, uint8_t backgroundValue=0u,
uint8_t foregroundValue=1u)
*/
public ";

%javamethodmodifiers  rtk::simple::OpeningByReconstruction "/**
Image rtk::simple::OpeningByReconstruction(const Image &, uint32_t radius=1, KernelEnum kernel=srtkBall, bool
fullyConnected=false, bool preserveIntensities=false)

rtk::simple::OpeningByReconstructionImageFilter Functional Interface

This function directly calls the execute method of OpeningByReconstructionImageFilter in order to support a fully functional API

*/
public ";

%javamethodmodifiers  rtk::simple::OpeningByReconstruction "/**
Image rtk::simple::OpeningByReconstruction(const Image &, const std::vector< uint32_t > vectorRadius, KernelEnum
kernel=srtkBall, bool fullyConnected=false, bool
preserveIntensities=false)

rtk::simple::OpeningByReconstructionImageFilter Functional Interface

This function directly calls the execute method of OpeningByReconstructionImageFilter in order to support a fully functional API

*/
public ";

%javamethodmodifiers  rtk::simple::Or "/**
Image rtk::simple::Or(const Image &image1, const Image &image2)

Implements the OR bitwise operator pixel-wise between two images.


This function directly calls the execute method of OrImageFilter in order to support a procedural API


See:
 rtk::simple::OrImageFilter for the object oriented interface


*/
public ";

%javamethodmodifiers  rtk::simple::Or "/**
Image rtk::simple::Or(const Image &image1, int constant)
*/
public ";

%javamethodmodifiers  rtk::simple::Or "/**
Image rtk::simple::Or(int constant, const Image &image2)
*/
public ";

%javamethodmodifiers  rtk::simple::OtsuMultipleThresholds "/**
Image rtk::simple::OtsuMultipleThresholds(const Image &image1, uint8_t numberOfThresholds=1u, uint8_t
labelOffset=0u, uint32_t numberOfHistogramBins=128u, bool
valleyEmphasis=false)

Threshold an image using multiple Otsu Thresholds.


This function directly calls the execute method of OtsuMultipleThresholdsImageFilter in order to support a procedural API


See:
 rtk::simple::OtsuMultipleThresholdsImageFilter for the object oriented interface


*/
public ";

%javamethodmodifiers  rtk::simple::OtsuThreshold "/**
Image rtk::simple::OtsuThreshold(const Image &image, const Image &maskImage, uint8_t insideValue=1u,
uint8_t outsideValue=0u, uint32_t numberOfHistogramBins=128u, bool
maskOutput=true, uint8_t maskValue=255u)

Threshold an image using the Otsu Threshold.


This function directly calls the execute method of OtsuThresholdImageFilter in order to support a procedural API


See:
 rtk::simple::OtsuThresholdImageFilter for the object oriented interface


*/
public ";

%javamethodmodifiers  rtk::simple::OtsuThreshold "/**
Image rtk::simple::OtsuThreshold(const Image &image, uint8_t insideValue=1u, uint8_t outsideValue=0u,
uint32_t numberOfHistogramBins=128u, bool maskOutput=true, uint8_t
maskValue=255u)
*/
public ";

%javamethodmodifiers  rtk::simple::Paste "/**
Image rtk::simple::Paste(const Image &image1, const Image &image2, const std::vector< unsigned
int > &sourceSize=std::vector< unsigned int >(3, 1), const
std::vector< int > &sourceIndex=std::vector< int >(3, 0), const
std::vector< int > &destinationIndex=std::vector< int >(3, 0))

Paste an image into another image.


This function directly calls the execute method of PasteImageFilter in order to support a procedural API


See:
 rtk::simple::PasteImageFilter for the object oriented interface


*/
public ";

%javamethodmodifiers  rtk::simple::PatchBasedDenoising "/**
Image rtk::simple::PatchBasedDenoising(const Image &image1,
rtk::simple::PatchBasedDenoisingImageFilter::NoiseModelType
noiseModel, double kernelBandwidthSigma=400.0, uint32_t
patchRadius=4u, uint32_t numberOfIterations=1u, uint32_t
numberOfSamplePatches=200u, double sampleVariance=400.0, double
noiseSigma=0.0, double noiseModelFidelityWeight=0.0)

rtk::simple::PatchBasedDenoisingImageFilter Procedural Interface


This function directly calls the execute method of PatchBasedDenoisingImageFilter in order to support a procedural API


See:
 rtk::simple::PatchBasedDenoisingImageFilter for the object oriented interface


*/
public ";

%javamethodmodifiers  rtk::simple::PatchBasedDenoising "/**
Image rtk::simple::PatchBasedDenoising(const Image &image1, double kernelBandwidthSigma=400.0, uint32_t
patchRadius=4u, uint32_t numberOfIterations=1u, uint32_t
numberOfSamplePatches=200u, double sampleVariance=400.0)
*/
public ";

%javamethodmodifiers  rtk::simple::PermuteAxes "/**
Image rtk::simple::PermuteAxes(const Image &image1, const std::vector< unsigned int >
&order=std::vector< unsigned int >(&rtk::simple::PermuteAxesImageFilte
r::DefaultOrder[0],&rtk::simple::PermuteAxesImageFilter::DefaultOrder[
3]))

Permutes the image axes according to a user specified order.


This function directly calls the execute method of PermuteAxesImageFilter in order to support a procedural API


See:
 rtk::simple::PermuteAxesImageFilter for the object oriented interface


*/
public ";

%javamethodmodifiers  rtk::simple::PhysicalPointSource "/**
Image rtk::simple::PhysicalPointSource(PixelIDValueEnum outputPixelType=rtk::simple::srtkVectorFloat32,
const std::vector< unsigned int > &size=std::vector< unsigned int >(3,
64), const std::vector< double > &origin=std::vector< double >(3,
0.0), const std::vector< double > &spacing=std::vector< double >(3,
1.0), std::vector< double > direction=std::vector< double >())

Generate an image of the physical locations of each pixel.


This function directly calls the execute method of PhysicalPointImageSource in order to support a procedural API


See:
 rtk::simple::PhysicalPointImageSource for the object oriented interface


*/
public ";

%javamethodmodifiers  rtk::simple::Pow "/**
Image rtk::simple::Pow(const Image &image1, const Image &image2)

Computes the powers of 2 images.


This function directly calls the execute method of PowImageFilter in order to support a procedural API


See:
 rtk::simple::PowImageFilter for the object oriented interface


*/
public ";

%javamethodmodifiers  rtk::simple::Pow "/**
Image rtk::simple::Pow(const Image &image1, double constant)
*/
public ";

%javamethodmodifiers  rtk::simple::Pow "/**
Image rtk::simple::Pow(double constant, const Image &image2)
*/
public ";

%javamethodmodifiers  rtk::simple::ProjectedLandweberDeconvolution "/**
Image rtk::simple::ProjectedLandweberDeconvolution(const Image &image1, const Image &image2, double alpha=0.1, int
numberOfIterations=1, bool normalize=false,
ProjectedLandweberDeconvolutionImageFilter::BoundaryConditionType boun
daryCondition=rtk::simple::ProjectedLandweberDeconvolutionImageFilter:
:ZERO_FLUX_NEUMANN_PAD,
ProjectedLandweberDeconvolutionImageFilter::OutputRegionModeType outpu
tRegionMode=rtk::simple::ProjectedLandweberDeconvolutionImageFilter::S
AME)

Deconvolve an image using the projected Landweber deconvolution
algorithm.


This function directly calls the execute method of ProjectedLandweberDeconvolutionImageFilter in order to support a procedural API


See:
 rtk::simple::ProjectedLandweberDeconvolutionImageFilter for the object oriented interface


*/
public ";

%javamethodmodifiers  rtk::simple::Rank "/**
Image rtk::simple::Rank(const Image &image1, double rank=0.5, const std::vector< unsigned int
> &radius=std::vector< unsigned int >(3, 1))

Rank filter of a greyscale image.


This function directly calls the execute method of RankImageFilter in order to support a procedural API


See:
 rtk::simple::RankImageFilter for the object oriented interface


*/
public ";

%javamethodmodifiers  rtk::simple::ReadImage "/**
SITKIO_EXPORT Image rtk::simple::ReadImage(std::string filename, PixelIDValueEnum outputPixelType=srtkUnknown)
*/
public ";

%javamethodmodifiers  rtk::simple::ReadImage "/**
SITKIO_EXPORT Image rtk::simple::ReadImage(const std::vector< std::string > &fileNames, PixelIDValueEnum
outputPixelType=srtkUnknown)
*/
public ";

%javamethodmodifiers  rtk::simple::ReadTransform "/**
SITKCommon_EXPORT Transform rtk::simple::ReadTransform(const std::string &filename)
*/
public ";

%javamethodmodifiers  rtk::simple::RealAndImaginaryToComplex "/**
Image rtk::simple::RealAndImaginaryToComplex(const Image &image1, const Image &image2)

ComposeImageFilter combine several scalar images into a multicomponent image.


This function directly calls the execute method of RealAndImaginaryToComplexImageFilter in order to support a procedural API


See:
 rtk::simple::RealAndImaginaryToComplexImageFilter for the object oriented interface


*/
public ";

%javamethodmodifiers  rtk::simple::RealToHalfHermitianForwardFFT "/**
Image rtk::simple::RealToHalfHermitianForwardFFT(const Image &image1)

Base class for specialized real-to-complex forward Fast Fourier Transform .


This function directly calls the execute method of RealToHalfHermitianForwardFFTImageFilter in order to support a procedural API


See:
 rtk::simple::RealToHalfHermitianForwardFFTImageFilter for the object oriented interface


*/
public ";

%javamethodmodifiers  rtk::simple::ReconstructionByDilation "/**
Image rtk::simple::ReconstructionByDilation(const Image &image1, const Image &image2, bool fullyConnected=false,
bool useInternalCopy=true)

grayscale reconstruction by dilation of an image


This function directly calls the execute method of ReconstructionByDilationImageFilter in order to support a procedural API


See:
 rtk::simple::ReconstructionByDilationImageFilter for the object oriented interface


*/
public ";

%javamethodmodifiers  rtk::simple::ReconstructionByErosion "/**
Image rtk::simple::ReconstructionByErosion(const Image &image1, const Image &image2, bool fullyConnected=false,
bool useInternalCopy=true)

grayscale reconstruction by erosion of an image


This function directly calls the execute method of ReconstructionByErosionImageFilter in order to support a procedural API


See:
 rtk::simple::ReconstructionByErosionImageFilter for the object oriented interface


*/
public ";

%javamethodmodifiers  rtk::simple::RecursiveGaussian "/**
Image rtk::simple::RecursiveGaussian(const Image &image1, double sigma=1.0, bool
normalizeAcrossScale=false, RecursiveGaussianImageFilter::OrderType
order=rtk::simple::RecursiveGaussianImageFilter::ZeroOrder, unsigned
int direction=0u)

Base class for computing IIR convolution with an approximation of a
Gaussian kernel.


This function directly calls the execute method of RecursiveGaussianImageFilter in order to support a procedural API


See:
 rtk::simple::RecursiveGaussianImageFilter for the object oriented interface


*/
public ";

%javamethodmodifiers  rtk::simple::RegionalMaxima "/**
Image rtk::simple::RegionalMaxima(const Image &image1, double backgroundValue=0.0, double
foregroundValue=1.0, bool fullyConnected=false, bool
flatIsMaxima=true)

Produce a binary image where foreground is the regional maxima of the
input image.


This function directly calls the execute method of RegionalMaximaImageFilter in order to support a procedural API


See:
 rtk::simple::RegionalMaximaImageFilter for the object oriented interface


*/
public ";

%javamethodmodifiers  rtk::simple::RegionalMinima "/**
Image rtk::simple::RegionalMinima(const Image &image1, double backgroundValue=0.0, double
foregroundValue=1.0, bool fullyConnected=false, bool
flatIsMinima=true)

Produce a binary image where foreground is the regional minima of the
input image.


This function directly calls the execute method of RegionalMinimaImageFilter in order to support a procedural API


See:
 rtk::simple::RegionalMinimaImageFilter for the object oriented interface


*/
public ";

%javamethodmodifiers  rtk::simple::RegionOfInterest "/**
Image rtk::simple::RegionOfInterest(const Image &image1, const std::vector< unsigned int >
&size=std::vector< unsigned int >(3, 1), const std::vector< int >
&index=std::vector< int >(3, 0))

Extract a region of interest from the input image.


This function directly calls the execute method of RegionOfInterestImageFilter in order to support a procedural API


See:
 rtk::simple::RegionOfInterestImageFilter for the object oriented interface


*/
public ";

%javamethodmodifiers  rtk::simple::RelabelComponent "/**
Image rtk::simple::RelabelComponent(const Image &image1, uint64_t minimumObjectSize=0u)

Relabel the components in an image such that consecutive labels are
used.


This function directly calls the execute method of RelabelComponentImageFilter in order to support a procedural API


See:
 rtk::simple::RelabelComponentImageFilter for the object oriented interface


*/
public ";

%javamethodmodifiers  rtk::simple::RelabelLabelMap "/**
Image rtk::simple::RelabelLabelMap(const Image &image1, bool reverseOrdering=true)

This filter relabels the LabelObjects; the new labels are arranged
consecutively with consideration for the background value.


This function directly calls the execute method of RelabelLabelMapFilter in order to support a procedural API


See:
 rtk::simple::RelabelLabelMapFilter for the object oriented interface


*/
public ";

%javamethodmodifiers  rtk::simple::RenyiEntropyThreshold "/**
Image rtk::simple::RenyiEntropyThreshold(const Image &image, const Image &maskImage, uint8_t insideValue=1u,
uint8_t outsideValue=0u, uint32_t numberOfHistogramBins=256u, bool
maskOutput=true, uint8_t maskValue=255u)

Threshold an image using the RenyiEntropy Threshold.


This function directly calls the execute method of RenyiEntropyThresholdImageFilter in order to support a procedural API


See:
 rtk::simple::RenyiEntropyThresholdImageFilter for the object oriented interface


*/
public ";

%javamethodmodifiers  rtk::simple::RenyiEntropyThreshold "/**
Image rtk::simple::RenyiEntropyThreshold(const Image &image, uint8_t insideValue=1u, uint8_t outsideValue=0u,
uint32_t numberOfHistogramBins=256u, bool maskOutput=true, uint8_t
maskValue=255u)
*/
public ";

%javamethodmodifiers  rtk::simple::RescaleIntensity "/**
Image rtk::simple::RescaleIntensity(const Image &image1, double outputMinimum=0, double
outputMaximum=255)

Applies a linear transformation to the intensity levels of the input Image .


This function directly calls the execute method of RescaleIntensityImageFilter in order to support a procedural API


See:
 rtk::simple::RescaleIntensityImageFilter for the object oriented interface


*/
public ";

%javamethodmodifiers  rtk::simple::RichardsonLucyDeconvolution "/**
Image rtk::simple::RichardsonLucyDeconvolution(const Image &image1, const Image &image2, int numberOfIterations=1,
bool normalize=false,
RichardsonLucyDeconvolutionImageFilter::BoundaryConditionType boundary
Condition=rtk::simple::RichardsonLucyDeconvolutionImageFilter::ZERO_FL
UX_NEUMANN_PAD,
RichardsonLucyDeconvolutionImageFilter::OutputRegionModeType outputReg
ionMode=rtk::simple::RichardsonLucyDeconvolutionImageFilter::SAME)

Deconvolve an image using the Richardson-Lucy deconvolution algorithm.


This function directly calls the execute method of RichardsonLucyDeconvolutionImageFilter in order to support a procedural API


See:
 rtk::simple::RichardsonLucyDeconvolutionImageFilter for the object oriented interface


*/
public ";

%javamethodmodifiers  rtk::simple::SaltAndPepperNoise "/**
Image rtk::simple::SaltAndPepperNoise(const Image &image1, double probability=0.01, uint32_t seed=0u)

Alter an image with fixed value impulse noise, often called salt and
pepper noise.


This function directly calls the execute method of SaltAndPepperNoiseImageFilter in order to support a procedural API


See:
 rtk::simple::SaltAndPepperNoiseImageFilter for the object oriented interface


*/
public ";

%javamethodmodifiers  rtk::simple::ScalarChanAndVeseDenseLevelSet "/**
Image rtk::simple::ScalarChanAndVeseDenseLevelSet(const Image &image1, const Image &image2, double
maximumRMSError=0.02, uint32_t numberOfIterations=1000u, double
lambda1=1.0, double lambda2=1.0, double epsilon=1.0, double
curvatureWeight=1.0, double areaWeight=0.0, double
reinitializationSmoothingWeight=0.0, double volume=0.0, double
volumeMatchingWeight=0.0,
ScalarChanAndVeseDenseLevelSetImageFilter::HeavisideStepFunctionType h
eavisideStepFunction=rtk::simple::ScalarChanAndVeseDenseLevelSetImageF
ilter::AtanRegularizedHeaviside, bool useImageSpacing=true)

Dense implementation of the Chan and Vese multiphase level set image
filter.


This function directly calls the execute method of ScalarChanAndVeseDenseLevelSetImageFilter in order to support a procedural API


See:
 rtk::simple::ScalarChanAndVeseDenseLevelSetImageFilter for the object oriented interface


*/
public ";

%javamethodmodifiers  rtk::simple::ScalarConnectedComponent "/**
Image rtk::simple::ScalarConnectedComponent(const Image &image1, double distanceThreshold=0.0, bool
fullyConnected=false)

A connected components filter that labels the objects in an arbitrary
image. Two pixels are similar if they are within threshold of each
other. Uses ConnectedComponentFunctorImageFilter .


This function directly calls the execute method of ScalarConnectedComponentImageFilter in order to support a procedural API


See:
 rtk::simple::ScalarConnectedComponentImageFilter for the object oriented interface


*/
public ";

%javamethodmodifiers  rtk::simple::ScalarImageKmeans "/**
Image rtk::simple::ScalarImageKmeans(const Image &image1, std::vector< double >
classWithInitialMean=std::vector< double >(), bool
useNonContiguousLabels=false)

Classifies the intensity values of a scalar image using the K-Means
algorithm.


This function directly calls the execute method of ScalarImageKmeansImageFilter in order to support a procedural API


See:
 rtk::simple::ScalarImageKmeansImageFilter for the object oriented interface


*/
public ";

%javamethodmodifiers  rtk::simple::ScalarToRGBColormap "/**
Image rtk::simple::ScalarToRGBColormap(const Image &image1, ScalarToRGBColormapImageFilter::ColormapType
colormap=rtk::simple::ScalarToRGBColormapImageFilter::Grey)

Implements pixel-wise intensity->rgb mapping operation on one image.


This function directly calls the execute method of ScalarToRGBColormapImageFilter in order to support a procedural API


See:
 rtk::simple::ScalarToRGBColormapImageFilter for the object oriented interface


*/
public ";

%javamethodmodifiers  rtk::simple::ShanbhagThreshold "/**
Image rtk::simple::ShanbhagThreshold(const Image &image, const Image &maskImage, uint8_t insideValue=1u,
uint8_t outsideValue=0u, uint32_t numberOfHistogramBins=256u, bool
maskOutput=true, uint8_t maskValue=255u)

Threshold an image using the Shanbhag Threshold.


This function directly calls the execute method of ShanbhagThresholdImageFilter in order to support a procedural API


See:
 rtk::simple::ShanbhagThresholdImageFilter for the object oriented interface


*/
public ";

%javamethodmodifiers  rtk::simple::ShanbhagThreshold "/**
Image rtk::simple::ShanbhagThreshold(const Image &image, uint8_t insideValue=1u, uint8_t outsideValue=0u,
uint32_t numberOfHistogramBins=256u, bool maskOutput=true, uint8_t
maskValue=255u)
*/
public ";

%javamethodmodifiers  rtk::simple::ShapeDetectionLevelSet "/**
Image rtk::simple::ShapeDetectionLevelSet(const Image &image1, const Image &image2, double
maximumRMSError=0.02, double propagationScaling=1.0, double
curvatureScaling=1.0, uint32_t numberOfIterations=1000u, bool
reverseExpansionDirection=false)

Segments structures in images based on a user supplied edge potential
map.


This function directly calls the execute method of ShapeDetectionLevelSetImageFilter in order to support a procedural API


See:
 rtk::simple::ShapeDetectionLevelSetImageFilter for the object oriented interface


*/
public ";

%javamethodmodifiers  rtk::simple::ShiftScale "/**
Image rtk::simple::ShiftScale(const Image &image1, double shift=0, double scale=1.0)

Shift and scale the pixels in an image.


This function directly calls the execute method of ShiftScaleImageFilter in order to support a procedural API


See:
 rtk::simple::ShiftScaleImageFilter for the object oriented interface


*/
public ";

%javamethodmodifiers  rtk::simple::ShotNoise "/**
Image rtk::simple::ShotNoise(const Image &image1, double scale=1.0, uint32_t seed=0u)

Alter an image with shot noise.


This function directly calls the execute method of ShotNoiseImageFilter in order to support a procedural API


See:
 rtk::simple::ShotNoiseImageFilter for the object oriented interface


*/
public ";

%javamethodmodifiers  rtk::simple::Show "/**
void SITKIO_EXPORT rtk::simple::Show(const Image &image, const std::string &title=\"\", const bool
debugOn=false)

Display an image using ImageJ

This function requires that ImageJ ( http://rsb.info.nih.gov/ij/) be properly installed for Mac and Windows, and in the user's path
for Linux. ImageJ must have a plugin for reading Nifti formatted files
( http://www.loci.wisc.edu/bio-formats/imagej).

Nifti is the default file format used to export images. A different
format can by chosen by setting the SRTK_SHOW_EXTENSION environment
variable. For example, set SRTK_SHOW_EXTENSION to \".png\" to use PNG
format.

The user can specify an application other than ImageJ to view images
via the SRTK_SHOW_COMMAND environment variable.

The user can also select applications specifically for color images or
3D images using the SRTK_SHOW_COLOR_COMMAND and SRTK_SHOW_3D_COMMAND
environment variables.

SRTK_SHOW_COMMAND, SRTK_SHOW_COLOR_COMMAND and SRTK_SHOW_3D_COMMAND
allow the following tokens in their strings.


\"%a\" for the ImageJ application

\"%f\" for SimpleRTK's temporary image file
 For example, the default SRTK_SHOW_COMMAND string on Linux systems
is:


After token substitution it may become:


For another example, the default SRTK_SHOW_COLOR_COMMAND string on Mac
OS X is:


After token substitution the string may become:


The string after \"-eval\" is an ImageJ macro the opens the file and runs ImageJ's Make
Composite command to display the image in color.

If the \"%f\" token is not found in the command string, the temporary file name is
automatically appended to the command argument list.

When invoked, Show searches for Fiji first, and then ImageJ. Fiji is
the most update-to-date version of ImageJ and includes a lot of
plugins which facilitate scientific image analysis. By default, for a
64-bit build of SimpleRTK on Macs, srtkShow searches for ImageJ64.app.
For a 32-bit Mac build, srtkShow searches for ImageJ.app. If the user
prefers a different version of ImageJ (or a different image viewer
altogether), it can be specified using the SRTK_SHOW_COMMAND
environment variable.

The boolean parameter debugOn prints the search path Show uses to find
ImageJ, the full path to the ImageJ it found, and the full command
line used to invoke ImageJ.

*/
public ";

%javamethodmodifiers  rtk::simple::Shrink "/**
Image rtk::simple::Shrink(const Image &image1, const std::vector< unsigned int >
&shrinkFactors=std::vector< unsigned int >(3, 1))

Reduce the size of an image by an integer factor in each dimension.


This function directly calls the execute method of ShrinkImageFilter in order to support a procedural API


See:
 rtk::simple::ShrinkImageFilter for the object oriented interface


*/
public ";

%javamethodmodifiers  rtk::simple::Sigmoid "/**
Image rtk::simple::Sigmoid(const Image &image1, double alpha=1, double beta=0, double
outputMaximum=255, double outputMinimum=0)

Computes the sigmoid function pixel-wise.


This function directly calls the execute method of SigmoidImageFilter in order to support a procedural API


See:
 rtk::simple::SigmoidImageFilter for the object oriented interface


*/
public ";

%javamethodmodifiers  rtk::simple::SignedDanielssonDistanceMap "/**
Image rtk::simple::SignedDanielssonDistanceMap(const Image &image1, bool insideIsPositive=false, bool
squaredDistance=false, bool useImageSpacing=false)

rtk::simple::SignedDanielssonDistanceMapImageFilter Procedural Interface


This function directly calls the execute method of SignedDanielssonDistanceMapImageFilter in order to support a procedural API


See:
 rtk::simple::SignedDanielssonDistanceMapImageFilter for the object oriented interface


*/
public ";

%javamethodmodifiers  rtk::simple::SignedMaurerDistanceMap "/**
Image rtk::simple::SignedMaurerDistanceMap(const Image &image1, bool insideIsPositive=false, bool
squaredDistance=true, bool useImageSpacing=false)

This filter calculates the Euclidean distance transform of a binary
image in linear time for arbitrary dimensions.


This function directly calls the execute method of SignedMaurerDistanceMapImageFilter in order to support a procedural API


See:
 rtk::simple::SignedMaurerDistanceMapImageFilter for the object oriented interface


*/
public ";

%javamethodmodifiers  rtk::simple::SimpleContourExtractor "/**
Image rtk::simple::SimpleContourExtractor(const Image &image1, double inputForegroundValue=1.0, double
inputBackgroundValue=0.0, const std::vector< unsigned int >
&radius=std::vector< unsigned int >(3, 1), double
outputForegroundValue=1.0, double outputBackgroundValue=0.0)

Computes an image of contours which will be the contour of the first
image.


This function directly calls the execute method of SimpleContourExtractorImageFilter in order to support a procedural API


See:
 rtk::simple::SimpleContourExtractorImageFilter for the object oriented interface


*/
public ";

%javamethodmodifiers  rtk::simple::Sin "/**
Image rtk::simple::Sin(const Image &image1)

Computes the sine of each pixel.


This function directly calls the execute method of SinImageFilter in order to support a procedural API


See:
 rtk::simple::SinImageFilter for the object oriented interface


*/
public ";

%javamethodmodifiers  rtk::simple::srtkITKDirectionToSTL "/**
std::vector<double> SITKCommon_HIDDEN rtk::simple::srtkITKDirectionToSTL(const TDirectionType &d)
*/
public ";

%javamethodmodifiers  rtk::simple::srtkITKImageRegionToSTL "/**
std::vector<unsigned int> SITKCommon_HIDDEN rtk::simple::srtkITKImageRegionToSTL(const ImageRegion< VImageDimension > &in)

Convert an ITK ImageRegion to and std::vector with the first part being the start index followed
by the size.

*/
public ";

%javamethodmodifiers  rtk::simple::srtkITKVectorToSTL "/**
std::vector<TType> SITKCommon_HIDDEN rtk::simple::srtkITKVectorToSTL(const TITKVector &in)

Convert an ITK fixed width vector to a std::vector.

*/
public ";

%javamethodmodifiers  rtk::simple::srtkITKVectorToSTL "/**
std::vector<TType> SITKCommon_HIDDEN rtk::simple::srtkITKVectorToSTL(const std::vector< TITKVector > &in)
*/
public ";

%javamethodmodifiers  rtk::simple::srtkSTLToITKDirection "/**
TDirectionType SITKCommon_HIDDEN rtk::simple::srtkSTLToITKDirection(const std::vector< double > &direction)
*/
public ";

%javamethodmodifiers  rtk::simple::srtkSTLVectorToITK "/**
TITKVector SITKCommon_HIDDEN rtk::simple::srtkSTLVectorToITK(const std::vector< TType > &in)

Copy the elements of an std::vector into an ITK fixed width vector.


If there are more elements in paramter \"in\" than the templated ITK
vector type, they are truncated. If less, then an exception is
generated.

*/
public ";

%javamethodmodifiers  rtk::simple::srtkSTLVectorToITKPointVector "/**
TITKPointVector SITKCommon_HIDDEN rtk::simple::srtkSTLVectorToITKPointVector(const std::vector< TType > &in)
*/
public ";

%javamethodmodifiers  rtk::simple::Slice "/**
Image rtk::simple::Slice(const Image &image1, const std::vector< int32_t > &start=std::vector<
int32_t >(3, 0), const std::vector< int32_t > &stop=std::vector<
int32_t >(3, std::numeric_limits< int32_t >::max()), const
std::vector< int > &step=std::vector< int >(3, 1))

rtk::simple::SliceImageFilter Procedural Interface


This function directly calls the execute method of SliceImageFilter in order to support a procedural API


See:
 rtk::simple::SliceImageFilter for the object oriented interface


*/
public ";

%javamethodmodifiers  rtk::simple::SmoothingRecursiveGaussian "/**
Image rtk::simple::SmoothingRecursiveGaussian(const Image &image1, double sigma=1.0, bool
normalizeAcrossScale=false)

Computes the smoothing of an image by convolution with the Gaussian
kernels implemented as IIR filters.


This function directly calls the execute method of SmoothingRecursiveGaussianImageFilter in order to support a procedural API


See:
 rtk::simple::SmoothingRecursiveGaussianImageFilter for the object oriented interface


*/
public ";

%javamethodmodifiers  rtk::simple::SobelEdgeDetection "/**
Image rtk::simple::SobelEdgeDetection(const Image &image1)

A 2D or 3D edge detection using the Sobel operator.


This function directly calls the execute method of SobelEdgeDetectionImageFilter in order to support a procedural API


See:
 rtk::simple::SobelEdgeDetectionImageFilter for the object oriented interface


*/
public ";

%javamethodmodifiers  rtk::simple::SpeckleNoise "/**
Image rtk::simple::SpeckleNoise(const Image &image1, double standardDeviation=1.0, uint32_t seed=0u)

Alter an image with speckle (multiplicative) noise.


This function directly calls the execute method of SpeckleNoiseImageFilter in order to support a procedural API


See:
 rtk::simple::SpeckleNoiseImageFilter for the object oriented interface


*/
public ";

%javamethodmodifiers  rtk::simple::Sqrt "/**
Image rtk::simple::Sqrt(const Image &image1)

Computes the square root of each pixel.


This function directly calls the execute method of SqrtImageFilter in order to support a procedural API


See:
 rtk::simple::SqrtImageFilter for the object oriented interface


*/
public ";

%javamethodmodifiers  rtk::simple::Square "/**
Image rtk::simple::Square(const Image &image1)

Computes the square of the intensity values pixel-wise.


This function directly calls the execute method of SquareImageFilter in order to support a procedural API


See:
 rtk::simple::SquareImageFilter for the object oriented interface


*/
public ";

%javamethodmodifiers  rtk::simple::SquaredDifference "/**
Image rtk::simple::SquaredDifference(const Image &image1, const Image &image2)

Implements pixel-wise the computation of squared difference.


This function directly calls the execute method of SquaredDifferenceImageFilter in order to support a procedural API


See:
 rtk::simple::SquaredDifferenceImageFilter for the object oriented interface


*/
public ";

%javamethodmodifiers  rtk::simple::SquaredDifference "/**
Image rtk::simple::SquaredDifference(const Image &image1, double constant)
*/
public ";

%javamethodmodifiers  rtk::simple::SquaredDifference "/**
Image rtk::simple::SquaredDifference(double constant, const Image &image2)
*/
public ";

%javamethodmodifiers  rtk::simple::StandardDeviationProjection "/**
Image rtk::simple::StandardDeviationProjection(const Image &image1, unsigned int projectionDimension=0u)

Mean projection.


This function directly calls the execute method of StandardDeviationProjectionImageFilter in order to support a procedural API


See:
 rtk::simple::StandardDeviationProjectionImageFilter for the object oriented interface


*/
public ";

%javamethodmodifiers  rtk::simple::Subtract "/**
Image rtk::simple::Subtract(const Image &image1, const Image &image2)

Pixel-wise subtraction of two images.


This function directly calls the execute method of SubtractImageFilter in order to support a procedural API


See:
 rtk::simple::SubtractImageFilter for the object oriented interface


*/
public ";

%javamethodmodifiers  rtk::simple::Subtract "/**
Image rtk::simple::Subtract(const Image &image1, double constant)
*/
public ";

%javamethodmodifiers  rtk::simple::Subtract "/**
Image rtk::simple::Subtract(double constant, const Image &image2)
*/
public ";

%javamethodmodifiers  rtk::simple::SumProjection "/**
Image rtk::simple::SumProjection(const Image &image1, unsigned int projectionDimension=0u)

Sum projection.


This function directly calls the execute method of SumProjectionImageFilter in order to support a procedural API


See:
 rtk::simple::SumProjectionImageFilter for the object oriented interface


*/
public ";

%javamethodmodifiers  rtk::simple::Tan "/**
Image rtk::simple::Tan(const Image &image1)

Computes the tangent of each input pixel.


This function directly calls the execute method of TanImageFilter in order to support a procedural API


See:
 rtk::simple::TanImageFilter for the object oriented interface


*/
public ";

%javamethodmodifiers  rtk::simple::TernaryAdd "/**
Image rtk::simple::TernaryAdd(const Image &image1, const Image &image2, const Image &image3)

Pixel-wise addition of three images.


This function directly calls the execute method of TernaryAddImageFilter in order to support a procedural API


See:
 rtk::simple::TernaryAddImageFilter for the object oriented interface


*/
public ";

%javamethodmodifiers  rtk::simple::TernaryMagnitude "/**
Image rtk::simple::TernaryMagnitude(const Image &image1, const Image &image2, const Image &image3)

Pixel-wise addition of three images.


This function directly calls the execute method of TernaryMagnitudeImageFilter in order to support a procedural API


See:
 rtk::simple::TernaryMagnitudeImageFilter for the object oriented interface


*/
public ";

%javamethodmodifiers  rtk::simple::TernaryMagnitudeSquared "/**
Image rtk::simple::TernaryMagnitudeSquared(const Image &image1, const Image &image2, const Image &image3)

Pixel-wise addition of three images.


This function directly calls the execute method of TernaryMagnitudeSquaredImageFilter in order to support a procedural API


See:
 rtk::simple::TernaryMagnitudeSquaredImageFilter for the object oriented interface


*/
public ";

%javamethodmodifiers  rtk::simple::Threshold "/**
Image rtk::simple::Threshold(const Image &image1, double lower=0.0, double upper=1.0, double
outsideValue=0.0)

Set image values to a user-specified value if they are below, above,
or between simple threshold values.


This function directly calls the execute method of ThresholdImageFilter in order to support a procedural API


See:
 rtk::simple::ThresholdImageFilter for the object oriented interface


*/
public ";

%javamethodmodifiers  rtk::simple::ThresholdMaximumConnectedComponents "/**
Image rtk::simple::ThresholdMaximumConnectedComponents(const Image &image1, uint32_t minimumObjectSizeInPixels=0u, double
upperBoundary=std::numeric_limits< double >::max(), uint8_t
insideValue=1u, uint8_t outsideValue=0u)

Finds the threshold value of an image based on maximizing the number
of objects in the image that are larger than a given minimal size.


This function directly calls the execute method of ThresholdMaximumConnectedComponentsImageFilter in order to support a procedural API


See:
 rtk::simple::ThresholdMaximumConnectedComponentsImageFilter for the object oriented interface


*/
public ";

%javamethodmodifiers  rtk::simple::ThresholdSegmentationLevelSet "/**
Image rtk::simple::ThresholdSegmentationLevelSet(const Image &image1, const Image &image2, double lowerThreshold=0.0,
double upperThreshold=255.0, double maximumRMSError=0.02, double
propagationScaling=1.0, double curvatureScaling=1.0, uint32_t
numberOfIterations=1000u, bool reverseExpansionDirection=false)

Segments structures in images based on intensity values.


This function directly calls the execute method of ThresholdSegmentationLevelSetImageFilter in order to support a procedural API


See:
 rtk::simple::ThresholdSegmentationLevelSetImageFilter for the object oriented interface


*/
public ";

%javamethodmodifiers  rtk::simple::TikhonovDeconvolution "/**
Image rtk::simple::TikhonovDeconvolution(const Image &image1, const Image &image2, double
regularizationConstant=0.0, bool normalize=false,
TikhonovDeconvolutionImageFilter::BoundaryConditionType boundaryCondit
ion=rtk::simple::TikhonovDeconvolutionImageFilter::ZERO_FLUX_NEUMANN_P
AD, TikhonovDeconvolutionImageFilter::OutputRegionModeType
outputRegionMode=rtk::simple::TikhonovDeconvolutionImageFilter::SAME)

An inverse deconvolution filter regularized in the Tikhonov sense.


This function directly calls the execute method of TikhonovDeconvolutionImageFilter in order to support a procedural API


See:
 rtk::simple::TikhonovDeconvolutionImageFilter for the object oriented interface


*/
public ";

%javamethodmodifiers  rtk::simple::TransformToDisplacementField "/**
Image rtk::simple::TransformToDisplacementField(const Transform &transform, PixelIDValueEnum
outputPixelType=rtk::simple::srtkVectorFloat64, const std::vector<
unsigned int > &size=std::vector< unsigned int >(3, 64), const
std::vector< double > &outputOrigin=std::vector< double >(3, 0.0),
const std::vector< double > &outputSpacing=std::vector< double >(3,
1.0), std::vector< double > outputDirection=std::vector< double >())

Generate a displacement field from a coordinate transform.


This function directly calls the execute method of TransformToDisplacementFieldFilter in order to support a procedural API


See:
 rtk::simple::TransformToDisplacementFieldFilter for the object oriented interface


*/
public ";

%javamethodmodifiers  rtk::simple::TriangleThreshold "/**
Image rtk::simple::TriangleThreshold(const Image &image, const Image &maskImage, uint8_t insideValue=1u,
uint8_t outsideValue=0u, uint32_t numberOfHistogramBins=256u, bool
maskOutput=true, uint8_t maskValue=255u)

Threshold an image using the Triangle Threshold.


This function directly calls the execute method of TriangleThresholdImageFilter in order to support a procedural API


See:
 rtk::simple::TriangleThresholdImageFilter for the object oriented interface


*/
public ";

%javamethodmodifiers  rtk::simple::TriangleThreshold "/**
Image rtk::simple::TriangleThreshold(const Image &image, uint8_t insideValue=1u, uint8_t outsideValue=0u,
uint32_t numberOfHistogramBins=256u, bool maskOutput=true, uint8_t
maskValue=255u)
*/
public ";

%javamethodmodifiers  rtk::simple::UnaryMinus "/**
Image rtk::simple::UnaryMinus(const Image &image1)

Computes the negative of each pixel.


This function directly calls the execute method of UnaryMinusImageFilter in order to support a procedural API


See:
 rtk::simple::UnaryMinusImageFilter for the object oriented interface


*/
public ";

%javamethodmodifiers  rtk::simple::Unused "/**
void SITKCommon_HIDDEN rtk::simple::Unused(const T &)

A function which does nothing.


This function is to be used to mark parameters as unused to supress
compiler warning.

*/
public ";

%javamethodmodifiers  rtk::simple::ValuedRegionalMaxima "/**
Image rtk::simple::ValuedRegionalMaxima(const Image &image1, bool fullyConnected=false)

Transforms the image so that any pixel that is not a regional maxima
is set to the minimum value for the pixel type. Pixels that are
regional maxima retain their value.


This function directly calls the execute method of ValuedRegionalMaximaImageFilter in order to support a procedural API


See:
 rtk::simple::ValuedRegionalMaximaImageFilter for the object oriented interface


*/
public ";

%javamethodmodifiers  rtk::simple::ValuedRegionalMinima "/**
Image rtk::simple::ValuedRegionalMinima(const Image &image1, bool fullyConnected=false)

Transforms the image so that any pixel that is not a regional minima
is set to the maximum value for the pixel type. Pixels that are
regional minima retain their value.


This function directly calls the execute method of ValuedRegionalMinimaImageFilter in order to support a procedural API


See:
 rtk::simple::ValuedRegionalMinimaImageFilter for the object oriented interface


*/
public ";

%javamethodmodifiers  rtk::simple::VectorConfidenceConnected "/**
Image rtk::simple::VectorConfidenceConnected(const Image &image1, const std::vector< std::vector< unsigned int > >
&seedList, unsigned int numberOfIterations=4u, double multiplier=4.5,
unsigned int initialNeighborhoodRadius=1u, uint8_t replaceValue=1u)

rtk::simple::VectorConfidenceConnectedImageFilter Functional Interface

This function directly calls the execute method of VectorConfidenceConnectedImageFilter in order to support a fully functional API

*/
public ";

%javamethodmodifiers  rtk::simple::VectorConnectedComponent "/**
Image rtk::simple::VectorConnectedComponent(const Image &image1, double distanceThreshold=1.0, bool
fullyConnected=false)

A connected components filter that labels the objects in a vector
image. Two vectors are pointing similar directions if one minus their
dot product is less than a threshold. Vectors that are 180 degrees out
of phase are similar. Assumes that vectors are normalized.


This function directly calls the execute method of VectorConnectedComponentImageFilter in order to support a procedural API


See:
 rtk::simple::VectorConnectedComponentImageFilter for the object oriented interface


*/
public ";

%javamethodmodifiers  rtk::simple::VectorIndexSelectionCast "/**
Image rtk::simple::VectorIndexSelectionCast(const Image &image1, unsigned int index=0u, PixelIDValueEnum
outputPixelType=rtk::simple::srtkUnknown)

Extracts the selected index of the vector that is the input pixel
type.


This function directly calls the execute method of VectorIndexSelectionCastImageFilter in order to support a procedural API


See:
 rtk::simple::VectorIndexSelectionCastImageFilter for the object oriented interface


*/
public ";

%javamethodmodifiers  rtk::simple::VectorMagnitude "/**
Image rtk::simple::VectorMagnitude(const Image &image1)

Take an image of vectors as input and produce an image with the
magnitude of those vectors.


This function directly calls the execute method of VectorMagnitudeImageFilter in order to support a procedural API


See:
 rtk::simple::VectorMagnitudeImageFilter for the object oriented interface


*/
public ";

%javamethodmodifiers  rtk::simple::VotingBinary "/**
Image rtk::simple::VotingBinary(const Image &image1, const std::vector< unsigned int >
&radius=std::vector< unsigned int >(3, 1), unsigned int
birthThreshold=1u, unsigned int survivalThreshold=1u, double
foregroundValue=1.0, double backgroundValue=0.0)

Applies a voting operation in a neighborhood of each pixel.


This function directly calls the execute method of VotingBinaryImageFilter in order to support a procedural API


See:
 rtk::simple::VotingBinaryImageFilter for the object oriented interface


*/
public ";

%javamethodmodifiers  rtk::simple::VotingBinaryHoleFilling "/**
Image rtk::simple::VotingBinaryHoleFilling(const Image &image1, const std::vector< unsigned int >
&radius=std::vector< unsigned int >(3, 1), unsigned int
majorityThreshold=1u, double foregroundValue=1.0, double
backgroundValue=0.0)

Fills in holes and cavities by applying a voting operation on each
pixel.


This function directly calls the execute method of VotingBinaryHoleFillingImageFilter in order to support a procedural API


See:
 rtk::simple::VotingBinaryHoleFillingImageFilter for the object oriented interface


*/
public ";

%javamethodmodifiers  rtk::simple::VotingBinaryIterativeHoleFilling "/**
Image rtk::simple::VotingBinaryIterativeHoleFilling(const Image &image1, const std::vector< unsigned int >
&radius=std::vector< unsigned int >(3, 1), unsigned int
maximumNumberOfIterations=10u, unsigned int majorityThreshold=1u,
double foregroundValue=1.0, double backgroundValue=0.0)

Fills in holes and cavities by iteratively applying a voting
operation.


This function directly calls the execute method of VotingBinaryIterativeHoleFillingImageFilter in order to support a procedural API


See:
 rtk::simple::VotingBinaryIterativeHoleFillingImageFilter for the object oriented interface


*/
public ";

%javamethodmodifiers  rtk::simple::Warp "/**
Image rtk::simple::Warp(const Image &image1, const Image &image2, InterpolatorEnum
interpolator=rtk::simple::srtkLinear, const std::vector< uint32_t >
&outputSize=std::vector< uint32_t >(3, 0), const std::vector< double >
&outputOrigin=std::vector< double >(3, 0.0), const std::vector< double
> &outputSpacing=std::vector< double >(3, 1.0), std::vector< double >
outputDirection=std::vector< double >(), double edgePaddingValue=0.0)

Warps an image using an input displacement field.


This function directly calls the execute method of WarpImageFilter in order to support a procedural API


See:
 rtk::simple::WarpImageFilter for the object oriented interface


*/
public ";

%javamethodmodifiers  rtk::simple::WhiteTopHat "/**
Image rtk::simple::WhiteTopHat(const Image &, uint32_t radius=1, KernelEnum kernel=srtkBall, bool
safeBorder=true)

rtk::simple::WhiteTopHatImageFilter Functional Interface

This function directly calls the execute method of WhiteTopHatImageFilter in order to support a fully functional API

*/
public ";

%javamethodmodifiers  rtk::simple::WhiteTopHat "/**
Image rtk::simple::WhiteTopHat(const Image &, const std::vector< uint32_t > vectorRadius, KernelEnum
kernel=srtkBall, bool safeBorder=true)

rtk::simple::WhiteTopHatImageFilter Functional Interface

This function directly calls the execute method of WhiteTopHatImageFilter in order to support a fully functional API

*/
public ";

%javamethodmodifiers  rtk::simple::WienerDeconvolution "/**
Image rtk::simple::WienerDeconvolution(const Image &image1, const Image &image2, double noiseVariance=0.0,
bool normalize=false,
WienerDeconvolutionImageFilter::BoundaryConditionType boundaryConditio
n=rtk::simple::WienerDeconvolutionImageFilter::ZERO_FLUX_NEUMANN_PAD,
WienerDeconvolutionImageFilter::OutputRegionModeType
outputRegionMode=rtk::simple::WienerDeconvolutionImageFilter::SAME)

The Wiener deconvolution image filter is designed to restore an image
convolved with a blurring kernel while keeping noise enhancement to a
minimum.


This function directly calls the execute method of WienerDeconvolutionImageFilter in order to support a procedural API


See:
 rtk::simple::WienerDeconvolutionImageFilter for the object oriented interface


*/
public ";

%javamethodmodifiers  rtk::simple::WrapPad "/**
Image rtk::simple::WrapPad(const Image &image1, const std::vector< unsigned int >
&padLowerBound=std::vector< unsigned int >(3, 0), const std::vector<
unsigned int > &padUpperBound=std::vector< unsigned int >(3, 0))

Increase the image size by padding with replicants of the input image
value.


This function directly calls the execute method of WrapPadImageFilter in order to support a procedural API


See:
 rtk::simple::WrapPadImageFilter for the object oriented interface


*/
public ";

%javamethodmodifiers  rtk::simple::WriteImage "/**
SITKIO_EXPORT void rtk::simple::WriteImage(const Image &image, const std::vector< std::string > &fileNames, bool
inUseCompression=false)
*/
public ";

%javamethodmodifiers  rtk::simple::WriteImage "/**
SITKIO_EXPORT void rtk::simple::WriteImage(const Image &image, const std::string &fileName, bool
useCompression=false)
*/
public ";

%javamethodmodifiers  rtk::simple::WriteTransform "/**
SITKCommon_EXPORT void rtk::simple::WriteTransform(const Transform &transform, const std::string &filename)
*/
public ";

%javamethodmodifiers  rtk::simple::Xor "/**
Image rtk::simple::Xor(const Image &image1, const Image &image2)

Computes the XOR bitwise operator pixel-wise between two images.


This function directly calls the execute method of XorImageFilter in order to support a procedural API


See:
 rtk::simple::XorImageFilter for the object oriented interface


*/
public ";

%javamethodmodifiers  rtk::simple::Xor "/**
Image rtk::simple::Xor(const Image &image1, int constant)
*/
public ";

%javamethodmodifiers  rtk::simple::Xor "/**
Image rtk::simple::Xor(int constant, const Image &image2)
*/
public ";

%javamethodmodifiers  rtk::simple::YenThreshold "/**
Image rtk::simple::YenThreshold(const Image &image, const Image &maskImage, uint8_t insideValue=1u,
uint8_t outsideValue=0u, uint32_t numberOfHistogramBins=256u, bool
maskOutput=true, uint8_t maskValue=255u)

Threshold an image using the Yen Threshold.


This function directly calls the execute method of YenThresholdImageFilter in order to support a procedural API


See:
 rtk::simple::YenThresholdImageFilter for the object oriented interface


*/
public ";

%javamethodmodifiers  rtk::simple::YenThreshold "/**
Image rtk::simple::YenThreshold(const Image &image, uint8_t insideValue=1u, uint8_t outsideValue=0u,
uint32_t numberOfHistogramBins=256u, bool maskOutput=true, uint8_t
maskValue=255u)
*/
public ";

%javamethodmodifiers  rtk::simple::ZeroCrossing "/**
Image rtk::simple::ZeroCrossing(const Image &image1, uint8_t foregroundValue=1u, uint8_t
backgroundValue=0u)

This filter finds the closest pixel to the zero-crossings (sign
changes) in a signed itk::Image .


This function directly calls the execute method of ZeroCrossingImageFilter in order to support a procedural API


See:
 rtk::simple::ZeroCrossingImageFilter for the object oriented interface


*/
public ";

%javamethodmodifiers  rtk::simple::ZeroCrossingBasedEdgeDetection "/**
Image rtk::simple::ZeroCrossingBasedEdgeDetection(const Image &image1, double variance=1, uint8_t foregroundValue=1u,
uint8_t backgroundValue=0u, double maximumError=0.1)

This filter implements a zero-crossing based edge detecor.


This function directly calls the execute method of ZeroCrossingBasedEdgeDetectionImageFilter in order to support a procedural API


See:
 rtk::simple::ZeroCrossingBasedEdgeDetectionImageFilter for the object oriented interface


*/
public ";

%javamethodmodifiers  rtk::simple::ZeroFluxNeumannPad "/**
Image rtk::simple::ZeroFluxNeumannPad(const Image &image1, const std::vector< unsigned int >
&padLowerBound=std::vector< unsigned int >(3, 0), const std::vector<
unsigned int > &padUpperBound=std::vector< unsigned int >(3, 0))

Increase the image size by padding according to the zero-flux Neumann
boundary condition.


This function directly calls the execute method of ZeroFluxNeumannPadImageFilter in order to support a procedural API


See:
 rtk::simple::ZeroFluxNeumannPadImageFilter for the object oriented interface


*/
public ";


%typemap(javaimports) rtk::simple::BasicPixelID "/**

This type is used as an identity for pixel of itk::Image type

This is an empty type which is used for compile-time meta-programming.
It does not contain any information, an image type can be converted to
one of the PixelID types, and an PixelID can be converted to a value.
However, a run-time value can not be converted to this compile time
type.


See:
 PixelIDToImageType

 ImageTypeToPixelID

 ImageTypeToPixelIDValue

 PixelIDToPixelIDValue


C++ includes: srtkPixelIDTypes.h
*/"


%typemap(javaimports) rtk::simple::Conditional "/**
C++ includes: srtkConditional.h
*/"


%typemap(javaimports) rtk::simple::ConditionalValue "/**
C++ includes: srtkConditional.h
*/"


%typemap(javaimports) rtk::simple::DisableIf "/**
C++ includes: srtkEnableIf.h
*/"


%typemap(javaimports) rtk::simple::EnableIf "/**
C++ includes: srtkEnableIf.h
*/"


%typemap(javaimports) rtk::simple::ImageTypeToPixelID "/**

A meta-programming tool to query the PixelID property of an \"itk
image type\" at compile type

This structure contains one property,
ImageTypeToPixelID<T>::PixelIDType is the \"itk image type\" of the
pixel ID.


See:
 BasicPixelID

 VectorPixelID

 LabelPixelID

 ImageTypeToPixelIDValue


C++ includes: srtkPixelIDTypes.h
*/"


%typemap(javaimports) rtk::simple::ImageTypeToPixelIDValue "/**
C++ includes: srtkPixelIDValues.h
*/"


%typemap(javaimports) rtk::simple::ImageTypeToPixelID< itk::Image< TPixelType, VImageDimension > > "/**
C++ includes: srtkPixelIDTypes.h
*/"


%typemap(javaimports) rtk::simple::ImageTypeToPixelID< itk::LabelMap< itk::LabelObject< TLabelType, VImageDimension > > > "/**
C++ includes: srtkPixelIDTypes.h
*/"


%typemap(javaimports) rtk::simple::ImageTypeToPixelID< itk::VectorImage< TPixelType, VImageDimension > > "/**
C++ includes: srtkPixelIDTypes.h
*/"


%typemap(javaimports) rtk::simple::IsBasic "/**
C++ includes: srtkPixelIDTokens.h
*/"


%typemap(javaimports) rtk::simple::IsBasic< BasicPixelID< TPixelType > > "/**
C++ includes: srtkPixelIDTokens.h
*/"


%typemap(javaimports) rtk::simple::IsBasic< itk::Image< TPixelType, VImageDimension > > "/**
C++ includes: srtkPixelIDTokens.h
*/"


%typemap(javaimports) rtk::simple::IsInstantiated "/**
C++ includes: srtkPixelIDTokens.h
*/"


%typemap(javaimports) rtk::simple::IsInstantiated< itk::Image< TPixelType, VImageDimension >, 0 > "/**
C++ includes: srtkPixelIDTokens.h
*/"


%typemap(javaimports) rtk::simple::IsInstantiated< itk::LabelMap< itk::LabelObject< TLabelType, VImageDimension > >, 0 > "/**
C++ includes: srtkPixelIDTokens.h
*/"


%typemap(javaimports) rtk::simple::IsInstantiated< itk::VectorImage< TPixelType, VImageDimension >, 0 > "/**
C++ includes: srtkPixelIDTokens.h
*/"


%typemap(javaimports) rtk::simple::IsLabel "/**
C++ includes: srtkPixelIDTokens.h
*/"


%typemap(javaimports) rtk::simple::IsLabel< LabelPixelID< TPixelType > > "/**
C++ includes: srtkPixelIDTokens.h
*/"


%typemap(javaimports) rtk::simple::IsLabel< itk::LabelMap< itk::LabelObject< TLabelType, VImageDimension > > > "/**
C++ includes: srtkPixelIDTokens.h
*/"


%typemap(javaimports) rtk::simple::IsVector "/**
C++ includes: srtkPixelIDTokens.h
*/"


%typemap(javaimports) rtk::simple::IsVector< VectorPixelID< TPixelType > > "/**
C++ includes: srtkPixelIDTokens.h
*/"


%typemap(javaimports) rtk::simple::IsVector< itk::VectorImage< TPixelType, VImageDimension > > "/**
C++ includes: srtkPixelIDTokens.h
*/"


%typemap(javaimports) rtk::simple::LabelPixelID "/**

This type is used as an identity for pixel of itk::LabelMap type

This is an empty type which is used for compile-time meta-programming.
It does not contain any information, an image type can be converted to
one of the PixelID types, and an PixelID can be converted to a value.
However, a run-time value can not be converted to this compile time
type.


See:
 PixelIDToImageType

 ImageTypeToPixelID

 ImageTypeToPixelIDValue

 PixelIDToPixelIDValue


C++ includes: srtkPixelIDTypes.h
*/"


%typemap(javaimports) rtk::simple::PixelIDToImageType "/**

A meta-programming tool to query the \"itk image type\" if a PixelID
at compile type

This structure contains one property, PixelIDToImageType<T>::ImageType
is the \"itk image type\" of the pixel ID.


See:
 BasicPixelID

 VectorPixelID

 LabelPixelID

 ImageTypeToPixelIDValue


C++ includes: srtkPixelIDTypes.h
*/"


%typemap(javaimports) rtk::simple::PixelIDToImageType< BasicPixelID< TPixelType >, VImageDimension > "/**
C++ includes: srtkPixelIDTypes.h
*/"


%typemap(javaimports) rtk::simple::PixelIDToImageType< LabelPixelID< TLabelType >, VImageDimension > "/**
C++ includes: srtkPixelIDTypes.h
*/"


%typemap(javaimports) rtk::simple::PixelIDToImageType< VectorPixelID< TVectorPixelType >, VImageDimension > "/**
C++ includes: srtkPixelIDTypes.h
*/"


%typemap(javaimports) rtk::simple::PixelIDToPixelIDValue "/**
C++ includes: srtkPixelIDValues.h
*/"


%typemap(javaimports) rtk::simple::StaticAssertFailure "/**
C++ includes: srtkMacro.h
*/"


%typemap(javaimports) rtk::simple::StaticAssertFailure< true > "/**
C++ includes: srtkMacro.h
*/"


%typemap(javaimports) rtk::simple::VectorPixelID "/**

This type is used as an identity for pixel of itk::VectorImage type

This is an empty type which is used for compile-time meta-programming.
It does not contain any information, an image type can be converted to
one of the PixelID types, and an PixelID can be converted to a value.
However, a run-time value can not be converted to this compile time
type.


See:
 PixelIDToImageType

 ImageTypeToPixelID

 ImageTypeToPixelIDValue

 PixelIDToPixelIDValue


C++ includes: srtkPixelIDTypes.h
*/"


%typemap(javaimports) rtk::simple::DualExecuteInternalAddressor "/**
C++ includes: srtkDetail.h
*/"


%typemap(javaimports) rtk::simple::DualExecuteInternalVectorAddressor "/**

An addressor of ExecuteInternalCast to be utilized with registering
member functions with the factory.

C++ includes: srtkDetail.h
*/"


%typemap(javaimports) rtk::simple::ExecuteInternalLabelImageAddressor "/**

An addressor of ExecuteInternal to be utilized with registering member
functions with the factory.

C++ includes: srtkDetail.h
*/"


%typemap(javaimports) rtk::simple::ExecuteInternalVectorImageAddressor "/**

An addressor of ExecuteInternalCast to be utilized with registering
member functions with the factory.

C++ includes: srtkDetail.h
*/"


%typemap(javaimports) rtk::simple::MemberFunctionAddressor "/**
C++ includes: srtkDetail.h
*/"
