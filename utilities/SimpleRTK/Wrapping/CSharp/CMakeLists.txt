cmake_minimum_required ( VERSION 2.8.1 FATAL_ERROR )

project( SimpleRTK_CSharp )

include(../../CMake/srtkProjectLanguageCommon.cmake NO_POLICY_SCOPE)


# Find C#
find_package( CSharp REQUIRED )
include( ${CSHARP_USE_FILE} )

set_source_files_properties ( SimpleRTK.i PROPERTIES CPLUSPLUS ON )

# CSharp version requirements: http://msdn.microsoft.com/en-us/library/system.reflection.assemblyversionattribute.aspx
# major.minor[.build[.revision]] where all components are 16-bit unsigned integers
set(_build 0)
if(DEFINED SimpleRTK_VERSION_POST AND NOT "${SimpleRTK_VERSION_POST}" STREQUAL "")
  math(EXPR _build "${SimpleRTK_VERSION_POST}")
elseif(DEFINED SimpleRTK_VERSION_DEV AND NOT "${SimpleRTK_VERSION_DEV}" STREQUAL "")
  math(EXPR _build "32768+${SimpleRTK_VERSION_DEV}")
endif()
if(_build GREATER 65535)
  message(WARNING "CSharp build component overflowed, setting to 65535 instead of ${_build}.")
  set(_build 65535)
endif()

set(_revision 0)
if(DEFINED SimpleRTK_VERSION_PATCH)
  math(EXPR _revision "${SimpleRTK_VERSION_PATCH}<<8")
  if(DEFINED SimpleRTK_VERSION_TWEAK)
    math(EXPR _revision "${_revision}+${SimpleRTK_VERSION_TWEAK}")
  endif()
endif()
if(_revision GREATER 65535)
  message(WARNING "CSharp revision component overflowed, setting to 65535 instead of ${_revision}.")
  set(_revision 65535)
endif()

  set(SimpleRTK_VERSION_CSHARP_AssemblyVersion "${SimpleRTK_VERSION_MAJOR}.${SimpleRTK_VERSION_MINOR}.${_build}.${_revision}")

  # Make sure the nested directory structure exists
  set(CSHARP_SOURCE_DIRECTORY ${CMAKE_CURRENT_BINARY_DIR}/CSharpSources CACHE INTERNAL "")
  set(CSHARP_BINARY_DIRECTORY ${CMAKE_CURRENT_BINARY_DIR}/CSharpBinaries CACHE INTERNAL "")
  file(MAKE_DIRECTORY ${CSHARP_SOURCE_DIRECTORY})
  file(MAKE_DIRECTORY ${CSHARP_BINARY_DIRECTORY})

  # Create swig target
  set(CMAKE_SWIG_OUTDIR ${CSHARP_SOURCE_DIRECTORY})
  if ( UNIX )
    set(CMAKE_SWIG_FLAGS -dllimport \"libSimpleRTKCSharpNative\")
  else (WIN32 )
    set(CMAKE_SWIG_FLAGS -dllimport \"SimpleRTKCSharpNative\")
  endif ( UNIX )
  set(CMAKE_SWIG_FLAGS -I${CMAKE_CURRENT_SOURCE_DIR} -namespace \"itk.simple\" ${CMAKE_SWIG_GLOBAL_FLAGS} ${CMAKE_SWIG_FLAGS})
  set(SWIG_MODULE_SimpleRTKCSharpNative_EXTRA_DEPS ${SWIG_EXTRA_DEPS}
    ${CMAKE_CURRENT_SOURCE_DIR}/CSharp.i
    ${CMAKE_CURRENT_SOURCE_DIR}/CSharpTypemapHelper.i )
  swig_add_module(SimpleRTKCSharpNative csharp SimpleRTK.i)
  target_link_libraries(${SWIG_MODULE_SimpleRTKCSharpNative_TARGET_NAME} ${SimpleRTK_LIBRARIES})
  set_target_properties(${SWIG_MODULE_SimpleRTKCSharpNative_TARGET_NAME} PROPERTIES LIBRARY_OUTPUT_DIRECTORY ${CSHARP_BINARY_DIRECTORY})
  if ( UNIX )
    set_target_properties(${SWIG_MODULE_SimpleRTKCSharpNative_TARGET_NAME} PROPERTIES PREFIX "lib")
    set_target_properties(${SWIG_MODULE_SimpleRTKCSharpNative_TARGET_NAME} PROPERTIES SUFFIX ".so")
  else ( WIN32 )
    set_target_properties(${SWIG_MODULE_SimpleRTKCSharpNative_TARGET_NAME} PROPERTIES PREFIX "")
    set_target_properties(${SWIG_MODULE_SimpleRTKCSharpNative_TARGET_NAME} PROPERTIES SUFFIX ".dll")
    foreach ( CMAKE_CONFIGURATION_TYPE ${CMAKE_CONFIGURATION_TYPES} )
      string(TOUPPER ${CMAKE_CONFIGURATION_TYPE} CMAKE_CONFIGURATION_TYPE)
      set_target_properties(${SWIG_MODULE_SimpleRTKCSharpNative_TARGET_NAME}
        PROPERTIES LIBRARY_OUTPUT_DIRECTORY_${CMAKE_CONFIGURATION_TYPE} "${CSHARP_BINARY_DIRECTORY}")
      set_target_properties(${SWIG_MODULE_SimpleRTKCSharpNative_TARGET_NAME}
        PROPERTIES RUNTIME_OUTPUT_DIRECTORY_${CMAKE_CONFIGURATION_TYPE} "${CSHARP_BINARY_DIRECTORY}")
    endforeach( )
  endif( UNIX )
  srtk_strip_target( ${SWIG_MODULE_SimpleRTKCSharpNative_TARGET_NAME} )

  # These CSharp files are generated by SWIG, they are not there
  # during the first build. But the charp_add_library will add them as
  # a dependency when the exists. This is needed for CMP0058
  file(GLOB _files "${CSHARP_SOURCE_DIRECTORY}/*.cs")
  add_custom_command( TARGET ${SWIG_MODULE_SimpleRTKCSharpNative_TARGET_NAME}
    POST_BUILD
    BYPRODUCTS ${_files} )

  # Configure AssemblyInfo.cs
  configure_file(
    ${CMAKE_CURRENT_SOURCE_DIR}/AssemblyInfo.cs.in
    ${CSHARP_SOURCE_DIRECTORY}/AssemblyInfo.cs
    @ONLY
  )

  # Add managed wrapper
  csharp_add_library(
    SimpleRTKCSharpManaged
    ${CSHARP_SOURCE_DIRECTORY}/*.cs
  )
  add_dependencies(SimpleRTKCSharpManaged ${SWIG_MODULE_SimpleRTKCSharpNative_TARGET_NAME})


# Packaging for distribution
add_subdirectory(dist)
